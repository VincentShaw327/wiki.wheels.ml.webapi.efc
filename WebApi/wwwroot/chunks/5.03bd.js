(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{1102:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(23));t.toArray=i,t.getActiveIndex=function(e,t){for(var n=i(e),r=0;r<n.length;r++)if(n[r].key===t)return r;return-1},t.getActiveKey=function(e,t){return i(e)[t].key},t.setTransform=l,t.isTransform3dSupported=function(e){return("transform"in e||"webkitTransform"in e||"MozTransform"in e)&&window.atob},t.setTransition=function(e,t){e.transition=t,e.webkitTransition=t,e.MozTransition=t},t.getTransformPropValue=function(e){return{transform:e,WebkitTransform:e,MozTransform:e}},t.isVertical=u,t.getTransformByIndex=function(e,t){return(u(t)?"translateY":"translateX")+"("+100*-e+"%) translateZ(0)"},t.getMarginStyle=function(e,t){var n=u(t)?"marginTop":"marginLeft";return(0,r.default)({},n,100*-e+"%")},t.getStyle=c,t.setPxStyle=function(e,t,n){t=n?"0px, "+t+"px, 0px":t+"px, 0px, 0px",l(e.style,"translate3d("+t+")")},t.getDataAttr=function(e){return Object.keys(e).reduce(function(t,n){return"aria-"!==n.substr(0,5)&&"data-"!==n.substr(0,5)&&"role"!==n||(t[n]=e[n]),t},{})},t.getLeft=function(e,t){return f("left","offsetWidth","right",e,t)},t.getTop=function(e,t){return f("top","offsetHeight","bottom",e,t)};var o=a(n(4));function a(e){return e&&e.__esModule?e:{default:e}}function i(e){var t=[];return o.default.Children.forEach(e,function(e){e&&t.push(e)}),t}function l(e,t){e.transform=t,e.webkitTransform=t,e.mozTransform=t}function u(e){return"left"===e||"right"===e}function c(e,t){return+window.getComputedStyle(e).getPropertyValue(t).replace("px","")}function s(e,t){return+e.getPropertyValue(t).replace("px","")}function f(e,t,n,r,o){var a=c(o,"padding-"+e);if(!r||!r.parentNode)return a;var i=r.parentNode.childNodes;return Array.prototype.some.call(i,function(o){var i=window.getComputedStyle(o);return o!==r?(a+=s(i,"margin-"+e),a+=o[t],a+=s(i,"margin-"+n),"content-box"===i.boxSizing&&(a+=s(i,"border-"+e+"-width")+s(i,"border-"+n+"-width")),!1):(a+=s(i,"margin-"+e),!0)}),a}},1122:function(e,t,n){var r=n(589),o=n(591);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},1125:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=a(n(1162)),o=a(n(1254));function a(e){return e&&e.__esModule?e:{default:e}}r.default.Group=o.default;var i=r.default;t.default=i},1126:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=f(n(4)),o=f(n(0)),a=c(n(1199)),i=c(n(16)),l=c(n(1086)),u=n(25);function c(e){return e&&e.__esModule?e:{default:e}}function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function f(e){if(e&&e.__esModule)return e;var t=s();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}return n.default=e,t&&t.set(e,n),n}function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function b(e,t){return(b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var g=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},O=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=function(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?m(e):t}(this,v(t).apply(this,arguments))).saveCheckbox=function(t){e.rcCheckbox=t},e.onChange=function(t){e.props.onChange&&e.props.onChange(t),e.context.radioGroup&&e.context.radioGroup.onChange&&e.context.radioGroup.onChange(t)},e.renderRadio=function(t){var n,o=t.getPrefixCls,l=m(e),u=l.props,c=l.context,s=u.prefixCls,f=u.className,p=u.children,y=u.style,v=g(u,["prefixCls","className","children","style"]),b=c.radioGroup,O=o("radio",s),C=h({},v);b&&(C.name=b.name,C.onChange=e.onChange,C.checked=u.value===b.value,C.disabled=u.disabled||b.disabled);var w=(0,i.default)(f,(d(n={},"".concat(O,"-wrapper"),!0),d(n,"".concat(O,"-wrapper-checked"),C.checked),d(n,"".concat(O,"-wrapper-disabled"),C.disabled),n));return r.createElement("label",{className:w,style:y,onMouseEnter:u.onMouseEnter,onMouseLeave:u.onMouseLeave},r.createElement(a.default,h({},C,{prefixCls:O,ref:e.saveCheckbox})),void 0!==p?r.createElement("span",null,p):null)},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}(t,r.Component),function(e,t,n){t&&y(e.prototype,t),n&&y(e,n)}(t,[{key:"shouldComponentUpdate",value:function(e,t,n){return!(0,l.default)(this.props,e)||!(0,l.default)(this.state,t)||!(0,l.default)(this.context.radioGroup,n.radioGroup)}},{key:"focus",value:function(){this.rcCheckbox.focus()}},{key:"blur",value:function(){this.rcCheckbox.blur()}},{key:"render",value:function(){return r.createElement(u.ConfigConsumer,null,this.renderRadio)}}]),t}();t.default=O,O.defaultProps={type:"radio"},O.contextTypes={radioGroup:o.any}},1151:function(e,t,n){var r=n(592),o=n(160);e.exports=function(e,t,n){(void 0===n||o(e[t],n))&&(void 0!==n||t in e)||r(e,t,n)}},1152:function(e,t,n){var r=n(1225)(Object.getPrototypeOf,Object);e.exports=r},1153:function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},1154:function(e,t,n){(function(e){var r=n(117),o=n(1227),a=t&&!t.nodeType&&t,i=a&&"object"==typeof e&&e&&!e.nodeType&&e,l=i&&i.exports===a?r.Buffer:void 0,u=(l?l.isBuffer:void 0)||o;e.exports=u}).call(this,n(217)(e))},1155:function(e,t,n){var r=n(1229),o=n(1230),a=n(1231),i=a&&a.isTypedArray,l=i?o(i):r;e.exports=l},1156:function(e,t){e.exports=function(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}},1157:function(e,t,n){var r=n(1234),o=n(1236),a=n(1122);e.exports=function(e){return a(e)?r(e,!0):o(e)}},1158:function(e,t){e.exports=function(e){return e}},1162:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=d(n(4)),o=d(n(0)),a=n(114),i=f(n(16)),l=f(n(1199)),u=f(n(1086)),c=n(25),s=f(n(87));function f(e){return e&&e.__esModule?e:{default:e}}function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}function d(e){if(e&&e.__esModule)return e;var t=p();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}return n.default=e,t&&t.set(e,n),n}function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(){return(v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function g(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var C=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},w=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=function(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?g(e):t}(this,b(t).apply(this,arguments))).saveCheckbox=function(t){e.rcCheckbox=t},e.renderCheckbox=function(t){var n,o=t.getPrefixCls,a=g(e),u=a.props,c=a.context,s=u.prefixCls,f=u.className,p=u.children,d=u.indeterminate,h=u.style,m=u.onMouseEnter,b=u.onMouseLeave,O=C(u,["prefixCls","className","children","indeterminate","style","onMouseEnter","onMouseLeave"]),w=c.checkboxGroup,x=o("checkbox",s),P=v({},O);w&&(P.onChange=function(){O.onChange&&O.onChange.apply(O,arguments),w.toggleOption({label:p,value:u.value})},P.name=w.name,P.checked=-1!==w.value.indexOf(u.value),P.disabled=u.disabled||w.disabled);var S=(0,i.default)(f,(y(n={},"".concat(x,"-wrapper"),!0),y(n,"".concat(x,"-wrapper-checked"),P.checked),y(n,"".concat(x,"-wrapper-disabled"),P.disabled),n)),E=(0,i.default)(y({},"".concat(x,"-indeterminate"),d));return r.createElement("label",{className:S,style:h,onMouseEnter:m,onMouseLeave:b},r.createElement(l.default,v({},P,{prefixCls:x,className:E,ref:e.saveCheckbox})),void 0!==p&&r.createElement("span",null,p))},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(t,r.Component),function(e,t,n){t&&m(e.prototype,t),n&&m(e,n)}(t,[{key:"componentDidMount",value:function(){var e=this.props.value,t=(this.context||{}).checkboxGroup,n=void 0===t?{}:t;n.registerValue&&n.registerValue(e),(0,s.default)("checked"in this.props||(this.context||{}).checkboxGroup||!("value"in this.props),"Checkbox","`value` is not validate prop, do you mean `checked`?")}},{key:"shouldComponentUpdate",value:function(e,t,n){return!(0,u.default)(this.props,e)||!(0,u.default)(this.state,t)||!(0,u.default)(this.context.checkboxGroup,n.checkboxGroup)}},{key:"componentDidUpdate",value:function(e){var t=e.value,n=this.props.value,r=(this.context||{}).checkboxGroup,o=void 0===r?{}:r;n!==t&&o.registerValue&&o.cancelValue&&(o.cancelValue(t),o.registerValue(n))}},{key:"componentWillUnmount",value:function(){var e=this.props.value,t=(this.context||{}).checkboxGroup,n=void 0===t?{}:t;n.cancelValue&&n.cancelValue(e)}},{key:"focus",value:function(){this.rcCheckbox.focus()}},{key:"blur",value:function(){this.rcCheckbox.blur()}},{key:"render",value:function(){return r.createElement(c.ConfigConsumer,null,this.renderCheckbox)}}]),t}();w.__ANT_CHECKBOX=!0,w.defaultProps={indeterminate:!1},w.contextTypes={checkboxGroup:o.any},(0,a.polyfill)(w);var x=w;t.default=x},1163:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"Group",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"Button",{enumerable:!0,get:function(){return a.default}}),t.default=void 0;var r=i(n(1126)),o=i(n(1255)),a=i(n(1256));function i(e){return e&&e.__esModule?e:{default:e}}r.default.Button=a.default,r.default.Group=o.default;var l=r.default;t.default=l},1164:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.flatArray=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"children",n=[];return function e(r){r.forEach(function(r){if(r[t]){var o=a({},r);delete o[t],n.push(o),r[t].length>0&&e(r[t])}else n.push(r)})}(e),n},t.treeMap=function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"children";return t.map(function(t,o){var i={};return t[r]&&(i[r]=e(t[r],n,r)),a(a({},n(t,o)),i)})},t.flatFilter=function e(t,n){return t.reduce(function(t,r){if(n(r)&&t.push(r),r.children){var o=e(r.children,n);t.push.apply(t,function(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}(o))}return t},[])},t.normalizeColumns=function e(t){var n=[];r.Children.forEach(t,function(t){if(r.isValidElement(t)){var o=a({},t.props);t.key&&(o.key=t.key),t.type&&t.type.__ANT_TABLE_COLUMN_GROUP&&(o.children=e(o.children)),n.push(o)}});return n},t.generateValueMaps=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(t||[]).forEach(function(t){var r=t.value,o=t.children;n[r.toString()]=r,e(o,n)});return n};var r=function(e){if(e&&e.__esModule)return e;var t=o();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var i=r?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(n,a,i):n[a]=e[a]}}n.default=e,t&&t.set(e,n);return n}(n(4));function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}},1166:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=d(n(4)),o=d(n(0)),a=d(n(1623)),i=f(n(16)),l=f(n(72)),u=n(25),c=f(n(87)),s=f(n(44));function f(e){return e&&e.__esModule?e:{default:e}}function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}function d(e){if(e&&e.__esModule)return e;var t=p();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}return n.default=e,t&&t.set(e,n),n}function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var C=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},w=(0,n(89).tuple)("default","large","small"),x={prefixCls:o.string,className:o.string,size:o.oneOf(w),notFoundContent:o.any,showSearch:o.bool,optionLabelProp:o.string,transitionName:o.string,choiceTransitionName:o.string,id:o.string},P=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=b(this,g(t).call(this,e))).saveSelect=function(e){n.rcSelect=e},n.renderSelect=function(e){var t,o=e.getPopupContainer,u=e.getPrefixCls,c=e.renderEmpty,f=n.props,p=f.prefixCls,d=f.className,h=void 0===d?"":d,m=f.size,b=f.mode,g=f.getPopupContainer,O=f.removeIcon,w=f.clearIcon,x=f.menuItemSelectedIcon,P=f.showArrow,S=f.inputValue,E=f.searchValue,k=C(f,["prefixCls","className","size","mode","getPopupContainer","removeIcon","clearIcon","menuItemSelectedIcon","showArrow","inputValue","searchValue"]),_=(0,l.default)(k,["inputIcon"]),j=u("select",p),N=(0,i.default)((v(t={},"".concat(j,"-lg"),"large"===m),v(t,"".concat(j,"-sm"),"small"===m),v(t,"".concat(j,"-show-arrow"),P),t),h),R=n.props.optionLabelProp;n.isCombobox()&&(R=R||"value");var T={multiple:"multiple"===b,tags:"tags"===b,combobox:n.isCombobox()},I=O&&(r.isValidElement(O)?r.cloneElement(O,{className:(0,i.default)(O.props.className,"".concat(j,"-remove-icon"))}):O)||r.createElement(s.default,{type:"close",className:"".concat(j,"-remove-icon")}),M=w&&(r.isValidElement(w)?r.cloneElement(w,{className:(0,i.default)(w.props.className,"".concat(j,"-clear-icon"))}):w)||r.createElement(s.default,{type:"close-circle",theme:"filled",className:"".concat(j,"-clear-icon")}),D=x&&(r.isValidElement(x)?r.cloneElement(x,{className:(0,i.default)(x.props.className,"".concat(j,"-selected-icon"))}):x)||r.createElement(s.default,{type:"check",className:"".concat(j,"-selected-icon")});return r.createElement(a.default,y({inputIcon:n.renderSuffixIcon(j),removeIcon:I,clearIcon:M,menuItemSelectedIcon:D,showArrow:P},_,T,{inputValue:E||S,prefixCls:j,className:N,optionLabelProp:R||"children",notFoundContent:n.getNotFoundContent(c),getPopupContainer:g||o,ref:n.saveSelect}))},(0,c.default)("combobox"!==e.mode,"Select","The combobox mode is deprecated, it will be removed in next major version, please use AutoComplete instead"),(0,c.default)(!("inputValue"in e),"Select","`inputValue` is deprecated. Please use `searchValue` instead."),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(t,r.Component),function(e,t,n){t&&m(e.prototype,t),n&&m(e,n)}(t,[{key:"getNotFoundContent",value:function(e){var t=this.props.notFoundContent;return void 0!==t?t:this.isCombobox()?null:e("Select")}},{key:"focus",value:function(){this.rcSelect.focus()}},{key:"blur",value:function(){this.rcSelect.blur()}},{key:"isCombobox",value:function(){var e=this.props.mode;return"combobox"===e||e===t.SECRET_COMBOBOX_MODE_DO_NOT_USE}},{key:"renderSuffixIcon",value:function(e){var t=this.props,n=t.loading,o=t.suffixIcon;return o?r.isValidElement(o)?r.cloneElement(o,{className:(0,i.default)(o.props.className,"".concat(e,"-arrow-icon"))}):o:n?r.createElement(s.default,{type:"loading"}):r.createElement(s.default,{type:"down",className:"".concat(e,"-arrow-icon")})}},{key:"render",value:function(){return r.createElement(u.ConfigConsumer,null,this.renderSelect)}}]),t}();t.default=P,P.Option=a.Option,P.OptGroup=a.OptGroup,P.SECRET_COMBOBOX_MODE_DO_NOT_USE="SECRET_COMBOBOX_MODE_DO_NOT_USE",P.defaultProps={showSearch:!1,transitionName:"slide-up",choiceTransitionName:"zoom"},P.propTypes=x},1169:function(e,t,n){"use strict";n(57),n(1070)},1199:function(e,t,n){"use strict";n.r(t);var r=n(64),o=n.n(r),a=n(7),i=n.n(a),l=n(18),u=n.n(l),c=n(22),s=n.n(c),f=n(27),p=n.n(f),d=n(4),h=n.n(d),y=n(0),v=n.n(y),m=n(16),b=n.n(m),g=n(114),O=function(e){function t(n){u()(this,t);var r=s()(this,e.call(this,n));r.handleChange=function(e){var t=r.props,n=t.disabled,o=t.onChange;n||("checked"in r.props||r.setState({checked:e.target.checked}),o&&o({target:i()({},r.props,{checked:e.target.checked}),stopPropagation:function(){e.stopPropagation()},preventDefault:function(){e.preventDefault()},nativeEvent:e.nativeEvent}))},r.saveInput=function(e){r.input=e};var o="checked"in n?n.checked:n.defaultChecked;return r.state={checked:o},r}return p()(t,e),t.getDerivedStateFromProps=function(e,t){return"checked"in e?i()({},t,{checked:e.checked}):null},t.prototype.focus=function(){this.input.focus()},t.prototype.blur=function(){this.input.blur()},t.prototype.render=function(){var e,t=this.props,n=t.prefixCls,r=t.className,a=t.style,l=t.name,u=t.id,c=t.type,s=t.disabled,f=t.readOnly,p=t.tabIndex,d=t.onClick,y=t.onFocus,v=t.onBlur,m=t.autoFocus,g=t.value,O=o()(t,["prefixCls","className","style","name","id","type","disabled","readOnly","tabIndex","onClick","onFocus","onBlur","autoFocus","value"]),C=Object.keys(O).reduce(function(e,t){return"aria-"!==t.substr(0,5)&&"data-"!==t.substr(0,5)&&"role"!==t||(e[t]=O[t]),e},{}),w=this.state.checked,x=b()(n,r,((e={})[n+"-checked"]=w,e[n+"-disabled"]=s,e));return h.a.createElement("span",{className:x,style:a},h.a.createElement("input",i()({name:l,id:u,type:c,readOnly:f,disabled:s,tabIndex:p,className:n+"-input",checked:!!w,onClick:d,onFocus:y,onBlur:v,onChange:this.handleChange,autoFocus:m,ref:this.saveInput,value:g},C)),h.a.createElement("span",{className:n+"-inner"}))},t}(d.Component);O.propTypes={prefixCls:v.a.string,className:v.a.string,style:v.a.object,name:v.a.string,id:v.a.string,type:v.a.string,defaultChecked:v.a.oneOfType([v.a.number,v.a.bool]),checked:v.a.oneOfType([v.a.number,v.a.bool]),disabled:v.a.bool,onFocus:v.a.func,onBlur:v.a.func,onChange:v.a.func,onClick:v.a.func,tabIndex:v.a.oneOfType([v.a.string,v.a.number]),readOnly:v.a.bool,autoFocus:v.a.bool,value:v.a.any},O.defaultProps={prefixCls:"rc-checkbox",className:"",style:{},type:"checkbox",defaultChecked:!1,onFocus:function(){},onBlur:function(){},onChange:function(){}},Object(g.polyfill)(O);var C=O;t.default=C},1200:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1201)).default;t.default=r},1201:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=_(n(4)),o=_(n(51)),a=E(n(72)),i=_(n(1621)),l=_(n(0)),u=E(n(16)),c=E(n(1086)),s=E(n(1248)),f=E(n(1258)),p=E(n(1259)),d=E(n(1260)),h=E(n(1266)),y=E(n(1267)),v=E(n(1268)),m=n(1164),b=E(n(1269)),g=E(n(44)),O=E(n(223)),C=E(n(1272)),w=E(n(155)),x=E(n(222)),P=n(25),S=E(n(87));function E(e){return e&&e.__esModule?e:{default:e}}function k(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return k=function(){return e},e}function _(e){if(e&&e.__esModule)return e;var t=k();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}return n.default=e,t&&t.set(e,n),n}function j(e){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function N(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function R(){return(R=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(e){return(I=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function M(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function D(e,t){return(D=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var A=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};function K(){}function F(e){e.stopPropagation(),e.nativeEvent.stopImmediatePropagation&&e.nativeEvent.stopImmediatePropagation()}function V(e){return e.rowSelection||{}}function B(e,t){return e.key||e.dataIndex||t}var W={onChange:K,onShowSizeChange:K},L={},z=function(e){function t(e){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==j(t)&&"function"!=typeof t?M(e):t}(this,I(t).call(this,e))).getCheckboxPropsByItem=function(e,t){var r=V(n.props);if(!r.getCheckboxProps)return{};var o=n.getRecordKey(e,t);if(!n.CheckboxPropsCache[o]){n.CheckboxPropsCache[o]=r.getCheckboxProps(e)||{};var a=n.CheckboxPropsCache[o];(0,S.default)(!("checked"in a||"defaultChecked"in a),"Table","Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.")}return n.CheckboxPropsCache[o]},n.getRecordKey=function(e,t){var r=n.props.rowKey,o="function"==typeof r?r(e,t):e[r];return(0,S.default)(void 0!==o,"Table","Each record in dataSource of table should have a unique `key` prop, or set `rowKey` of Table to an unique primary key, see https://u.ant.design/table-row-key"),void 0===o?t:o},n.onRow=function(e,t,r){var o=n.props.onRow;return R(R({},o?o(t,r):{}),{prefixCls:e,store:n.store,rowKey:n.getRecordKey(t,r)})},n.generatePopupContainerFunc=function(e){var t=n.props.scroll;return e||(t?function(){return o.findDOMNode(M(n))}:void 0)},n.handleFilter=function(e,t){var r=n.props,o=R({},n.state.pagination),a=R(R({},n.state.filters),N({},B(e),t)),i=[];(0,m.treeMap)(n.columns,function(e){e.children||i.push(B(e))}),Object.keys(a).forEach(function(e){i.indexOf(e)<0&&delete a[e]}),r.pagination&&(o.current=1,o.onChange(o.current));var l={pagination:o,filters:{}},u=R({},a);n.getFilteredValueColumns().forEach(function(e){var t=B(e);t&&delete u[t]}),Object.keys(u).length>0&&(l.filters=u),"object"===j(r.pagination)&&"current"in r.pagination&&(l.pagination=R(R({},o),{current:n.state.pagination.current})),n.setState(l,function(){n.store.setState({selectionDirty:!1});var e=n.props.onChange;e&&e.apply(null,n.prepareParamsArguments(R(R({},n.state),{selectionDirty:!1,filters:a,pagination:o})))})},n.handleSelect=function(e,t,r){var o=r.target.checked,a=r.nativeEvent,i=n.store.getState().selectionDirty?[]:n.getDefaultSelection(),l=n.store.getState().selectedRowKeys.concat(i),u=n.getRecordKey(e,t),c=n.state.pivot,s=n.getFlatCurrentPageData(),f=t;if(n.props.expandedRowRender&&(f=s.findIndex(function(e){return n.getRecordKey(e,t)===u})),a.shiftKey&&void 0!==c&&f!==c){for(var p=[],d=Math.sign(c-f),h=Math.abs(c-f),y=0,v=function(){var e=f+y*d;y+=1;var t=s[e],r=n.getRecordKey(t,e);n.getCheckboxPropsByItem(t,e).disabled||(l.includes(r)?o||(l=l.filter(function(e){return r!==e}),p.push(r)):o&&(l.push(r),p.push(r)))};y<=h;)v();n.setState({pivot:f}),n.store.setState({selectionDirty:!0}),n.setSelectedRowKeys(l,{selectWay:"onSelectMultiple",record:e,checked:o,changeRowKeys:p,nativeEvent:a})}else o?l.push(n.getRecordKey(e,f)):l=l.filter(function(e){return u!==e}),n.setState({pivot:f}),n.store.setState({selectionDirty:!0}),n.setSelectedRowKeys(l,{selectWay:"onSelect",record:e,checked:o,changeRowKeys:void 0,nativeEvent:a})},n.handleRadioSelect=function(e,t,r){var o=r.target.checked,a=r.nativeEvent,i=[n.getRecordKey(e,t)];n.store.setState({selectionDirty:!0}),n.setSelectedRowKeys(i,{selectWay:"onSelect",record:e,checked:o,changeRowKeys:void 0,nativeEvent:a})},n.handleSelectRow=function(e,t,r){var o,a=n.getFlatCurrentPageData(),i=n.store.getState().selectionDirty?[]:n.getDefaultSelection(),l=n.store.getState().selectedRowKeys.concat(i),u=a.filter(function(e,t){return!n.getCheckboxPropsByItem(e,t).disabled}).map(function(e,t){return n.getRecordKey(e,t)}),c=[],s="onSelectAll";switch(e){case"all":u.forEach(function(e){l.indexOf(e)<0&&(l.push(e),c.push(e))}),s="onSelectAll",o=!0;break;case"removeAll":u.forEach(function(e){l.indexOf(e)>=0&&(l.splice(l.indexOf(e),1),c.push(e))}),s="onSelectAll",o=!1;break;case"invert":u.forEach(function(e){l.indexOf(e)<0?l.push(e):l.splice(l.indexOf(e),1),c.push(e),s="onSelectInvert"})}n.store.setState({selectionDirty:!0});var f=n.props.rowSelection,p=2;if(f&&f.hideDefaultSelections&&(p=0),t>=p&&"function"==typeof r)return r(u);n.setSelectedRowKeys(l,{selectWay:s,checked:o,changeRowKeys:c})},n.handlePageChange=function(e){var t=n.props,r=R({},n.state.pagination);r.current=e||(r.current||1);for(var o=arguments.length,a=new Array(o>1?o-1:0),i=1;i<o;i++)a[i-1]=arguments[i];r.onChange.apply(r,[r.current].concat(a));var l={pagination:r};t.pagination&&"object"===j(t.pagination)&&"current"in t.pagination&&(l.pagination=R(R({},r),{current:n.state.pagination.current})),n.setState(l),n.store.setState({selectionDirty:!1});var u=n.props.onChange;u&&u.apply(null,n.prepareParamsArguments(R(R({},n.state),{selectionDirty:!1,pagination:r})))},n.handleShowSizeChange=function(e,t){var r=n.state.pagination;r.onShowSizeChange(e,t);var o=R(R({},r),{pageSize:t,current:e});n.setState({pagination:o});var a=n.props.onChange;a&&a.apply(null,n.prepareParamsArguments(R(R({},n.state),{pagination:o})))},n.renderExpandIcon=function(e){return function(t){var n=t.expandable,o=t.expanded,a=t.needIndentSpaced,i=t.record,l=t.onExpand;return n?r.createElement(w.default,{componentName:"Table",defaultLocale:x.default.Table},function(t){var n;return r.createElement(C.default,{className:(0,u.default)("".concat(e,"-row-expand-icon"),(n={},N(n,"".concat(e,"-row-collapsed"),!o),N(n,"".concat(e,"-row-expanded"),o),n)),onClick:function(e){l(i,e)},"aria-label":o?t.collapse:t.expand,noStyle:!0})}):a?r.createElement("span",{className:"".concat(e,"-row-expand-icon ").concat(e,"-row-spaced")}):null}},n.renderSelectionBox=function(e){return function(t,o,a){var i=n.getRecordKey(o,a),l=n.getCheckboxPropsByItem(o,a);return r.createElement("span",{onClick:F},r.createElement(p.default,R({type:e,store:n.store,rowIndex:i,onChange:function(t){return"radio"===e?n.handleRadioSelect(o,a,t):n.handleSelect(o,a,t)},defaultSelection:n.getDefaultSelection()},l)))}},n.renderTable=function(e){var t,o=e.prefixCls,l=e.renderEmpty,c=e.dropdownPrefixCls,s=e.contextLocale,f=e.getPopupContainer,p=n.props,d=p.showHeader,h=p.locale,y=p.getPopupContainer,v=A(p,["showHeader","locale","getPopupContainer"]),m=(0,a.default)(v,["style"]),b=n.getCurrentPageData(),g=n.props.expandedRowRender&&!1!==n.props.expandIconAsCell,O=y||f,C=R(R({},s),h);h&&h.emptyText||(C.emptyText=l("Table"));var w=(0,u.default)((N(t={},"".concat(o,"-").concat(n.props.size),!0),N(t,"".concat(o,"-bordered"),n.props.bordered),N(t,"".concat(o,"-empty"),!b.length),N(t,"".concat(o,"-without-column-header"),!d),t)),x=n.renderRowSelection({prefixCls:o,locale:C,getPopupContainer:O}),P=n.renderColumnsDropdown({columns:x,prefixCls:o,dropdownPrefixCls:c,locale:C,getPopupContainer:O}).map(function(e,t){var n=R({},e);return n.key=B(n,t),n}),S=P[0]&&"selection-column"===P[0].key?1:0;return"expandIconColumnIndex"in m&&(S=m.expandIconColumnIndex),r.createElement(i.default,R({key:"table",expandIcon:n.renderExpandIcon(o)},m,{onRow:function(e,t){return n.onRow(o,e,t)},components:n.components,prefixCls:o,data:b,columns:P,showHeader:d,className:w,expandIconColumnIndex:S,expandIconAsCell:g,emptyText:C.emptyText}))},n.renderComponent=function(e){var t=e.getPrefixCls,o=e.renderEmpty,a=e.getPopupContainer,i=n.props,l=i.prefixCls,c=i.dropdownPrefixCls,s=i.style,f=i.className,p=n.getCurrentPageData(),d=n.props.loading;"boolean"==typeof d&&(d={spinning:d});var h=t("table",l),y=t("dropdown",c),v=r.createElement(w.default,{componentName:"Table",defaultLocale:x.default.Table},function(e){return n.renderTable({prefixCls:h,renderEmpty:o,dropdownPrefixCls:y,contextLocale:e,getPopupContainer:a})}),m=n.hasPagination()&&p&&0!==p.length?"".concat(h,"-with-pagination"):"".concat(h,"-without-pagination");return r.createElement("div",{className:(0,u.default)("".concat(h,"-wrapper"),f),style:s},r.createElement(O.default,R({},d,{className:d.spinning?"".concat(m," ").concat(h,"-spin-holder"):""}),n.renderPagination(h,"top"),v,n.renderPagination(h,"bottom")))};var l=e.expandedRowRender,c=e.columns,s=void 0===c?[]:c;return(0,S.default)(!("columnsPageRange"in e||"columnsPageSize"in e),"Table","`columnsPageRange` and `columnsPageSize` are removed, please use fixed columns instead, see: https://u.ant.design/fixed-columns."),l&&s.some(function(e){return!!e.fixed})&&(0,S.default)(!1,"Table","`expandedRowRender` and `Column.fixed` are not compatible. Please use one of them at one time."),n.columns=e.columns||(0,m.normalizeColumns)(e.children),n.createComponents(e.components),n.state=R(R({},n.getDefaultSortOrder(n.columns)),{filters:n.getFiltersFromColumns(),pagination:n.getDefaultPagination(e),pivot:void 0}),n.CheckboxPropsCache={},n.store=(0,f.default)({selectedRowKeys:V(e).selectedRowKeys||[],selectionDirty:!1}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&D(e,t)}(t,r.Component),function(e,t,n){t&&T(e.prototype,t),n&&T(e,n)}(t,[{key:"componentWillReceiveProps",value:function(e){if(this.columns=e.columns||(0,m.normalizeColumns)(e.children),("pagination"in e||"pagination"in this.props)&&this.setState(function(t){var n=R(R(R({},W),t.pagination),e.pagination);return n.current=n.current||1,n.pageSize=n.pageSize||10,{pagination:!1!==e.pagination?n:L}}),e.rowSelection&&"selectedRowKeys"in e.rowSelection?this.store.setState({selectedRowKeys:e.rowSelection.selectedRowKeys||[]}):this.props.rowSelection&&!e.rowSelection&&this.store.setState({selectedRowKeys:[]}),"dataSource"in e&&e.dataSource!==this.props.dataSource&&this.store.setState({selectionDirty:!1}),this.CheckboxPropsCache={},this.getSortOrderColumns(this.columns).length>0){var t=this.getSortStateFromColumns(this.columns);t.sortColumn===this.state.sortColumn&&t.sortOrder===this.state.sortOrder||this.setState(t)}if(this.getFilteredValueColumns(this.columns).length>0){var n=this.getFiltersFromColumns(this.columns),r=R({},this.state.filters);Object.keys(n).forEach(function(e){r[e]=n[e]}),this.isFiltersChanged(r)&&this.setState({filters:r})}this.createComponents(e.components,this.props.components)}},{key:"getDefaultSelection",value:function(){var e=this;return V(this.props).getCheckboxProps?this.getFlatData().filter(function(t,n){return e.getCheckboxPropsByItem(t,n).defaultChecked}).map(function(t,n){return e.getRecordKey(t,n)}):[]}},{key:"getDefaultPagination",value:function(e){var t,n,r="object"===j(e.pagination)?e.pagination:{};return"current"in r?t=r.current:"defaultCurrent"in r&&(t=r.defaultCurrent),"pageSize"in r?n=r.pageSize:"defaultPageSize"in r&&(n=r.defaultPageSize),this.hasPagination(e)?R(R(R({},W),r),{current:t||1,pageSize:n||10}):{}}},{key:"getSortOrderColumns",value:function(e){return(0,m.flatFilter)(e||this.columns||[],function(e){return"sortOrder"in e})}},{key:"getFilteredValueColumns",value:function(e){return(0,m.flatFilter)(e||this.columns||[],function(e){return void 0!==e.filteredValue})}},{key:"getFiltersFromColumns",value:function(e){var t={};return this.getFilteredValueColumns(e).forEach(function(e){var n=B(e);t[n]=e.filteredValue}),t}},{key:"getDefaultSortOrder",value:function(e){var t=this.getSortStateFromColumns(e),n=(0,m.flatFilter)(e||[],function(e){return null!=e.defaultSortOrder})[0];return n&&!t.sortColumn?{sortColumn:n,sortOrder:n.defaultSortOrder}:t}},{key:"getSortStateFromColumns",value:function(e){var t=this.getSortOrderColumns(e).filter(function(e){return e.sortOrder})[0];return t?{sortColumn:t,sortOrder:t.sortOrder}:{sortColumn:null,sortOrder:null}}},{key:"getMaxCurrent",value:function(e){var t=this.state.pagination,n=t.current,r=t.pageSize;return(n-1)*r>=e?Math.floor((e-1)/r)+1:n}},{key:"getSorterFn",value:function(e){var t=e||this.state,n=t.sortOrder,r=t.sortColumn;if(n&&r&&"function"==typeof r.sorter)return function(e,t){var o=r.sorter(e,t,n);return 0!==o?"descend"===n?-o:o:0}}},{key:"getCurrentPageData",value:function(){var e,t,n=this.getLocalData(),r=this.state;return this.hasPagination()?(t=r.pagination.pageSize,e=this.getMaxCurrent(r.pagination.total||n.length)):(t=Number.MAX_VALUE,e=1),(n.length>t||t===Number.MAX_VALUE)&&(n=n.slice((e-1)*t,e*t)),n}},{key:"getFlatData",value:function(){var e=this.props.childrenColumnName;return(0,m.flatArray)(this.getLocalData(null,!1),e)}},{key:"getFlatCurrentPageData",value:function(){var e=this.props.childrenColumnName;return(0,m.flatArray)(this.getCurrentPageData(),e)}},{key:"getLocalData",value:function(e){var t=this,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=e||this.state,o=this.props.dataSource||[];o=o.slice(0);var a=this.getSorterFn(r);return a&&(o=this.recursiveSort(o,a)),n&&r.filters&&Object.keys(r.filters).forEach(function(e){var n=t.findColumn(e);if(n){var a=r.filters[e]||[];if(0!==a.length){var i=n.onFilter;o=i?o.filter(function(e){return a.some(function(t){return i(t,e)})}):o}}}),o}},{key:"setSelectedRowKeys",value:function(e,t){var n=this,r=t.selectWay,o=t.record,a=t.checked,i=t.changeRowKeys,l=t.nativeEvent,u=V(this.props);!u||"selectedRowKeys"in u||this.store.setState({selectedRowKeys:e});var c=this.getFlatData();if(u.onChange||u[r]){var s=c.filter(function(t,r){return e.indexOf(n.getRecordKey(t,r))>=0});if(u.onChange&&u.onChange(e,s),"onSelect"===r&&u.onSelect)u.onSelect(o,a,s,l);else if("onSelectMultiple"===r&&u.onSelectMultiple){var f=c.filter(function(e,t){return i.indexOf(n.getRecordKey(e,t))>=0});u.onSelectMultiple(a,s,f)}else if("onSelectAll"===r&&u.onSelectAll){var p=c.filter(function(e,t){return i.indexOf(n.getRecordKey(e,t))>=0});u.onSelectAll(a,s,p)}else"onSelectInvert"===r&&u.onSelectInvert&&u.onSelectInvert(e)}}},{key:"toggleSortOrder",value:function(e){if(e.sorter){var t,n=R({},this.state.pagination),r=e.sortDirections||this.props.sortDirections,o=this.state,a=o.sortOrder;if(function(e,t){return!!(e&&t&&e.key&&e.key===t.key)||e===t||(0,c.default)(e,t,function(e,t){if("function"==typeof e&&"function"==typeof t)return e===t||e.toString()===t.toString()})}(o.sortColumn,e)&&void 0!==a){var i=r.indexOf(a)+1;t=i===r.length?void 0:r[i]}else t=r[0];this.props.pagination&&(n.current=1,n.onChange(n.current));var l={pagination:n,sortOrder:t,sortColumn:t?e:null};0===this.getSortOrderColumns().length&&this.setState(l);var u=this.props.onChange;u&&u.apply(null,this.prepareParamsArguments(R(R({},this.state),l)))}}},{key:"hasPagination",value:function(e){return!1!==(e||this.props).pagination}},{key:"isFiltersChanged",value:function(e){var t=this,n=!1;return Object.keys(e).length!==Object.keys(this.state.filters).length?n=!0:Object.keys(e).forEach(function(r){e[r]!==t.state.filters[r]&&(n=!0)}),n}},{key:"isSortColumn",value:function(e){var t=this.state.sortColumn;return!(!e||!t)&&B(t)===B(e)}},{key:"prepareParamsArguments",value:function(e){var t=R({},e.pagination);delete t.onChange,delete t.onShowSizeChange;var n=e.filters,r={};return e.sortColumn&&e.sortOrder&&(r.column=e.sortColumn,r.order=e.sortOrder,r.field=e.sortColumn.dataIndex,r.columnKey=B(e.sortColumn)),[t,n,r,{currentDataSource:this.getLocalData(e)}]}},{key:"findColumn",value:function(e){var t;return(0,m.treeMap)(this.columns,function(n){B(n)===e&&(t=n)}),t}},{key:"createComponents",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0,n=e&&e.body&&e.body.row,r=t&&t.body&&t.body.row;this.row&&n===r||(this.row=(0,v.default)(n)),this.components=R(R({},e),{body:R(R({},e.body),{row:this.row})})}},{key:"recursiveSort",value:function(e,t){var n=this,r=this.props.childrenColumnName,o=void 0===r?"children":r;return e.sort(t).map(function(e){return e[o]?R(R({},e),N({},o,n.recursiveSort(e[o],t))):e})}},{key:"renderPagination",value:function(e,t){if(!this.hasPagination())return null;var n="default",o=this.state.pagination;o.size?n=o.size:"middle"!==this.props.size&&"small"!==this.props.size||(n="small");var a=o.position||"bottom",i=o.total||this.getLocalData().length;return i>0&&(a===t||"both"===a)?r.createElement(b.default,R({key:"pagination-".concat(t)},o,{className:(0,u.default)(o.className,"".concat(e,"-pagination")),onChange:this.handlePageChange,total:i,size:n,current:this.getMaxCurrent(i),onShowSizeChange:this.handleShowSizeChange})):null}},{key:"renderRowSelection",value:function(e){var t=this,n=e.prefixCls,o=e.locale,a=e.getPopupContainer,l=this.props.rowSelection,c=this.columns.concat();if(l){var s=this.getFlatCurrentPageData().filter(function(e,n){return!l.getCheckboxProps||!t.getCheckboxPropsByItem(e,n).disabled}),f=(0,u.default)("".concat(n,"-selection-column"),N({},"".concat(n,"-selection-column-custom"),l.selections)),p=N({key:"selection-column",render:this.renderSelectionBox(l.type),className:f,fixed:l.fixed,width:l.columnWidth,title:l.columnTitle},i.INTERNAL_COL_DEFINE,{className:"".concat(n,"-selection-col")});if("radio"!==l.type){var h=s.every(function(e,n){return t.getCheckboxPropsByItem(e,n).disabled});p.title=p.title||r.createElement(d.default,{store:this.store,locale:o,data:s,getCheckboxPropsByItem:this.getCheckboxPropsByItem,getRecordKey:this.getRecordKey,disabled:h,prefixCls:n,onSelect:this.handleSelectRow,selections:l.selections,hideDefaultSelections:l.hideDefaultSelections,getPopupContainer:this.generatePopupContainerFunc(a)})}"fixed"in l?p.fixed=l.fixed:c.some(function(e){return"left"===e.fixed||!0===e.fixed})&&(p.fixed="left"),c[0]&&"selection-column"===c[0].key?c[0]=p:c.unshift(p)}return c}},{key:"renderColumnsDropdown",value:function(e){var t=this,n=e.prefixCls,o=e.dropdownPrefixCls,a=e.columns,i=e.locale,l=e.getPopupContainer,c=this.state,f=c.sortOrder,p=c.filters;return(0,m.treeMap)(a,function(e,a){var c,d,h,y=B(e,a),v=e.onHeaderCell,m=t.isSortColumn(e);if(e.filters&&e.filters.length>0||e.filterDropdown){var b=y in p?p[y]:[];d=r.createElement(s.default,{locale:i,column:e,selectedKeys:b,confirmFilter:t.handleFilter,prefixCls:"".concat(n,"-filter"),dropdownPrefixCls:o||"ant-dropdown",getPopupContainer:t.generatePopupContainerFunc(l),key:"filter-dropdown"})}if(e.sorter){var O=e.sortDirections||t.props.sortDirections,C=m&&"ascend"===f,w=m&&"descend"===f,x=-1!==O.indexOf("ascend")&&r.createElement(g.default,{className:"".concat(n,"-column-sorter-up ").concat(C?"on":"off"),type:"caret-up",theme:"filled"}),P=-1!==O.indexOf("descend")&&r.createElement(g.default,{className:"".concat(n,"-column-sorter-down ").concat(w?"on":"off"),type:"caret-down",theme:"filled"});h=r.createElement("div",{title:i.sortTitle,className:(0,u.default)("".concat(n,"-column-sorter-inner"),x&&P&&"".concat(n,"-column-sorter-inner-full")),key:"sorter"},x,P),v=function(n){var r={};e.onHeaderCell&&(r=R({},e.onHeaderCell(n)));var o=r.onClick;return r.onClick=function(){t.toggleSortOrder(e),o&&o.apply(void 0,arguments)},r}}return R(R({},e),{className:(0,u.default)(e.className,(c={},N(c,"".concat(n,"-column-has-actions"),h||d),N(c,"".concat(n,"-column-has-filters"),d),N(c,"".concat(n,"-column-has-sorters"),h),N(c,"".concat(n,"-column-sort"),m&&f),c)),title:[r.createElement("span",{key:"title",className:"".concat(n,"-header-column")},r.createElement("div",{className:h?"".concat(n,"-column-sorters"):void 0},r.createElement("span",{className:"".concat(n,"-column-title")},t.renderColumnTitle(e.title)),r.createElement("span",{className:"".concat(n,"-column-sorter")},h))),d],onHeaderCell:v})})}},{key:"renderColumnTitle",value:function(e){var t=this.state,n=t.filters,r=t.sortOrder;return e instanceof Function?e({filters:n,sortOrder:r}):e}},{key:"render",value:function(){return r.createElement(P.ConfigConsumer,null,this.renderComponent)}}]),t}();t.default=z,z.Column=h.default,z.ColumnGroup=y.default,z.propTypes={dataSource:l.array,columns:l.array,prefixCls:l.string,useFixedHeader:l.bool,rowSelection:l.object,className:l.string,size:l.string,loading:l.oneOfType([l.bool,l.object]),bordered:l.bool,onChange:l.func,locale:l.object,dropdownPrefixCls:l.string,sortDirections:l.array,getPopupContainer:l.func},z.defaultProps={dataSource:[],useFixedHeader:!1,className:"",size:"default",loading:!1,bordered:!1,indentSize:20,locale:{},rowKey:"key",showHeader:!0,sortDirections:["ascend","descend"],childrenColumnName:"children"}},1207:function(e,t,n){var r=n(1208),o=n(1238)(function(e,t,n){r(e,t,n)});e.exports=o},1208:function(e,t,n){var r=n(1209),o=n(1151),a=n(1215),i=n(1217),l=n(101),u=n(1157),c=n(1156);e.exports=function e(t,n,s,f,p){t!==n&&a(n,function(a,u){if(p||(p=new r),l(a))i(t,n,u,s,e,f,p);else{var d=f?f(c(t,u),a,u+"",t,n,p):void 0;void 0===d&&(d=a),o(t,u,d)}},u)}},1209:function(e,t,n){var r=n(583),o=n(1210),a=n(1211),i=n(1212),l=n(1213),u=n(1214);function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=o,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=l,c.prototype.set=u,e.exports=c},1210:function(e,t,n){var r=n(583);e.exports=function(){this.__data__=new r,this.size=0}},1211:function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},1212:function(e,t){e.exports=function(e){return this.__data__.get(e)}},1213:function(e,t){e.exports=function(e){return this.__data__.has(e)}},1214:function(e,t,n){var r=n(583),o=n(599),a=n(598),i=200;e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var l=n.__data__;if(!o||l.length<i-1)return l.push([e,t]),this.size=++n.size,this;n=this.__data__=new a(l)}return n.set(e,t),this.size=n.size,this}},1215:function(e,t,n){var r=n(1216)();e.exports=r},1216:function(e,t){e.exports=function(e){return function(t,n,r){for(var o=-1,a=Object(t),i=r(t),l=i.length;l--;){var u=i[e?l:++o];if(!1===n(a[u],u,a))break}return t}}},1217:function(e,t,n){var r=n(1151),o=n(1218),a=n(1219),i=n(1222),l=n(1223),u=n(590),c=n(119),s=n(1226),f=n(1154),p=n(589),d=n(101),h=n(1228),y=n(1155),v=n(1156),m=n(1232);e.exports=function(e,t,n,b,g,O,C){var w=v(e,n),x=v(t,n),P=C.get(x);if(P)r(e,n,P);else{var S=O?O(w,x,n+"",e,t,C):void 0,E=void 0===S;if(E){var k=c(x),_=!k&&f(x),j=!k&&!_&&y(x);S=x,k||_||j?c(w)?S=w:s(w)?S=i(w):_?(E=!1,S=o(x,!0)):j?(E=!1,S=a(x,!0)):S=[]:h(x)||u(x)?(S=w,u(w)?S=m(w):d(w)&&!p(w)||(S=l(x))):E=!1}E&&(C.set(x,S),g(S,x,b,O,C),C.delete(x)),r(e,n,S)}}},1218:function(e,t,n){(function(e){var r=n(117),o=t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,i=a&&a.exports===o?r.Buffer:void 0,l=i?i.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=l?l(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(217)(e))},1219:function(e,t,n){var r=n(1220);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},1220:function(e,t,n){var r=n(1221);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},1221:function(e,t,n){var r=n(117).Uint8Array;e.exports=r},1222:function(e,t){e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},1223:function(e,t,n){var r=n(1224),o=n(1152),a=n(1153);e.exports=function(e){return"function"!=typeof e.constructor||a(e)?{}:r(o(e))}},1224:function(e,t,n){var r=n(101),o=Object.create,a=function(){function e(){}return function(t){if(!r(t))return{};if(o)return o(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=a},1225:function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},1226:function(e,t,n){var r=n(1122),o=n(156);e.exports=function(e){return o(e)&&r(e)}},1227:function(e,t){e.exports=function(){return!1}},1228:function(e,t,n){var r=n(159),o=n(1152),a=n(156),i="[object Object]",l=Function.prototype,u=Object.prototype,c=l.toString,s=u.hasOwnProperty,f=c.call(Object);e.exports=function(e){if(!a(e)||r(e)!=i)return!1;var t=o(e);if(null===t)return!0;var n=s.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&c.call(n)==f}},1229:function(e,t,n){var r=n(159),o=n(591),a=n(156),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,e.exports=function(e){return a(e)&&o(e.length)&&!!i[r(e)]}},1230:function(e,t){e.exports=function(e){return function(t){return e(t)}}},1231:function(e,t,n){(function(e){var r=n(597),o=t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,i=a&&a.exports===o&&r.process,l=function(){try{var e=a&&a.require&&a.require("util").types;return e||i&&i.binding&&i.binding("util")}catch(e){}}();e.exports=l}).call(this,n(217)(e))},1232:function(e,t,n){var r=n(1233),o=n(1157);e.exports=function(e){return r(e,o(e))}},1233:function(e,t,n){var r=n(601),o=n(592);e.exports=function(e,t,n,a){var i=!n;n||(n={});for(var l=-1,u=t.length;++l<u;){var c=t[l],s=a?a(n[c],e[c],c,n,e):void 0;void 0===s&&(s=e[c]),i?o(n,c,s):r(n,c,s)}return n}},1234:function(e,t,n){var r=n(1235),o=n(590),a=n(119),i=n(1154),l=n(226),u=n(1155),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=a(e),s=!n&&o(e),f=!n&&!s&&i(e),p=!n&&!s&&!f&&u(e),d=n||s||f||p,h=d?r(e.length,String):[],y=h.length;for(var v in e)!t&&!c.call(e,v)||d&&("length"==v||f&&("offset"==v||"parent"==v)||p&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||l(v,y))||h.push(v);return h}},1235:function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},1236:function(e,t,n){var r=n(101),o=n(1153),a=n(1237),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return a(e);var t=o(e),n=[];for(var l in e)("constructor"!=l||!t&&i.call(e,l))&&n.push(l);return n}},1237:function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},1238:function(e,t,n){var r=n(1239),o=n(1246);e.exports=function(e){return r(function(t,n){var r=-1,a=n.length,i=a>1?n[a-1]:void 0,l=a>2?n[2]:void 0;for(i=e.length>3&&"function"==typeof i?(a--,i):void 0,l&&o(n[0],n[1],l)&&(i=a<3?void 0:i,a=1),t=Object(t);++r<a;){var u=n[r];u&&e(t,u,r,i)}return t})}},1239:function(e,t,n){var r=n(1158),o=n(1240),a=n(1242);e.exports=function(e,t){return a(o(e,t,r),e+"")}},1240:function(e,t,n){var r=n(1241),o=Math.max;e.exports=function(e,t,n){return t=o(void 0===t?e.length-1:t,0),function(){for(var a=arguments,i=-1,l=o(a.length-t,0),u=Array(l);++i<l;)u[i]=a[t+i];i=-1;for(var c=Array(t+1);++i<t;)c[i]=a[i];return c[t]=n(u),r(e,this,c)}}},1241:function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},1242:function(e,t,n){var r=n(1243),o=n(1245)(r);e.exports=o},1243:function(e,t,n){var r=n(1244),o=n(602),a=n(1158),i=o?function(e,t){return o(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:a;e.exports=i},1244:function(e,t){e.exports=function(e){return function(){return e}}},1245:function(e,t){var n=800,r=16,o=Date.now;e.exports=function(e){var t=0,a=0;return function(){var i=o(),l=r-(i-a);if(a=i,l>0){if(++t>=n)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},1246:function(e,t,n){var r=n(160),o=n(1122),a=n(226),i=n(101);e.exports=function(e,t,n){if(!i(n))return!1;var l=typeof t;return!!("number"==l?o(n)&&a(t,n.length):"string"==l&&t in n)&&r(n[t],e)}},1247:function(e,t,n){"use strict";e.exports=function(){}},1248:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=b(n(4)),o=b(n(51)),a=n(114),i=b(n(1101)),l=v(n(1251)),u=v(n(16)),c=v(n(1086)),s=v(n(1124)),f=v(n(44)),p=v(n(1125)),d=v(n(1163)),h=v(n(1257)),y=n(1164);function v(e){return e&&e.__esModule?e:{default:e}}function m(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return m=function(){return e},e}function b(e){if(e&&e.__esModule)return e;var t=m();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}return n.default=e,t&&t.set(e,n),n}function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function x(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function P(e,t){return(P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e){e.stopPropagation(),e.nativeEvent.stopImmediatePropagation&&e.nativeEvent.stopImmediatePropagation()}var E=function(e){function t(e){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?x(e):t}(this,w(t).call(this,e))).setNeverShown=function(e){var t=o.findDOMNode(x(n));!!(0,l.default)(t,".ant-table-scroll")&&(n.neverShown=!!e.fixed)},n.setSelectedKeys=function(e){var t=e.selectedKeys;n.setState({selectedKeys:t})},n.handleClearFilters=function(){n.setState({selectedKeys:[]},n.handleConfirm)},n.handleConfirm=function(){n.setVisible(!1),n.setState({},n.confirmFilter)},n.onVisibleChange=function(e){n.setVisible(e);var t=n.props.column;e||t.filterDropdown instanceof Function||n.confirmFilter()},n.handleMenuItemClick=function(e){var t=n.state.selectedKeys;if(e.keyPath&&!(e.keyPath.length<=1)){var r=n.state.keyPathOfSelectedItem;t&&t.indexOf(e.key)>=0?delete r[e.key]:r[e.key]=e.keyPath,n.setState({keyPathOfSelectedItem:r})}},n.renderFilterIcon=function(){var e,t=n.props,o=t.column,a=t.locale,i=t.prefixCls,l=t.selectedKeys,c=l&&l.length>0,s=o.filterIcon;"function"==typeof s&&(s=s(c));var p=(0,u.default)((O(e={},"".concat(i,"-selected"),c),O(e,"".concat(i,"-open"),n.getDropdownVisible()),e));return s?r.cloneElement(s,{title:a.filterTitle,className:(0,u.default)("".concat(i,"-icon"),p,s.props.className),onClick:S}):r.createElement(f.default,{title:a.filterTitle,type:"filter",theme:"filled",className:p,onClick:S})};var a="filterDropdownVisible"in e.column&&e.column.filterDropdownVisible;return n.state={selectedKeys:e.selectedKeys,valueKeys:(0,y.generateValueMaps)(e.column.filters),keyPathOfSelectedItem:{},visible:a,prevProps:e},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&P(e,t)}(t,r.Component),function(e,t,n){t&&C(e.prototype,t),n&&C(e,n)}(t,[{key:"componentDidMount",value:function(){var e=this.props.column;this.setNeverShown(e)}},{key:"componentDidUpdate",value:function(){var e=this.props.column;this.setNeverShown(e)}},{key:"getDropdownVisible",value:function(){return!this.neverShown&&this.state.visible}},{key:"setVisible",value:function(e){var t=this.props.column;"filterDropdownVisible"in t||this.setState({visible:e}),t.onFilterDropdownVisibleChange&&t.onFilterDropdownVisibleChange(e)}},{key:"hasSubMenu",value:function(){var e=this.props.column.filters;return(void 0===e?[]:e).some(function(e){return!!(e.children&&e.children.length>0)})}},{key:"confirmFilter",value:function(){var e=this.props,t=e.column,n=e.selectedKeys,r=e.confirmFilter,o=this.state,a=o.selectedKeys,i=o.valueKeys,l=t.filterDropdown;(0,c.default)(a,n)||r(t,l?a:a.map(function(e){return i[e]}).filter(function(e){return void 0!==e}))}},{key:"renderMenus",value:function(e){var t=this;return e.map(function(e){if(e.children&&e.children.length>0){var n=t.state.keyPathOfSelectedItem,o=Object.keys(n).some(function(t){return n[t].indexOf(e.value)>=0})?"".concat(t.props.dropdownPrefixCls,"-submenu-contain-selected"):"";return r.createElement(i.SubMenu,{title:e.text,className:o,key:e.value.toString()},t.renderMenus(e.children))}return t.renderMenuItem(e)})}},{key:"renderMenuItem",value:function(e){var t=this.props.column,n=this.state.selectedKeys,o=!("filterMultiple"in t)||t.filterMultiple,a=(n||[]).map(function(e){return e.toString()}),l=o?r.createElement(p.default,{checked:a.indexOf(e.value.toString())>=0}):r.createElement(d.default,{checked:a.indexOf(e.value.toString())>=0});return r.createElement(i.Item,{key:e.value},l,r.createElement("span",null,e.text))}},{key:"render",value:function(){var e=this,t=this.state.selectedKeys,n=this.props,o=n.column,a=n.locale,l=n.prefixCls,c=n.dropdownPrefixCls,f=n.getPopupContainer,p=!("filterMultiple"in o)||o.filterMultiple,d=(0,u.default)(O({},"".concat(c,"-menu-without-submenu"),!this.hasSubMenu())),y=o.filterDropdown;y instanceof Function&&(y=y({prefixCls:"".concat(c,"-custom"),setSelectedKeys:function(t){return e.setSelectedKeys({selectedKeys:t})},selectedKeys:t,confirm:this.handleConfirm,clearFilters:this.handleClearFilters,filters:o.filters}));var v=y?r.createElement(h.default,{className:"".concat(l,"-dropdown")},y):r.createElement(h.default,{className:"".concat(l,"-dropdown")},r.createElement(i.default,{multiple:p,onClick:this.handleMenuItemClick,prefixCls:"".concat(c,"-menu"),className:d,onSelect:this.setSelectedKeys,onDeselect:this.setSelectedKeys,selectedKeys:t&&t.map(function(e){return e.toString()}),getPopupContainer:f},this.renderMenus(o.filters)),r.createElement("div",{className:"".concat(l,"-dropdown-btns")},r.createElement("a",{className:"".concat(l,"-dropdown-link confirm"),onClick:this.handleConfirm},a.filterConfirm),r.createElement("a",{className:"".concat(l,"-dropdown-link clear"),onClick:this.handleClearFilters},a.filterReset)));return r.createElement(s.default,{trigger:["click"],placement:"bottomRight",overlay:v,visible:this.getDropdownVisible(),onVisibleChange:this.onVisibleChange,getPopupContainer:f,forceRender:!0},this.renderFilterIcon())}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.column,r=t.prevProps,o={prevProps:e};return"selectedKeys"in e&&!(0,c.default)(r.selectedKeys,e.selectedKeys)&&(o.selectedKeys=e.selectedKeys),(0,c.default)((r.column||{}).filters,(e.column||{}).filters)||(o.valueKeys=(0,y.generateValueMaps)(e.column.filters)),"filterDropdownVisible"in n&&(o.visible=n.filterDropdownVisible),o}}]),t}();E.defaultProps={handleFilter:function(){},column:{}},(0,a.polyfill)(E);var k=E;t.default=k},1251:function(e,t,n){var r=n(1252);e.exports=function(e,t,n){for(n=n||document,e={parentNode:e};(e=e.parentNode)&&e!==n;)if(r(e,t))return e}},1252:function(e,t,n){"use strict";e.exports=function(e,t){var n=window.Element.prototype,r=n.matches||n.mozMatchesSelector||n.msMatchesSelector||n.oMatchesSelector||n.webkitMatchesSelector;if(!e||1!==e.nodeType)return!1;var o=e.parentNode;if(r)return r.call(e,t);for(var a=o.querySelectorAll(t),i=a.length,l=0;l<i;l++)if(a[l]===e)return!0;return!1}},1254:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=d(n(4)),o=d(n(0)),a=n(114),i=f(n(16)),l=f(n(1086)),u=f(n(72)),c=f(n(1162)),s=n(25);function f(e){return e&&e.__esModule?e:{default:e}}function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}function d(e){if(e&&e.__esModule)return e;var t=p();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}return n.default=e,t&&t.set(e,n),n}function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function v(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function g(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var C=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},w=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?g(e):t}(this,b(t).call(this,e))).cancelValue=function(e){n.setState(function(t){return{registeredValues:t.registeredValues.filter(function(t){return t!==e})}})},n.registerValue=function(e){n.setState(function(t){var n=t.registeredValues;return{registeredValues:[].concat(v(n),[e])}})},n.toggleOption=function(e){var t=n.state.registeredValues,r=n.state.value.indexOf(e.value),o=v(n.state.value);-1===r?o.push(e.value):o.splice(r,1),"value"in n.props||n.setState({value:o});var a=n.props.onChange;if(a){var i=n.getOptions();a(o.filter(function(e){return-1!==t.indexOf(e)}).sort(function(e,t){return i.findIndex(function(t){return t.value===e})-i.findIndex(function(e){return e.value===t})}))}},n.renderGroup=function(e){var t=e.getPrefixCls,o=g(n),a=o.props,l=o.state,s=a.prefixCls,f=a.className,p=a.style,d=a.options,h=C(a,["prefixCls","className","style","options"]),v=t("checkbox",s),m="".concat(v,"-group"),b=(0,u.default)(h,["children","defaultValue","value","onChange","disabled"]),O=a.children;d&&d.length>0&&(O=n.getOptions().map(function(e){return r.createElement(c.default,{prefixCls:v,key:e.value.toString(),disabled:"disabled"in e?e.disabled:a.disabled,value:e.value,checked:-1!==l.value.indexOf(e.value),onChange:e.onChange,className:"".concat(m,"-item")},e.label)}));var w=(0,i.default)(m,f);return r.createElement("div",y({className:w,style:p},b),O)},n.state={value:e.value||e.defaultValue||[],registeredValues:[]},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(t,r.Component),function(e,t,n){t&&m(e.prototype,t),n&&m(e,n)}(t,[{key:"getChildContext",value:function(){return{checkboxGroup:{toggleOption:this.toggleOption,value:this.state.value,disabled:this.props.disabled,name:this.props.name,registerValue:this.registerValue,cancelValue:this.cancelValue}}}},{key:"shouldComponentUpdate",value:function(e,t){return!(0,l.default)(this.props,e)||!(0,l.default)(this.state,t)}},{key:"getOptions",value:function(){return this.props.options.map(function(e){return"string"==typeof e?{label:e,value:e}:e})}},{key:"render",value:function(){return r.createElement(s.ConfigConsumer,null,this.renderGroup)}}],[{key:"getDerivedStateFromProps",value:function(e){return"value"in e?{value:e.value||[]}:null}}]),t}();w.defaultProps={options:[]},w.propTypes={defaultValue:o.array,value:o.array,options:o.array.isRequired,onChange:o.func},w.childContextTypes={checkboxGroup:o.any},(0,a.polyfill)(w);var x=w;t.default=x},1255:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=p(n(4)),o=p(n(0)),a=s(n(16)),i=s(n(1086)),l=n(114),u=s(n(1126)),c=n(25);function s(e){return e&&e.__esModule?e:{default:e}}function f(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return f=function(){return e},e}function p(e){if(e&&e.__esModule)return e;var t=f();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}return n.default=e,t&&t.set(e,n),n}function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function b(e){var t=null,n=!1;return r.Children.forEach(e,function(e){e&&e.props&&e.props.checked&&(t=e.props.value,n=!0)}),n?{value:t}:void 0}var g=function(e){function t(e){var n,o;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?v(e):t}(this,y(t).call(this,e))).onRadioChange=function(e){var t=n.state.value,r=e.target.value;"value"in n.props||n.setState({value:r});var o=n.props.onChange;o&&r!==t&&o(e)},n.renderGroup=function(e){var t=e.getPrefixCls,o=v(n).props,i=o.prefixCls,l=o.className,c=void 0===l?"":l,s=o.options,f=o.buttonStyle,p=t("radio",i),d="".concat(p,"-group"),h=(0,a.default)(d,"".concat(d,"-").concat(f),function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},"".concat(d,"-").concat(o.size),o.size),c),y=o.children;return s&&s.length>0&&(y=s.map(function(e){return"string"==typeof e?r.createElement(u.default,{key:e,prefixCls:p,disabled:n.props.disabled,value:e,checked:n.state.value===e},e):r.createElement(u.default,{key:"radio-group-value-options-".concat(e.value),prefixCls:p,disabled:e.disabled||n.props.disabled,value:e.value,checked:n.state.value===e.value},e.label)})),r.createElement("div",{className:h,style:o.style,onMouseEnter:o.onMouseEnter,onMouseLeave:o.onMouseLeave,id:o.id},y)},"value"in e)o=e.value;else if("defaultValue"in e)o=e.defaultValue;else{var i=b(e.children);o=i&&i.value}return n.state={value:o},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,r.Component),function(e,t,n){t&&h(e.prototype,t),n&&h(e,n)}(t,[{key:"getChildContext",value:function(){return{radioGroup:{onChange:this.onRadioChange,value:this.state.value,disabled:this.props.disabled,name:this.props.name}}}},{key:"shouldComponentUpdate",value:function(e,t){return!(0,i.default)(this.props,e)||!(0,i.default)(this.state,t)}},{key:"render",value:function(){return r.createElement(c.ConfigConsumer,null,this.renderGroup)}}],[{key:"getDerivedStateFromProps",value:function(e){if("value"in e)return{value:e.value};var t=b(e.children);return t?{value:t.value}:null}}]),t}();g.defaultProps={buttonStyle:"outline"},g.childContextTypes={radioGroup:o.any},(0,l.polyfill)(g);var O=g;t.default=O},1256:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=u(n(4)),o=u(n(0)),a=function(e){return e&&e.__esModule?e:{default:e}}(n(1126)),i=n(25);function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function u(e){if(e&&e.__esModule)return e;var t=l();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}return n.default=e,t&&t.set(e,n),n}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var y=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},v=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=p(this,d(t).apply(this,arguments))).renderRadioButton=function(t){var n=t.getPrefixCls,o=e.props,i=o.prefixCls,l=y(o,["prefixCls"]),u=n("radio-button",i);return e.context.radioGroup&&(l.checked=e.props.value===e.context.radioGroup.value,l.disabled=e.props.disabled||e.context.radioGroup.disabled),r.createElement(a.default,s({prefixCls:u},l))},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,r.Component),function(e,t,n){t&&f(e.prototype,t),n&&f(e,n)}(t,[{key:"render",value:function(){return r.createElement(i.ConfigConsumer,null,this.renderRadioButton)}}]),t}();t.default=v,v.contextTypes={radioGroup:o.any}},1257:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=o();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var i=r?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(n,a,i):n[a]=e[a]}}n.default=e,t&&t.set(e,n);return n}(n(4));function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}var a=function(e){return r.createElement("div",{className:e.className,onClick:function(e){return e.stopPropagation()}},e.children)};t.default=a},1258:function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e,n=[];return{setState:function(e){t=r(r({},t),e);for(var o=0;o<n.length;o++)n[o]()},getState:function(){return t},subscribe:function(e){return n.push(e),function(){var t=n.indexOf(e);n.splice(t,1)}}}}},1259:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=l();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(n(4)),o=i(n(1125)),a=i(n(1163));function i(e){return e&&e.__esModule?e:{default:e}}function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},y=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=f(this,p(t).call(this,e))).state={checked:n.getCheckState(e)},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,r.Component),function(e,t,n){t&&s(e.prototype,t),n&&s(e,n)}(t,[{key:"componentDidMount",value:function(){this.subscribe()}},{key:"componentWillUnmount",value:function(){this.unsubscribe&&this.unsubscribe()}},{key:"getCheckState",value:function(e){var t=e.store,n=e.defaultSelection,r=e.rowIndex;return t.getState().selectionDirty?t.getState().selectedRowKeys.indexOf(r)>=0:t.getState().selectedRowKeys.indexOf(r)>=0||n.indexOf(r)>=0}},{key:"subscribe",value:function(){var e=this,t=this.props.store;this.unsubscribe=t.subscribe(function(){var t=e.getCheckState(e.props);e.setState({checked:t})})}},{key:"render",value:function(){var e=this.props,t=e.type,n=e.rowIndex,i=h(e,["type","rowIndex"]),l=this.state.checked;return"radio"===t?r.createElement(a.default,c({checked:l,value:n},i)):r.createElement(o.default,c({checked:l},i))}}]),t}();t.default=y},1260:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=f();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(n(4)),o=s(n(16)),a=n(114),i=s(n(1125)),l=s(n(1124)),u=s(n(1127)),c=s(n(44));function s(e){return e&&e.__esModule?e:{default:e}}function f(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return f=function(){return e},e}function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function b(e){var t=e.store,n=e.getCheckboxPropsByItem,r=e.getRecordKey,o=e.data,a=e.type,i=e.byDefaultChecked;return("every"===a||"some"===a)&&(i?o[a](function(e,t){return n(e,t).defaultChecked}):o[a](function(e,n){return t.getState().selectedRowKeys.indexOf(r(e,n))>=0}))}function g(e){var t=e.store,n=e.data;if(!n.length)return!1;var r=b(m(m({},e),{data:n,type:"some",byDefaultChecked:!1}))&&!b(m(m({},e),{data:n,type:"every",byDefaultChecked:!1})),o=b(m(m({},e),{data:n,type:"some",byDefaultChecked:!0}))&&!b(m(m({},e),{data:n,type:"every",byDefaultChecked:!0}));return t.getState().selectionDirty?r:r||o}function O(e){var t=e.store,n=e.data;return!!n.length&&(t.getState().selectionDirty?b(m(m({},e),{data:n,type:"every",byDefaultChecked:!1})):b(m(m({},e),{data:n,type:"every",byDefaultChecked:!1}))||b(m(m({},e),{data:n,type:"every",byDefaultChecked:!0})))}var C=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=h(this,y(t).call(this,e))).state={checked:!1,indeterminate:!1},n.handleSelectAllChange=function(e){var t=e.target.checked;n.props.onSelect(t?"all":"removeAll",0,null)},n.defaultSelections=e.hideDefaultSelections?[]:[{key:"all",text:e.locale.selectAll,onSelect:function(){}},{key:"invert",text:e.locale.selectInvert,onSelect:function(){}}],n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(t,r.Component),function(e,t,n){t&&d(e.prototype,t),n&&d(e,n)}(t,[{key:"componentDidMount",value:function(){this.subscribe()}},{key:"componentWillUnmount",value:function(){this.unsubscribe&&this.unsubscribe()}},{key:"setCheckState",value:function(e){var t=O(e),n=g(e);this.setState(function(e){var r={};return n!==e.indeterminate&&(r.indeterminate=n),t!==e.checked&&(r.checked=t),r})}},{key:"subscribe",value:function(){var e=this,t=this.props.store;this.unsubscribe=t.subscribe(function(){e.setCheckState(e.props)})}},{key:"renderMenus",value:function(e){var t=this;return e.map(function(e,n){return r.createElement(u.default.Item,{key:e.key||n},r.createElement("div",{onClick:function(){t.props.onSelect(e.key,n,e.onSelect)}},e.text))})}},{key:"render",value:function(){var e=this.props,t=e.disabled,n=e.prefixCls,a=e.selections,s=e.getPopupContainer,f=this.state,p=f.checked,d=f.indeterminate,h="".concat(n,"-selection"),y=null;if(a){var v=Array.isArray(a)?this.defaultSelections.concat(a):this.defaultSelections,m=r.createElement(u.default,{className:"".concat(h,"-menu"),selectedKeys:[]},this.renderMenus(v));y=v.length>0?r.createElement(l.default,{overlay:m,getPopupContainer:s},r.createElement("div",{className:"".concat(h,"-down")},r.createElement(c.default,{type:"down"}))):null}return r.createElement("div",{className:h},r.createElement(i.default,{className:(0,o.default)(function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},"".concat(h,"-select-all-custom"),y)),checked:p,indeterminate:d,disabled:t,onChange:this.handleSelectAllChange}),y)}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=O(e),r=g(e),o={};return r!==t.indeterminate&&(o.indeterminate=r),n!==t.checked&&(o.checked=n),o}}]),t}();(0,a.polyfill)(C);var w=C;t.default=w},1266:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=o();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var i=r?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(n,a,i):n[a]=e[a]}}n.default=e,t&&t.set(e,n);return n}(n(4));function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),i(this,l(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,r.Component),t}();t.default=c},1267:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=o();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var i=r?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(n,a,i):n[a]=e[a]}}n.default=e,t&&t.set(e,n);return n}(n(4));function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),i(this,l(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,r.Component),t}();t.default=c,c.__ANT_TABLE_COLUMN_GROUP=!0},1268:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"tr";return function(t){function n(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),(t=function(e,t){if(t&&("object"===u(t)||"function"==typeof t))return t;return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,f(n).call(this,e))).store=e.store;var r=t.store.getState(),o=r.selectedRowKeys;return t.state={selected:o.indexOf(e.rowKey)>=0},t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(n,t),function(e,t,n){t&&s(e.prototype,t);n&&s(e,n)}(n,[{key:"componentDidMount",value:function(){this.subscribe()}},{key:"componentWillUnmount",value:function(){this.unsubscribe&&this.unsubscribe()}},{key:"subscribe",value:function(){var e=this,t=this.props,n=t.store,r=t.rowKey;this.unsubscribe=n.subscribe(function(){var t=e.store.getState(),n=t.selectedRowKeys,o=n.indexOf(r)>=0;o!==e.state.selected&&e.setState({selected:o})})}},{key:"render",value:function(){var t=(0,a.default)(this.props,["prefixCls","rowKey","store"]),n=(0,o.default)(this.props.className,function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;return e}({},"".concat(this.props.prefixCls,"-row-selected"),this.state.selected));return r.createElement(e,c(c({},t),{className:n}),this.props.children)}}]),n}(r.Component)};var r=function(e){if(e&&e.__esModule)return e;var t=l();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(n(4)),o=i(n(16)),a=i(n(72));function i(e){return e&&e.__esModule?e:{default:e}}function l(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return l=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}},1269:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1270)).default;t.default=r},1270:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=d();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(n(4)),o=p(n(1625)),a=p(n(594)),i=p(n(16)),l=p(n(1271)),u=p(n(44)),c=p(n(1166)),s=p(n(155)),f=n(25);function p(e){return e&&e.__esModule?e:{default:e}}function d(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return d=function(){return e},e}function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function g(e,t){return(g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var O=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},C=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=m(this,b(t).apply(this,arguments))).getIconsProps=function(e){return{prevIcon:r.createElement("a",{className:"".concat(e,"-item-link")},r.createElement(u.default,{type:"left"})),nextIcon:r.createElement("a",{className:"".concat(e,"-item-link")},r.createElement(u.default,{type:"right"})),jumpPrevIcon:r.createElement("a",{className:"".concat(e,"-item-link")},r.createElement("div",{className:"".concat(e,"-item-container")},r.createElement(u.default,{className:"".concat(e,"-item-link-icon"),type:"double-left"}),r.createElement("span",{className:"".concat(e,"-item-ellipsis")},"•••"))),jumpNextIcon:r.createElement("a",{className:"".concat(e,"-item-link")},r.createElement("div",{className:"".concat(e,"-item-container")},r.createElement(u.default,{className:"".concat(e,"-item-link-icon"),type:"double-right"}),r.createElement("span",{className:"".concat(e,"-item-ellipsis")},"•••")))}},e.renderPagination=function(t){var n=e.props,a=n.prefixCls,u=n.selectPrefixCls,s=n.className,p=n.size,d=n.locale,h=O(n,["prefixCls","selectPrefixCls","className","size","locale"]),v=y(y({},t),d),m="small"===p;return r.createElement(f.ConfigConsumer,null,function(t){var n=t.getPrefixCls,f=n("pagination",a),p=n("select",u);return r.createElement(o.default,y({},h,{prefixCls:f,selectPrefixCls:p},e.getIconsProps(f),{className:(0,i.default)(s,{mini:m}),selectComponentClass:m?l.default:c.default,locale:v}))})},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&g(e,t)}(t,r.Component),function(e,t,n){t&&v(e.prototype,t),n&&v(e,n)}(t,[{key:"render",value:function(){return r.createElement(s.default,{componentName:"Pagination",defaultLocale:a.default},this.renderPagination)}}]),t}();t.default=C},1271:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(n(4)),o=function(e){return e&&e.__esModule?e:{default:e}}(n(1166));function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),c(this,s(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,r.Component),function(e,t,n){t&&u(e.prototype,t),n&&u(e,n)}(t,[{key:"render",value:function(){return r.createElement(o.default,l({size:"small"},this.props))}}]),t}();t.default=p,p.Option=o.default.Option},1272:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(n(4)),o=function(e){return e&&e.__esModule?e:{default:e}}(n(1273));function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var p=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},d={border:0,background:"transparent",padding:0,lineHeight:"inherit",display:"inline-block"},h=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=c(this,s(t).apply(this,arguments))).onKeyDown=function(e){e.keyCode===o.default.ENTER&&e.preventDefault()},e.onKeyUp=function(t){var n=t.keyCode,r=e.props.onClick;n===o.default.ENTER&&r&&r()},e.setRef=function(t){e.div=t},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,r.Component),function(e,t,n){t&&u(e.prototype,t),n&&u(e,n)}(t,[{key:"focus",value:function(){this.div&&this.div.focus()}},{key:"blur",value:function(){this.div&&this.div.blur()}},{key:"render",value:function(){var e=this.props,t=e.style,n=e.noStyle,o=p(e,["style","noStyle"]);return r.createElement("div",l({role:"button",tabIndex:0,ref:this.setRef},o,{onKeyDown:this.onKeyDown,onKeyUp:this.onKeyUp,style:l(l({},n?null:d),t)}))}}]),t}();t.default=h},1273:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=r.F1&&t<=r.F12)return!1;switch(t){case r.ALT:case r.CAPS_LOCK:case r.CONTEXT_MENU:case r.CTRL:case r.DOWN:case r.END:case r.ESC:case r.HOME:case r.INSERT:case r.LEFT:case r.MAC_FF_META:case r.META:case r.NUMLOCK:case r.NUM_CENTER:case r.PAGE_DOWN:case r.PAGE_UP:case r.PAUSE:case r.PRINT_SCREEN:case r.RIGHT:case r.SHIFT:case r.UP:case r.WIN_KEY:case r.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=r.ZERO&&e<=r.NINE)return!0;if(e>=r.NUM_ZERO&&e<=r.NUM_MULTIPLY)return!0;if(e>=r.A&&e<=r.Z)return!0;if(-1!==window.navigation.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case r.SPACE:case r.QUESTION_MARK:case r.NUM_PLUS:case r.NUM_MINUS:case r.NUM_PERIOD:case r.NUM_DIVISION:case r.SEMICOLON:case r.DASH:case r.EQUALS:case r.COMMA:case r.PERIOD:case r.SLASH:case r.APOSTROPHE:case r.SINGLE_QUOTE:case r.OPEN_SQUARE_BRACKET:case r.BACKSLASH:case r.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}},o=r;t.default=o},1274:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=h();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(n(4)),o=d(n(16)),a=d(n(72)),i=d(n(1275)),l=d(n(1276)),u=d(n(1277)),c=d(n(1111)),s=d(n(1112)),f=n(25),p=d(n(87));function d(e){return e&&e.__esModule?e:{default:e}}function h(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return h=function(){return e},e}function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(){return(v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t){return!t||"object"!==y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function O(e){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function C(e,t){return(C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var w=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};var x=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=g(this,O(t).apply(this,arguments))).onTabChange=function(t){e.props.onTabChange&&e.props.onTabChange(t)},e.renderCard=function(t){var n,i,l,f=t.getPrefixCls,p=e.props,d=p.prefixCls,h=p.className,y=p.extra,b=p.headStyle,g=void 0===b?{}:b,O=p.bodyStyle,C=void 0===O?{}:O,x=p.title,P=p.loading,S=p.bordered,E=void 0===S||S,k=p.size,_=void 0===k?"default":k,j=p.type,N=p.cover,R=p.actions,T=p.tabList,I=p.children,M=p.activeTabKey,D=p.defaultActiveTabKey,A=p.tabBarExtraContent,K=w(p,["prefixCls","className","extra","headStyle","bodyStyle","title","loading","bordered","size","type","cover","actions","tabList","children","activeTabKey","defaultActiveTabKey","tabBarExtraContent"]),F=f("card",d),V=(0,o.default)(F,h,(m(n={},"".concat(F,"-loading"),P),m(n,"".concat(F,"-bordered"),E),m(n,"".concat(F,"-hoverable"),e.getCompatibleHoverable()),m(n,"".concat(F,"-contain-grid"),e.isContainGrid()),m(n,"".concat(F,"-contain-tabs"),T&&T.length),m(n,"".concat(F,"-").concat(_),"default"!==_),m(n,"".concat(F,"-type-").concat(j),!!j),n)),B=0===C.padding||"0px"===C.padding?{padding:24}:void 0,W=r.createElement("div",{className:"".concat(F,"-loading-content"),style:B},r.createElement(c.default,{gutter:8},r.createElement(s.default,{span:22},r.createElement("div",{className:"".concat(F,"-loading-block")}))),r.createElement(c.default,{gutter:8},r.createElement(s.default,{span:8},r.createElement("div",{className:"".concat(F,"-loading-block")})),r.createElement(s.default,{span:15},r.createElement("div",{className:"".concat(F,"-loading-block")}))),r.createElement(c.default,{gutter:8},r.createElement(s.default,{span:6},r.createElement("div",{className:"".concat(F,"-loading-block")})),r.createElement(s.default,{span:18},r.createElement("div",{className:"".concat(F,"-loading-block")}))),r.createElement(c.default,{gutter:8},r.createElement(s.default,{span:13},r.createElement("div",{className:"".concat(F,"-loading-block")})),r.createElement(s.default,{span:9},r.createElement("div",{className:"".concat(F,"-loading-block")}))),r.createElement(c.default,{gutter:8},r.createElement(s.default,{span:4},r.createElement("div",{className:"".concat(F,"-loading-block")})),r.createElement(s.default,{span:3},r.createElement("div",{className:"".concat(F,"-loading-block")})),r.createElement(s.default,{span:16},r.createElement("div",{className:"".concat(F,"-loading-block")})))),L=void 0!==M,z=(m(i={},L?"activeKey":"defaultActiveKey",L?M:D),m(i,"tabBarExtraContent",A),i),U=T&&T.length?r.createElement(u.default,v({},z,{className:"".concat(F,"-head-tabs"),size:"large",onChange:e.onTabChange}),T.map(function(e){return r.createElement(u.default.TabPane,{tab:e.tab,disabled:e.disabled,key:e.key})})):null;(x||y||U)&&(l=r.createElement("div",{className:"".concat(F,"-head"),style:g},r.createElement("div",{className:"".concat(F,"-head-wrapper")},x&&r.createElement("div",{className:"".concat(F,"-head-title")},x),y&&r.createElement("div",{className:"".concat(F,"-extra")},y)),U));var H=N?r.createElement("div",{className:"".concat(F,"-cover")},N):null,G=r.createElement("div",{className:"".concat(F,"-body"),style:C},P?W:I),q=R&&R.length?r.createElement("ul",{className:"".concat(F,"-actions")},function(e){return e.map(function(t,n){return r.createElement("li",{style:{width:"".concat(100/e.length,"%")},key:"action-".concat(n)},r.createElement("span",null,t))})}(R)):null,X=(0,a.default)(K,["onTabChange","noHovering","hoverable"]);return r.createElement("div",v({},X,{className:V}),l,H,G,q)},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&C(e,t)}(t,r.Component),function(e,t,n){t&&b(e.prototype,t),n&&b(e,n)}(t,[{key:"componentDidMount",value:function(){"noHovering"in this.props&&((0,p.default)(!this.props.noHovering,"Card","`noHovering` is deprecated, you can remove it safely or use `hoverable` instead."),(0,p.default)(!!this.props.noHovering,"Card","`noHovering={false}` is deprecated, use `hoverable` instead."))}},{key:"getCompatibleHoverable",value:function(){var e=this.props,t=e.noHovering,n=e.hoverable;return"noHovering"in this.props?!t||n:!!n}},{key:"isContainGrid",value:function(){var e;return r.Children.forEach(this.props.children,function(t){t&&t.type&&t.type===i.default&&(e=!0)}),e}},{key:"render",value:function(){return r.createElement(f.ConfigConsumer,null,this.renderCard)}}]),t}();t.default=x,x.Grid=i.default,x.Meta=l.default},1275:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=i();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(n(4)),o=function(e){return e&&e.__esModule?e:{default:e}}(n(16)),a=n(25);function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var u=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},c=function(e){return r.createElement(a.ConfigConsumer,null,function(t){var n=t.getPrefixCls,a=e.prefixCls,i=e.className,c=e.hoverable,s=void 0===c||c,f=u(e,["prefixCls","className","hoverable"]),p=n("card",a),d=(0,o.default)("".concat(p,"-grid"),i,function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},"".concat(p,"-grid-hoverable"),s));return r.createElement("div",l({},f,{className:d}))})};t.default=c},1276:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=i();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(n(4)),o=function(e){return e&&e.__esModule?e:{default:e}}(n(16)),a=n(25);function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var u=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},c=function(e){return r.createElement(a.ConfigConsumer,null,function(t){var n=t.getPrefixCls,a=e.prefixCls,i=e.className,c=e.avatar,s=e.title,f=e.description,p=u(e,["prefixCls","className","avatar","title","description"]),d=n("card",a),h=(0,o.default)("".concat(d,"-meta"),i),y=c?r.createElement("div",{className:"".concat(d,"-meta-avatar")},c):null,v=s?r.createElement("div",{className:"".concat(d,"-meta-title")},s):null,m=f?r.createElement("div",{className:"".concat(d,"-meta-description")},f):null,b=v||m?r.createElement("div",{className:"".concat(d,"-meta-detail")},v,m):null;return r.createElement("div",l({},p,{className:h}),y,b)})};t.default=c},1277:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=v(n(4)),o=v(n(51)),a=v(n(1624)),i=h(n(1278)),l=h(n(16)),u=h(n(72)),c=h(n(1279)),s=h(n(44)),f=n(25),p=h(n(87)),d=n(1286);function h(e){return e&&e.__esModule?e:{default:e}}function y(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return y=function(){return e},e}function v(e){if(e&&e.__esModule)return e;var t=y();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}return n.default=e,t&&t.set(e,n),n}function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function w(e){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function x(e,t){return(x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var P=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},S=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=C(this,w(t).apply(this,arguments))).removeTab=function(t,n){if(n.stopPropagation(),t){var r=e.props.onEdit;r&&r(t,"remove")}},e.handleChange=function(t){var n=e.props.onChange;n&&n(t)},e.createNewTab=function(t){var n=e.props.onEdit;n&&n(t,"add")},e.renderTabs=function(t){var n,o=t.getPrefixCls,f=e.props,d=f.prefixCls,h=f.className,y=void 0===h?"":h,v=f.size,O=f.type,C=void 0===O?"line":O,w=f.tabPosition,x=f.children,S=f.animated,E=void 0===S||S,k=f.hideAdd,_=e.props.tabBarExtraContent,j="object"===g(E)?E.tabPane:E;"line"!==C&&(j="animated"in e.props&&j),(0,p.default)(!(C.indexOf("card")>=0&&("small"===v||"large"===v)),"Tabs","`type=card|editable-card` doesn't have small or large size, it's by design.");var N=o("tabs",d),R=(0,l.default)(y,(b(n={},"".concat(N,"-vertical"),"left"===w||"right"===w),b(n,"".concat(N,"-").concat(v),!!v),b(n,"".concat(N,"-card"),C.indexOf("card")>=0),b(n,"".concat(N,"-").concat(C),!0),b(n,"".concat(N,"-no-animation"),!j),n)),T=[];"editable-card"===C&&(T=[],r.Children.forEach(x,function(t,n){if(!r.isValidElement(t))return t;var o=t.props.closable,a=(o=void 0===o||o)?r.createElement(s.default,{type:"close",className:"".concat(N,"-close-x"),onClick:function(n){return e.removeTab(t.key,n)}}):null;T.push(r.cloneElement(t,{tab:r.createElement("div",{className:o?void 0:"".concat(N,"-tab-unclosable")},t.props.tab,a),key:t.key||n}))}),k||(_=r.createElement("span",null,r.createElement(s.default,{type:"plus",className:"".concat(N,"-new-tab"),onClick:e.createNewTab}),_))),_=_?r.createElement("div",{className:"".concat(N,"-extra-content")},_):null;var I=P(e.props,[]),M=(0,l.default)("".concat(N,"-").concat(w,"-content"),C.indexOf("card")>=0&&"".concat(N,"-card-content"));return r.createElement(a.default,m({},e.props,{prefixCls:N,className:R,tabBarPosition:w,renderTabBar:function(){return r.createElement(c.default,m({},(0,u.default)(I,["className"]),{tabBarExtraContent:_}))},renderTabContent:function(){return r.createElement(i.default,{className:M,animated:j,animatedWithMargin:!0})},onChange:e.handleChange}),T.length>0?T:x)},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&x(e,t)}(t,r.Component),function(e,t,n){t&&O(e.prototype,t),n&&O(e,n)}(t,[{key:"componentDidMount",value:function(){var e=o.findDOMNode(this);e&&!d.isFlexSupported&&-1===e.className.indexOf(" no-flex")&&(e.className+=" no-flex")}},{key:"render",value:function(){return r.createElement(f.ConfigConsumer,null,this.renderTabs)}}]),t}();t.default=S,S.TabPane=a.TabPane,S.defaultProps={hideAdd:!1,tabPosition:"top"}},1278:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=d(n(7)),o=d(n(23)),a=d(n(18)),i=d(n(21)),l=d(n(22)),u=d(n(27)),c=d(n(4)),s=d(n(0)),f=d(n(16)),p=n(1102);function d(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(){return(0,a.default)(this,t),(0,l.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,u.default)(t,e),(0,i.default)(t,[{key:"getTabPanes",value:function(){var e=this.props,t=e.activeKey,n=e.children,r=[];return c.default.Children.forEach(n,function(n){if(n){var o=n.key,a=t===o;r.push(c.default.cloneElement(n,{active:a,destroyInactiveTabPane:e.destroyInactiveTabPane,rootPrefixCls:e.prefixCls}))}}),r}},{key:"render",value:function(){var e,t=this.props,n=t.prefixCls,a=t.children,i=t.activeKey,l=t.className,u=t.tabBarPosition,s=t.animated,d=t.animatedWithMargin,h=t.style,y=(0,f.default)((e={},(0,o.default)(e,n+"-content",!0),(0,o.default)(e,s?n+"-content-animated":n+"-content-no-animated",!0),e),l);if(s){var v=(0,p.getActiveIndex)(a,i);if(-1!==v){var m=d?(0,p.getMarginStyle)(v,u):(0,p.getTransformPropValue)((0,p.getTransformByIndex)(v,u));h=(0,r.default)({},h,m)}else h=(0,r.default)({},h,{display:"none"})}return c.default.createElement("div",{className:y,style:h},this.getTabPanes())}}]),t}(c.default.Component);t.default=h,h.propTypes={animated:s.default.bool,animatedWithMargin:s.default.bool,prefixCls:s.default.string,children:s.default.node,activeKey:s.default.string,style:s.default.any,tabBarPosition:s.default.string,className:s.default.string,destroyInactiveTabPane:s.default.bool},h.defaultProps={animated:!0},e.exports=t.default},1279:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=u();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(n(4)),o=l(n(1280)),a=l(n(16)),i=l(n(44));function l(e){return e&&e.__esModule?e:{default:e}}function u(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return u=function(){return e},e}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var v=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),d(this,h(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(t,r.Component),function(e,t,n){t&&p(e.prototype,t),n&&p(e,n)}(t,[{key:"render",value:function(){var e,t,n=this.props,l=n.tabBarStyle,u=n.animated,p=n.renderTabBar,d=n.tabBarExtraContent,h=n.tabPosition,y=n.prefixCls,v=n.className,m=n.size,b=n.type,g="object"===f(u)?u.inkBar:u,O="left"===h||"right"===h,C=O?"up":"left",w=O?"down":"right",x=r.createElement("span",{className:"".concat(y,"-tab-prev-icon")},r.createElement(i.default,{type:C,className:"".concat(y,"-tab-prev-icon-target")})),P=r.createElement("span",{className:"".concat(y,"-tab-next-icon")},r.createElement(i.default,{type:w,className:"".concat(y,"-tab-next-icon-target")})),S=(0,a.default)("".concat(y,"-").concat(h,"-bar"),(s(e={},"".concat(y,"-").concat(m,"-bar"),!!m),s(e,"".concat(y,"-card-bar"),b&&b.indexOf("card")>=0),e),v),E=c(c({},this.props),{children:null,inkBarAnimated:g,extraContent:d,style:l,prevIcon:x,nextIcon:P,className:S});return t=p?p(E,o.default):r.createElement(o.default,E),r.cloneElement(t)}}]),t}();t.default=v,v.defaultProps={animated:!0,type:"line"}},1280:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=v(n(7)),o=v(n(64)),a=v(n(18)),i=v(n(21)),l=v(n(22)),u=v(n(27)),c=v(n(4)),s=v(n(0)),f=v(n(1281)),p=v(n(1282)),d=v(n(1283)),h=v(n(1284)),y=v(n(1285));function v(e){return e&&e.__esModule?e:{default:e}}var m=function(e){function t(){return(0,a.default)(this,t),(0,l.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,u.default)(t,e),(0,i.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=(0,o.default)(e,["children"]);return c.default.createElement(y.default,null,function(e,o){return c.default.createElement(d.default,(0,r.default)({saveRef:e},n),c.default.createElement(h.default,(0,r.default)({saveRef:e,getRef:o},n),c.default.createElement(p.default,(0,r.default)({saveRef:e,renderTabBarNode:t},n)),c.default.createElement(f.default,(0,r.default)({saveRef:e,getRef:o},n))))})}}]),t}(c.default.Component);t.default=m,m.propTypes={children:s.default.func},e.exports=t.default},1281:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=p(n(23)),o=p(n(18)),a=p(n(21)),i=p(n(22)),l=p(n(27)),u=p(n(4)),c=p(n(0)),s=p(n(16)),f=n(1102);function p(e){return e&&e.__esModule?e:{default:e}}function d(e,t){var n=e.props,r=n.styles,o=n.panels,a=n.activeKey,i=e.props.getRef("root"),l=e.props.getRef("nav")||i,u=e.props.getRef("inkBar"),c=e.props.getRef("activeTab"),s=u.style,p=e.props.tabBarPosition,d=(0,f.getActiveIndex)(o,a);if(t&&(s.display="none"),c){var h=c,y=(0,f.isTransform3dSupported)(s);if((0,f.setTransform)(s,""),s.width="",s.height="",s.left="",s.top="",s.bottom="",s.right="","top"===p||"bottom"===p){var v=(0,f.getLeft)(h,l),m=h.offsetWidth;m===i.offsetWidth?m=0:r.inkBar&&void 0!==r.inkBar.width&&(m=parseFloat(r.inkBar.width,10))&&(v+=(h.offsetWidth-m)/2),y?(0,f.setTransform)(s,"translate3d("+v+"px,0,0)"):s.left=v+"px",s.width=m+"px"}else{var b=(0,f.getTop)(h,l,!0),g=h.offsetHeight;r.inkBar&&void 0!==r.inkBar.height&&(g=parseFloat(r.inkBar.height,10))&&(b+=(h.offsetHeight-g)/2),y?((0,f.setTransform)(s,"translate3d(0,"+b+"px,0)"),s.top="0"):s.top=b+"px",s.height=g+"px"}}s.display=-1!==d?"block":"none"}var h=function(e){function t(){return(0,o.default)(this,t),(0,i.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,l.default)(t,e),(0,a.default)(t,[{key:"componentDidMount",value:function(){var e=this;this.timeout=setTimeout(function(){d(e,!0)},0)}},{key:"componentDidUpdate",value:function(){d(this)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeout)}},{key:"render",value:function(){var e,t=this.props,n=t.prefixCls,o=t.styles,a=t.inkBarAnimated,i=n+"-ink-bar",l=(0,s.default)((e={},(0,r.default)(e,i,!0),(0,r.default)(e,a?i+"-animated":i+"-no-animated",!0),e));return u.default.createElement("div",{style:o.inkBar,className:l,key:"inkBar",ref:this.props.saveRef("inkBar")})}}]),t}(u.default.Component);t.default=h,h.propTypes={prefixCls:c.default.string,styles:c.default.object,inkBarAnimated:c.default.bool,saveRef:c.default.func},h.defaultProps={prefixCls:"",inkBarAnimated:!0,styles:{},saveRef:function(){}},e.exports=t.default},1282:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=d(n(7)),o=d(n(23)),a=d(n(18)),i=d(n(21)),l=d(n(22)),u=d(n(27)),c=d(n(4)),s=d(n(14)),f=d(n(0)),p=n(1102);function d(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(){return(0,a.default)(this,t),(0,l.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,u.default)(t,e),(0,i.default)(t,[{key:"render",value:function(){var e=this,t=this.props,n=t.panels,a=t.activeKey,i=t.prefixCls,l=t.tabBarGutter,u=t.saveRef,f=t.tabBarPosition,d=t.renderTabBarNode,h=[];return c.default.Children.forEach(n,function(t,y){if(t){var v=t.key,m=a===v?i+"-tab-active":"";m+=" "+i+"-tab";var b={};t.props.disabled?m+=" "+i+"-tab-disabled":b={onClick:e.props.onTabClick.bind(e,v)};var g={};a===v&&(g.ref=u("activeTab"));var O=l&&y===n.length-1?0:l,C=(0,o.default)({},(0,p.isVertical)(f)?"marginBottom":"marginRight",O);(0,s.default)("tab"in t.props,"There must be `tab` property on children of Tabs.");var w=c.default.createElement("div",(0,r.default)({role:"tab","aria-disabled":t.props.disabled?"true":"false","aria-selected":a===v?"true":"false"},b,{className:m,key:v,style:C},g),t.props.tab);d&&(w=d(w)),h.push(w)}}),c.default.createElement("div",{ref:u("navTabsContainer")},h)}}]),t}(c.default.Component);t.default=h,h.propTypes={activeKey:f.default.string,panels:f.default.node,prefixCls:f.default.string,tabBarGutter:f.default.number,onTabClick:f.default.func,saveRef:f.default.func,renderTabBarNode:f.default.func,tabBarPosition:f.default.string},h.defaultProps={panels:[],prefixCls:[],tabBarGutter:null,onTabClick:function(){},saveRef:function(){}},e.exports=t.default},1283:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=y(n(7)),o=y(n(23)),a=y(n(64)),i=y(n(18)),l=y(n(21)),u=y(n(22)),c=y(n(27)),s=n(4),f=y(s),p=y(n(0)),d=y(n(16)),h=n(1102);function y(e){return e&&e.__esModule?e:{default:e}}var v=function(e){function t(){return(0,i.default)(this,t),(0,u.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,c.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this.props,t=e.prefixCls,n=e.onKeyDown,i=e.className,l=e.extraContent,u=e.style,c=e.tabBarPosition,p=e.children,y=(0,a.default)(e,["prefixCls","onKeyDown","className","extraContent","style","tabBarPosition","children"]),v=(0,d.default)(t+"-bar",(0,o.default)({},i,!!i)),m="top"===c||"bottom"===c,b=m?{float:"right"}:{},g=l&&l.props?l.props.style:{},O=p;return l&&(O=[(0,s.cloneElement)(l,{key:"extra",style:(0,r.default)({},b,g)}),(0,s.cloneElement)(p,{key:"content"})],O=m?O:O.reverse()),f.default.createElement("div",(0,r.default)({role:"tablist",className:v,tabIndex:"0",ref:this.props.saveRef("root"),onKeyDown:n,style:u},(0,h.getDataAttr)(y)),O)}}]),t}(f.default.Component);t.default=v,v.propTypes={prefixCls:p.default.string,className:p.default.string,style:p.default.object,tabBarPosition:p.default.oneOf(["left","right","top","bottom"]),children:p.default.node,extraContent:p.default.node,onKeyDown:p.default.func,saveRef:p.default.func},v.defaultProps={prefixCls:"",className:"",style:{},tabBarPosition:"top",extraContent:null,children:null,onKeyDown:function(){},saveRef:function(){}},e.exports=t.default},1284:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=h(n(23)),o=h(n(18)),a=h(n(21)),i=h(n(22)),l=h(n(27)),u=h(n(4)),c=h(n(0)),s=h(n(16)),f=h(n(596)),p=h(n(587)),d=n(1102);function h(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(e){(0,o.default)(this,t);var n=(0,i.default)(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.prevTransitionEnd=function(e){if("opacity"===e.propertyName){var t=n.props.getRef("container");n.scrollToActiveTab({target:t,currentTarget:t})}},n.scrollToActiveTab=function(e){var t=n.props.getRef("activeTab"),r=n.props.getRef("navWrap");if((!e||e.target===e.currentTarget)&&t){var o=n.isNextPrevShown()&&n.lastNextPrevShown;if(n.lastNextPrevShown=n.isNextPrevShown(),o){var a=n.getScrollWH(t),i=n.getOffsetWH(r),l=n.offset,u=n.getOffsetLT(r),c=n.getOffsetLT(t);u>c?(l+=u-c,n.setOffset(l)):u+i<c+a&&(l-=c+a-(u+i),n.setOffset(l))}}},n.prev=function(e){n.props.onPrevClick(e);var t=n.props.getRef("navWrap"),r=n.getOffsetWH(t),o=n.offset;n.setOffset(o+r)},n.next=function(e){n.props.onNextClick(e);var t=n.props.getRef("navWrap"),r=n.getOffsetWH(t),o=n.offset;n.setOffset(o-r)},n.offset=0,n.state={next:!1,prev:!1},n}return(0,l.default)(t,e),(0,a.default)(t,[{key:"componentDidMount",value:function(){var e=this;this.componentDidUpdate(),this.debouncedResize=(0,f.default)(function(){e.setNextPrev(),e.scrollToActiveTab()},200),this.resizeObserver=new p.default(this.debouncedResize),this.resizeObserver.observe(this.props.getRef("container"))}},{key:"componentDidUpdate",value:function(e){var t=this.props;if(e&&e.tabBarPosition!==t.tabBarPosition)this.setOffset(0);else{var n=this.setNextPrev();this.isNextPrevShown(this.state)!==this.isNextPrevShown(n)?this.setState({},this.scrollToActiveTab):e&&t.activeKey===e.activeKey||this.scrollToActiveTab()}}},{key:"componentWillUnmount",value:function(){this.resizeObserver&&this.resizeObserver.disconnect(),this.debouncedResize&&this.debouncedResize.cancel&&this.debouncedResize.cancel()}},{key:"setNextPrev",value:function(){var e=this.props.getRef("nav"),t=this.props.getRef("navTabsContainer"),n=this.getScrollWH(t||e),r=this.getOffsetWH(this.props.getRef("container"))+1,o=this.getOffsetWH(this.props.getRef("navWrap")),a=this.offset,i=r-n,l=this.state,u=l.next,c=l.prev;if(i>=0)u=!1,this.setOffset(0,!1),a=0;else if(i<a)u=!0;else{u=!1;var s=o-n;this.setOffset(s,!1),a=s}return c=a<0,this.setNext(u),this.setPrev(c),{next:u,prev:c}}},{key:"getOffsetWH",value:function(e){var t=this.props.tabBarPosition,n="offsetWidth";return"left"!==t&&"right"!==t||(n="offsetHeight"),e[n]}},{key:"getScrollWH",value:function(e){var t=this.props.tabBarPosition,n="scrollWidth";return"left"!==t&&"right"!==t||(n="scrollHeight"),e[n]}},{key:"getOffsetLT",value:function(e){var t=this.props.tabBarPosition,n="left";return"left"!==t&&"right"!==t||(n="top"),e.getBoundingClientRect()[n]}},{key:"setOffset",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=Math.min(0,e);if(this.offset!==n){this.offset=n;var r={},o=this.props.tabBarPosition,a=this.props.getRef("nav").style,i=(0,d.isTransform3dSupported)(a);r="left"===o||"right"===o?i?{value:"translate3d(0,"+n+"px,0)"}:{name:"top",value:n+"px"}:i?{value:"translate3d("+n+"px,0,0)"}:{name:"left",value:n+"px"},i?(0,d.setTransform)(a,r.value):a[r.name]=r.value,t&&this.setNextPrev()}}},{key:"setPrev",value:function(e){this.state.prev!==e&&this.setState({prev:e})}},{key:"setNext",value:function(e){this.state.next!==e&&this.setState({next:e})}},{key:"isNextPrevShown",value:function(e){return e?e.next||e.prev:this.state.next||this.state.prev}},{key:"render",value:function(){var e,t,n,o,a=this.state,i=a.next,l=a.prev,c=this.props,f=c.prefixCls,p=c.scrollAnimated,d=c.navWrapper,h=c.prevIcon,y=c.nextIcon,v=l||i,m=u.default.createElement("span",{onClick:l?this.prev:null,unselectable:"unselectable",className:(0,s.default)((e={},(0,r.default)(e,f+"-tab-prev",1),(0,r.default)(e,f+"-tab-btn-disabled",!l),(0,r.default)(e,f+"-tab-arrow-show",v),e)),onTransitionEnd:this.prevTransitionEnd},h||u.default.createElement("span",{className:f+"-tab-prev-icon"})),b=u.default.createElement("span",{onClick:i?this.next:null,unselectable:"unselectable",className:(0,s.default)((t={},(0,r.default)(t,f+"-tab-next",1),(0,r.default)(t,f+"-tab-btn-disabled",!i),(0,r.default)(t,f+"-tab-arrow-show",v),t))},y||u.default.createElement("span",{className:f+"-tab-next-icon"})),g=f+"-nav",O=(0,s.default)((n={},(0,r.default)(n,g,!0),(0,r.default)(n,p?g+"-animated":g+"-no-animated",!0),n));return u.default.createElement("div",{className:(0,s.default)((o={},(0,r.default)(o,f+"-nav-container",1),(0,r.default)(o,f+"-nav-container-scrolling",v),o)),key:"container",ref:this.props.saveRef("container")},m,b,u.default.createElement("div",{className:f+"-nav-wrap",ref:this.props.saveRef("navWrap")},u.default.createElement("div",{className:f+"-nav-scroll"},u.default.createElement("div",{className:O,ref:this.props.saveRef("nav")},d(this.props.children)))))}}]),t}(u.default.Component);t.default=y,y.propTypes={activeKey:c.default.string,getRef:c.default.func.isRequired,saveRef:c.default.func.isRequired,tabBarPosition:c.default.oneOf(["left","right","top","bottom"]),prefixCls:c.default.string,scrollAnimated:c.default.bool,onPrevClick:c.default.func,onNextClick:c.default.func,navWrapper:c.default.func,children:c.default.node,prevIcon:c.default.node,nextIcon:c.default.node},y.defaultProps={tabBarPosition:"left",prefixCls:"",scrollAnimated:!0,onPrevClick:function(){},onNextClick:function(){},navWrapper:function(e){return e}},e.exports=t.default},1285:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(18)),o=c(n(21)),a=c(n(22)),i=c(n(27)),l=c(n(4)),u=c(n(0));function c(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){var e,n,o,i;(0,r.default)(this,t);for(var l=arguments.length,u=Array(l),c=0;c<l;c++)u[c]=arguments[c];return n=o=(0,a.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),o.getRef=function(e){return o[e]},o.saveRef=function(e){return function(t){t&&(o[e]=t)}},i=n,(0,a.default)(o,i)}return(0,i.default)(t,e),(0,o.default)(t,[{key:"render",value:function(){return this.props.children(this.saveRef,this.getRef)}}]),t}(l.default.Component);t.default=s,s.propTypes={children:u.default.func},s.defaultProps={children:function(){return null}},e.exports=t.default},1286:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.isFlexSupported=void 0;var r=function(e){if("undefined"!=typeof window&&window.document&&window.document.documentElement){var t=Array.isArray(e)?e:[e],n=window.document.documentElement;return t.some(function(e){return e in n.style})}return!1},o=r(["flex","webkitFlex","Flex","msFlex"]);t.isFlexSupported=o;var a=r;t.default=a},1290:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=p();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(n(4)),o=n(114),a=f(n(1165)),i=f(n(44)),l=f(n(115)),u=f(n(155)),c=f(n(222)),s=n(25);function f(e){return e&&e.__esModule?e:{default:e}}function p(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return p=function(){return e},e}function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function b(e,t){return(b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var g=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},O=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?m(e):t}(this,v(t).call(this,e))).onConfirm=function(e){n.setVisible(!1,e);var t=n.props.onConfirm;t&&t.call(m(n),e)},n.onCancel=function(e){n.setVisible(!1,e);var t=n.props.onCancel;t&&t.call(m(n),e)},n.onVisibleChange=function(e){n.props.disabled||n.setVisible(e)},n.saveTooltip=function(e){n.tooltip=e},n.renderOverlay=function(e,t){var o=n.props,a=o.okButtonProps,i=o.cancelButtonProps,u=o.title,c=o.cancelText,s=o.okText,f=o.okType,p=o.icon;return r.createElement("div",null,r.createElement("div",{className:"".concat(e,"-inner-content")},r.createElement("div",{className:"".concat(e,"-message")},p,r.createElement("div",{className:"".concat(e,"-message-title")},u)),r.createElement("div",{className:"".concat(e,"-buttons")},r.createElement(l.default,h({onClick:n.onCancel,size:"small"},i),c||t.cancelText),r.createElement(l.default,h({onClick:n.onConfirm,type:f,size:"small"},a),s||t.okText))))},n.renderConfirm=function(e){var t=e.getPrefixCls,o=n.props,i=o.prefixCls,l=o.placement,s=g(o,["prefixCls","placement"]),f=t("popover",i),p=r.createElement(u.default,{componentName:"Popconfirm",defaultLocale:c.default.Popconfirm},function(e){return n.renderOverlay(f,e)});return r.createElement(a.default,h({},s,{prefixCls:f,placement:l,onVisibleChange:n.onVisibleChange,visible:n.state.visible,overlay:p,ref:n.saveTooltip}))},n.state={visible:e.visible},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}(t,r.Component),function(e,t,n){t&&y(e.prototype,t),n&&y(e,n)}(t,[{key:"getPopupDomNode",value:function(){return this.tooltip.getPopupDomNode()}},{key:"setVisible",value:function(e,t){var n=this.props;"visible"in n||this.setState({visible:e});var r=n.onVisibleChange;r&&r(e,t)}},{key:"render",value:function(){return r.createElement(s.ConfigConsumer,null,this.renderConfirm)}}],[{key:"getDerivedStateFromProps",value:function(e){return"visible"in e?{visible:e.visible}:"defaultVisible"in e?{visible:e.defaultVisible}:null}}]),t}();O.defaultProps={transitionName:"zoom-big",placement:"top",trigger:"click",okType:"primary",icon:r.createElement(i.default,{type:"exclamation-circle",theme:"filled"}),disabled:!1},(0,o.polyfill)(O);var C=O;t.default=C},1291:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){if(e&&e.__esModule)return e;var t=i();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=r?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(n(4)),o=function(e){return e&&e.__esModule?e:{default:e}}(n(16)),a=n(25);function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},s=function(e){return r.createElement(a.ConfigConsumer,null,function(t){var n,a=t.getPrefixCls,i=e.prefixCls,s=e.type,f=void 0===s?"horizontal":s,p=e.orientation,d=void 0===p?"center":p,h=e.className,y=e.children,v=e.dashed,m=c(e,["prefixCls","type","orientation","className","children","dashed"]),b=a("divider",i),g=d.length>0?"-".concat(d):d,O=(0,o.default)(h,b,"".concat(b,"-").concat(f),(u(n={},"".concat(b,"-with-text").concat(g),y),u(n,"".concat(b,"-dashed"),!!v),n));return r.createElement("div",l({className:O},m,{role:"separator"}),y&&r.createElement("span",{className:"".concat(b,"-inner-text")},y))})};t.default=s},1292:function(e,t,n){"use strict";n(57),n(1069),n(1169),n(1293),n(1294),n(1170),n(224),n(1295)},1293:function(e,t,n){"use strict";n(57),n(1071)},1294:function(e,t,n){"use strict";n(57),n(1072)},1295:function(e,t,n){"use strict";n(57),n(1074),n(1296)},1296:function(e,t,n){"use strict";n(57),n(1075),n(1169)},1297:function(e,t,n){"use strict";n(57),n(1076),n(1298),n(1113),n(1114)},1298:function(e,t,n){"use strict";n(57),n(1077)},1300:function(e,t,n){"use strict";n(57),n(1301),n(116)},1301:function(e,t,n){"use strict";n(57),n(1081)},1302:function(e,t,n){"use strict";n(57),n(1082)},1621:function(e,t,n){"use strict";n.r(t);var r=n(7),o=n.n(r),a=n(18),i=n.n(a),l=n(21),u=n.n(l),c=n(22),s=n.n(c),f=n(27),p=n.n(f),d=n(4),h=n.n(d),y=n(0),v=n.n(y),m=n(1086),b=n.n(m),g=n(1121),O=n(1087),C=n(1207),w=n.n(C),x=n(229),P=n.n(x),S=n(114),E=n(1247),k=n.n(E),_=void 0,j=void 0,N={position:"absolute",top:"-9999px",width:"50px",height:"50px"},R="RC_TABLE_INTERNAL_COL_DEFINE";function T(e){var t=e.direction,n=void 0===t?"vertical":t,r=e.prefixCls;if("undefined"==typeof document||"undefined"==typeof window)return 0;var o="vertical"===n;if(o&&_)return _;if(!o&&j)return j;var a=document.createElement("div");Object.keys(N).forEach(function(e){a.style[e]=N[e]}),a.className=r+"-hide-scrollbar scroll-div-append-to-body",o?a.style.overflowY="scroll":a.style.overflowX="scroll",document.body.appendChild(a);var i=0;return o?(i=a.offsetWidth-a.clientWidth,_=i):(i=a.offsetHeight-a.clientHeight,j=i),document.body.removeChild(a),i}var I={};function M(e,t,n){I[t]||(k()(e,t,n),I[t]=!e)}var D=n(158),A=n.n(D),K=function(){function e(t,n){i()(this,e),this._cached={},this.columns=t||this.normalize(n)}return u()(e,[{key:"isAnyColumnsFixed",value:function(){var e=this;return this._cache("isAnyColumnsFixed",function(){return e.columns.some(function(e){return!!e.fixed})})}},{key:"isAnyColumnsLeftFixed",value:function(){var e=this;return this._cache("isAnyColumnsLeftFixed",function(){return e.columns.some(function(e){return"left"===e.fixed||!0===e.fixed})})}},{key:"isAnyColumnsRightFixed",value:function(){var e=this;return this._cache("isAnyColumnsRightFixed",function(){return e.columns.some(function(e){return"right"===e.fixed})})}},{key:"leftColumns",value:function(){var e=this;return this._cache("leftColumns",function(){return e.groupedColumns().filter(function(e){return"left"===e.fixed||!0===e.fixed})})}},{key:"rightColumns",value:function(){var e=this;return this._cache("rightColumns",function(){return e.groupedColumns().filter(function(e){return"right"===e.fixed})})}},{key:"leafColumns",value:function(){var e=this;return this._cache("leafColumns",function(){return e._leafColumns(e.columns)})}},{key:"leftLeafColumns",value:function(){var e=this;return this._cache("leftLeafColumns",function(){return e._leafColumns(e.leftColumns())})}},{key:"rightLeafColumns",value:function(){var e=this;return this._cache("rightLeafColumns",function(){return e._leafColumns(e.rightColumns())})}},{key:"groupedColumns",value:function(){var e=this;return this._cache("groupedColumns",function(){return function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];a[n]=a[n]||[];var i=[],l=function(e){var t=a.length-n;e&&!e.children&&t>1&&(!e.rowSpan||e.rowSpan<t)&&(e.rowSpan=t)};return t.forEach(function(u,c){var s=o()({},u);a[n].push(s),r.colSpan=r.colSpan||0,s.children&&s.children.length>0?(s.children=e(s.children,n+1,s,a),r.colSpan+=s.colSpan):r.colSpan++;for(var f=0;f<a[n].length-1;++f)l(a[n][f]);c+1===t.length&&l(s),i.push(s)}),i}(e.columns)})}},{key:"normalize",value:function(e){var t=this,n=[];return h.a.Children.forEach(e,function(e){if(h.a.isValidElement(e)){var r=o()({},e.props);e.key&&(r.key=e.key),e.type.isTableColumnGroup&&(r.children=t.normalize(r.children)),n.push(r)}}),n}},{key:"reset",value:function(e,t){this.columns=e||this.normalize(t),this._cached={}}},{key:"_cache",value:function(e,t){return e in this._cached?this._cached[e]:(this._cached[e]=t(),this._cached[e])}},{key:"_leafColumns",value:function(e){var t=this,n=[];return e.forEach(function(e){e.children?n.push.apply(n,A()(t._leafColumns(e.children))):n.push(e)}),n}}]),e}(),F=n(23),V=n.n(F),B=n(16),W=n.n(B);function L(e,t){var n=t.table,r=n.props,a=r.prefixCls,i=r.expandIconAsCell,l=e.fixed,u=[];i&&"right"!==l&&u.push(h.a.createElement("col",{className:a+"-expand-icon-col",key:"rc-table-expand-icon-col"}));var c=void 0;return c="left"===l?n.columnManager.leftLeafColumns():"right"===l?n.columnManager.rightLeafColumns():n.columnManager.leafColumns(),u=u.concat(c.map(function(e){var t=e.key,n=e.dataIndex,r=e.width,a=e[R],i=void 0!==t?t:n;return h.a.createElement("col",o()({key:i,style:{width:r,minWidth:r}},a))})),h.a.createElement("colgroup",null,u)}L.propTypes={fixed:v.a.string},L.contextTypes={table:v.a.any};var z=n(64),U=n.n(z);function H(e){var t=e.row,n=e.index,r=e.height,a=e.components,i=e.onHeaderRow,l=e.prefixCls,u=a.header.row,c=a.header.cell,s=i(t.map(function(e){return e.column}),n),f=s?s.style:{},p=o()({height:r},f);return h.a.createElement(u,o()({},s,{style:p}),t.map(function(e,t){var n=e.column,r=U()(e,["column"]),a=n.onHeaderCell?n.onHeaderCell(n):{};return n.align&&(a.style=o()({},a.style,{textAlign:n.align}),a.className=W()(a.className,n.className,V()({},l+"-align-"+n.align,!!n.align))),h.a.createElement(c,o()({},r,a,{key:n.key||n.dataIndex||t}))}))}H.propTypes={row:v.a.array,index:v.a.number,height:v.a.oneOfType([v.a.string,v.a.number]),components:v.a.any,onHeaderRow:v.a.func,prefixCls:v.a.string};var G=Object(O.connect)(function(e,t){return{height:function(e,t){var n=e.fixedColumnsHeadRowsHeight,r=t.columns,o=t.rows,a=t.fixed,i=n[0];return a&&i&&r?"auto"===i?"auto":i/o.length:null}(e,t)}})(H);function q(e,t){var n=t.table,r=n.components,o=n.props,a=o.prefixCls,i=o.showHeader,l=o.onHeaderRow,u=e.expander,c=e.columns,s=e.fixed;if(!i)return null;var f=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments[2];return(r=r||[])[n]=r[n]||[],t.forEach(function(t){if(t.rowSpan&&r.length<t.rowSpan)for(;r.length<t.rowSpan;)r.push([]);var o={key:t.key,className:t.className||"",children:t.title,column:t};t.children&&e(t.children,n+1,r),"colSpan"in t&&(o.colSpan=t.colSpan),"rowSpan"in t&&(o.rowSpan=t.rowSpan),0!==o.colSpan&&r[n].push(o)}),r.filter(function(e){return e.length>0})}(c);u.renderExpandIndentCell(f,s);var p=r.header.wrapper;return h.a.createElement(p,{className:a+"-thead"},f.map(function(e,t){return h.a.createElement(G,{prefixCls:a,key:t,index:t,fixed:s,columns:c,rows:f,row:e,components:r,onHeaderRow:l})}))}q.propTypes={fixed:v.a.string,columns:v.a.array.isRequired,expander:v.a.object.isRequired,onHeaderRow:v.a.func},q.contextTypes={table:v.a.any};var X=n(51),J=n.n(X),Y=n(600),Q=n.n(Y);function Z(e){return e&&!h.a.isValidElement(e)&&"[object Object]"===Object.prototype.toString.call(e)}var $=function(e){function t(){var e,n,r,o;i()(this,t);for(var a=arguments.length,l=Array(a),u=0;u<a;u++)l[u]=arguments[u];return n=r=s()(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(l))),r.handleClick=function(e){var t=r.props,n=t.record,o=t.column.onCellClick;o&&o(n,e)},o=n,s()(r,o)}return p()(t,e),u()(t,[{key:"render",value:function(){var e=this.props,t=e.record,n=e.indentSize,r=e.prefixCls,a=e.indent,i=e.index,l=e.expandIcon,u=e.column,c=e.component,s=u.dataIndex,f=u.render,p=u.className,d=void 0===p?"":p,y=void 0;y="number"==typeof s?Q()(t,s):s&&0!==s.length?Q()(t,s):t;var v={},m=void 0,b=void 0;f&&Z(y=f(y,t,i))&&(m=(v=y.props||v).colSpan,b=v.rowSpan,y=y.children),u.onCell&&(v=o()({},v,u.onCell(t,i))),Z(y)&&(y=null);var g=l?h.a.createElement("span",{style:{paddingLeft:n*a+"px"},className:r+"-indent indent-level-"+a}):null;return 0===b||0===m?null:(u.align&&(v.style=o()({},v.style,{textAlign:u.align})),h.a.createElement(c,o()({className:d,onClick:this.handleClick},v),g,l,y))}}]),t}(h.a.Component);$.propTypes={record:v.a.object,prefixCls:v.a.string,index:v.a.number,indent:v.a.number,indentSize:v.a.number,column:v.a.object,expandIcon:v.a.node,component:v.a.any};var ee=$,te=function(e){function t(e){i()(this,t);var n=s()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onTriggerEvent=function(e,t,r){var o=n.props,a=o.record,i=o.index;return function(){for(var n=arguments.length,o=Array(n),l=0;l<n;l++)o[l]=arguments[l];r&&r();var u=o[0];t&&t(a,i,u),e&&e.apply(void 0,o)}},n.onMouseEnter=function(){var e=n.props;(0,e.onHover)(!0,e.rowKey)},n.onMouseLeave=function(){var e=n.props;(0,e.onHover)(!1,e.rowKey)},n.shouldRender=e.visible,n.state={},n}return p()(t,e),u()(t,[{key:"componentDidMount",value:function(){this.state.shouldRender&&this.saveRowRef()}},{key:"shouldComponentUpdate",value:function(e){return!(!this.props.visible&&!e.visible)}},{key:"componentDidUpdate",value:function(){this.state.shouldRender&&!this.rowRef&&this.saveRowRef()}},{key:"setExpandedRowHeight",value:function(){var e=this.props,t=e.store,n=e.rowKey,r=t.getState().expandedRowsHeight,a=this.rowRef.getBoundingClientRect().height;r=o()({},r,V()({},n,a)),t.setState({expandedRowsHeight:r})}},{key:"setRowHeight",value:function(){var e=this.props,t=e.store,n=e.rowKey,r=t.getState().fixedColumnsBodyRowsHeight,a=this.rowRef.getBoundingClientRect().height;t.setState({fixedColumnsBodyRowsHeight:o()({},r,V()({},n,a))})}},{key:"getStyle",value:function(){var e=this.props,t=e.height,n=e.visible;return t&&t!==this.style.height&&(this.style=o()({},this.style,{height:t})),n||this.style.display||(this.style=o()({},this.style,{display:"none"})),this.style}},{key:"saveRowRef",value:function(){this.rowRef=J.a.findDOMNode(this);var e=this.props,t=e.isAnyColumnsFixed,n=e.fixed,r=e.expandedRow,o=e.ancestorKeys;t&&(!n&&r&&this.setExpandedRowHeight(),!n&&o.length>=0&&this.setRowHeight())}},{key:"render",value:function(){if(!this.state.shouldRender)return null;var e=this.props,t=e.prefixCls,n=e.columns,r=e.record,a=e.rowKey,i=e.index,l=e.onRow,u=e.indent,c=e.indentSize,s=e.hovered,f=e.height,p=e.visible,d=e.components,y=e.hasExpandIcon,v=e.renderExpandIcon,m=e.renderExpandIconCell,b=e.onRowClick,g=e.onRowDoubleClick,O=e.onRowMouseEnter,C=e.onRowMouseLeave,w=e.onRowContextMenu,x=d.body.row,P=d.body.cell,S=this.props.className;s&&(S+=" "+t+"-hover");var E=[];m(E);for(var k=0;k<n.length;k++){var _=n[k];M(void 0===_.onCellClick,"column[onCellClick] is deprecated, please use column[onCell] instead."),E.push(h.a.createElement(ee,{prefixCls:t,record:r,indentSize:c,indent:u,index:i,column:_,key:_.key||_.dataIndex,expandIcon:y(k)&&v(),component:P}))}var j=l(r,i)||{},N=j.className,R=j.style,T=U()(j,["className","style"]),I={height:f};p||(I.display="none"),I=o()({},I,R);var D=W()(t,S,t+"-level-"+u,N);return h.a.createElement(x,o()({},T,{onClick:this.onTriggerEvent(T.onClick,b),onDoubleClick:this.onTriggerEvent(T.onDoubleClick,g),onMouseEnter:this.onTriggerEvent(T.onMouseEnter,O,this.onMouseEnter),onMouseLeave:this.onTriggerEvent(T.onMouseLeave,C,this.onMouseLeave),onContextMenu:this.onTriggerEvent(T.onContextMenu,w),className:D,style:I,"data-row-key":a}),E)}}],[{key:"getDerivedStateFromProps",value:function(e,t){return t.visible||!t.visible&&e.visible?{shouldRender:!0,visible:e.visible}:{visible:e.visible}}}]),t}(h.a.Component);te.propTypes={onRow:v.a.func,onRowClick:v.a.func,onRowDoubleClick:v.a.func,onRowContextMenu:v.a.func,onRowMouseEnter:v.a.func,onRowMouseLeave:v.a.func,record:v.a.object,prefixCls:v.a.string,onHover:v.a.func,columns:v.a.array,height:v.a.oneOfType([v.a.string,v.a.number]),index:v.a.number,rowKey:v.a.oneOfType([v.a.string,v.a.number]).isRequired,className:v.a.string,indent:v.a.number,indentSize:v.a.number,hasExpandIcon:v.a.func,hovered:v.a.bool.isRequired,visible:v.a.bool.isRequired,store:v.a.object.isRequired,fixed:v.a.oneOfType([v.a.string,v.a.bool]),renderExpandIcon:v.a.func,renderExpandIconCell:v.a.func,components:v.a.any,expandedRow:v.a.bool,isAnyColumnsFixed:v.a.bool,ancestorKeys:v.a.array.isRequired},te.defaultProps={onRow:function(){},onHover:function(){},hasExpandIcon:function(){},renderExpandIcon:function(){},renderExpandIconCell:function(){}},Object(S.polyfill)(te);var ne=Object(O.connect)(function(e,t){var n=e.currentHoverKey,r=e.expandedRowKeys,o=t.rowKey,a=t.ancestorKeys;return{visible:0===a.length||a.every(function(e){return~r.indexOf(e)}),hovered:n===o,height:function(e,t){var n=e.expandedRowsHeight,r=e.fixedColumnsBodyRowsHeight,o=t.fixed,a=t.rowKey;return o?n[a]?n[a]:r[a]?r[a]:null:null}(e,t)}})(te),re=function(e){function t(){return i()(this,t),s()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return p()(t,e),u()(t,[{key:"shouldComponentUpdate",value:function(e){return!b()(e,this.props)}},{key:"render",value:function(){var e=this.props,t=e.expandable,n=e.prefixCls,r=e.onExpand,o=e.needIndentSpaced,a=e.expanded,i=e.record;if(t){var l=a?"expanded":"collapsed";return h.a.createElement("span",{className:n+"-expand-icon "+n+"-"+l,onClick:function(e){return r(i,e)}})}return o?h.a.createElement("span",{className:n+"-expand-icon "+n+"-spaced"}):null}}]),t}(h.a.Component);re.propTypes={record:v.a.object,prefixCls:v.a.string,expandable:v.a.any,expanded:v.a.bool,needIndentSpaced:v.a.bool,onExpand:v.a.func};var oe=re,ae=function(e){function t(){var e,n,r,o;i()(this,t);for(var a=arguments.length,l=Array(a),u=0;u<a;u++)l[u]=arguments[u];return n=r=s()(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(l))),r.hasExpandIcon=function(e){var t=r.props,n=t.expandRowByClick,o=t.expandIcon;return!r.expandIconAsCell&&e===r.expandIconColumnIndex&&(!!o||!n)},r.handleExpandChange=function(e,t){var n=r.props,o=n.onExpandedChange,a=n.expanded,i=n.rowKey;r.expandable&&o(!a,e,t,i)},r.handleRowClick=function(e,t,n){var o=r.props,a=o.expandRowByClick,i=o.onRowClick;a&&r.handleExpandChange(e,n),i&&i(e,t,n)},r.renderExpandIcon=function(){var e=r.props,t=e.prefixCls,n=e.expanded,o=e.record,a=e.needIndentSpaced,i=e.expandIcon;return i?i({prefixCls:t,expanded:n,record:o,needIndentSpaced:a,expandable:r.expandable,onExpand:r.handleExpandChange}):h.a.createElement(oe,{expandable:r.expandable,prefixCls:t,onExpand:r.handleExpandChange,needIndentSpaced:a,expanded:n,record:o})},r.renderExpandIconCell=function(e){if(r.expandIconAsCell){var t=r.props.prefixCls;e.push(h.a.createElement("td",{className:t+"-expand-icon-cell",key:"rc-table-expand-icon-cell"},r.renderExpandIcon()))}},o=n,s()(r,o)}return p()(t,e),u()(t,[{key:"componentWillUnmount",value:function(){this.handleDestroy()}},{key:"handleDestroy",value:function(){var e=this.props,t=e.onExpandedChange,n=e.rowKey,r=e.record;this.expandable&&t(!1,r,null,n,!0)}},{key:"render",value:function(){var e=this.props,t=e.childrenColumnName,n=e.expandedRowRender,r=e.indentSize,o=e.record,a=e.fixed,i=e.expanded;this.expandIconAsCell="right"!==a&&this.props.expandIconAsCell,this.expandIconColumnIndex="right"!==a?this.props.expandIconColumnIndex:-1;var l=o[t];this.expandable=!(!l&&!n);var u={indentSize:r,expanded:i,onRowClick:this.handleRowClick,hasExpandIcon:this.hasExpandIcon,renderExpandIcon:this.renderExpandIcon,renderExpandIconCell:this.renderExpandIconCell};return this.props.children(u)}}]),t}(h.a.Component);ae.propTypes={prefixCls:v.a.string.isRequired,rowKey:v.a.oneOfType([v.a.string,v.a.number]).isRequired,fixed:v.a.oneOfType([v.a.string,v.a.bool]),record:v.a.oneOfType([v.a.object,v.a.array]).isRequired,indentSize:v.a.number,needIndentSpaced:v.a.bool.isRequired,expandRowByClick:v.a.bool,expanded:v.a.bool.isRequired,expandIconAsCell:v.a.bool,expandIconColumnIndex:v.a.number,childrenColumnName:v.a.string,expandedRowRender:v.a.func,expandIcon:v.a.func,onExpandedChange:v.a.func.isRequired,onRowClick:v.a.func,children:v.a.func.isRequired};var ie=Object(O.connect)(function(e,t){var n=e.expandedRowKeys,r=t.rowKey;return{expanded:!!~n.indexOf(r)}})(ae),le=function(e){function t(){var e,n,r,a;i()(this,t);for(var l=arguments.length,u=Array(l),c=0;c<l;c++)u[c]=arguments[c];return n=r=s()(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),r.handleRowHover=function(e,t){r.props.store.setState({currentHoverKey:e?t:null})},r.renderRows=function(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],a=r.context.table,i=a.columnManager,l=a.components,u=a.props,c=u.prefixCls,s=u.childrenColumnName,f=u.rowClassName,p=u.rowRef,d=u.onRowClick,y=u.onRowDoubleClick,v=u.onRowContextMenu,m=u.onRowMouseEnter,b=u.onRowMouseLeave,g=u.onRow,O=r.props,C=O.getRowKey,w=O.fixed,x=O.expander,P=O.isAnyColumnsFixed,S=[],E=function(a){var u=e[a],O=C(u,a),E="string"==typeof f?f:f(u,a,t),k={};i.isAnyColumnsFixed()&&(k.onHover=r.handleRowHover);var _=void 0;_="left"===w?i.leftLeafColumns():"right"===w?i.rightLeafColumns():r.getColumns(i.leafColumns());var j=c+"-row",N=h.a.createElement(ie,o()({},x.props,{fixed:w,index:a,prefixCls:j,record:u,key:O,rowKey:O,onRowClick:d,needIndentSpaced:x.needIndentSpaced,onExpandedChange:x.handleExpandChange}),function(e){return h.a.createElement(ne,o()({fixed:w,indent:t,className:E,record:u,index:a,prefixCls:j,childrenColumnName:s,columns:_,onRow:g,onRowDoubleClick:y,onRowContextMenu:v,onRowMouseEnter:m,onRowMouseLeave:b},k,{rowKey:O,ancestorKeys:n,ref:p(u,a,t),components:l,isAnyColumnsFixed:P},e))});S.push(N),x.renderRows(r.renderRows,S,u,a,t,w,O,n)},k=0;k<e.length;k++)E(k);return S},a=n,s()(r,a)}return p()(t,e),u()(t,[{key:"getColumns",value:function(e){var t=this.props,n=t.columns,r=void 0===n?[]:n,a=t.fixed,i=this.context.table.props.prefixCls;return(e||r).map(function(e){return o()({},e,{className:e.fixed&&!a?W()(i+"-fixed-columns-in-body",e.className):e.className})})}},{key:"render",value:function(){var e=this.context.table,t=e.components,n=e.props,r=n.prefixCls,o=n.scroll,a=n.data,i=n.getBodyWrapper,l=this.props,u=l.expander,c=l.tableClassName,s=l.hasHead,f=l.hasBody,p=l.fixed,d={};!p&&o.x&&(!0===o.x?d.tableLayout="fixed":d.width=o.x);var y=f?t.table:"table",v=t.body.wrapper,m=void 0;f&&(m=h.a.createElement(v,{className:r+"-tbody"},this.renderRows(a,0)),i&&(m=i(m)));var b=this.getColumns();return h.a.createElement(y,{className:c,style:d,key:"table"},h.a.createElement(L,{columns:b,fixed:p}),s&&h.a.createElement(q,{expander:u,columns:b,fixed:p}),m)}}]),t}(h.a.Component);le.propTypes={fixed:v.a.oneOfType([v.a.string,v.a.bool]),columns:v.a.array.isRequired,tableClassName:v.a.string.isRequired,hasHead:v.a.bool.isRequired,hasBody:v.a.bool.isRequired,store:v.a.object.isRequired,expander:v.a.object.isRequired,getRowKey:v.a.func,isAnyColumnsFixed:v.a.bool},le.contextTypes={table:v.a.any};var ue=Object(O.connect)()(le);function ce(e,t){var n=t.table,r=n.props,o=r.prefixCls,a=r.scroll,i=r.showHeader,l=e.columns,u=e.fixed,c=e.tableClassName,s=e.handleBodyScrollLeft,f=e.expander,p=n.saveRef,d=n.props.useFixedHeader,y={},v=T({direction:"vertical"});if(a.y){d=!0;var m=T({direction:"horizontal",prefixCls:o});m>0&&!u&&(y.marginBottom="-"+m+"px",y.paddingBottom="0px",y.overflowX="scroll",y.overflowY=0===v?"hidden":"scroll")}return d&&i?h.a.createElement("div",{key:"headTable",ref:u?null:p("headTable"),className:W()(o+"-header",V()({},o+"-hide-scrollbar",v>0)),style:y,onScroll:s},h.a.createElement(ue,{tableClassName:c,hasHead:!0,hasBody:!1,fixed:u,columns:l,expander:f})):null}function se(e,t){var n=t.table,r=n.props,a=r.prefixCls,i=r.scroll,l=e.columns,u=e.fixed,c=e.tableClassName,s=e.getRowKey,f=e.handleBodyScroll,p=e.handleWheel,d=e.expander,y=e.isAnyColumnsFixed,v=n.saveRef,m=n.props.useFixedHeader,b=o()({},n.props.bodyStyle),g={};if((i.x||u)&&(b.overflowX=b.overflowX||"scroll",b.WebkitTransform="translate3d (0, 0, 0)"),i.y){u?(g.maxHeight=b.maxHeight||i.y,g.overflowY=b.overflowY||"scroll"):b.maxHeight=b.maxHeight||i.y,b.overflowY=b.overflowY||"scroll",m=!0;var O=T({direction:"vertical"});O>0&&u&&(b.marginBottom="-"+O+"px",b.paddingBottom="0px")}var C=h.a.createElement(ue,{tableClassName:c,hasHead:!m,hasBody:!0,fixed:u,columns:l,expander:d,getRowKey:s,isAnyColumnsFixed:y});if(u&&l.length){var w=void 0;return"left"===l[0].fixed||!0===l[0].fixed?w="fixedColumnsBodyLeft":"right"===l[0].fixed&&(w="fixedColumnsBodyRight"),delete b.overflowX,delete b.overflowY,h.a.createElement("div",{key:"bodyTable",className:a+"-body-outer",style:o()({},b)},h.a.createElement("div",{className:a+"-body-inner",style:g,ref:v(w),onWheel:p,onScroll:f},C))}var x=i&&(i.x||i.y);return h.a.createElement("div",{tabIndex:x?-1:void 0,key:"bodyTable",className:a+"-body",style:b,ref:v("bodyTable"),onWheel:p,onScroll:f},C)}ce.propTypes={fixed:v.a.oneOfType([v.a.string,v.a.bool]),columns:v.a.array.isRequired,tableClassName:v.a.string.isRequired,handleBodyScrollLeft:v.a.func.isRequired,expander:v.a.object.isRequired},ce.contextTypes={table:v.a.any},se.propTypes={fixed:v.a.oneOfType([v.a.string,v.a.bool]),columns:v.a.array.isRequired,tableClassName:v.a.string.isRequired,handleWheel:v.a.func.isRequired,handleBodyScroll:v.a.func.isRequired,getRowKey:v.a.func.isRequired,expander:v.a.object.isRequired,isAnyColumnsFixed:v.a.bool},se.contextTypes={table:v.a.any};var fe=function(e){function t(e){i()(this,t);var n=s()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));pe.call(n);var r=e.data,o=e.childrenColumnName,a=e.defaultExpandAllRows,l=e.expandedRowKeys,u=e.defaultExpandedRowKeys,c=e.getRowKey,f=[],p=[].concat(A()(r));if(a)for(var d=0;d<p.length;d++){var h=p[d];f.push(c(h,d)),p=p.concat(h[o]||[])}else f=l||u;return n.columnManager=e.columnManager,n.store=e.store,n.store.setState({expandedRowsHeight:{},expandedRowKeys:f}),n}return p()(t,e),u()(t,[{key:"componentDidMount",value:function(){this.handleUpdated()}},{key:"componentDidUpdate",value:function(){"expandedRowKeys"in this.props&&this.store.setState({expandedRowKeys:this.props.expandedRowKeys}),this.handleUpdated()}},{key:"handleUpdated",value:function(){this.latestExpandedRows=null}},{key:"renderExpandedRow",value:function(e,t,n,r,o,a,i){var l=this,u=this.props,c=u.prefixCls,s=u.expandIconAsCell,f=u.indentSize,p=o[o.length-1],d=p+"-extra-row",y=void 0;y="left"===i?this.columnManager.leftLeafColumns().length:"right"===i?this.columnManager.rightLeafColumns().length:this.columnManager.leafColumns().length;var v=[{key:"extra-row",render:function(){var r=!!~l.store.getState().expandedRowKeys.indexOf(p);return{props:{colSpan:y},children:"right"!==i?n(e,t,a,r):"&nbsp;"}}}];return s&&"right"!==i&&v.unshift({key:"expand-icon-placeholder",render:function(){return null}}),h.a.createElement(ne,{key:d,columns:v,className:r,rowKey:d,ancestorKeys:o,prefixCls:c+"-expanded-row",indentSize:f,indent:a,fixed:i,components:{body:{row:"tr",cell:"td"}},expandedRow:!0})}},{key:"render",value:function(){var e=this.props,t=e.data,n=e.childrenColumnName,r=e.children,o=t.some(function(e){return e[n]});return r({props:this.props,needIndentSpaced:o,renderRows:this.renderRows,handleExpandChange:this.handleExpandChange,renderExpandIndentCell:this.renderExpandIndentCell})}}]),t}(h.a.Component);fe.propTypes={expandIconAsCell:v.a.bool,expandedRowKeys:v.a.array,expandedRowClassName:v.a.func,defaultExpandAllRows:v.a.bool,defaultExpandedRowKeys:v.a.array,expandIconColumnIndex:v.a.number,expandedRowRender:v.a.func,expandIcon:v.a.func,childrenColumnName:v.a.string,indentSize:v.a.number,onExpand:v.a.func,onExpandedRowsChange:v.a.func,columnManager:v.a.object.isRequired,store:v.a.object.isRequired,prefixCls:v.a.string.isRequired,data:v.a.array,children:v.a.func.isRequired,getRowKey:v.a.func.isRequired},fe.defaultProps={expandIconAsCell:!1,expandedRowClassName:function(){return""},expandIconColumnIndex:0,defaultExpandAllRows:!1,defaultExpandedRowKeys:[],childrenColumnName:"children",indentSize:15,onExpand:function(){},onExpandedRowsChange:function(){}};var pe=function(){var e=this;this.handleExpandChange=function(t,n,r,o){var a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];r&&r.stopPropagation();var i=e.props,l=i.onExpandedRowsChange,u=i.onExpand,c=e.store.getState().expandedRowKeys;t?c=[].concat(A()(c),[o]):-1!==c.indexOf(o)&&(c=function(e,t){var n=e.indexOf(t),r=e.slice(0,n),o=e.slice(n+1,e.length);return r.concat(o)}(c,o));e.props.expandedRowKeys||e.store.setState({expandedRowKeys:c}),e.latestExpandedRows&&b()(e.latestExpandedRows,c)||(e.latestExpandedRows=c,l(c)),a||u(t,n)},this.renderExpandIndentCell=function(t,n){var r=e.props,a=r.prefixCls;if(r.expandIconAsCell&&"right"!==n&&t.length){var i={key:"rc-table-expand-icon-cell",className:a+"-expand-icon-th",title:"",rowSpan:t.length};t[0].unshift(o()({},i,{column:i}))}},this.renderRows=function(t,n,r,o,a,i,l,u){var c=e.props,s=c.expandedRowClassName,f=c.expandedRowRender,p=r[c.childrenColumnName],d=[].concat(A()(u),[l]),h=a+1;f&&n.push(e.renderExpandedRow(r,o,f,s(r,o,a),d,h,i)),p&&n.push.apply(n,A()(t(p,h,d)))}};Object(S.polyfill)(fe);var de=Object(O.connect)()(fe),he=function(e){function t(e){i()(this,t);var n=s()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n.getRowKey=function(e,t){var r=n.props.rowKey,o="function"==typeof r?r(e,t):e[r];return M(void 0!==o,"Each record in table should have a unique `key` prop,or set `rowKey` to an unique primary key."),void 0===o?t:o},n.handleWindowResize=function(){n.syncFixedTableRowHeight(),n.setScrollPositionClassName()},n.syncFixedTableRowHeight=function(){var e=n.tableNode.getBoundingClientRect();if(!(void 0!==e.height&&e.height<=0)){var t=n.props.prefixCls,r=n.headTable?n.headTable.querySelectorAll("thead"):n.bodyTable.querySelectorAll("thead"),o=n.bodyTable.querySelectorAll("."+t+"-row")||[],a=[].map.call(r,function(e){return e.getBoundingClientRect().height||"auto"}),i=n.store.getState(),l=[].reduce.call(o,function(e,t){var n=t.getAttribute("data-row-key"),r=t.getBoundingClientRect().height||i.fixedColumnsBodyRowsHeight[n]||"auto";return e[n]=r,e},{});b()(i.fixedColumnsHeadRowsHeight,a)&&b()(i.fixedColumnsBodyRowsHeight,l)||n.store.setState({fixedColumnsHeadRowsHeight:a,fixedColumnsBodyRowsHeight:l})}},n.handleBodyScrollLeft=function(e){if(e.currentTarget===e.target){var t=e.target,r=n.props.scroll,o=void 0===r?{}:r,a=n.headTable,i=n.bodyTable;t.scrollLeft!==n.lastScrollLeft&&o.x&&(t===i&&a?a.scrollLeft=t.scrollLeft:t===a&&i&&(i.scrollLeft=t.scrollLeft),n.setScrollPositionClassName()),n.lastScrollLeft=t.scrollLeft}},n.handleBodyScrollTop=function(e){var t=e.target;if(e.currentTarget===t){var r=n.props.scroll,o=void 0===r?{}:r,a=n.headTable,i=n.bodyTable,l=n.fixedColumnsBodyLeft,u=n.fixedColumnsBodyRight;if(t.scrollTop!==n.lastScrollTop&&o.y&&t!==a){var c=t.scrollTop;l&&t!==l&&(l.scrollTop=c),u&&t!==u&&(u.scrollTop=c),i&&t!==i&&(i.scrollTop=c)}n.lastScrollTop=t.scrollTop}},n.handleBodyScroll=function(e){n.handleBodyScrollLeft(e),n.handleBodyScrollTop(e)},n.handleWheel=function(e){var t=n.props.scroll,r=void 0===t?{}:t;if(window.navigator.userAgent.match(/Trident\/7\./)&&r.y){e.preventDefault();var o=e.deltaY,a=e.target,i=n.bodyTable,l=n.fixedColumnsBodyLeft,u=n.fixedColumnsBodyRight,c=0;c=n.lastScrollTop?n.lastScrollTop+o:o,l&&a!==l&&(l.scrollTop=c),u&&a!==u&&(u.scrollTop=c),i&&a!==i&&(i.scrollTop=c)}},n.saveRef=function(e){return function(t){n[e]=t}},["onRowClick","onRowDoubleClick","onRowContextMenu","onRowMouseEnter","onRowMouseLeave"].forEach(function(t){M(void 0===e[t],t+" is deprecated, please use onRow instead.")}),M(void 0===e.getBodyWrapper,"getBodyWrapper is deprecated, please use custom components instead."),n.columnManager=new K(e.columns,e.children),n.store=Object(O.create)({currentHoverKey:null,fixedColumnsHeadRowsHeight:[],fixedColumnsBodyRowsHeight:{}}),n.setScrollPosition("left"),n.debouncedWindowResize=function(e,t,n){var r=void 0;function o(){for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];var l=this;a[0]&&a[0].persist&&a[0].persist();var u=n&&!r;clearTimeout(r),r=setTimeout(function(){r=null,n||e.apply(l,a)},t),u&&e.apply(l,a)}return o.cancel=function(){r&&(clearTimeout(r),r=null)},o}(n.handleWindowResize,150),n}return p()(t,e),u()(t,[{key:"getChildContext",value:function(){return{table:{props:this.props,columnManager:this.columnManager,saveRef:this.saveRef,components:w()({table:"table",header:{wrapper:"thead",row:"tr",cell:"th"},body:{wrapper:"tbody",row:"tr",cell:"td"}},this.props.components)}}}},{key:"componentDidMount",value:function(){this.columnManager.isAnyColumnsFixed()&&(this.handleWindowResize(),this.resizeEvent=Object(g.a)(window,"resize",this.debouncedWindowResize)),this.headTable&&(this.headTable.scrollLeft=0),this.bodyTable&&(this.bodyTable.scrollLeft=0)}},{key:"componentDidUpdate",value:function(e){this.columnManager.isAnyColumnsFixed()&&(this.handleWindowResize(),this.resizeEvent||(this.resizeEvent=Object(g.a)(window,"resize",this.debouncedWindowResize))),e.data.length>0&&0===this.props.data.length&&this.hasScrollX()&&this.resetScrollX()}},{key:"componentWillUnmount",value:function(){this.resizeEvent&&this.resizeEvent.remove(),this.debouncedWindowResize&&this.debouncedWindowResize.cancel()}},{key:"setScrollPosition",value:function(e){if(this.scrollPosition=e,this.tableNode){var t=this.props.prefixCls;"both"===e?P()(this.tableNode).remove(new RegExp("^"+t+"-scroll-position-.+$")).add(t+"-scroll-position-left").add(t+"-scroll-position-right"):P()(this.tableNode).remove(new RegExp("^"+t+"-scroll-position-.+$")).add(t+"-scroll-position-"+e)}}},{key:"setScrollPositionClassName",value:function(){var e=this.bodyTable,t=0===e.scrollLeft,n=e.scrollLeft+1>=e.children[0].getBoundingClientRect().width-e.getBoundingClientRect().width;t&&n?this.setScrollPosition("both"):t?this.setScrollPosition("left"):n?this.setScrollPosition("right"):"middle"!==this.scrollPosition&&this.setScrollPosition("middle")}},{key:"resetScrollX",value:function(){this.headTable&&(this.headTable.scrollLeft=0),this.bodyTable&&(this.bodyTable.scrollLeft=0)}},{key:"hasScrollX",value:function(){var e=this.props.scroll;return"x"in(void 0===e?{}:e)}},{key:"renderMainTable",value:function(){var e=this.props,t=e.scroll,n=e.prefixCls,r=this.columnManager.isAnyColumnsFixed(),o=r||t.x||t.y,a=[this.renderTable({columns:this.columnManager.groupedColumns(),isAnyColumnsFixed:r}),this.renderEmptyText(),this.renderFooter()];return o?h.a.createElement("div",{className:n+"-scroll"},a):a}},{key:"renderLeftFixedTable",value:function(){var e=this.props.prefixCls;return h.a.createElement("div",{className:e+"-fixed-left"},this.renderTable({columns:this.columnManager.leftColumns(),fixed:"left"}))}},{key:"renderRightFixedTable",value:function(){var e=this.props.prefixCls;return h.a.createElement("div",{className:e+"-fixed-right"},this.renderTable({columns:this.columnManager.rightColumns(),fixed:"right"}))}},{key:"renderTable",value:function(e){var t=e.columns,n=e.fixed,r=e.isAnyColumnsFixed,o=this.props,a=o.prefixCls,i=o.scroll,l=(void 0===i?{}:i).x||n?a+"-fixed":"";return[h.a.createElement(ce,{key:"head",columns:t,fixed:n,tableClassName:l,handleBodyScrollLeft:this.handleBodyScrollLeft,expander:this.expander}),h.a.createElement(se,{key:"body",columns:t,fixed:n,tableClassName:l,getRowKey:this.getRowKey,handleWheel:this.handleWheel,handleBodyScroll:this.handleBodyScroll,expander:this.expander,isAnyColumnsFixed:r})]}},{key:"renderTitle",value:function(){var e=this.props,t=e.title,n=e.prefixCls;return t?h.a.createElement("div",{className:n+"-title",key:"title"},t(this.props.data)):null}},{key:"renderFooter",value:function(){var e=this.props,t=e.footer,n=e.prefixCls;return t?h.a.createElement("div",{className:n+"-footer",key:"footer"},t(this.props.data)):null}},{key:"renderEmptyText",value:function(){var e=this.props,t=e.emptyText,n=e.prefixCls;if(e.data.length)return null;var r=n+"-placeholder";return h.a.createElement("div",{className:r,key:"emptyText"},"function"==typeof t?t():t)}},{key:"render",value:function(){var e=this,t=this.props,n=t.prefixCls;this.state.columns?this.columnManager.reset(t.columns):this.state.children&&this.columnManager.reset(null,t.children);var r=t.prefixCls;t.className&&(r+=" "+t.className),(t.useFixedHeader||t.scroll&&t.scroll.y)&&(r+=" "+n+"-fixed-header"),"both"===this.scrollPosition?r+=" "+n+"-scroll-position-left "+n+"-scroll-position-right":r+=" "+n+"-scroll-position-"+this.scrollPosition;var a=this.columnManager.isAnyColumnsLeftFixed(),i=this.columnManager.isAnyColumnsRightFixed(),l=function(e){return Object.keys(e).reduce(function(t,n){return"data-"!==n.substr(0,5)&&"aria-"!==n.substr(0,5)||(t[n]=e[n]),t},{})}(t);return h.a.createElement(O.Provider,{store:this.store},h.a.createElement(de,o()({},t,{columnManager:this.columnManager,getRowKey:this.getRowKey}),function(u){return e.expander=u,h.a.createElement("div",o()({ref:e.saveRef("tableNode"),className:r,style:t.style,id:t.id},l),e.renderTitle(),h.a.createElement("div",{className:n+"-content"},e.renderMainTable(),a&&e.renderLeftFixedTable(),i&&e.renderRightFixedTable()))}))}}],[{key:"getDerivedStateFromProps",value:function(e,t){return e.columns&&e.columns!==t.columns?{columns:e.columns,children:null}:e.children!==t.children?{columns:null,children:e.children}:null}}]),t}(h.a.Component);he.propTypes=o()({data:v.a.array,useFixedHeader:v.a.bool,columns:v.a.array,prefixCls:v.a.string,bodyStyle:v.a.object,style:v.a.object,rowKey:v.a.oneOfType([v.a.string,v.a.func]),rowClassName:v.a.oneOfType([v.a.string,v.a.func]),onRow:v.a.func,onHeaderRow:v.a.func,onRowClick:v.a.func,onRowDoubleClick:v.a.func,onRowContextMenu:v.a.func,onRowMouseEnter:v.a.func,onRowMouseLeave:v.a.func,showHeader:v.a.bool,title:v.a.func,id:v.a.string,footer:v.a.func,emptyText:v.a.oneOfType([v.a.node,v.a.func]),scroll:v.a.object,rowRef:v.a.func,getBodyWrapper:v.a.func,children:v.a.node,components:v.a.shape({table:v.a.any,header:v.a.shape({wrapper:v.a.any,row:v.a.any,cell:v.a.any}),body:v.a.shape({wrapper:v.a.any,row:v.a.any,cell:v.a.any})})},de.PropTypes),he.childContextTypes={table:v.a.any,components:v.a.any},he.defaultProps={data:[],useFixedHeader:!1,rowKey:"key",rowClassName:function(){return""},onRow:function(){},onHeaderRow:function(){},prefixCls:"rc-table",bodyStyle:{},style:{},showHeader:!0,scroll:{},rowRef:function(){return null},emptyText:function(){return"No Data"}},Object(S.polyfill)(he);var ye=he;function ve(){}ve.propTypes={className:v.a.string,colSpan:v.a.number,title:v.a.node,dataIndex:v.a.string,width:v.a.oneOfType([v.a.number,v.a.string]),fixed:v.a.oneOf([!0,"left","right"]),render:v.a.func,onCellClick:v.a.func,onCell:v.a.func,onHeaderCell:v.a.func};var me=ve,be=function(e){function t(){return i()(this,t),s()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return p()(t,e),t}(d.Component);be.isTableColumnGroup=!0,be.propTypes={title:v.a.node};var ge=be;n.d(t,"Column",function(){return me}),n.d(t,"ColumnGroup",function(){return ge}),n.d(t,"INTERNAL_COL_DEFINE",function(){return R}),ye.Column=me,ye.ColumnGroup=ge;t.default=ye},1623:function(e,t,n){"use strict";n.r(t);var r=n(4),o=n.n(r);function a(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,i(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,r["Component"]),t}();u.isSelectOptGroup=!0;var c=n(0);function s(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),s(this,f(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,r["Component"]),t}();function h(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function y(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t[0],o=t[1],a=t[2],i=t.slice(3),l=c.oneOfType([c.string,c.number]),u=c.shape({key:l.isRequired,label:c.node});{if(!r.labelInValue)return("multiple"===r.mode||"tags"===r.mode||r.multiple||r.tags)&&""===r[o]?new Error("Invalid prop `".concat(o,"` of type `string` supplied to `").concat(a,"`, ")+"expected `array` when `multiple` or `tags` is `true`."):c.oneOfType([c.arrayOf(l),l]).apply(void 0,[r,o,a].concat(h(i)));if(c.oneOfType([c.arrayOf(u),u]).apply(void 0,[r,o,a].concat(h(i))))return new Error("Invalid prop `".concat(o,"` supplied to `").concat(a,"`, ")+"when you set `labelInValue` to `true`, `".concat(o,"` should in ")+"shape of `{ key: string | number, label?: ReactNode }`.")}return null}d.propTypes={value:c.oneOfType([c.string,c.number])},d.isSelectOption=!0;var v={id:c.string,defaultActiveFirstOption:c.bool,multiple:c.bool,filterOption:c.any,children:c.any,showSearch:c.bool,disabled:c.bool,allowClear:c.bool,showArrow:c.bool,tags:c.bool,prefixCls:c.string,className:c.string,transitionName:c.string,optionLabelProp:c.string,optionFilterProp:c.string,animation:c.string,choiceTransitionName:c.string,open:c.bool,defaultOpen:c.bool,onChange:c.func,onBlur:c.func,onFocus:c.func,onSelect:c.func,onSearch:c.func,onPopupScroll:c.func,onMouseEnter:c.func,onMouseLeave:c.func,onInputKeyDown:c.func,placeholder:c.any,onDeselect:c.func,labelInValue:c.bool,loading:c.bool,value:y,defaultValue:y,dropdownStyle:c.object,maxTagTextLength:c.number,maxTagCount:c.number,maxTagPlaceholder:c.oneOfType([c.node,c.func]),tokenSeparators:c.arrayOf(c.string),getInputElement:c.func,showAction:c.arrayOf(c.string),clearIcon:c.node,inputIcon:c.node,removeIcon:c.node,menuItemSelectedIcon:c.oneOfType([c.func,c.node]),dropdownRender:c.func},m=n(16),b=n.n(m),g=n(229),O=n.n(g),C=n(157),w=n(1101);function x(e){var t=[];return o.a.Children.forEach(e,function(e){t.push(e)}),t}var P=n(1095),S=n(51),E=n(114),k=n(14),_=n.n(k),j=n(582),N=n.n(j),R=n(1120),T=n(588),I=n.n(T);function M(e){return"string"==typeof e?e:""}function D(e){if(!e)return null;var t=e.props;if("value"in t)return t.value;if(e.key)return e.key;if(e.type&&e.type.isSelectOptGroup&&t.label)return t.label;throw new Error("Need at least a key or a value or a label (only for OptGroup) for ".concat(e))}function A(e,t){return"value"===t?D(e):e.props[t]}function K(e){return e.combobox}function F(e){return e.multiple||e.tags}function V(e){return F(e)||K(e)}function B(e){return!V(e)}function W(e){var t=e;return void 0===e?t=[]:Array.isArray(e)||(t=[e]),t}function L(e){return"".concat(typeof e,"-").concat(e)}function z(e){e.preventDefault()}function U(e,t){var n=-1;if(e)for(var r=0;r<e.length;r++)if(e[r]===t){n=r;break}return n}function H(e,t){var n;if(e=W(e))for(var r=0;r<e.length;r++)if(e[r].key===t){n=e[r].label;break}return n}var G={userSelect:"none",WebkitUserSelect:"none"},q={unselectable:"on"};function X(e,t){return!t.props.disabled&&W(A(t,this.props.optionFilterProp)).join("").toLowerCase().indexOf(e.toLowerCase())>-1}function J(e,t){return function(n){e[t]=n}}function Y(){return(Y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Z(e){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function $(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ee(e,t){return(ee=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var te=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?$(e):t}(this,Z(t).call(this,e))).rafInstance=null,n.lastVisible=!1,n.scrollActiveItemToView=function(){var e=Object(S.findDOMNode)(n.firstActiveItem),t=n.props,r=t.visible,o=t.firstActiveValue,a=n.props.value;if(e&&r){var i={onlyScrollIfNeeded:!0};a&&0!==a.length||!o||(i.alignWithTop=!0),n.rafInstance=N()(function(){I()(e,Object(S.findDOMNode)(n.menuRef),i)})}},n.renderMenu=function(){var e=n.props,t=e.menuItems,a=e.menuItemSelectedIcon,i=e.defaultActiveFirstOption,l=e.prefixCls,u=e.multiple,c=e.onMenuSelect,s=e.inputValue,f=e.backfillValue,p=e.onMenuDeselect,d=e.visible,h=n.props.firstActiveValue;if(t&&t.length){var y={};u?(y.onDeselect=p,y.onSelect=c):y.onClick=c;var v=n.props.value,m=function e(t,n){if(null===n||void 0===n)return[];var r=[];return o.a.Children.forEach(t,function(t){if(t.type.isMenuItemGroup)r=r.concat(e(t.props.children,n));else{var o=D(t),a=t.key;-1!==U(n,o)&&a&&r.push(a)}}),r}(t,v),b={},g=i,O=t;if(m.length||h){d&&!n.lastVisible?b.activeKey=m[0]||h:d||(m[0]&&(g=!1),b.activeKey=void 0);var C=!1,P=function(e){var t=e.key;return!C&&-1!==m.indexOf(t)||!C&&!m.length&&-1!==h.indexOf(e.key)?(C=!0,r.cloneElement(e,{ref:function(e){n.firstActiveItem=e}})):e};O=t.map(function(e){if(e.type.isMenuItemGroup){var t=x(e.props.children).map(P);return r.cloneElement(e,{},t)}return P(e)})}else n.firstActiveItem=null;var S=v&&v[v.length-1];return s===n.lastInputValue||S&&S===f||(b.activeKey=""),r.createElement(w.default,Y({ref:n.saveMenuRef,style:n.props.dropdownMenuStyle,defaultActiveFirst:g,role:"listbox",itemIcon:u?a:null},b,{multiple:u},y,{selectedKeys:m,prefixCls:"".concat(l,"-menu")}),O)}return null},n.lastInputValue=e.inputValue,n.saveMenuRef=J($(n),"menuRef"),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ee(e,t)}(t,r["Component"]),function(e,t,n){t&&Q(e.prototype,t),n&&Q(e,n)}(t,[{key:"componentDidMount",value:function(){this.scrollActiveItemToView(),this.lastVisible=this.props.visible}},{key:"shouldComponentUpdate",value:function(e){return e.visible||(this.lastVisible=!1),this.props.visible&&!e.visible||e.visible||e.inputValue!==this.props.inputValue}},{key:"componentDidUpdate",value:function(e){var t=this.props;!e.visible&&t.visible&&this.scrollActiveItemToView(),this.lastVisible=t.visible,this.lastInputValue=t.inputValue}},{key:"componentWillUnmount",value:function(){this.rafInstance&&N.a.cancel(this.rafInstance)}},{key:"render",value:function(){var e=this.renderMenu();return e?r.createElement("div",{style:{overflow:"auto",transform:"translateZ(0)"},id:this.props.ariaId,onFocus:this.props.onPopupFocus,onMouseDown:z,onScroll:this.props.onPopupScroll},e):null}}]),t}();function ne(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function re(){return(re=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function oe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ae(e){return(ae=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ie(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function le(e,t){return(le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}te.displayName="DropdownMenu",te.propTypes={ariaId:c.string,defaultActiveFirstOption:c.bool,value:c.any,dropdownMenuStyle:c.object,multiple:c.bool,onPopupFocus:c.func,onPopupScroll:c.func,onMenuDeSelect:c.func,onMenuSelect:c.func,prefixCls:c.string,menuItems:c.any,inputValue:c.string,visible:c.bool,firstActiveValue:c.string,menuItemSelectedIcon:c.oneOfType([c.func,c.node])};var ue=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};R.a.displayName="Trigger";var ce={bottomLeft:{points:["tl","bl"],offset:[0,4],overflow:{adjustX:0,adjustY:1}},topLeft:{points:["bl","tl"],offset:[0,-4],overflow:{adjustX:0,adjustY:1}}},se=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?ie(e):t}(this,ae(t).call(this,e))).dropdownMenuRef=null,n.rafInstance=null,n.setDropdownWidth=function(){n.cancelRafInstance(),n.rafInstance=N()(function(){var e=S.findDOMNode(ie(n)).offsetWidth;e!==n.state.dropdownWidth&&n.setState({dropdownWidth:e})})},n.cancelRafInstance=function(){n.rafInstance&&N.a.cancel(n.rafInstance)},n.getInnerMenu=function(){return n.dropdownMenuRef&&n.dropdownMenuRef.menuRef},n.getPopupDOMNode=function(){return n.triggerRef.getPopupDomNode()},n.getDropdownElement=function(e){var t=n.props,o=t.dropdownRender,a=t.ariaId,i=r.createElement(te,re({ref:n.saveDropdownMenuRef},e,{ariaId:a,prefixCls:n.getDropdownPrefixCls(),onMenuSelect:t.onMenuSelect,onMenuDeselect:t.onMenuDeselect,onPopupScroll:t.onPopupScroll,value:t.value,backfillValue:t.backfillValue,firstActiveValue:t.firstActiveValue,defaultActiveFirstOption:t.defaultActiveFirstOption,dropdownMenuStyle:t.dropdownMenuStyle,menuItemSelectedIcon:t.menuItemSelectedIcon}));return o?o(i,t):null},n.getDropdownTransitionName=function(){var e=n.props,t=e.transitionName;return!t&&e.animation&&(t="".concat(n.getDropdownPrefixCls(),"-").concat(e.animation)),t},n.getDropdownPrefixCls=function(){return"".concat(n.props.prefixCls,"-dropdown")},n.saveDropdownMenuRef=J(ie(n),"dropdownMenuRef"),n.saveTriggerRef=J(ie(n),"triggerRef"),n.state={dropdownWidth:0},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&le(e,t)}(t,r["Component"]),function(e,t,n){t&&oe(e.prototype,t),n&&oe(e,n)}(t,[{key:"componentDidMount",value:function(){this.setDropdownWidth()}},{key:"componentDidUpdate",value:function(){this.setDropdownWidth()}},{key:"componentWillUnmount",value:function(){this.cancelRafInstance()}},{key:"render",value:function(){var e,t,n=this.props,o=n.onPopupFocus,a=n.empty,i=ue(n,["onPopupFocus","empty"]),l=i.multiple,u=i.visible,c=i.inputValue,s=i.dropdownAlign,f=i.disabled,p=i.showSearch,d=i.dropdownClassName,h=i.dropdownStyle,y=i.dropdownMatchSelectWidth,v=this.getDropdownPrefixCls(),m=(ne(e={},d,!!d),ne(e,"".concat(v,"--").concat(l?"multiple":"single"),1),ne(e,"".concat(v,"--empty"),a),e),g=this.getDropdownElement({menuItems:i.options,onPopupFocus:o,multiple:l,inputValue:c,visible:u});t=f?[]:B(i)&&!p?["click"]:["blur"];var O=re({},h),C=y?"width":"minWidth";return this.state.dropdownWidth&&(O[C]="".concat(this.state.dropdownWidth,"px")),r.createElement(R.a,re({},i,{showAction:f?[]:this.props.showAction,hideAction:t,ref:this.saveTriggerRef,popupPlacement:"bottomLeft",builtinPlacements:ce,prefixCls:v,popupTransitionName:this.getDropdownTransitionName(),onPopupVisibleChange:i.onDropdownVisibleChange,popup:g,popupAlign:s,popupVisible:u,getPopupContainer:i.getPopupContainer,popupClassName:b()(m),popupStyle:O}),i.children)}}]),t}();function fe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function pe(){return(pe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function de(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function he(e){return(he=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ye(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ve(e,t){return(ve=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}se.defaultProps={dropdownRender:function(e){return e}},se.propTypes={onPopupFocus:c.func,onPopupScroll:c.func,dropdownMatchSelectWidth:c.bool,dropdownAlign:c.object,visible:c.bool,disabled:c.bool,showSearch:c.bool,dropdownClassName:c.string,multiple:c.bool,inputValue:c.string,filterOption:c.any,options:c.any,prefixCls:c.string,popupClassName:c.string,children:c.any,showAction:c.arrayOf(c.string),menuItemSelectedIcon:c.oneOfType([c.func,c.node]),dropdownRender:c.func,ariaId:c.string},se.displayName="SelectTrigger";var me="RC_SELECT_EMPTY_VALUE_KEY",be=function(){return null};function ge(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];for(var o=0;o<t.length;o++)t[o]&&"function"==typeof t[o]&&t[o].apply(ge,n)}}var Oe=function(e){function t(e){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?ye(e):t}(this,he(t).call(this,e))).inputRef=null,n.inputMirrorRef=null,n.topCtrlRef=null,n.selectTriggerRef=null,n.rootRef=null,n.selectionRef=null,n.dropdownContainer=null,n.blurTimer=null,n.focusTimer=null,n.comboboxTimer=null,n._focused=!1,n._mouseDown=!1,n._options=[],n._empty=!1,n.onInputChange=function(e){var t=n.props.tokenSeparators,r=e.target.value;if(F(n.props)&&t.length&&function(e,t){for(var n=0;n<t.length;++n)if(e.lastIndexOf(t[n])>0)return!0;return!1}(r,t)){var o=n.getValueByInput(r);return void 0!==o&&n.fireChange(o),n.setOpenState(!1,{needFocus:!0}),void n.setInputValue("",!1)}n.setInputValue(r),n.setState({open:!0}),K(n.props)&&n.fireChange([r])},n.onDropdownVisibleChange=function(e){e&&!n._focused&&(n.clearBlurTime(),n.timeoutFocus(),n._focused=!0,n.updateFocusClassName()),n.setOpenState(e)},n.onKeyDown=function(e){var t=n.state.open;if(!n.props.disabled){var r=e.keyCode;t&&!n.getInputDOMNode()?n.onInputKeyDown(e):r===P.a.ENTER||r===P.a.DOWN?(t||n.setOpenState(!0),e.preventDefault()):r===P.a.SPACE&&(t||(n.setOpenState(!0),e.preventDefault()))}},n.onInputKeyDown=function(e){var t=n.props,r=t.disabled,o=t.combobox,a=t.defaultActiveFirstOption;if(!r){var i=n.state,l=n.getRealOpenState(i),u=e.keyCode;if(!F(n.props)||e.target.value||u!==P.a.BACKSPACE){if(u===P.a.DOWN){if(!i.open)return n.openIfHasChildren(),e.preventDefault(),void e.stopPropagation()}else if(u===P.a.ENTER&&i.open)!l&&o||e.preventDefault(),l&&o&&!1===a&&(n.comboboxTimer=setTimeout(function(){n.setOpenState(!1)}));else if(u===P.a.ESC)return void(i.open&&(n.setOpenState(!1),e.preventDefault(),e.stopPropagation()));if(l&&n.selectTriggerRef){var c=n.selectTriggerRef.getInnerMenu();c&&c.onKeyDown(e,n.handleBackfill)&&(e.preventDefault(),e.stopPropagation())}}else{e.preventDefault();var s=i.value;s.length&&n.removeSelected(s[s.length-1])}}},n.onMenuSelect=function(e){var t=e.item;if(t){var r=n.state.value,o=n.props,a=D(t),i=r[r.length-1],l=!1;if(F(o)?-1!==U(r,a)?l=!0:r=r.concat([a]):K(o)||void 0===i||i!==a||a===n.state.backfillValue?(r=[a],n.setOpenState(!1,{needFocus:!0,fireSearch:!1})):(n.setOpenState(!1,{needFocus:!0,fireSearch:!1}),l=!0),l||n.fireChange(r),n.fireSelect(a),!l){var u=K(o)?A(t,o.optionLabelProp):"";o.autoClearSearchValue&&n.setInputValue(u,!1)}}},n.onMenuDeselect=function(e){var t=e.item,r=e.domEvent;"keydown"!==r.type||r.keyCode!==P.a.ENTER?("click"===r.type&&n.removeSelected(D(t)),n.props.autoClearSearchValue&&n.setInputValue("")):n.removeSelected(D(t))},n.onArrowClick=function(e){e.stopPropagation(),e.preventDefault(),n.props.disabled||n.setOpenState(!n.state.open,{needFocus:!n.state.open})},n.onPlaceholderClick=function(){n.getInputDOMNode&&n.getInputDOMNode()&&n.getInputDOMNode().focus()},n.onOuterFocus=function(e){if(n.props.disabled)e.preventDefault();else{n.clearBlurTime();var t=n.getInputDOMNode();t&&e.target===n.rootRef||(V(n.props)||e.target!==t)&&(n._focused||(n._focused=!0,n.updateFocusClassName(),F(n.props)&&n._mouseDown||n.timeoutFocus()))}},n.onPopupFocus=function(){n.maybeFocus(!0,!0)},n.onOuterBlur=function(e){n.props.disabled?e.preventDefault():n.blurTimer=window.setTimeout(function(){n._focused=!1,n.updateFocusClassName();var e=n.props,t=n.state.value,r=n.state.inputValue;if(B(e)&&e.showSearch&&r&&e.defaultActiveFirstOption){var o=n._options||[];if(o.length){var a=function e(t){for(var n=0;n<t.length;n++){var r=t[n];if(r.type.isMenuItemGroup){var o=e(r.props.children);if(o)return o}else if(!r.props.disabled)return r}return null}(o);a&&(t=[D(a)],n.fireChange(t))}}else if(F(e)&&r){n._mouseDown?n.setInputValue(""):(n.state.inputValue="",n.getInputDOMNode&&n.getInputDOMNode()&&(n.getInputDOMNode().value=""));var i=n.getValueByInput(r);void 0!==i&&(t=i,n.fireChange(t))}if(F(e)&&n._mouseDown)return n.maybeFocus(!0,!0),void(n._mouseDown=!1);n.setOpenState(!1),e.onBlur&&e.onBlur(n.getVLForOnChange(t))},10)},n.onClearSelection=function(e){var t=n.props,r=n.state;if(!t.disabled){var o=r.inputValue,a=r.value;e.stopPropagation(),(o||a.length)&&(a.length&&n.fireChange([]),n.setOpenState(!1,{needFocus:!0}),o&&n.setInputValue(""))}},n.onChoiceAnimationLeave=function(){n.forcePopupAlign()},n.getOptionInfoBySingleValue=function(e,t){var o;if((t=t||n.state.optionsInfo)[L(e)]&&(o=t[L(e)]),o)return o;var a=e;if(n.props.labelInValue){var i=H(n.props.value,e),l=H(n.props.defaultValue,e);void 0!==i?a=i:void 0!==l&&(a=l)}return{option:r.createElement(d,{value:e,key:e},e),value:e,label:a}},n.getOptionBySingleValue=function(e){return n.getOptionInfoBySingleValue(e).option},n.getOptionsBySingleValue=function(e){return e.map(function(e){return n.getOptionBySingleValue(e)})},n.getValueByLabel=function(e){if(void 0===e)return null;var t=null;return Object.keys(n.state.optionsInfo).forEach(function(r){var o=n.state.optionsInfo[r];if(!o.disabled){var a=W(o.label);a&&a.join("")===e&&(t=o.value)}}),t},n.getVLBySingleValue=function(e){return n.props.labelInValue?{key:e,label:n.getLabelBySingleValue(e)}:e},n.getVLForOnChange=function(e){var t=e;return void 0!==t?(t=n.props.labelInValue?t.map(function(e){return{key:e,label:n.getLabelBySingleValue(e)}}):t.map(function(e){return e}),F(n.props)?t:t[0]):t},n.getLabelBySingleValue=function(e,t){return n.getOptionInfoBySingleValue(e,t).label},n.getDropdownContainer=function(){return n.dropdownContainer||(n.dropdownContainer=document.createElement("div"),document.body.appendChild(n.dropdownContainer)),n.dropdownContainer},n.getPlaceholderElement=function(){var e=n.props,t=n.state,o=!1;t.inputValue&&(o=!0);var a=t.value;a.length&&(o=!0),K(e)&&1===a.length&&t.value&&!t.value[0]&&(o=!1);var i=e.placeholder;return i?r.createElement("div",pe({onMouseDown:z,style:pe({display:o?"none":"block"},G)},q,{onClick:n.onPlaceholderClick,className:"".concat(e.prefixCls,"-selection__placeholder")}),i):null},n.getInputElement=function(){var e=n.props,t=r.createElement("input",{id:e.id,autoComplete:"off"}),o=e.getInputElement?e.getInputElement():t,a=b()(o.props.className,fe({},"".concat(e.prefixCls,"-search__field"),!0));return r.createElement("div",{className:"".concat(e.prefixCls,"-search__field__wrap")},r.cloneElement(o,{ref:n.saveInputRef,onChange:n.onInputChange,onKeyDown:ge(n.onInputKeyDown,o.props.onKeyDown,n.props.onInputKeyDown),value:n.state.inputValue,disabled:e.disabled,className:a}),r.createElement("span",{ref:n.saveInputMirrorRef,className:"".concat(e.prefixCls,"-search__field__mirror")},n.state.inputValue," "))},n.getInputDOMNode=function(){return n.topCtrlRef?n.topCtrlRef.querySelector("input,textarea,div[contentEditable]"):n.inputRef},n.getInputMirrorDOMNode=function(){return n.inputMirrorRef},n.getPopupDOMNode=function(){if(n.selectTriggerRef)return n.selectTriggerRef.getPopupDOMNode()},n.getPopupMenuComponent=function(){if(n.selectTriggerRef)return n.selectTriggerRef.getInnerMenu()},n.setOpenState=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.needFocus,o=t.fireSearch,a=n.props;if(n.state.open!==e){n.props.onDropdownVisibleChange&&n.props.onDropdownVisibleChange(e);var i={open:e,backfillValue:""};!e&&B(a)&&a.showSearch&&n.setInputValue("",o),e||n.maybeFocus(e,!!r),n.setState(pe({open:e},i),function(){e&&n.maybeFocus(e,!!r)})}else n.maybeFocus(e,!!r)},n.setInputValue=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=n.props.onSearch;e!==n.state.inputValue&&n.setState(function(n){return t&&e!==n.inputValue&&r&&r(e),{inputValue:e}},n.forcePopupAlign)},n.getValueByInput=function(e){var t=n.props,r=t.multiple,o=t.tokenSeparators,a=n.state.value,i=!1;return function(e,t){var n=new RegExp("[".concat(t.join(),"]"));return e.split(n).filter(function(e){return e})}(e,o).forEach(function(e){var t=[e];if(r){var o=n.getValueByLabel(e);o&&-1===U(a,o)&&(a=a.concat(o),i=!0,n.fireSelect(o))}else-1===U(a,e)&&(a=a.concat(t),i=!0,n.fireSelect(e))}),i?a:void 0},n.getRealOpenState=function(e){var t=n.props.open;if("boolean"==typeof t)return t;var r=(e||n.state).open,o=n._options||[];return!V(n.props)&&n.props.showSearch||r&&!o.length&&(r=!1),r},n.markMouseDown=function(){n._mouseDown=!0},n.markMouseLeave=function(){n._mouseDown=!1},n.handleBackfill=function(e){if(n.props.backfill&&(B(n.props)||K(n.props))){var t=D(e);K(n.props)&&n.setInputValue(t,!1),n.setState({value:[t],backfillValue:t})}},n.filterOption=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:X,o=n.state.value,a=o[o.length-1];if(!e||a&&a===n.state.backfillValue)return!0;var i=n.props.filterOption;return"filterOption"in n.props?!0===i&&(i=r.bind(ye(n))):i=r.bind(ye(n)),!i||("function"==typeof i?i.call(ye(n),e,t):!t.props.disabled)},n.timeoutFocus=function(){var e=n.props.onFocus;n.focusTimer&&n.clearFocusTime(),n.focusTimer=window.setTimeout(function(){e&&e()},10)},n.clearFocusTime=function(){n.focusTimer&&(clearTimeout(n.focusTimer),n.focusTimer=null)},n.clearBlurTime=function(){n.blurTimer&&(clearTimeout(n.blurTimer),n.blurTimer=null)},n.clearComboboxTime=function(){n.comboboxTimer&&(clearTimeout(n.comboboxTimer),n.comboboxTimer=null)},n.updateFocusClassName=function(){var e=n.rootRef,t=n.props;n._focused?O()(e).add("".concat(t.prefixCls,"-focused")):O()(e).remove("".concat(t.prefixCls,"-focused"))},n.maybeFocus=function(e,t){if(t||e){var r=n.getInputDOMNode(),o=document.activeElement;r&&(e||V(n.props))?o!==r&&(r.focus(),n._focused=!0):o!==n.selectionRef&&n.selectionRef&&(n.selectionRef.focus(),n._focused=!0)}},n.removeSelected=function(e,t){var r=n.props;if(!r.disabled&&!n.isChildDisabled(e)){t&&t.stopPropagation&&t.stopPropagation();var o=n.state.value.filter(function(t){return t!==e});if(F(r)){var a=e;r.labelInValue&&(a={key:e,label:n.getLabelBySingleValue(e)}),r.onDeselect&&r.onDeselect(a,n.getOptionBySingleValue(e))}n.fireChange(o)}},n.openIfHasChildren=function(){var e=n.props;(r.Children.count(e.children)||B(e))&&n.setOpenState(!0)},n.fireSelect=function(e){n.props.onSelect&&n.props.onSelect(n.getVLBySingleValue(e),n.getOptionBySingleValue(e))},n.fireChange=function(e){var t=n.props;"value"in t||n.setState({value:e},n.forcePopupAlign);var r=n.getVLForOnChange(e),o=n.getOptionsBySingleValue(e);t.onChange&&t.onChange(r,F(n.props)?o:o[0])},n.isChildDisabled=function(e){return x(n.props.children).some(function(t){return D(t)===e&&t.props&&t.props.disabled})},n.forcePopupAlign=function(){n.state.open&&n.selectTriggerRef&&n.selectTriggerRef.triggerRef&&n.selectTriggerRef.triggerRef.forcePopupAlign()},n.renderFilterOptions=function(){var e=n.state.inputValue,t=n.props,o=t.children,a=t.tags,i=t.notFoundContent,l=[],u=[],c=!1,s=n.renderFilterOptionsFromChildren(o,u,l);if(a){var f=n.state.value;(f=f.filter(function(t){return-1===u.indexOf(t)&&(!e||String(t).indexOf(String(e))>-1)})).sort(function(e,t){return e.length-t.length}),f.forEach(function(e){var t=e,n=r.createElement(w.Item,{style:G,role:"option",attribute:q,value:t,key:t},t);s.push(n),l.push(n)}),e&&l.every(function(t){return D(t)!==e})&&s.unshift(r.createElement(w.Item,{style:G,role:"option",attribute:q,value:e,key:e},e))}return!s.length&&i&&(c=!0,s=[r.createElement(w.Item,{style:G,attribute:q,disabled:!0,role:"option",value:"NOT_FOUND",key:"NOT_FOUND"},i)]),{empty:c,options:s}},n.renderFilterOptionsFromChildren=function(e,t,o){var a=[],i=n.props,l=n.state.inputValue,u=i.tags;return r.Children.forEach(e,function(e){if(e){var i=e.type;if(i.isSelectOptGroup){var c=e.props.label,s=e.key;if(s||"string"!=typeof c?!c&&s&&(c=s):s=c,l&&n.filterOption(l,e)){var f=x(e.props.children).map(function(e){var t=D(e)||e.key;return r.createElement(w.Item,pe({key:t,value:t},e.props))});a.push(r.createElement(w.ItemGroup,{key:s,title:c},f))}else{var p=n.renderFilterOptionsFromChildren(e.props.children,t,o);p.length&&a.push(r.createElement(w.ItemGroup,{key:s,title:c},p))}}else{_()(i.isSelectOption,"the children of `Select` should be `Select.Option` or `Select.OptGroup`, "+"instead of `".concat(i.name||i.displayName||e.type,"`."));var d=D(e);if(function(e,t){if(!B(t)&&!function(e){return e.multiple}(t)&&"string"!=typeof e)throw new Error("Invalid `value` of type `".concat(typeof e,"` supplied to Option, ")+"expected `string` when `tags/combobox` is `true`.")}(d,n.props),n.filterOption(l,e)){var h=r.createElement(w.Item,pe({style:G,attribute:q,value:d,key:d,role:"option"},e.props));a.push(h),o.push(h)}u&&t.push(d)}}}),a},n.renderTopControlNode=function(){var e=n.state,t=e.open,o=e.inputValue,a=n.state.value,i=n.props,l=i.choiceTransitionName,u=i.prefixCls,c=i.maxTagTextLength,s=i.maxTagCount,f=i.showSearch,p=i.removeIcon,d=i.maxTagPlaceholder,h="".concat(u,"-selection__rendered"),y=null;if(B(i)){var v=null;if(a.length){var m=!1,b=1;f&&t?(m=!o)&&(b=.4):m=!0;var g=a[0],O=n.getOptionInfoBySingleValue(g),w=O.label,x=O.title;v=r.createElement("div",{key:"value",className:"".concat(u,"-selection-selected-value"),title:M(x||w),style:{display:m?"block":"none",opacity:b}},w)}y=f?[v,r.createElement("div",{className:"".concat(u,"-search ").concat(u,"-search--inline"),key:"input",style:{display:t?"block":"none"}},n.getInputElement())]:[v]}else{var P,S=[],E=a;if(void 0!==s&&a.length>s){E=E.slice(0,s);var k=n.getVLForOnChange(a.slice(s,a.length)),_="+ ".concat(a.length-s," ...");d&&(_="function"==typeof d?d(k):d),P=r.createElement("li",pe({style:G},q,{role:"presentation",onMouseDown:z,className:"".concat(u,"-selection__choice ").concat(u,"-selection__choice__disabled"),key:"maxTagPlaceholder",title:M(_)}),r.createElement("div",{className:"".concat(u,"-selection__choice__content")},_))}F(i)&&(S=E.map(function(e){var t=n.getOptionInfoBySingleValue(e),o=t.label,a=t.title||o;c&&"string"==typeof o&&o.length>c&&(o="".concat(o.slice(0,c),"..."));var i=n.isChildDisabled(e),l=i?"".concat(u,"-selection__choice ").concat(u,"-selection__choice__disabled"):"".concat(u,"-selection__choice");return r.createElement("li",pe({style:G},q,{onMouseDown:z,className:l,role:"presentation",key:e||me,title:M(a)}),r.createElement("div",{className:"".concat(u,"-selection__choice__content")},o),i?null:r.createElement("span",{onClick:function(t){n.removeSelected(e,t)},className:"".concat(u,"-selection__choice__remove")},p||r.createElement("i",{className:"".concat(u,"-selection__choice__remove-icon")},"×")))})),P&&S.push(P),S.push(r.createElement("li",{className:"".concat(u,"-search ").concat(u,"-search--inline"),key:"__input"},n.getInputElement())),y=F(i)&&l?r.createElement(C.default,{onLeave:n.onChoiceAnimationLeave,component:"ul",transitionName:l},S):r.createElement("ul",null,S)}return r.createElement("div",{className:h,ref:n.saveTopCtrlRef},n.getPlaceholderElement(),y)};var o=t.getOptionsInfoFromProps(e);if(e.tags&&"function"!=typeof e.filterOption){var a=Object.keys(o).some(function(e){return o[e].disabled});_()(!a,"Please avoid setting option to disabled in tags mode since user can always type text as tag.")}return n.state={value:t.getValueFromProps(e,!0),inputValue:e.combobox?t.getInputValueForCombobox(e,o,!0):"",open:e.defaultOpen,optionsInfo:o,backfillValue:"",skipBuildOptionsInfo:!0,ariaId:""},n.saveInputRef=J(ye(n),"inputRef"),n.saveInputMirrorRef=J(ye(n),"inputMirrorRef"),n.saveTopCtrlRef=J(ye(n),"topCtrlRef"),n.saveSelectTriggerRef=J(ye(n),"selectTriggerRef"),n.saveRootRef=J(ye(n),"rootRef"),n.saveSelectionRef=J(ye(n),"selectionRef"),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ve(e,t)}(t,r["Component"]),function(e,t,n){t&&de(e.prototype,t),n&&de(e,n)}(t,[{key:"componentDidMount",value:function(){(this.props.autoFocus||this.state.open)&&this.focus(),this.setState({ariaId:function(){var e=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}()})}},{key:"componentDidUpdate",value:function(){if(F(this.props)){var e=this.getInputDOMNode(),t=this.getInputMirrorDOMNode();e&&e.value&&t?(e.style.width="",e.style.width="".concat(t.clientWidth,"px")):e&&(e.style.width="")}this.forcePopupAlign()}},{key:"componentWillUnmount",value:function(){this.clearFocusTime(),this.clearBlurTime(),this.clearComboboxTime(),this.dropdownContainer&&(S.unmountComponentAtNode(this.dropdownContainer),document.body.removeChild(this.dropdownContainer),this.dropdownContainer=null)}},{key:"focus",value:function(){B(this.props)&&this.selectionRef?this.selectionRef.focus():this.getInputDOMNode()&&this.getInputDOMNode().focus()}},{key:"blur",value:function(){B(this.props)&&this.selectionRef?this.selectionRef.blur():this.getInputDOMNode()&&this.getInputDOMNode().blur()}},{key:"renderArrow",value:function(e){var t=this.props,n=t.showArrow,o=void 0===n?!e:n,a=t.loading,i=t.inputIcon,l=t.prefixCls;if(!o&&!a)return null;var u=a?r.createElement("i",{className:"".concat(l,"-arrow-loading")}):r.createElement("i",{className:"".concat(l,"-arrow-icon")});return r.createElement("span",pe({key:"arrow",className:"".concat(l,"-arrow"),style:G},q,{onClick:this.onArrowClick}),i||u)}},{key:"renderClear",value:function(){var e=this.props,t=e.prefixCls,n=e.allowClear,o=e.clearIcon,a=this.state.inputValue,i=this.state.value,l=r.createElement("span",pe({key:"clear",className:"".concat(t,"-selection__clear"),onMouseDown:z,style:G},q,{onClick:this.onClearSelection}),o||r.createElement("i",{className:"".concat(t,"-selection__clear-icon")},"×"));return n?K(this.props)?a?l:null:a||i.length?l:null:null}},{key:"render",value:function(){var e,t=this.props,n=F(t),o=t.showArrow,a=void 0===o||o,i=this.state,l=t.className,u=t.disabled,c=t.prefixCls,s=t.loading,f=this.renderTopControlNode(),p=this.state,d=p.open,h=p.ariaId;if(d){var y=this.renderFilterOptions();this._empty=y.empty,this._options=y.options}var v=this.getRealOpenState(),m=this._empty,g=this._options||[],O={};Object.keys(t).forEach(function(e){!Object.prototype.hasOwnProperty.call(t,e)||"data-"!==e.substr(0,5)&&"aria-"!==e.substr(0,5)&&"role"!==e||(O[e]=t[e])});var C=pe({},O);V(t)||(C=pe({},C,{onKeyDown:this.onKeyDown,tabIndex:t.disabled?-1:t.tabIndex}));var w=(fe(e={},l,!!l),fe(e,c,1),fe(e,"".concat(c,"-open"),d),fe(e,"".concat(c,"-focused"),d||!!this._focused),fe(e,"".concat(c,"-combobox"),K(t)),fe(e,"".concat(c,"-disabled"),u),fe(e,"".concat(c,"-enabled"),!u),fe(e,"".concat(c,"-allow-clear"),!!t.allowClear),fe(e,"".concat(c,"-no-arrow"),!a),fe(e,"".concat(c,"-loading"),!!s),e);return r.createElement(se,{onPopupFocus:this.onPopupFocus,onMouseEnter:this.props.onMouseEnter,onMouseLeave:this.props.onMouseLeave,dropdownAlign:t.dropdownAlign,dropdownClassName:t.dropdownClassName,dropdownMatchSelectWidth:t.dropdownMatchSelectWidth,defaultActiveFirstOption:t.defaultActiveFirstOption,dropdownMenuStyle:t.dropdownMenuStyle,transitionName:t.transitionName,animation:t.animation,prefixCls:t.prefixCls,dropdownStyle:t.dropdownStyle,combobox:t.combobox,showSearch:t.showSearch,options:g,empty:m,multiple:n,disabled:u,visible:v,inputValue:i.inputValue,value:i.value,backfillValue:i.backfillValue,firstActiveValue:t.firstActiveValue,onDropdownVisibleChange:this.onDropdownVisibleChange,getPopupContainer:t.getPopupContainer,onMenuSelect:this.onMenuSelect,onMenuDeselect:this.onMenuDeselect,onPopupScroll:t.onPopupScroll,showAction:t.showAction,ref:this.saveSelectTriggerRef,menuItemSelectedIcon:t.menuItemSelectedIcon,dropdownRender:t.dropdownRender,ariaId:h},r.createElement("div",{id:t.id,style:t.style,ref:this.saveRootRef,onBlur:this.onOuterBlur,onFocus:this.onOuterFocus,className:b()(w),onMouseDown:this.markMouseDown,onMouseUp:this.markMouseLeave,onMouseOut:this.markMouseLeave},r.createElement("div",pe({ref:this.saveSelectionRef,key:"selection",className:"".concat(c,"-selection\n            ").concat(c,"-selection--").concat(n?"multiple":"single"),role:"combobox","aria-autocomplete":"list","aria-haspopup":"true","aria-controls":h,"aria-expanded":v},C),f,this.renderClear(),this.renderArrow(!!n))))}}]),t}();Oe.propTypes=v,Oe.defaultProps={prefixCls:"rc-select",defaultOpen:!1,labelInValue:!1,defaultActiveFirstOption:!0,showSearch:!0,allowClear:!1,placeholder:"",onChange:be,onFocus:be,onBlur:be,onSelect:be,onSearch:be,onDeselect:be,onInputKeyDown:be,dropdownMatchSelectWidth:!0,dropdownStyle:{},dropdownMenuStyle:{},optionFilterProp:"value",optionLabelProp:"value",notFoundContent:"Not Found",backfill:!1,showAction:["click"],tokenSeparators:[],autoClearSearchValue:!0,tabIndex:0,dropdownRender:function(e){return e}},Oe.getDerivedStateFromProps=function(e,t){var n=t.skipBuildOptionsInfo?t.optionsInfo:Oe.getOptionsInfoFromProps(e,t),r={optionsInfo:n,skipBuildOptionsInfo:!1};if("open"in e&&(r.open=e.open),"value"in e){var o=Oe.getValueFromProps(e);r.value=o,e.combobox&&(r.inputValue=Oe.getInputValueForCombobox(e,n))}return r},Oe.getOptionsFromChildren=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return r.Children.forEach(e,function(e){e&&(e.type.isSelectOptGroup?Oe.getOptionsFromChildren(e.props.children,t):t.push(e))}),t},Oe.getInputValueForCombobox=function(e,t,n){var r=[];if("value"in e&&!n&&(r=W(e.value)),"defaultValue"in e&&n&&(r=W(e.defaultValue)),!r.length)return"";var o=r=r[0];return e.labelInValue?o=r.label:t[L(r)]&&(o=t[L(r)].label),void 0===o&&(o=""),o},Oe.getLabelFromOption=function(e,t){return A(t,e.optionLabelProp)},Oe.getOptionsInfoFromProps=function(e,t){var n={};if(Oe.getOptionsFromChildren(e.children).forEach(function(t){var r=D(t);n[L(r)]={option:t,value:r,label:Oe.getLabelFromOption(e,t),title:t.props.title,disabled:t.props.disabled}}),t){var r=t.optionsInfo,o=t.value;o&&o.forEach(function(e){var t=L(e);n[t]||void 0===r[t]||(n[t]=r[t])})}return n},Oe.getValueFromProps=function(e,t){var n=[];return"value"in e&&!t&&(n=W(e.value)),"defaultValue"in e&&t&&(n=W(e.defaultValue)),e.labelInValue&&(n=n.map(function(e){return e.key})),n},Oe.displayName="Select",Object(E.polyfill)(Oe);var Ce=Oe;n.d(t,"Option",function(){return d}),n.d(t,"OptGroup",function(){return u}),n.d(t,"SelectPropTypes",function(){return v}),Ce.Option=d,Ce.OptGroup=u;t.default=Ce},1624:function(e,t,n){"use strict";n.r(t);var r=n(7),o=n.n(r),a=n(23),i=n.n(a),l=n(64),u=n.n(l),c=n(18),s=n.n(c),f=n(21),p=n.n(f),d=n(22),h=n.n(d),y=n(27),v=n.n(y),m=n(4),b=n.n(m),g=n(0),O=n.n(g),C=n(16),w=n.n(C),x=n(582),P=n.n(x),S=n(114),E=37,k=38,_=39,j=40;function N(e){var t=[];return b.a.Children.forEach(e,function(e){e&&t.push(e)}),t}function R(e){return"left"===e||"right"===e}function T(e){return Object.keys(e).reduce(function(t,n){return"aria-"!==n.substr(0,5)&&"data-"!==n.substr(0,5)&&"role"!==n||(t[n]=e[n]),t},{})}var I=n(1095),M=n(102),D=n.n(M)()({}),A=D.Provider,K=D.Consumer,F={width:0,height:0,overflow:"hidden",position:"absolute"},V=function(e){function t(){var e,n,r,o;s()(this,t);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return n=r=h()(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r.onKeyDown=function(e){var t=e.target,n=e.which,o=e.shiftKey,a=r.props,i=a.nextElement,l=a.prevElement;n===I.a.TAB&&document.activeElement===t&&(!o&&i&&i.focus(),o&&l&&l.focus())},o=n,h()(r,o)}return v()(t,e),p()(t,[{key:"render",value:function(){var e=this.props.setRef;return b.a.createElement("div",{tabIndex:0,ref:e,style:F,onKeyDown:this.onKeyDown,role:"presentation"})}}]),t}(b.a.Component);V.propTypes={setRef:O.a.func,prevElement:O.a.object,nextElement:O.a.object};var B=V,W=function(e){function t(){return s()(this,t),h()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return v()(t,e),p()(t,[{key:"render",value:function(){var e,t=this.props,n=t.id,r=t.className,a=t.destroyInactiveTabPane,l=t.active,c=t.forceRender,s=t.rootPrefixCls,f=t.style,p=t.children,d=t.placeholder,h=u()(t,["id","className","destroyInactiveTabPane","active","forceRender","rootPrefixCls","style","children","placeholder"]);this._isActived=this._isActived||l;var y=s+"-tabpane",v=w()((e={},i()(e,y,1),i()(e,y+"-inactive",!l),i()(e,y+"-active",l),i()(e,r,r),e)),m=(a?l:this._isActived)||c;return b.a.createElement(K,null,function(e){var t=e.sentinelStart,r=e.sentinelEnd,a=e.setPanelSentinelStart,i=e.setPanelSentinelEnd,u=void 0,c=void 0;return l&&m&&(u=b.a.createElement(B,{setRef:a,prevElement:t}),c=b.a.createElement(B,{setRef:i,nextElement:r})),b.a.createElement("div",o()({style:f,role:"tabpanel","aria-hidden":l?"false":"true",className:v,id:n},T(h)),u,m?p:d,c)})}}]),t}(b.a.Component),L=W;function z(e){var t=void 0;return b.a.Children.forEach(e.children,function(e){!e||t||e.props.disabled||(t=e.key)}),t}W.propTypes={className:O.a.string,active:O.a.bool,style:O.a.any,destroyInactiveTabPane:O.a.bool,forceRender:O.a.bool,placeholder:O.a.node,rootPrefixCls:O.a.string,children:O.a.node,id:O.a.string},W.defaultProps={placeholder:null};var U=function(e){function t(e){s()(this,t);var n=h()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));H.call(n);var r=void 0;return r="activeKey"in e?e.activeKey:"defaultActiveKey"in e?e.defaultActiveKey:z(e),n.state={activeKey:r},n}return v()(t,e),p()(t,[{key:"componentWillUnmount",value:function(){this.destroy=!0,P.a.cancel(this.sentinelId)}},{key:"updateSentinelContext",value:function(){var e=this;this.destroy||(P.a.cancel(this.sentinelId),this.sentinelId=P()(function(){e.destroy||e.forceUpdate()}))}},{key:"render",value:function(){var e,t=this.props,n=t.prefixCls,r=t.navWrapper,a=t.tabBarPosition,l=t.className,c=t.renderTabContent,s=t.renderTabBar,f=t.destroyInactiveTabPane,p=u()(t,["prefixCls","navWrapper","tabBarPosition","className","renderTabContent","renderTabBar","destroyInactiveTabPane"]),d=w()((e={},i()(e,n,1),i()(e,n+"-"+a,1),i()(e,l,!!l),e));this.tabBar=s();var h=b.a.cloneElement(this.tabBar,{prefixCls:n,navWrapper:r,key:"tabBar",onKeyDown:this.onNavKeyDown,tabBarPosition:a,onTabClick:this.onTabClick,panels:t.children,activeKey:this.state.activeKey}),y=b.a.cloneElement(c(),{prefixCls:n,tabBarPosition:a,activeKey:this.state.activeKey,destroyInactiveTabPane:f,children:t.children,onChange:this.setActiveKey,key:"tabContent"}),v=b.a.createElement(B,{key:"sentinelStart",setRef:this.setSentinelStart,nextElement:this.panelSentinelStart}),m=b.a.createElement(B,{key:"sentinelEnd",setRef:this.setSentinelEnd,prevElement:this.panelSentinelEnd}),g=[];return"bottom"===a?g.push(v,y,m,h):g.push(h,v,y,m),b.a.createElement(A,{value:{sentinelStart:this.sentinelStart,sentinelEnd:this.sentinelEnd,setPanelSentinelStart:this.setPanelSentinelStart,setPanelSentinelEnd:this.setPanelSentinelEnd}},b.a.createElement("div",o()({className:d,style:t.style},T(p),{onScroll:this.onScroll}),g))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n={};return"activeKey"in e?n.activeKey=e.activeKey:function(e,t){return b.a.Children.map(e.children,function(e){return e&&e.key}).indexOf(t)>=0}(e,t.activeKey)||(n.activeKey=z(e)),Object.keys(n).length>0?n:null}}]),t}(b.a.Component),H=function(){var e=this;this.onTabClick=function(t,n){e.tabBar.props.onTabClick&&e.tabBar.props.onTabClick(t,n),e.setActiveKey(t)},this.onNavKeyDown=function(t){var n=t.keyCode;if(n===_||n===j){t.preventDefault();var r=e.getNextActiveKey(!0);e.onTabClick(r)}else if(n===E||n===k){t.preventDefault();var o=e.getNextActiveKey(!1);e.onTabClick(o)}},this.onScroll=function(e){var t=e.target;t===e.currentTarget&&t.scrollLeft>0&&(t.scrollLeft=0)},this.setSentinelStart=function(t){e.sentinelStart=t},this.setSentinelEnd=function(t){e.sentinelEnd=t},this.setPanelSentinelStart=function(t){t!==e.panelSentinelStart&&e.updateSentinelContext(),e.panelSentinelStart=t},this.setPanelSentinelEnd=function(t){t!==e.panelSentinelEnd&&e.updateSentinelContext(),e.panelSentinelEnd=t},this.setActiveKey=function(t){e.state.activeKey!==t&&("activeKey"in e.props||e.setState({activeKey:t}),e.props.onChange(t))},this.getNextActiveKey=function(t){var n=e.state.activeKey,r=[];b.a.Children.forEach(e.props.children,function(e){e&&!e.props.disabled&&(t?r.push(e):r.unshift(e))});var o=r.length,a=o&&r[0].key;return r.forEach(function(e,t){e.key===n&&(a=t===o-1?r[0].key:r[t+1].key)}),a}};U.propTypes={destroyInactiveTabPane:O.a.bool,renderTabBar:O.a.func.isRequired,renderTabContent:O.a.func.isRequired,navWrapper:O.a.func,onChange:O.a.func,children:O.a.node,prefixCls:O.a.string,className:O.a.string,tabBarPosition:O.a.string,style:O.a.object,activeKey:O.a.string,defaultActiveKey:O.a.string},U.defaultProps={prefixCls:"rc-tabs",destroyInactiveTabPane:!1,onChange:function(){},navWrapper:function(e){return e},tabBarPosition:"top",children:null,style:{}},U.TabPane=L,Object(S.polyfill)(U);var G=U,q=function(e){function t(){return s()(this,t),h()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return v()(t,e),p()(t,[{key:"getTabPanes",value:function(){var e=this.props,t=e.activeKey,n=e.children,r=[];return b.a.Children.forEach(n,function(n){if(n){var o=n.key,a=t===o;r.push(b.a.cloneElement(n,{active:a,destroyInactiveTabPane:e.destroyInactiveTabPane,rootPrefixCls:e.prefixCls}))}}),r}},{key:"render",value:function(){var e,t=this.props,n=t.prefixCls,r=t.children,a=t.activeKey,l=t.className,u=t.tabBarPosition,c=t.animated,s=t.animatedWithMargin,f=t.style,p=w()((e={},i()(e,n+"-content",!0),i()(e,c?n+"-content-animated":n+"-content-no-animated",!0),e),l);if(c){var d=function(e,t){for(var n=N(e),r=0;r<n.length;r++)if(n[r].key===t)return r;return-1}(r,a);if(-1!==d){var h=s?function(e,t){var n=R(t)?"marginTop":"marginLeft";return i()({},n,100*-e+"%")}(d,u):function(e){return{transform:e,WebkitTransform:e,MozTransform:e}}(function(e,t){return(R(t)?"translateY":"translateX")+"("+100*-e+"%) translateZ(0)"}(d,u));f=o()({},f,h)}else f=o()({},f,{display:"none"})}return b.a.createElement("div",{className:p,style:f},this.getTabPanes())}}]),t}(b.a.Component),X=q;q.propTypes={animated:O.a.bool,animatedWithMargin:O.a.bool,prefixCls:O.a.string,children:O.a.node,activeKey:O.a.string,style:O.a.any,tabBarPosition:O.a.string,className:O.a.string,destroyInactiveTabPane:O.a.bool},q.defaultProps={animated:!0},n.d(t,"TabPane",function(){return L}),n.d(t,"TabContent",function(){return X});t.default=G},1625:function(e,t,n){"use strict";n.r(t);var r=n(23),o=n.n(r),a=n(7),i=n.n(a),l=n(18),u=n.n(l),c=n(21),s=n.n(c),f=n(22),p=n.n(f),d=n(27),h=n.n(d),y=n(4),v=n.n(y),m=n(16),b=n.n(m),g=n(0),O=n.n(g),C=function(e){var t=e.rootPrefixCls+"-item",n=t+" "+t+"-"+e.page;e.active&&(n=n+" "+t+"-active"),e.className&&(n=n+" "+e.className),e.page||(n=n+" "+t+"-disabled");return v.a.createElement("li",{title:e.showTitle?e.page:null,className:n,onClick:function(){e.onClick(e.page)},onKeyPress:function(t){e.onKeyPress(t,e.onClick,e.page)},tabIndex:"0"},e.itemRender(e.page,"page",v.a.createElement("a",null,e.page)))};C.propTypes={page:O.a.number,active:O.a.bool,last:O.a.bool,locale:O.a.object,className:O.a.string,showTitle:O.a.bool,rootPrefixCls:O.a.string,onClick:O.a.func,onKeyPress:O.a.func,itemRender:O.a.func};var w=C,x={ZERO:48,NINE:57,NUMPAD_ZERO:96,NUMPAD_NINE:105,BACKSPACE:8,DELETE:46,ENTER:13,ARROW_UP:38,ARROW_DOWN:40},P=function(e){function t(){var e,n,r,o;u()(this,t);for(var a=arguments.length,i=Array(a),l=0;l<a;l++)i[l]=arguments[l];return n=r=p()(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r.state={goInputText:""},r.buildOptionText=function(e){return e+" "+r.props.locale.items_per_page},r.changeSize=function(e){r.props.changeSize(Number(e))},r.handleChange=function(e){r.setState({goInputText:e.target.value})},r.handleBlur=function(){var e=r.props,t=e.goButton,n=e.quickGo;t||n(r.getValidValue())},r.go=function(e){""!==r.state.goInputText&&(e.keyCode!==x.ENTER&&"click"!==e.type||(r.setState({goInputText:""}),r.props.quickGo(r.getValidValue())))},o=n,p()(r,o)}return h()(t,e),s()(t,[{key:"getValidValue",value:function(){var e=this.state,t=e.goInputText,n=e.current;return isNaN(t)?n:Number(t)}},{key:"render",value:function(){var e=this,t=this.props,n=t.pageSize,r=t.pageSizeOptions,o=t.locale,a=t.rootPrefixCls,i=t.changeSize,l=t.quickGo,u=t.goButton,c=t.selectComponentClass,s=t.buildOptionText,f=t.selectPrefixCls,p=t.disabled,d=this.state.goInputText,h=a+"-options",y=c,m=null,b=null,g=null;if(!i&&!l)return null;if(i&&y){var O=r.map(function(t,n){return v.a.createElement(y.Option,{key:n,value:t},(s||e.buildOptionText)(t))});m=v.a.createElement(y,{disabled:p,prefixCls:f,showSearch:!1,className:h+"-size-changer",optionLabelProp:"children",dropdownMatchSelectWidth:!1,value:(n||r[0]).toString(),onChange:this.changeSize,getPopupContainer:function(e){return e.parentNode}},O)}return l&&(u&&(g="boolean"==typeof u?v.a.createElement("button",{type:"button",onClick:this.go,onKeyUp:this.go,disabled:p},o.jump_to_confirm):v.a.createElement("span",{onClick:this.go,onKeyUp:this.go},u)),b=v.a.createElement("div",{className:h+"-quick-jumper"},o.jump_to,v.a.createElement("input",{disabled:p,type:"text",value:d,onChange:this.handleChange,onKeyUp:this.go,onBlur:this.handleBlur}),o.page,g)),v.a.createElement("li",{className:""+h},m,b)}}]),t}(v.a.Component);P.propTypes={disabled:O.a.bool,changeSize:O.a.func,quickGo:O.a.func,selectComponentClass:O.a.func,current:O.a.number,pageSizeOptions:O.a.arrayOf(O.a.string),pageSize:O.a.number,buildOptionText:O.a.func,locale:O.a.object,rootPrefixCls:O.a.string,selectPrefixCls:O.a.string,goButton:O.a.oneOfType([O.a.bool,O.a.node])},P.defaultProps={pageSizeOptions:["10","20","30","40"]};var S=P,E=n(114);function k(){}function _(e,t,n){var r=e;return void 0===r&&(r=t.pageSize),Math.floor((n.total-1)/r)+1}var j=function(e){function t(e){u()(this,t);var n=p()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));N.call(n);var r=e.onChange!==k;"current"in e&&!r&&console.warn("Warning: You provided a `current` prop to a Pagination component without an `onChange` handler. This will render a read-only component.");var o=e.defaultCurrent;"current"in e&&(o=e.current);var a=e.defaultPageSize;return"pageSize"in e&&(a=e.pageSize),n.state={current:o,currentInputValue:o,pageSize:a},n}return h()(t,e),s()(t,[{key:"componentDidUpdate",value:function(e,t){var n=this.props.prefixCls;if(t.current!==this.state.current&&this.paginationNode){var r=this.paginationNode.querySelector("."+n+"-item-"+t.current);r&&document.activeElement===r&&r.blur()}}},{key:"getValidValue",value:function(e){var t=e.target.value,n=this.state.currentInputValue;return""===t?t:isNaN(Number(t))?n:Number(t)}},{key:"render",value:function(){var e=this.props,t=e.prefixCls,n=e.className,r=e.disabled;if(!0===this.props.hideOnSinglePage&&this.props.total<=this.state.pageSize)return null;var a=this.props,l=a.locale,u=_(void 0,this.state,this.props),c=[],s=null,f=null,p=null,d=null,h=null,y=a.showQuickJumper&&a.showQuickJumper.goButton,m=a.showLessItems?1:2,g=this.state,O=g.current,C=g.pageSize,x=O-1>0?O-1:0,P=O+1<u?O+1:u,E=Object.keys(a).reduce(function(e,t){return"data-"!==t.substr(0,5)&&"aria-"!==t.substr(0,5)&&"role"!==t||(e[t]=a[t]),e},{});if(a.simple)return y&&(h="boolean"==typeof y?v.a.createElement("button",{type:"button",onClick:this.handleGoTO,onKeyUp:this.handleGoTO},l.jump_to_confirm):v.a.createElement("span",{onClick:this.handleGoTO,onKeyUp:this.handleGoTO},y),h=v.a.createElement("li",{title:a.showTitle?""+l.jump_to+this.state.current+"/"+u:null,className:t+"-simple-pager"},h)),v.a.createElement("ul",i()({className:t+" "+t+"-simple "+a.className,style:a.style,ref:this.savePaginationNode},E),v.a.createElement("li",{title:a.showTitle?l.prev_page:null,onClick:this.prev,tabIndex:this.hasPrev()?0:null,onKeyPress:this.runIfEnterPrev,className:(this.hasPrev()?"":t+"-disabled")+" "+t+"-prev","aria-disabled":!this.hasPrev()},a.itemRender(x,"prev",this.getItemIcon(a.prevIcon))),v.a.createElement("li",{title:a.showTitle?this.state.current+"/"+u:null,className:t+"-simple-pager"},v.a.createElement("input",{type:"text",value:this.state.currentInputValue,onKeyDown:this.handleKeyDown,onKeyUp:this.handleKeyUp,onChange:this.handleKeyUp,size:"3"}),v.a.createElement("span",{className:t+"-slash"},"／"),u),v.a.createElement("li",{title:a.showTitle?l.next_page:null,onClick:this.next,tabIndex:this.hasPrev()?0:null,onKeyPress:this.runIfEnterNext,className:(this.hasNext()?"":t+"-disabled")+" "+t+"-next","aria-disabled":!this.hasNext()},a.itemRender(P,"next",this.getItemIcon(a.nextIcon))),h);if(u<=5+2*m){var k={locale:l,rootPrefixCls:t,onClick:this.handleChange,onKeyPress:this.runIfEnter,showTitle:a.showTitle,itemRender:a.itemRender};u||c.push(v.a.createElement(w,i()({},k,{key:"noPager",page:u,className:t+"-disabled"})));for(var j=1;j<=u;j++){var N=this.state.current===j;c.push(v.a.createElement(w,i()({},k,{key:j,page:j,active:N})))}}else{var R=a.showLessItems?l.prev_3:l.prev_5,T=a.showLessItems?l.next_3:l.next_5;if(a.showPrevNextJumpers){var I=t+"-jump-prev";a.jumpPrevIcon&&(I+=" "+t+"-jump-prev-custom-icon"),s=v.a.createElement("li",{title:a.showTitle?R:null,key:"prev",onClick:this.jumpPrev,tabIndex:"0",onKeyPress:this.runIfEnterJumpPrev,className:I},a.itemRender(this.getJumpPrevPage(),"jump-prev",this.getItemIcon(a.jumpPrevIcon)));var M=t+"-jump-next";a.jumpNextIcon&&(M+=" "+t+"-jump-next-custom-icon"),f=v.a.createElement("li",{title:a.showTitle?T:null,key:"next",tabIndex:"0",onClick:this.jumpNext,onKeyPress:this.runIfEnterJumpNext,className:M},a.itemRender(this.getJumpNextPage(),"jump-next",this.getItemIcon(a.jumpNextIcon)))}d=v.a.createElement(w,{locale:a.locale,last:!0,rootPrefixCls:t,onClick:this.handleChange,onKeyPress:this.runIfEnter,key:u,page:u,active:!1,showTitle:a.showTitle,itemRender:a.itemRender}),p=v.a.createElement(w,{locale:a.locale,rootPrefixCls:t,onClick:this.handleChange,onKeyPress:this.runIfEnter,key:1,page:1,active:!1,showTitle:a.showTitle,itemRender:a.itemRender});var D=Math.max(1,O-m),A=Math.min(O+m,u);O-1<=m&&(A=1+2*m),u-O<=m&&(D=u-2*m);for(var K=D;K<=A;K++){var F=O===K;c.push(v.a.createElement(w,{locale:a.locale,rootPrefixCls:t,onClick:this.handleChange,onKeyPress:this.runIfEnter,key:K,page:K,active:F,showTitle:a.showTitle,itemRender:a.itemRender}))}O-1>=2*m&&3!==O&&(c[0]=v.a.cloneElement(c[0],{className:t+"-item-after-jump-prev"}),c.unshift(s)),u-O>=2*m&&O!==u-2&&(c[c.length-1]=v.a.cloneElement(c[c.length-1],{className:t+"-item-before-jump-next"}),c.push(f)),1!==D&&c.unshift(p),A!==u&&c.push(d)}var V=null;a.showTotal&&(V=v.a.createElement("li",{className:t+"-total-text"},a.showTotal(a.total,[0===a.total?0:(O-1)*C+1,O*C>a.total?a.total:O*C])));var B=!this.hasPrev()||!u,W=!this.hasNext()||!u;return v.a.createElement("ul",i()({className:b()(t,n,o()({},t+"-disabled",r)),style:a.style,unselectable:"unselectable",ref:this.savePaginationNode},E),V,v.a.createElement("li",{title:a.showTitle?l.prev_page:null,onClick:this.prev,tabIndex:B?null:0,onKeyPress:this.runIfEnterPrev,className:(B?t+"-disabled":"")+" "+t+"-prev","aria-disabled":B},a.itemRender(x,"prev",this.getItemIcon(a.prevIcon))),c,v.a.createElement("li",{title:a.showTitle?l.next_page:null,onClick:this.next,tabIndex:W?null:0,onKeyPress:this.runIfEnterNext,className:(W?t+"-disabled":"")+" "+t+"-next","aria-disabled":W},a.itemRender(P,"next",this.getItemIcon(a.nextIcon))),v.a.createElement(S,{disabled:r,locale:a.locale,rootPrefixCls:t,selectComponentClass:a.selectComponentClass,selectPrefixCls:a.selectPrefixCls,changeSize:this.props.showSizeChanger?this.changePageSize:null,current:this.state.current,pageSize:this.state.pageSize,pageSizeOptions:this.props.pageSizeOptions,quickGo:this.shouldDisplayQuickJumper()?this.handleChange:null,goButton:y}))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n={};if("current"in e&&(n.current=e.current,e.current!==t.current&&(n.currentInputValue=n.current)),"pageSize"in e&&e.pageSize!==t.pageSize){var r=t.current,o=_(e.pageSize,t,e);r=r>o?o:r,"current"in e||(n.current=r,n.currentInputValue=r),n.pageSize=e.pageSize}return n}}]),t}(v.a.Component);j.propTypes={disabled:O.a.bool,prefixCls:O.a.string,className:O.a.string,current:O.a.number,defaultCurrent:O.a.number,total:O.a.number,pageSize:O.a.number,defaultPageSize:O.a.number,onChange:O.a.func,hideOnSinglePage:O.a.bool,showSizeChanger:O.a.bool,showLessItems:O.a.bool,onShowSizeChange:O.a.func,selectComponentClass:O.a.func,showPrevNextJumpers:O.a.bool,showQuickJumper:O.a.oneOfType([O.a.bool,O.a.object]),showTitle:O.a.bool,pageSizeOptions:O.a.arrayOf(O.a.string),showTotal:O.a.func,locale:O.a.object,style:O.a.object,itemRender:O.a.func,prevIcon:O.a.oneOfType([O.a.func,O.a.node]),nextIcon:O.a.oneOfType([O.a.func,O.a.node]),jumpPrevIcon:O.a.oneOfType([O.a.func,O.a.node]),jumpNextIcon:O.a.oneOfType([O.a.func,O.a.node])},j.defaultProps={defaultCurrent:1,total:0,defaultPageSize:10,onChange:k,className:"",selectPrefixCls:"rc-select",prefixCls:"rc-pagination",selectComponentClass:null,hideOnSinglePage:!1,showPrevNextJumpers:!0,showQuickJumper:!1,showSizeChanger:!1,showLessItems:!1,showTitle:!0,onShowSizeChange:k,locale:{items_per_page:"条/页",jump_to:"跳至",jump_to_confirm:"确定",page:"页",prev_page:"上一页",next_page:"下一页",prev_5:"向前 5 页",next_5:"向后 5 页",prev_3:"向前 3 页",next_3:"向后 3 页"},style:{},itemRender:function(e,t,n){return n}};var N=function(){var e=this;this.getJumpPrevPage=function(){return Math.max(1,e.state.current-(e.props.showLessItems?3:5))},this.getJumpNextPage=function(){return Math.min(_(void 0,e.state,e.props),e.state.current+(e.props.showLessItems?3:5))},this.getItemIcon=function(t){var n=e.props.prefixCls,r=t||v.a.createElement("a",{className:n+"-item-link"});return"function"==typeof t&&(r=v.a.createElement(t,i()({},e.props))),r},this.savePaginationNode=function(t){e.paginationNode=t},this.isValid=function(t){return function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}(t)&&t>=1&&t!==e.state.current},this.shouldDisplayQuickJumper=function(){var t=e.props,n=t.showQuickJumper,r=t.pageSize;return!(t.total<=r)&&n},this.handleKeyDown=function(e){e.keyCode!==x.ARROW_UP&&e.keyCode!==x.ARROW_DOWN||e.preventDefault()},this.handleKeyUp=function(t){var n=e.getValidValue(t);n!==e.state.currentInputValue&&e.setState({currentInputValue:n}),t.keyCode===x.ENTER?e.handleChange(n):t.keyCode===x.ARROW_UP?e.handleChange(n-1):t.keyCode===x.ARROW_DOWN&&e.handleChange(n+1)},this.changePageSize=function(t){var n=e.state.current,r=_(t,e.state,e.props);n=n>r?r:n,0===r&&(n=e.state.current),"number"==typeof t&&("pageSize"in e.props||e.setState({pageSize:t}),"current"in e.props||e.setState({current:n,currentInputValue:n})),e.props.onShowSizeChange(n,t)},this.handleChange=function(t){var n=e.props.disabled,r=t;if(e.isValid(r)&&!n){var o=_(void 0,e.state,e.props);r>o&&(r=o),"current"in e.props||e.setState({current:r,currentInputValue:r});var a=e.state.pageSize;return e.props.onChange(r,a),r}return e.state.current},this.prev=function(){e.hasPrev()&&e.handleChange(e.state.current-1)},this.next=function(){e.hasNext()&&e.handleChange(e.state.current+1)},this.jumpPrev=function(){e.handleChange(e.getJumpPrevPage())},this.jumpNext=function(){e.handleChange(e.getJumpNextPage())},this.hasPrev=function(){return e.state.current>1},this.hasNext=function(){return e.state.current<_(void 0,e.state,e.props)},this.runIfEnter=function(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];"Enter"!==e.key&&13!==e.charCode||t.apply(void 0,r)},this.runIfEnterPrev=function(t){e.runIfEnter(t,e.prev)},this.runIfEnterNext=function(t){e.runIfEnter(t,e.next)},this.runIfEnterJumpPrev=function(t){e.runIfEnter(t,e.jumpPrev)},this.runIfEnterJumpNext=function(t){e.runIfEnter(t,e.jumpNext)},this.handleGoTO=function(t){t.keyCode!==x.ENTER&&"click"!==t.type||e.handleChange(e.state.currentInputValue)}};Object(E.polyfill)(j);var R=j;n.d(t,"default",function(){return R})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvY2hlY2tib3gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3JhZGlvL3JhZGlvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc2lnbk1lcmdlVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2FmZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9jaGVja2JveC9DaGVja2JveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvcmFkaW8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3RhYmxlL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3NlbGVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvZW1wdHkvc3R5bGUvY3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1jaGVja2JveC9lcy9DaGVja2JveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtY2hlY2tib3gvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3RhYmxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi90YWJsZS9UYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TdGFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0NsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUZvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWVyZ2VEZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lQnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUFycmF5QnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJGYWxzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVGltZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQXNzaWduZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlclJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNldFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2hvcnRPdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJdGVyYXRlZUNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRhYmxlL25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3RhYmxlL2ZpbHRlckRyb3Bkb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20tY2xvc2VzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLW1hdGNoZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2NoZWNrYm94L0dyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9yYWRpby9ncm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvcmFkaW8vcmFkaW9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3RhYmxlL0ZpbHRlckRyb3Bkb3duTWVudVdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3RhYmxlL2NyZWF0ZVN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi90YWJsZS9TZWxlY3Rpb25Cb3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3RhYmxlL1NlbGVjdGlvbkNoZWNrYm94QWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi90YWJsZS9Db2x1bW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3RhYmxlL0NvbHVtbkdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi90YWJsZS9jcmVhdGVCb2R5Um93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9wYWdpbmF0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9wYWdpbmF0aW9uL1BhZ2luYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3BhZ2luYXRpb24vTWluaVNlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvX3V0aWwvdHJhbnNCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvbGliL0tleUNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2NhcmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2NhcmQvR3JpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvY2FyZC9NZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi90YWJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJzL2xpYi9UYWJDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi90YWJzL1RhYkJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9saWIvU2Nyb2xsYWJsZUlua1RhYkJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9saWIvSW5rVGFiQmFyTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9saWIvVGFiQmFyVGFic05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRhYnMvbGliL1RhYkJhclJvb3ROb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJzL2xpYi9TY3JvbGxhYmxlVGFiQmFyTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9saWIvU2F2ZVJlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvX3V0aWwvc3R5bGVDaGVja2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9wb3Bjb25maXJtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9kaXZpZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi90YWJsZS9zdHlsZS9jc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3JhZGlvL3N0eWxlL2Nzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvY2hlY2tib3gvc3R5bGUvY3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9wYWdpbmF0aW9uL3N0eWxlL2Nzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvc2VsZWN0L3N0eWxlL2Nzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvY2FyZC9zdHlsZS9jc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL3RhYnMvc3R5bGUvY3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRkL2xpYi9wb3Bjb25maXJtL3N0eWxlL2Nzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50ZC9saWIvcG9wb3Zlci9zdHlsZS9jc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGQvbGliL2RpdmlkZXIvc3R5bGUvY3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJsZS9lcy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFibGUvZXMvQ29sdW1uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFibGUvZXMvQ29sR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRhYmxlL2VzL1RhYmxlSGVhZGVyUm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJsZS9lcy9UYWJsZUhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFibGUvZXMvVGFibGVDZWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJsZS9lcy9UYWJsZVJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFibGUvZXMvRXhwYW5kSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFibGUvZXMvRXhwYW5kYWJsZVJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFibGUvZXMvQmFzZVRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJsZS9lcy9IZWFkVGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRhYmxlL2VzL0JvZHlUYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFibGUvZXMvRXhwYW5kYWJsZVRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJsZS9lcy9UYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFibGUvZXMvQ29sdW1uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJsZS9lcy9Db2x1bW5Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXNlbGVjdC9lcy9PcHRHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtc2VsZWN0L2VzL09wdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtc2VsZWN0L2VzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9DaGlsZHJlbi90b0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1zZWxlY3QvZXMvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtc2VsZWN0L2VzL0Ryb3Bkb3duTWVudS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtc2VsZWN0L2VzL1NlbGVjdFRyaWdnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXNlbGVjdC9lcy9TZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXNlbGVjdC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9lcy9LZXlDb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJzL2VzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJzL2VzL1NlbnRpbmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJzL2VzL1RhYlBhbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRhYnMvZXMvVGFicy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9lcy9UYWJDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJzL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1wYWdpbmF0aW9uL2VzL1BhZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1wYWdpbmF0aW9uL2VzL0tleUNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXBhZ2luYXRpb24vZXMvT3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtcGFnaW5hdGlvbi9lcy9QYWdpbmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy1wYWdpbmF0aW9uL2VzL2xvY2FsZS96aF9DTi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtcGFnaW5hdGlvbi9lcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9kZWZpbmVQcm9wZXJ0eTMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInRvQXJyYXkiLCJnZXRBY3RpdmVJbmRleCIsImNoaWxkcmVuIiwiYWN0aXZlS2V5IiwiYyIsImkiLCJsZW5ndGgiLCJrZXkiLCJnZXRBY3RpdmVLZXkiLCJpbmRleCIsInNldFRyYW5zZm9ybSIsImlzVHJhbnNmb3JtM2RTdXBwb3J0ZWQiLCJzdHlsZSIsIndpbmRvdyIsImF0b2IiLCJzZXRUcmFuc2l0aW9uIiwidiIsInRyYW5zaXRpb24iLCJ3ZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsImdldFRyYW5zZm9ybVByb3BWYWx1ZSIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsIk1velRyYW5zZm9ybSIsImlzVmVydGljYWwiLCJnZXRUcmFuc2Zvcm1CeUluZGV4IiwidGFiQmFyUG9zaXRpb24iLCJnZXRNYXJnaW5TdHlsZSIsIm1hcmdpbkRpcmVjdGlvbiIsImdldFN0eWxlIiwic2V0UHhTdHlsZSIsImVsIiwidmVydGljYWwiLCJnZXREYXRhQXR0ciIsInByb3BzIiwia2V5cyIsInJlZHVjZSIsInByZXYiLCJzdWJzdHIiLCJnZXRMZWZ0IiwidGFiTm9kZSIsIndyYXBwZXJOb2RlIiwiZ2V0VHlwZVZhbHVlIiwiZ2V0VG9wIiwiX3JlYWN0MiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJmb3JFYWNoIiwiY2hpbGQiLCJwdXNoIiwid2Via2l0VHJhbnNmb3JtIiwibW96VHJhbnNmb3JtIiwicHJvcGVydHkiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInJlcGxhY2UiLCJ0b051bSIsInN0YXJ0IiwiY3VycmVudCIsImVuZCIsInRvdGFsIiwicGFyZW50Tm9kZSIsImNoaWxkTm9kZXMiLCJBcnJheSIsInByb3RvdHlwZSIsInNvbWUiLCJjYWxsIiwibm9kZSIsImJveFNpemluZyIsImlzRnVuY3Rpb24iLCJpc0xlbmd0aCIsIm1vZHVsZSIsIl9DaGVja2JveCIsIl9Hcm91cCIsIkdyb3VwIiwiX2RlZmF1bHQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiUHJvcFR5cGVzIiwiX3JjQ2hlY2tib3giLCJfY2xhc3NuYW1lcyIsIl9zaGFsbG93ZXF1YWwiLCJfY29uZmlnUHJvdmlkZXIiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJoYXNPd25Qcm9wZXJ0eSIsImRlc2MiLCJzZXQiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwic291cmNlIiwiYXBwbHkiLCJ0aGlzIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiX2dldFByb3RvdHlwZU9mIiwibyIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX3NldFByb3RvdHlwZU9mIiwicCIsIl9fcmVzdCIsInMiLCJlIiwidCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIlJhZGlvIiwiX1JlYWN0JENvbXBvbmVudCIsIl90aGlzIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jbGFzc0NhbGxDaGVjayIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2F2ZUNoZWNrYm94IiwicmNDaGVja2JveCIsIm9uQ2hhbmdlIiwiY29udGV4dCIsInJhZGlvR3JvdXAiLCJyZW5kZXJSYWRpbyIsIl9yZWYiLCJfY2xhc3NOYW1lcyIsImdldFByZWZpeENscyIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZSIsImN1c3RvbWl6ZVByZWZpeENscyIsInByZWZpeENscyIsImNsYXNzTmFtZSIsInJlc3RQcm9wcyIsInJhZGlvUHJvcHMiLCJuYW1lIiwiY2hlY2tlZCIsImRpc2FibGVkIiwid3JhcHBlckNsYXNzU3RyaW5nIiwiY29uY2F0IiwiY3JlYXRlRWxlbWVudCIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsInJlZiIsInVuZGVmaW5lZCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsIl9pbmhlcml0cyIsIkNvbXBvbmVudCIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9jcmVhdGVDbGFzcyIsIm5leHRQcm9wcyIsIm5leHRTdGF0ZSIsIm5leHRDb250ZXh0Iiwic3RhdGUiLCJmb2N1cyIsImJsdXIiLCJDb25maWdDb25zdW1lciIsImRlZmF1bHRQcm9wcyIsInR5cGUiLCJjb250ZXh0VHlwZXMiLCJhbnkiLCJiYXNlQXNzaWduVmFsdWUiLCJlcSIsIm9iamVjdCIsImdldFByb3RvdHlwZSIsIm92ZXJBcmciLCJvYmplY3RQcm90byIsIkN0b3IiLCJyb290Iiwic3R1YkZhbHNlIiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJCdWZmZXIiLCJpc0J1ZmZlciIsImJhc2VJc1R5cGVkQXJyYXkiLCJiYXNlVW5hcnkiLCJub2RlVXRpbCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJhcnJheUxpa2VLZXlzIiwiYmFzZUtleXNJbiIsImlzQXJyYXlMaWtlIiwiX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCIsIl93YXJuaW5nIiwiQ2hlY2tib3giLCJyZW5kZXJDaGVja2JveCIsImluZGV0ZXJtaW5hdGUiLCJjaGVja2JveEdyb3VwIiwiY2hlY2tib3hQcm9wcyIsInRvZ2dsZU9wdGlvbiIsImxhYmVsIiwiY2xhc3NTdHJpbmciLCJjaGVja2JveENsYXNzIiwiX3JlZjIkY2hlY2tib3hHcm91cCIsInJlZ2lzdGVyVmFsdWUiLCJfcmVmMyIsInByZXZWYWx1ZSIsIl9yZWY0JGNoZWNrYm94R3JvdXAiLCJjYW5jZWxWYWx1ZSIsIl9yZWY1JGNoZWNrYm94R3JvdXAiLCJfX0FOVF9DSEVDS0JPWCIsInBvbHlmaWxsIiwiX2dyb3VwIiwiX3JhZGlvQnV0dG9uIiwiX3JhZGlvIiwiQnV0dG9uIiwiZmxhdEFycmF5IiwiZGF0YSIsImNoaWxkcmVuTmFtZSIsInJlc3VsdCIsImxvb3AiLCJhcnJheSIsIml0ZW0iLCJuZXdJdGVtIiwidHJlZU1hcCIsInRyZWUiLCJtYXBwZXIiLCJtYXAiLCJleHRyYSIsImZsYXRGaWx0ZXIiLCJjYWxsYmFjayIsImFjYyIsImFyciIsImlzQXJyYXkiLCJhcnIyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiaXRlciIsInRvU3RyaW5nIiwiZnJvbSIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJub3JtYWxpemVDb2x1bW5zIiwiZWxlbWVudHMiLCJjb2x1bW5zIiwiZWxlbWVudCIsImlzVmFsaWRFbGVtZW50IiwiY29sdW1uIiwiX19BTlRfVEFCTEVfQ09MVU1OX0dST1VQIiwiZ2VuZXJhdGVWYWx1ZU1hcHMiLCJpdGVtcyIsIm1hcHMiLCJfcmNTZWxlY3QiLCJfb21pdCIsIl9pY29uIiwiU2VsZWN0U2l6ZXMiLCJ0dXBsZSIsIlNlbGVjdFByb3BUeXBlcyIsInN0cmluZyIsInNpemUiLCJvbmVPZiIsIm5vdEZvdW5kQ29udGVudCIsInNob3dTZWFyY2giLCJib29sIiwib3B0aW9uTGFiZWxQcm9wIiwidHJhbnNpdGlvbk5hbWUiLCJjaG9pY2VUcmFuc2l0aW9uTmFtZSIsImlkIiwiU2VsZWN0Iiwic2F2ZVNlbGVjdCIsInJjU2VsZWN0IiwicmVuZGVyU2VsZWN0IiwiZ2V0Q29udGV4dFBvcHVwQ29udGFpbmVyIiwiZ2V0UG9wdXBDb250YWluZXIiLCJyZW5kZXJFbXB0eSIsIl9hIiwiX2EkY2xhc3NOYW1lIiwibW9kZSIsInJlbW92ZUljb24iLCJjbGVhckljb24iLCJtZW51SXRlbVNlbGVjdGVkSWNvbiIsInNob3dBcnJvdyIsImlucHV0VmFsdWUiLCJzZWFyY2hWYWx1ZSIsInJlc3QiLCJjbHMiLCJpc0NvbWJvYm94IiwibW9kZUNvbmZpZyIsIm11bHRpcGxlIiwidGFncyIsImNvbWJvYm94IiwiZmluYWxSZW1vdmVJY29uIiwiY2xvbmVFbGVtZW50IiwiZmluYWxDbGVhckljb24iLCJ0aGVtZSIsImZpbmFsTWVudUl0ZW1TZWxlY3RlZEljb24iLCJpbnB1dEljb24iLCJyZW5kZXJTdWZmaXhJY29uIiwiZ2V0Tm90Rm91bmRDb250ZW50IiwiU0VDUkVUX0NPTUJPQk9YX01PREVfRE9fTk9UX1VTRSIsIl90aGlzJHByb3BzIiwibG9hZGluZyIsInN1ZmZpeEljb24iLCJPcHRpb24iLCJPcHRHcm91cCIsInByb3BUeXBlcyIsIkNoZWNrYm94X0NoZWNrYm94IiwiX0NvbXBvbmVudCIsImNsYXNzQ2FsbENoZWNrX2RlZmF1bHQiLCJwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuX2RlZmF1bHQiLCJoYW5kbGVDaGFuZ2UiLCJzZXRTdGF0ZSIsImV4dGVuZHNfZGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwibmF0aXZlRXZlbnQiLCJzYXZlSW5wdXQiLCJpbnB1dCIsImRlZmF1bHRDaGVja2VkIiwiaW5oZXJpdHNfZGVmYXVsdCIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsInJlbmRlciIsIl9wcm9wcyIsInJlYWRPbmx5IiwidGFiSW5kZXgiLCJvbkNsaWNrIiwib25Gb2N1cyIsIm9uQmx1ciIsImF1dG9Gb2N1cyIsIm90aGVycyIsIm9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzX2RlZmF1bHQiLCJnbG9iYWxQcm9wcyIsIl9jbGFzc25hbWVzXzJfMl82X2NsYXNzbmFtZXNfZGVmYXVsdCIsInJlYWN0X2RlZmF1bHQiLCJhIiwicmVhY3QiLCJwcm9wX3R5cGVzX2RlZmF1bHQiLCJvbmVPZlR5cGUiLCJudW1iZXIiLCJmdW5jIiwicmVhY3RfbGlmZWN5Y2xlc19jb21wYXRfZXMiLCJlc19DaGVja2JveCIsIl9fd2VicGFja19leHBvcnRzX18iLCJSZWFjdERPTSIsIl9yY1RhYmxlIiwiX2ZpbHRlckRyb3Bkb3duIiwiX2NyZWF0ZVN0b3JlIiwiX1NlbGVjdGlvbkJveCIsIl9TZWxlY3Rpb25DaGVja2JveEFsbCIsIl9Db2x1bW4iLCJfQ29sdW1uR3JvdXAiLCJfY3JlYXRlQm9keVJvdyIsIl91dGlsIiwiX3BhZ2luYXRpb24iLCJfc3BpbiIsIl90cmFuc0J1dHRvbiIsIl9Mb2NhbGVSZWNlaXZlciIsIm5vb3AiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJnZXRSb3dTZWxlY3Rpb24iLCJyb3dTZWxlY3Rpb24iLCJnZXRDb2x1bW5LZXkiLCJkYXRhSW5kZXgiLCJkZWZhdWx0UGFnaW5hdGlvbiIsIm9uU2hvd1NpemVDaGFuZ2UiLCJlbXB0eU9iamVjdCIsIlRhYmxlIiwiZ2V0Q2hlY2tib3hQcm9wc0J5SXRlbSIsImdldENoZWNrYm94UHJvcHMiLCJnZXRSZWNvcmRLZXkiLCJDaGVja2JveFByb3BzQ2FjaGUiLCJyZWNvcmQiLCJyb3dLZXkiLCJyZWNvcmRLZXkiLCJvblJvdyIsInN0b3JlIiwiZ2VuZXJhdGVQb3B1cENvbnRhaW5lckZ1bmMiLCJzY3JvbGwiLCJmaW5kRE9NTm9kZSIsImhhbmRsZUZpbHRlciIsIm5leHRGaWx0ZXJzIiwicGFnaW5hdGlvbiIsImZpbHRlcnMiLCJjdXJyZW50Q29sdW1uS2V5cyIsImNvbHVtbktleSIsIm5ld1N0YXRlIiwiZmlsdGVyc1RvU2V0U3RhdGUiLCJnZXRGaWx0ZXJlZFZhbHVlQ29sdW1ucyIsImNvbCIsInNlbGVjdGlvbkRpcnR5IiwicHJlcGFyZVBhcmFtc0FyZ3VtZW50cyIsImhhbmRsZVNlbGVjdCIsInJvd0luZGV4IiwiZGVmYXVsdFNlbGVjdGlvbiIsImdldFN0YXRlIiwiZ2V0RGVmYXVsdFNlbGVjdGlvbiIsInNlbGVjdGVkUm93S2V5cyIsInBpdm90Iiwicm93cyIsImdldEZsYXRDdXJyZW50UGFnZURhdGEiLCJyZWFsSW5kZXgiLCJleHBhbmRlZFJvd1JlbmRlciIsImZpbmRJbmRleCIsInJvdyIsInNoaWZ0S2V5IiwiY2hhbmdlUm93S2V5cyIsImRpcmVjdGlvbiIsIk1hdGgiLCJzaWduIiwiZGlzdCIsImFicyIsInN0ZXAiLCJfbG9vcCIsImluY2x1ZGVzIiwiZmlsdGVyIiwiaiIsInNldFNlbGVjdGVkUm93S2V5cyIsInNlbGVjdFdheSIsImhhbmRsZVJhZGlvU2VsZWN0IiwiaGFuZGxlU2VsZWN0Um93Iiwic2VsZWN0aW9uS2V5Iiwib25TZWxlY3RGdW5jIiwiY2hhbmdlYWJsZVJvd0tleXMiLCJzcGxpY2UiLCJjdXN0b21TZWxlY3Rpb25TdGFydEluZGV4IiwiaGlkZURlZmF1bHRTZWxlY3Rpb25zIiwiaGFuZGxlUGFnZUNoYW5nZSIsIl9sZW4iLCJvdGhlckFyZ3VtZW50cyIsIl9rZXkiLCJoYW5kbGVTaG93U2l6ZUNoYW5nZSIsInBhZ2VTaXplIiwibmV4dFBhZ2luYXRpb24iLCJyZW5kZXJFeHBhbmRJY29uIiwiZXhwYW5kYWJsZSIsImV4cGFuZGVkIiwibmVlZEluZGVudFNwYWNlZCIsIm9uRXhwYW5kIiwiY29tcG9uZW50TmFtZSIsImRlZmF1bHRMb2NhbGUiLCJsb2NhbGUiLCJldmVudCIsImFyaWEtbGFiZWwiLCJjb2xsYXBzZSIsImV4cGFuZCIsIm5vU3R5bGUiLCJyZW5kZXJTZWxlY3Rpb25Cb3giLCJfIiwicmVuZGVyVGFibGUiLCJfcmVmMiIsIl9jbGFzc05hbWVzMiIsImRyb3Bkb3duUHJlZml4Q2xzIiwiY29udGV4dExvY2FsZSIsImNvbnRleHRHZXRQb3B1cENvbnRhaW5lciIsInNob3dIZWFkZXIiLCJyZXN0VGFibGVQcm9wcyIsImdldEN1cnJlbnRQYWdlRGF0YSIsImV4cGFuZEljb25Bc0NlbGwiLCJyZWFsR2V0UG9wdXBDb250YWluZXIiLCJtZXJnZWRMb2NhbGUiLCJlbXB0eVRleHQiLCJib3JkZXJlZCIsImNvbHVtbnNXaXRoUm93U2VsZWN0aW9uIiwicmVuZGVyUm93U2VsZWN0aW9uIiwicmVuZGVyQ29sdW1uc0Ryb3Bkb3duIiwibmV3Q29sdW1uIiwiZXhwYW5kSWNvbkNvbHVtbkluZGV4IiwiZXhwYW5kSWNvbiIsImNvbXBvbmVudHMiLCJyZW5kZXJDb21wb25lbnQiLCJjdXN0b21pemVEcm9wZG93blByZWZpeENscyIsInNwaW5uaW5nIiwidGFibGUiLCJwYWdpbmF0aW9uUGF0Y2hDbGFzcyIsImhhc1BhZ2luYXRpb24iLCJyZW5kZXJQYWdpbmF0aW9uIiwiX3Byb3BzJGNvbHVtbnMiLCJfcmVmNCIsImZpeGVkIiwiY3JlYXRlQ29tcG9uZW50cyIsImdldERlZmF1bHRTb3J0T3JkZXIiLCJnZXRGaWx0ZXJzRnJvbUNvbHVtbnMiLCJnZXREZWZhdWx0UGFnaW5hdGlvbiIsInByZXZpb3VzU3RhdGUiLCJuZXdQYWdpbmF0aW9uIiwiZGF0YVNvdXJjZSIsImdldFNvcnRPcmRlckNvbHVtbnMiLCJzb3J0U3RhdGUiLCJnZXRTb3J0U3RhdGVGcm9tQ29sdW1ucyIsInNvcnRDb2x1bW4iLCJzb3J0T3JkZXIiLCJmaWx0ZXJzRnJvbUNvbHVtbnMiLCJuZXdGaWx0ZXJzIiwiaXNGaWx0ZXJzQ2hhbmdlZCIsIl90aGlzMiIsImdldEZsYXREYXRhIiwiZGVmYXVsdEN1cnJlbnQiLCJkZWZhdWx0UGFnZVNpemUiLCJmaWx0ZXJlZFZhbHVlIiwiY29sS2V5IiwiZGVmaW5lZFNvcnRTdGF0ZSIsImRlZmF1bHRTb3J0ZWRDb2x1bW4iLCJkZWZhdWx0U29ydE9yZGVyIiwic29ydGVkQ29sdW1uIiwiX3RoaXMkc3RhdGUkcGFnaW5hdGlvIiwiZmxvb3IiLCJfcmVmNSIsInNvcnRlciIsImIiLCJnZXRMb2NhbERhdGEiLCJnZXRNYXhDdXJyZW50IiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwic2xpY2UiLCJjaGlsZHJlbkNvbHVtbk5hbWUiLCJfdGhpczMiLCJjdXJyZW50U3RhdGUiLCJzb3J0ZXJGbiIsImdldFNvcnRlckZuIiwicmVjdXJzaXZlU29ydCIsImZpbmRDb2x1bW4iLCJ2YWx1ZXMiLCJvbkZpbHRlciIsInNlbGVjdGlvbkluZm8iLCJfdGhpczQiLCJzZWxlY3RlZFJvd3MiLCJvblNlbGVjdCIsIm9uU2VsZWN0TXVsdGlwbGUiLCJjaGFuZ2VSb3dzIiwib25TZWxlY3RBbGwiLCJfY2hhbmdlUm93cyIsIm9uU2VsZWN0SW52ZXJ0IiwibmV3U29ydE9yZGVyIiwic29ydERpcmVjdGlvbnMiLCJfdGhpcyRzdGF0ZSIsIm90aGVyIiwiaXNTYW1lQ29sdW1uIiwibWV0aG9kSW5kZXgiLCJfdGhpczUiLCJmaWx0ZXJzQ2hhbmdlZCIsIm9yZGVyIiwiZmllbGQiLCJjdXJyZW50RGF0YVNvdXJjZSIsIm15S2V5IiwicHJldkNvbXBvbmVudHMiLCJib2R5Um93IiwiYm9keSIsInByZUJvZHlSb3ciLCJfdGhpczYiLCJfdGhpcyRwcm9wcyRjaGlsZHJlbkMiLCJzb3J0IiwicGFnaW5hdGlvblBvc2l0aW9uIiwicG9zaXRpb24iLCJfcmVmNiIsIl90aGlzNyIsInNlbGVjdGlvbkNvbHVtbkNsYXNzIiwic2VsZWN0aW9ucyIsInNlbGVjdGlvbkNvbHVtbiIsIndpZHRoIiwiY29sdW1uV2lkdGgiLCJ0aXRsZSIsImNvbHVtblRpdGxlIiwiSU5URVJOQUxfQ09MX0RFRklORSIsImNoZWNrYm94QWxsRGlzYWJsZWQiLCJldmVyeSIsInVuc2hpZnQiLCJfcmVmNyIsIl90aGlzOCIsIl90aGlzJHN0YXRlMiIsIl9jbGFzc05hbWVzNCIsImZpbHRlckRyb3Bkb3duIiwic29ydEJ1dHRvbiIsIm9uSGVhZGVyQ2VsbCIsImlzU29ydENvbHVtbiIsImNvbEZpbHRlcnMiLCJzZWxlY3RlZEtleXMiLCJjb25maXJtRmlsdGVyIiwiaXNBc2NlbmQiLCJpc0Rlc2NlbmQiLCJhc2NlbmQiLCJkZXNjZW5kIiwic29ydFRpdGxlIiwiY29sUHJvcHMiLCJvbkhlYWRlckNlbGxDbGljayIsInRvZ2dsZVNvcnRPcmRlciIsInJlbmRlckNvbHVtblRpdGxlIiwiX3RoaXMkc3RhdGUzIiwiRnVuY3Rpb24iLCJDb2x1bW4iLCJDb2x1bW5Hcm91cCIsInVzZUZpeGVkSGVhZGVyIiwiaW5kZW50U2l6ZSIsImJhc2VNZXJnZSIsIm1lcmdlIiwiY3JlYXRlQXNzaWduZXIiLCJzcmNJbmRleCIsIlN0YWNrIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImJhc2VGb3IiLCJiYXNlTWVyZ2VEZWVwIiwiaXNPYmplY3QiLCJrZXlzSW4iLCJzYWZlR2V0IiwiY3VzdG9taXplciIsInN0YWNrIiwic3JjVmFsdWUiLCJuZXdWYWx1ZSIsIkxpc3RDYWNoZSIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsImVudHJpZXMiLCJfX2RhdGFfXyIsImNsZWFyIiwiTWFwIiwiTWFwQ2FjaGUiLCJMQVJHRV9BUlJBWV9TSVpFIiwicGFpcnMiLCJjcmVhdGVCYXNlRm9yIiwiZnJvbVJpZ2h0IiwiaXRlcmF0ZWUiLCJrZXlzRnVuYyIsIml0ZXJhYmxlIiwiY2xvbmVCdWZmZXIiLCJjbG9uZVR5cGVkQXJyYXkiLCJjb3B5QXJyYXkiLCJpbml0Q2xvbmVPYmplY3QiLCJpc0FyZ3VtZW50cyIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJtZXJnZUZ1bmMiLCJvYmpWYWx1ZSIsInN0YWNrZWQiLCJpc0NvbW1vbiIsImlzQXJyIiwiaXNCdWZmIiwiaXNUeXBlZCIsImFsbG9jVW5zYWZlIiwiYnVmZmVyIiwiaXNEZWVwIiwiY29weSIsImNsb25lQXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwiYnl0ZU9mZnNldCIsIlVpbnQ4QXJyYXkiLCJhcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJiYXNlQ3JlYXRlIiwiaXNQcm90b3R5cGUiLCJvYmplY3RDcmVhdGUiLCJwcm90byIsImFyZyIsImlzT2JqZWN0TGlrZSIsImJhc2VHZXRUYWciLCJvYmplY3RUYWciLCJmdW5jUHJvdG8iLCJmdW5jVG9TdHJpbmciLCJvYmplY3RDdG9yU3RyaW5nIiwidHlwZWRBcnJheVRhZ3MiLCJmcmVlR2xvYmFsIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwidHlwZXMiLCJyZXF1aXJlIiwiYmluZGluZyIsImNvcHlPYmplY3QiLCJhc3NpZ25WYWx1ZSIsImlzTmV3IiwiYmFzZVRpbWVzIiwiaXNJbmRleCIsImluaGVyaXRlZCIsImlzQXJnIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJTdHJpbmciLCJuIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VSZXN0IiwiaXNJdGVyYXRlZUNhbGwiLCJhc3NpZ25lciIsInNvdXJjZXMiLCJndWFyZCIsImlkZW50aXR5Iiwib3ZlclJlc3QiLCJzZXRUb1N0cmluZyIsIm5hdGl2ZU1heCIsIm1heCIsImFyZ3MiLCJvdGhlckFyZ3MiLCJ0aGlzQXJnIiwiYmFzZVNldFRvU3RyaW5nIiwic2hvcnRPdXQiLCJjb25zdGFudCIsIkhPVF9DT1VOVCIsIkhPVF9TUEFOIiwibmF0aXZlTm93IiwiRGF0ZSIsIm5vdyIsImNvdW50IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwiX3JjTWVudSIsIl9kb21DbG9zZXN0IiwiX2Ryb3Bkb3duIiwiX2NoZWNrYm94IiwiX0ZpbHRlckRyb3Bkb3duTWVudVdyYXBwZXIiLCJGaWx0ZXJNZW51Iiwic2V0TmV2ZXJTaG93biIsInJvb3ROb2RlIiwibmV2ZXJTaG93biIsInNldFNlbGVjdGVkS2V5cyIsImhhbmRsZUNsZWFyRmlsdGVycyIsImhhbmRsZUNvbmZpcm0iLCJzZXRWaXNpYmxlIiwib25WaXNpYmxlQ2hhbmdlIiwidmlzaWJsZSIsImhhbmRsZU1lbnVJdGVtQ2xpY2siLCJpbmZvIiwia2V5UGF0aCIsImtleVBhdGhPZlNlbGVjdGVkSXRlbSIsInJlbmRlckZpbHRlckljb24iLCJmaWx0ZXJlZCIsImZpbHRlckljb24iLCJkcm9wZG93bkljb25DbGFzcyIsImdldERyb3Bkb3duVmlzaWJsZSIsImZpbHRlclRpdGxlIiwiZmlsdGVyRHJvcGRvd25WaXNpYmxlIiwidmFsdWVLZXlzIiwicHJldlByb3BzIiwib25GaWx0ZXJEcm9wZG93blZpc2libGVDaGFuZ2UiLCJfdGhpcyRwcm9wcyRjb2x1bW4kZmkiLCJfdGhpcyRwcm9wczIiLCJwcm9wU2VsZWN0ZWRLZXlzIiwic3ViTWVudUNscyIsIlN1Yk1lbnUiLCJ0ZXh0IiwicmVuZGVyTWVudXMiLCJyZW5kZXJNZW51SXRlbSIsImZpbHRlck11bHRpcGxlIiwiaW50ZXJuYWxTZWxlY3RlZEtleXMiLCJJdGVtIiwib3JpZ2luU2VsZWN0ZWRLZXlzIiwiX3RoaXMkcHJvcHMzIiwiZHJvcGRvd25NZW51Q2xhc3MiLCJoYXNTdWJNZW51IiwiY29uZmlybSIsImNsZWFyRmlsdGVycyIsIm1lbnVzIiwib25EZXNlbGVjdCIsInZhbCIsImZpbHRlckNvbmZpcm0iLCJmaWx0ZXJSZXNldCIsInRyaWdnZXIiLCJwbGFjZW1lbnQiLCJvdmVybGF5IiwiZm9yY2VSZW5kZXIiLCJwcmV2U3RhdGUiLCJtYXRjaGVzIiwic2VsZWN0b3IiLCJkb2N1bWVudCIsImVsZW0iLCJFbGVtZW50IiwibmF0aXZlTWF0Y2hlcyIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsInBhcmVudEVsZW0iLCJub2RlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsZW4iLCJDaGVja2JveEdyb3VwIiwicmVnaXN0ZXJlZFZhbHVlcyIsIm9wdGlvbiIsIm9wdGlvbkluZGV4Iiwib3B0aW9ucyIsImdldE9wdGlvbnMiLCJvcHQiLCJyZW5kZXJHcm91cCIsImdyb3VwUHJlZml4Q2xzIiwiZG9tUHJvcHMiLCJkZWZhdWx0VmFsdWUiLCJpc1JlcXVpcmVkIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJnZXRDaGVja2VkVmFsdWUiLCJtYXRjaGVkIiwicmFkaW8iLCJSYWRpb0dyb3VwIiwib25SYWRpb0NoYW5nZSIsImV2IiwibGFzdFZhbHVlIiwiX3Byb3BzJGNsYXNzTmFtZSIsImJ1dHRvblN0eWxlIiwiY2hlY2tlZFZhbHVlIiwiUmFkaW9CdXR0b24iLCJyZW5kZXJSYWRpb0J1dHRvbiIsImluaXRpYWxTdGF0ZSIsImxpc3RlbmVycyIsInBhcnRpYWwiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsIlNlbGVjdGlvbkJveCIsImdldENoZWNrU3RhdGUiLCJ1bnN1YnNjcmliZSIsIl9tZW51IiwiY2hlY2tTZWxlY3Rpb24iLCJieURlZmF1bHRDaGVja2VkIiwiZ2V0SW5kZXRlcm1pbmF0ZVN0YXRlIiwic29tZUNoZWNrZWROb3RCeURlZmF1bHRDaGVja2VkIiwic29tZUNoZWNrZWRCeURlZmF1bHRDaGVja2VkIiwiU2VsZWN0aW9uQ2hlY2tib3hBbGwiLCJoYW5kbGVTZWxlY3RBbGxDaGFuZ2UiLCJkZWZhdWx0U2VsZWN0aW9ucyIsInNlbGVjdEFsbCIsInNlbGVjdEludmVydCIsInNldENoZWNrU3RhdGUiLCJzZWxlY3Rpb24iLCJzZWxlY3Rpb25QcmVmaXhDbHMiLCJjdXN0b21TZWxlY3Rpb25zIiwibmV3U2VsZWN0aW9ucyIsIm1lbnUiLCJCb2R5Um93IiwiX3RoaXMkc3RvcmUkZ2V0U3RhdGUiLCJzZWxlY3RlZCIsIl90aGlzMiRzdG9yZSRnZXRTdGF0ZSIsInJvd1Byb3BzIiwiX2NsYXNzbmFtZXMyIiwiX3JjUGFnaW5hdGlvbiIsIl9lbl9VUyIsIl9NaW5pU2VsZWN0IiwiX3NlbGVjdCIsIlBhZ2luYXRpb24iLCJnZXRJY29uc1Byb3BzIiwicHJldkljb24iLCJuZXh0SWNvbiIsImp1bXBQcmV2SWNvbiIsImp1bXBOZXh0SWNvbiIsImN1c3RvbWl6ZVNlbGVjdFByZWZpeENscyIsInNlbGVjdFByZWZpeENscyIsImN1c3RvbUxvY2FsZSIsImlzU21hbGwiLCJtaW5pIiwic2VsZWN0Q29tcG9uZW50Q2xhc3MiLCJNaW5pU2VsZWN0IiwiX0tleUNvZGUiLCJpbmxpbmVTdHlsZSIsImJvcmRlciIsImJhY2tncm91bmQiLCJwYWRkaW5nIiwibGluZUhlaWdodCIsImRpc3BsYXkiLCJUcmFuc0J1dHRvbiIsIm9uS2V5RG93biIsImtleUNvZGUiLCJFTlRFUiIsIm9uS2V5VXAiLCJzZXRSZWYiLCJidG4iLCJkaXYiLCJyb2xlIiwiS2V5Q29kZSIsIk1BQ19FTlRFUiIsIkJBQ0tTUEFDRSIsIlRBQiIsIk5VTV9DRU5URVIiLCJTSElGVCIsIkNUUkwiLCJBTFQiLCJQQVVTRSIsIkNBUFNfTE9DSyIsIkVTQyIsIlNQQUNFIiwiUEFHRV9VUCIsIlBBR0VfRE9XTiIsIkVORCIsIkhPTUUiLCJMRUZUIiwiVVAiLCJSSUdIVCIsIkRPV04iLCJQUklOVF9TQ1JFRU4iLCJJTlNFUlQiLCJERUxFVEUiLCJaRVJPIiwiT05FIiwiVFdPIiwiVEhSRUUiLCJGT1VSIiwiRklWRSIsIlNJWCIsIlNFVkVOIiwiRUlHSFQiLCJOSU5FIiwiUVVFU1RJT05fTUFSSyIsIkEiLCJCIiwiQyIsIkQiLCJFIiwiRiIsIkciLCJIIiwiSSIsIkoiLCJLIiwiTCIsIk0iLCJOIiwiTyIsIlAiLCJRIiwiUiIsIlMiLCJUIiwiVSIsIlYiLCJXIiwiWCIsIlkiLCJaIiwiTUVUQSIsIldJTl9LRVlfUklHSFQiLCJDT05URVhUX01FTlUiLCJOVU1fWkVSTyIsIk5VTV9PTkUiLCJOVU1fVFdPIiwiTlVNX1RIUkVFIiwiTlVNX0ZPVVIiLCJOVU1fRklWRSIsIk5VTV9TSVgiLCJOVU1fU0VWRU4iLCJOVU1fRUlHSFQiLCJOVU1fTklORSIsIk5VTV9NVUxUSVBMWSIsIk5VTV9QTFVTIiwiTlVNX01JTlVTIiwiTlVNX1BFUklPRCIsIk5VTV9ESVZJU0lPTiIsIkYxIiwiRjIiLCJGMyIsIkY0IiwiRjUiLCJGNiIsIkY3IiwiRjgiLCJGOSIsIkYxMCIsIkYxMSIsIkYxMiIsIk5VTUxPQ0siLCJTRU1JQ09MT04iLCJEQVNIIiwiRVFVQUxTIiwiQ09NTUEiLCJQRVJJT0QiLCJTTEFTSCIsIkFQT1NUUk9QSEUiLCJTSU5HTEVfUVVPVEUiLCJPUEVOX1NRVUFSRV9CUkFDS0VUIiwiQkFDS1NMQVNIIiwiQ0xPU0VfU1FVQVJFX0JSQUNLRVQiLCJXSU5fS0VZIiwiTUFDX0ZGX01FVEEiLCJXSU5fSU1FIiwiaXNUZXh0TW9kaWZ5aW5nS2V5RXZlbnQiLCJhbHRLZXkiLCJjdHJsS2V5IiwibWV0YUtleSIsImlzQ2hhcmFjdGVyS2V5IiwibmF2aWdhdGlvbiIsInVzZXJBZ2VudCIsIl9HcmlkIiwiX01ldGEiLCJfdGFicyIsIl9yb3ciLCJfY29sIiwiQ2FyZCIsIm9uVGFiQ2hhbmdlIiwicmVuZGVyQ2FyZCIsIl9leHRyYVByb3BzIiwiaGVhZCIsIl9hJGhlYWRTdHlsZSIsImhlYWRTdHlsZSIsIl9hJGJvZHlTdHlsZSIsImJvZHlTdHlsZSIsIl9hJGJvcmRlcmVkIiwiX2Ekc2l6ZSIsImNvdmVyIiwiYWN0aW9ucyIsInRhYkxpc3QiLCJhY3RpdmVUYWJLZXkiLCJkZWZhdWx0QWN0aXZlVGFiS2V5IiwidGFiQmFyRXh0cmFDb250ZW50IiwiZ2V0Q29tcGF0aWJsZUhvdmVyYWJsZSIsImlzQ29udGFpbkdyaWQiLCJsb2FkaW5nQmxvY2tTdHlsZSIsImxvYWRpbmdCbG9jayIsImd1dHRlciIsInNwYW4iLCJoYXNBY3RpdmVUYWJLZXkiLCJleHRyYVByb3BzIiwidGFicyIsIlRhYlBhbmUiLCJ0YWIiLCJjb3ZlckRvbSIsImFjdGlvbkRvbSIsImFjdGlvbiIsImdldEFjdGlvbiIsImRpdlByb3BzIiwibm9Ib3ZlcmluZyIsImhvdmVyYWJsZSIsImNvbnRhaW5HcmlkIiwiR3JpZCIsIk1ldGEiLCJfcHJvcHMkaG92ZXJhYmxlIiwiYXZhdGFyIiwiZGVzY3JpcHRpb24iLCJhdmF0YXJEb20iLCJ0aXRsZURvbSIsImRlc2NyaXB0aW9uRG9tIiwiTWV0YURldGFpbCIsIl9yY1RhYnMiLCJfVGFiQ29udGVudCIsIl9UYWJCYXIiLCJfc3R5bGVDaGVja2VyIiwiVGFicyIsInJlbW92ZVRhYiIsInRhcmdldEtleSIsIm9uRWRpdCIsImNyZWF0ZU5ld1RhYiIsInJlbmRlclRhYnMiLCJfdGhpcyRwcm9wcyRjbGFzc05hbWUiLCJfdGhpcyRwcm9wcyR0eXBlIiwidGFiUG9zaXRpb24iLCJfdGhpcyRwcm9wcyRhbmltYXRlZCIsImFuaW1hdGVkIiwiaGlkZUFkZCIsInRhYlBhbmVBbmltYXRlZCIsInRhYlBhbmUiLCJjaGlsZHJlbldpdGhDbG9zZSIsImNsb3NhYmxlIiwiY2xvc2VJY29uIiwidGFiQmFyUHJvcHMiLCJjb250ZW50Q2xzIiwicmVuZGVyVGFiQmFyIiwicmVuZGVyVGFiQ29udGVudCIsImFuaW1hdGVkV2l0aE1hcmdpbiIsImlzRmxleFN1cHBvcnRlZCIsIl9leHRlbmRzMyIsIl9jbGFzc0NhbGxDaGVjazMiLCJfY3JlYXRlQ2xhc3MzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zIiwiX2luaGVyaXRzMyIsIl9wcm9wVHlwZXMyIiwiX2NsYXNzbmFtZXMzIiwiX3V0aWxzIiwiVGFiQ29udGVudCIsIm5ld0NoaWxkcmVuIiwiYWN0aXZlIiwiZGVzdHJveUluYWN0aXZlVGFiUGFuZSIsInJvb3RQcmVmaXhDbHMiLCJjbGFzc2VzIiwiYWN0aXZlSW5kZXgiLCJhbmltYXRlZFN0eWxlIiwiZ2V0VGFiUGFuZXMiLCJfU2Nyb2xsYWJsZUlua1RhYkJhciIsIlRhYkJhciIsIlJlbmRlclRhYkJhciIsInRhYkJhclN0eWxlIiwiaW5rQmFyQW5pbWF0ZWQiLCJpbmtCYXIiLCJwcmV2SWNvblR5cGUiLCJuZXh0SWNvblR5cGUiLCJyZW5kZXJQcm9wcyIsImV4dHJhQ29udGVudCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczMiLCJfSW5rVGFiQmFyTm9kZTIiLCJfVGFiQmFyVGFic05vZGUyIiwiX1RhYkJhclJvb3ROb2RlMiIsIl9TY3JvbGxhYmxlVGFiQmFyTm9kZTIiLCJfU2F2ZVJlZjIiLCJTY3JvbGxhYmxlSW5rVGFiQmFyIiwicmVuZGVyVGFiQmFyTm9kZSIsInNhdmVSZWYiLCJnZXRSZWYiLCJfY29tcG9uZW50RGlkVXBkYXRlIiwiY29tcG9uZW50IiwiaW5pdCIsIl9jb21wb25lbnQkcHJvcHMiLCJzdHlsZXMiLCJwYW5lbHMiLCJ3cmFwTm9kZSIsImlua0Jhck5vZGUiLCJhY3RpdmVUYWIiLCJpbmtCYXJOb2RlU3R5bGUiLCJ0cmFuc2Zvcm1TdXBwb3J0ZWQiLCJoZWlnaHQiLCJsZWZ0IiwidG9wIiwiYm90dG9tIiwicmlnaHQiLCJvZmZzZXRXaWR0aCIsInBhcnNlRmxvYXQiLCJvZmZzZXRIZWlnaHQiLCJJbmtUYWJCYXJOb2RlIiwidGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJfd2FybmluZzIiLCJUYWJCYXJUYWJzTm9kZSIsInRhYkJhckd1dHRlciIsInJzdCIsImV2ZW50cyIsIm9uVGFiQ2xpY2siLCJiaW5kIiwiYXJpYS1kaXNhYmxlZCIsImFyaWEtc2VsZWN0ZWQiLCJfcmVhY3QiLCJUYWJCYXJSb290Tm9kZSIsInRvcE9yQm90dG9tIiwidGFiQmFyRXh0cmFDb250ZW50U3R5bGUiLCJmbG9hdCIsImV4dHJhQ29udGVudFN0eWxlIiwicmV2ZXJzZSIsIl9jbGFzc25hbWVzNiIsIl9kZWJvdW5jZTIiLCJfcmVzaXplT2JzZXJ2ZXJQb2x5ZmlsbDIiLCJTY3JvbGxhYmxlVGFiQmFyTm9kZSIsInByZXZUcmFuc2l0aW9uRW5kIiwicHJvcGVydHlOYW1lIiwiY29udGFpbmVyIiwic2Nyb2xsVG9BY3RpdmVUYWIiLCJjdXJyZW50VGFyZ2V0IiwibmF2V3JhcCIsIm5lZWRUb1Nyb2xsIiwiaXNOZXh0UHJldlNob3duIiwibGFzdE5leHRQcmV2U2hvd24iLCJhY3RpdmVUYWJXSCIsImdldFNjcm9sbFdIIiwibmF2V3JhcE5vZGVXSCIsImdldE9mZnNldFdIIiwib2Zmc2V0Iiwid3JhcE9mZnNldCIsImdldE9mZnNldExUIiwiYWN0aXZlVGFiT2Zmc2V0Iiwic2V0T2Zmc2V0Iiwib25QcmV2Q2xpY2siLCJuYXZXcmFwTm9kZSIsIm5leHQiLCJvbk5leHRDbGljayIsImNvbXBvbmVudERpZFVwZGF0ZSIsImRlYm91bmNlZFJlc2l6ZSIsInNldE5leHRQcmV2IiwicmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwibmV4dFByZXYiLCJkaXNjb25uZWN0IiwiY2FuY2VsIiwibmF2Tm9kZSIsIm5hdlRhYnNDb250YWluZXIiLCJuYXZOb2RlV0giLCJjb250YWluZXJXSCIsIm1pbk9mZnNldCIsIl9zdGF0ZSIsInJlYWxPZmZzZXQiLCJzZXROZXh0Iiwic2V0UHJldiIsInByb3AiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjaGVja05leHRQcmV2IiwibWluIiwibmF2T2Zmc2V0IiwibmF2U3R5bGUiLCJfY2xhc3NuYW1lczQiLCJfc3RhdGUyIiwic2Nyb2xsQW5pbWF0ZWQiLCJuYXZXcmFwcGVyIiwic2hvd05leHRQcmV2IiwicHJldkJ1dHRvbiIsInVuc2VsZWN0YWJsZSIsIm9uVHJhbnNpdGlvbkVuZCIsIm5leHRCdXR0b24iLCJuYXZDbGFzc05hbWUiLCJuYXZDbGFzc2VzIiwiZWxlIiwiU2F2ZVJlZiIsIl90ZW1wIiwiX3JldCIsImlzU3R5bGVTdXBwb3J0Iiwic3R5bGVOYW1lIiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGVOYW1lTGlzdCIsIl90b29sdGlwIiwiX2J1dHRvbiIsIl9kZWZhdWx0MiIsIlBvcGNvbmZpcm0iLCJvbkNvbmZpcm0iLCJvbkNhbmNlbCIsInNhdmVUb29sdGlwIiwidG9vbHRpcCIsInJlbmRlck92ZXJsYXkiLCJwb3Bjb25maXJtTG9jYWxlIiwib2tCdXR0b25Qcm9wcyIsImNhbmNlbEJ1dHRvblByb3BzIiwiY2FuY2VsVGV4dCIsIm9rVGV4dCIsIm9rVHlwZSIsImljb24iLCJyZW5kZXJDb25maXJtIiwiZ2V0UG9wdXBEb21Ob2RlIiwiZGVmYXVsdFZpc2libGUiLCJfcHJvcHMkdHlwZSIsIl9wcm9wcyRvcmllbnRhdGlvbiIsIm9yaWVudGF0aW9uIiwiZGFzaGVkIiwib3JpZW50YXRpb25QcmVmaXgiLCJzY3JvbGxiYXJWZXJ0aWNhbFNpemUiLCJzY3JvbGxiYXJIb3Jpem9udGFsU2l6ZSIsInNjcm9sbGJhck1lYXN1cmUiLCJtZWFzdXJlU2Nyb2xsYmFyIiwiX3JlZiRkaXJlY3Rpb24iLCJzY3JvbGxEaXYiLCJzY3JvbGxQcm9wIiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwiYXBwZW5kQ2hpbGQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsInJlbW92ZUNoaWxkIiwid2FybmVkIiwid2FybmluZ09uY2UiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJicm93c2VyX2RlZmF1bHQiLCJlc19Db2x1bW5NYW5hZ2VyIiwiQ29sdW1uTWFuYWdlciIsIl9jYWNoZWQiLCJub3JtYWxpemUiLCJjcmVhdGVDbGFzc19kZWZhdWx0IiwiX2NhY2hlIiwiZ3JvdXBlZENvbHVtbnMiLCJfbGVhZkNvbHVtbnMiLCJsZWZ0Q29sdW1ucyIsInJpZ2h0Q29sdW1ucyIsIl90aGlzOSIsIl9ncm91cENvbHVtbnMiLCJjdXJyZW50Um93IiwicGFyZW50Q29sdW1uIiwiZ3JvdXBlZCIsInNldFJvd1NwYW4iLCJyb3dTcGFuIiwiY29sU3BhbiIsIl90aGlzMTAiLCJpc1RhYmxlQ29sdW1uR3JvdXAiLCJmbiIsIl90aGlzMTEiLCJsZWFmQ29sdW1ucyIsInRvQ29uc3VtYWJsZUFycmF5X2RlZmF1bHQiLCJDb2xHcm91cCIsIl90YWJsZSRwcm9wcyIsImNvbHMiLCJjb2x1bW5NYW5hZ2VyIiwibGVmdExlYWZDb2x1bW5zIiwicmlnaHRMZWFmQ29sdW1ucyIsImFkZGl0aW9uYWxQcm9wcyIsIm1lcmdlZEtleSIsIm1pbldpZHRoIiwiVGFibGVIZWFkZXJSb3ciLCJvbkhlYWRlclJvdyIsIkhlYWRlclJvdyIsImhlYWRlciIsIkhlYWRlckNlbGwiLCJjZWxsIiwiY3VzdG9tU3R5bGUiLCJjZWxsUHJvcHMiLCJjdXN0b21Qcm9wcyIsImFsaWduIiwidGV4dEFsaWduIiwiZGVmaW5lUHJvcGVydHlfZGVmYXVsdCIsImVzX1RhYmxlSGVhZGVyUm93IiwibGliIiwiZml4ZWRDb2x1bW5zSGVhZFJvd3NIZWlnaHQiLCJoZWFkZXJIZWlnaHQiLCJnZXRSb3dIZWlnaHQiLCJUYWJsZUhlYWRlciIsImV4cGFuZGVyIiwiZ2V0SGVhZGVyUm93cyIsInJlbmRlckV4cGFuZEluZGVudENlbGwiLCJIZWFkZXJXcmFwcGVyIiwid3JhcHBlciIsImlzSW52YWxpZFJlbmRlckNlbGxUZXh0IiwiVGFibGVDZWxsX1RhYmxlQ2VsbCIsIlRhYmxlQ2VsbCIsImhhbmRsZUNsaWNrIiwib25DZWxsQ2xpY2siLCJpbmRlbnQiLCJCb2R5Q2VsbCIsIl9jb2x1bW4kY2xhc3NOYW1lIiwiZ2V0X2RlZmF1bHQiLCJ0ZFByb3BzIiwib25DZWxsIiwiaW5kZW50VGV4dCIsInBhZGRpbmdMZWZ0IiwiZXNfVGFibGVDZWxsIiwiVGFibGVSb3dfVGFibGVSb3ciLCJUYWJsZVJvdyIsIm9uVHJpZ2dlckV2ZW50Iiwicm93UHJvcEZ1bmMiLCJsZWdhY3lGdW5jIiwiYWRkaXRpb25hbEZ1bmMiLCJvbkhvdmVyIiwic2hvdWxkUmVuZGVyIiwic2F2ZVJvd1JlZiIsInJvd1JlZiIsImV4cGFuZGVkUm93c0hlaWdodCIsIl9wcm9wczIiLCJmaXhlZENvbHVtbnNCb2R5Um93c0hlaWdodCIsIl9wcm9wczMiLCJyZWFjdF9kb21fZGVmYXVsdCIsIl9wcm9wczQiLCJpc0FueUNvbHVtbnNGaXhlZCIsImV4cGFuZGVkUm93IiwiYW5jZXN0b3JLZXlzIiwic2V0RXhwYW5kZWRSb3dIZWlnaHQiLCJzZXRSb3dIZWlnaHQiLCJfcHJvcHM1IiwiaG92ZXJlZCIsImhhc0V4cGFuZEljb24iLCJyZW5kZXJFeHBhbmRJY29uQ2VsbCIsIm9uUm93Q2xpY2siLCJvblJvd0RvdWJsZUNsaWNrIiwib25Sb3dNb3VzZUVudGVyIiwib25Sb3dNb3VzZUxlYXZlIiwib25Sb3dDb250ZXh0TWVudSIsImNlbGxzIiwiY3VzdG9tQ2xhc3NOYW1lIiwicm93Q2xhc3NOYW1lIiwib25Eb3VibGVDbGljayIsIm9uQ29udGV4dE1lbnUiLCJkYXRhLXJvdy1rZXkiLCJlc19UYWJsZVJvdyIsImN1cnJlbnRIb3ZlcktleSIsImV4cGFuZGVkUm93S2V5cyIsImsiLCJUYWJsZVJvd19nZXRSb3dIZWlnaHQiLCJFeHBhbmRJY29uX0V4cGFuZEljb24iLCJFeHBhbmRJY29uIiwic2hhbGxvd2VxdWFsX2RlZmF1bHQiLCJleHBhbmRDbGFzc05hbWUiLCJlc19FeHBhbmRJY29uIiwiRXhwYW5kYWJsZVJvd19FeHBhbmRhYmxlUm93IiwiRXhwYW5kYWJsZVJvdyIsImNvbHVtbkluZGV4IiwiZXhwYW5kUm93QnlDbGljayIsImhhbmRsZUV4cGFuZENoYW5nZSIsIm9uRXhwYW5kZWRDaGFuZ2UiLCJoYW5kbGVSb3dDbGljayIsIl90aGlzJHByb3BzNCIsImhhbmRsZURlc3Ryb3kiLCJjaGlsZHJlbkRhdGEiLCJleHBhbmRhYmxlUm93UHJvcHMiLCJlc19FeHBhbmRhYmxlUm93IiwiQmFzZVRhYmxlX0Jhc2VUYWJsZSIsIkJhc2VUYWJsZSIsImhhbmRsZVJvd0hvdmVyIiwiaXNIb3ZlciIsInJlbmRlclJvd3MiLCJyZW5kZXJEYXRhIiwiZ2V0Um93S2V5Iiwib25Ib3ZlclByb3BzIiwiZ2V0Q29sdW1ucyIsInJvd1ByZWZpeENscyIsImV4cGFuZGFibGVSb3ciLCJfdGFibGUkcHJvcHMyIiwiZ2V0Qm9keVdyYXBwZXIiLCJ0YWJsZUNsYXNzTmFtZSIsImhhc0hlYWQiLCJoYXNCb2R5IiwidGFibGVTdHlsZSIsIngiLCJ0YWJsZUxheW91dCIsIkJvZHlXcmFwcGVyIiwiZXNfQmFzZVRhYmxlIiwiSGVhZFRhYmxlIiwiaGFuZGxlQm9keVNjcm9sbExlZnQiLCJzY3JvbGxiYXJXaWR0aCIsInkiLCJzY3JvbGxiYXJXaWR0aE9mSGVhZGVyIiwibWFyZ2luQm90dG9tIiwicGFkZGluZ0JvdHRvbSIsIm9uU2Nyb2xsIiwiQm9keVRhYmxlIiwiaGFuZGxlQm9keVNjcm9sbCIsImhhbmRsZVdoZWVsIiwiaW5uZXJCb2R5U3R5bGUiLCJtYXhIZWlnaHQiLCJiYXNlVGFibGUiLCJyZWZOYW1lIiwib25XaGVlbCIsInVzZVRhYkluZGV4IiwiRXhwYW5kYWJsZVRhYmxlX0V4cGFuZGFibGVUYWJsZSIsIkV4cGFuZGFibGVUYWJsZSIsIkV4cGFuZGFibGVUYWJsZV9pbml0aWFsaXNlUHJvcHMiLCJkZWZhdWx0RXhwYW5kQWxsUm93cyIsImRlZmF1bHRFeHBhbmRlZFJvd0tleXMiLCJmaW5hbEV4cGFuZGVkUm93S2V5cyIsImhhbmRsZVVwZGF0ZWQiLCJsYXRlc3RFeHBhbmRlZFJvd3MiLCJfcmVuZGVyIiwicGFyZW50S2V5IiwiY29sQ291bnQiLCJleHBhbmRlZFJvd0NsYXNzTmFtZSIsIm9uRXhwYW5kZWRSb3dzQ2hhbmdlIiwiZGVzdHJveSIsImZyb250IiwibGFzdCIsInJlbW92ZSIsImljb25Db2x1bW4iLCJuZXh0QW5jZXN0b3JLZXlzIiwibmV4dEluZGVudCIsInJlbmRlckV4cGFuZGVkUm93IiwiZXNfRXhwYW5kYWJsZVRhYmxlIiwiVGFibGVfVGFibGUiLCJoYW5kbGVXaW5kb3dSZXNpemUiLCJzeW5jRml4ZWRUYWJsZVJvd0hlaWdodCIsInNldFNjcm9sbFBvc2l0aW9uQ2xhc3NOYW1lIiwidGFibGVSZWN0IiwidGFibGVOb2RlIiwiaGVhZFJvd3MiLCJoZWFkVGFibGUiLCJib2R5VGFibGUiLCJib2R5Um93cyIsImdldEF0dHJpYnV0ZSIsIl90aGlzJHByb3BzJHNjcm9sbCIsInNjcm9sbExlZnQiLCJsYXN0U2Nyb2xsTGVmdCIsImhhbmRsZUJvZHlTY3JvbGxUb3AiLCJfdGhpcyRwcm9wcyRzY3JvbGwyIiwiZml4ZWRDb2x1bW5zQm9keUxlZnQiLCJmaXhlZENvbHVtbnNCb2R5UmlnaHQiLCJzY3JvbGxUb3AiLCJsYXN0U2Nyb2xsVG9wIiwiX3RoaXMkcHJvcHMkc2Nyb2xsMyIsIm5hdmlnYXRvciIsIm1hdGNoIiwid2QiLCJkZWx0YVkiLCJzZXRTY3JvbGxQb3NpdGlvbiIsImRlYm91bmNlZFdpbmRvd1Jlc2l6ZSIsIndhaXQiLCJpbW1lZGlhdGUiLCJkZWJvdW5jZUZ1bmMiLCJwZXJzaXN0IiwiY2FsbE5vdyIsImRlYm91bmNlIiwibWVyZ2VfZGVmYXVsdCIsInJlc2l6ZUV2ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhc1Njcm9sbFgiLCJyZXNldFNjcm9sbFgiLCJzY3JvbGxQb3NpdGlvbiIsImNvbXBvbmVudF9jbGFzc2VzX2RlZmF1bHQiLCJSZWdFeHAiLCJhZGQiLCJzY3JvbGxUb0xlZnQiLCJzY3JvbGxUb1JpZ2h0IiwiX3Byb3BzJHNjcm9sbCIsInNjcm9sbGFibGUiLCJyZW5kZXJFbXB0eVRleHQiLCJyZW5kZXJGb290ZXIiLCJfcHJvcHMyJHNjcm9sbCIsImZvb3RlciIsImVtcHR5Q2xhc3NOYW1lIiwicmVzZXQiLCJoYXNMZWZ0Rml4ZWQiLCJpc0FueUNvbHVtbnNMZWZ0Rml4ZWQiLCJoYXNSaWdodEZpeGVkIiwiaXNBbnlDb2x1bW5zUmlnaHRGaXhlZCIsImRhdGFBbmRBcmlhUHJvcHMiLCJtZW1vIiwiZ2V0RGF0YUFuZEFyaWFQcm9wcyIsInJlbmRlclRpdGxlIiwicmVuZGVyTWFpblRhYmxlIiwicmVuZGVyTGVmdEZpeGVkVGFibGUiLCJyZW5kZXJSaWdodEZpeGVkVGFibGUiLCJzaGFwZSIsImVzX1RhYmxlIiwiZXNfQ29sdW1uIiwiQ29sdW1uR3JvdXBfQ29sdW1uR3JvdXAiLCJlc19Db2x1bW5Hcm91cCIsImQiLCJpc1NlbGVjdE9wdEdyb3VwIiwiT3B0aW9uX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJPcHRpb25fYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiT3B0aW9uX2dldFByb3RvdHlwZU9mIiwiT3B0aW9uX3NldFByb3RvdHlwZU9mIiwiT3B0aW9uX2NsYXNzQ2FsbENoZWNrIiwiT3B0aW9uX2luaGVyaXRzIiwicHJvcHNWYWx1ZVR5cGUiLCJwcm9wTmFtZSIsImJhc2ljVHlwZSIsInByb3BfdHlwZXMiLCJsYWJlbEluVmFsdWVTaGFwZSIsImxhYmVsSW5WYWx1ZSIsIkVycm9yIiwiaXNTZWxlY3RPcHRpb24iLCJkZWZhdWx0QWN0aXZlRmlyc3RPcHRpb24iLCJmaWx0ZXJPcHRpb24iLCJhbGxvd0NsZWFyIiwib3B0aW9uRmlsdGVyUHJvcCIsImFuaW1hdGlvbiIsIm9wZW4iLCJkZWZhdWx0T3BlbiIsIm9uU2VhcmNoIiwib25Qb3B1cFNjcm9sbCIsIm9uSW5wdXRLZXlEb3duIiwicGxhY2Vob2xkZXIiLCJkcm9wZG93blN0eWxlIiwibWF4VGFnVGV4dExlbmd0aCIsIm1heFRhZ0NvdW50IiwibWF4VGFnUGxhY2Vob2xkZXIiLCJ0b2tlblNlcGFyYXRvcnMiLCJnZXRJbnB1dEVsZW1lbnQiLCJzaG93QWN0aW9uIiwiZHJvcGRvd25SZW5kZXIiLCJyZXQiLCJ0b1RpdGxlIiwiZ2V0VmFsdWVQcm9wVmFsdWUiLCJnZXRQcm9wVmFsdWUiLCJpc011bHRpcGxlT3JUYWdzIiwiaXNNdWx0aXBsZU9yVGFnc09yQ29tYm9ib3giLCJpc1NpbmdsZU1vZGUiLCJ1dGlsX3RvQXJyYXkiLCJnZXRNYXBLZXkiLCJwcmV2ZW50RGVmYXVsdEV2ZW50IiwiZmluZEluZGV4SW5WYWx1ZUJ5U2luZ2xlVmFsdWUiLCJzaW5nbGVWYWx1ZSIsImdldExhYmVsRnJvbVByb3BzVmFsdWUiLCJVTlNFTEVDVEFCTEVfU1RZTEUiLCJ1c2VyU2VsZWN0IiwiV2Via2l0VXNlclNlbGVjdCIsIlVOU0VMRUNUQUJMRV9BVFRSSUJVVEUiLCJkZWZhdWx0RmlsdGVyRm4iLCJqb2luIiwidG9Mb3dlckNhc2UiLCJEcm9wZG93bk1lbnVfZ2V0UHJvdG90eXBlT2YiLCJEcm9wZG93bk1lbnVfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiRHJvcGRvd25NZW51X3NldFByb3RvdHlwZU9mIiwiRHJvcGRvd25NZW51X0Ryb3Bkb3duTWVudSIsIkRyb3Bkb3duTWVudSIsIkRyb3Bkb3duTWVudV9jbGFzc0NhbGxDaGVjayIsIkRyb3Bkb3duTWVudV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwicmFmSW5zdGFuY2UiLCJsYXN0VmlzaWJsZSIsInNjcm9sbEFjdGl2ZUl0ZW1Ub1ZpZXciLCJpdGVtQ29tcG9uZW50IiwicmVhY3RfZG9tIiwiZmlyc3RBY3RpdmVJdGVtIiwiZmlyc3RBY3RpdmVWYWx1ZSIsInNjcm9sbEludG9WaWV3T3B0cyIsIm9ubHlTY3JvbGxJZk5lZWRlZCIsImFsaWduV2l0aFRvcCIsInJhZl9kZWZhdWx0IiwibGliX2RlZmF1bHQiLCJtZW51UmVmIiwicmVuZGVyTWVudSIsIm1lbnVJdGVtcyIsIm9uTWVudVNlbGVjdCIsImJhY2tmaWxsVmFsdWUiLCJvbk1lbnVEZXNlbGVjdCIsIm1lbnVQcm9wcyIsImdldFNlbGVjdEtleXMiLCJpc01lbnVJdGVtR3JvdXAiLCJpdGVtVmFsdWUiLCJpdGVtS2V5IiwiYWN0aXZlS2V5UHJvcHMiLCJkZWZhdWx0QWN0aXZlRmlyc3QiLCJjbG9uZWRNZW51SXRlbXMiLCJmb3VuZEZpcnN0IiwiY2xvbmUiLCJsYXN0SW5wdXRWYWx1ZSIsImVzIiwic2F2ZU1lbnVSZWYiLCJkcm9wZG93bk1lbnVTdHlsZSIsIml0ZW1JY29uIiwiRHJvcGRvd25NZW51X2luaGVyaXRzIiwib3ZlcmZsb3ciLCJhcmlhSWQiLCJvblBvcHVwRm9jdXMiLCJvbk1vdXNlRG93biIsIlNlbGVjdFRyaWdnZXJfZXh0ZW5kcyIsIlNlbGVjdFRyaWdnZXJfZGVmaW5lUHJvcGVydGllcyIsIlNlbGVjdFRyaWdnZXJfZ2V0UHJvdG90eXBlT2YiLCJTZWxlY3RUcmlnZ2VyX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlNlbGVjdFRyaWdnZXJfc2V0UHJvdG90eXBlT2YiLCJkaXNwbGF5TmFtZSIsIm9uTWVudURlU2VsZWN0IiwicmNfdHJpZ2dlcl9lcyIsIkJVSUxUX0lOX1BMQUNFTUVOVFMiLCJib3R0b21MZWZ0IiwicG9pbnRzIiwiYWRqdXN0WCIsImFkanVzdFkiLCJ0b3BMZWZ0IiwiU2VsZWN0VHJpZ2dlcl9TZWxlY3RUcmlnZ2VyIiwiU2VsZWN0VHJpZ2dlciIsIlNlbGVjdFRyaWdnZXJfY2xhc3NDYWxsQ2hlY2siLCJTZWxlY3RUcmlnZ2VyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJkcm9wZG93bk1lbnVSZWYiLCJzZXREcm9wZG93bldpZHRoIiwiY2FuY2VsUmFmSW5zdGFuY2UiLCJkcm9wZG93bldpZHRoIiwiZ2V0SW5uZXJNZW51IiwiZ2V0UG9wdXBET01Ob2RlIiwidHJpZ2dlclJlZiIsImdldERyb3Bkb3duRWxlbWVudCIsIm5ld1Byb3BzIiwibWVudU5vZGUiLCJzYXZlRHJvcGRvd25NZW51UmVmIiwiZ2V0RHJvcGRvd25QcmVmaXhDbHMiLCJnZXREcm9wZG93blRyYW5zaXRpb25OYW1lIiwic2F2ZVRyaWdnZXJSZWYiLCJTZWxlY3RUcmlnZ2VyX2luaGVyaXRzIiwiU2VsZWN0VHJpZ2dlcl9jcmVhdGVDbGFzcyIsIl9wb3B1cENsYXNzTmFtZSIsImhpZGVBY3Rpb24iLCJlbXB0eSIsImRyb3Bkb3duQWxpZ24iLCJkcm9wZG93bkNsYXNzTmFtZSIsImRyb3Bkb3duTWF0Y2hTZWxlY3RXaWR0aCIsInBvcHVwQ2xhc3NOYW1lIiwicG9wdXBFbGVtZW50IiwicG9wdXBTdHlsZSIsIndpZHRoUHJvcCIsInBvcHVwUGxhY2VtZW50IiwiYnVpbHRpblBsYWNlbWVudHMiLCJwb3B1cFRyYW5zaXRpb25OYW1lIiwib25Qb3B1cFZpc2libGVDaGFuZ2UiLCJvbkRyb3Bkb3duVmlzaWJsZUNoYW5nZSIsInBvcHVwIiwicG9wdXBBbGlnbiIsInBvcHVwVmlzaWJsZSIsIlNlbGVjdF9kZWZpbmVQcm9wZXJ0eSIsIlNlbGVjdF9leHRlbmRzIiwiU2VsZWN0X2RlZmluZVByb3BlcnRpZXMiLCJTZWxlY3RfZ2V0UHJvdG90eXBlT2YiLCJTZWxlY3RfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiU2VsZWN0X3NldFByb3RvdHlwZU9mIiwiU0VMRUNUX0VNUFRZX1ZBTFVFX0tFWSIsImNoYWluaW5nIiwiZm5zIiwiX2xlbjIiLCJfa2V5MiIsIlNlbGVjdF9TZWxlY3QiLCJTZWxlY3RfY2xhc3NDYWxsQ2hlY2siLCJTZWxlY3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImlucHV0UmVmIiwiaW5wdXRNaXJyb3JSZWYiLCJ0b3BDdHJsUmVmIiwic2VsZWN0VHJpZ2dlclJlZiIsInJvb3RSZWYiLCJzZWxlY3Rpb25SZWYiLCJkcm9wZG93bkNvbnRhaW5lciIsImJsdXJUaW1lciIsImZvY3VzVGltZXIiLCJjb21ib2JveFRpbWVyIiwiX2ZvY3VzZWQiLCJfbW91c2VEb3duIiwiX29wdGlvbnMiLCJfZW1wdHkiLCJvbklucHV0Q2hhbmdlIiwic3RyIiwic2VwYXJhdG9ycyIsImxhc3RJbmRleE9mIiwiaW5jbHVkZXNTZXBhcmF0b3JzIiwibmV4dFZhbHVlIiwiZ2V0VmFsdWVCeUlucHV0IiwiZmlyZUNoYW5nZSIsInNldE9wZW5TdGF0ZSIsIm5lZWRGb2N1cyIsInNldElucHV0VmFsdWUiLCJjbGVhckJsdXJUaW1lIiwidGltZW91dEZvY3VzIiwidXBkYXRlRm9jdXNDbGFzc05hbWUiLCJnZXRJbnB1dERPTU5vZGUiLCJpc1JlYWxPcGVuIiwiZ2V0UmVhbE9wZW5TdGF0ZSIsIm9wZW5JZkhhc0NoaWxkcmVuIiwiaGFuZGxlQmFja2ZpbGwiLCJyZW1vdmVTZWxlY3RlZCIsInNlbGVjdGVkVmFsdWUiLCJza2lwVHJpZ2dlciIsImZpcmVTZWFyY2giLCJmaXJlU2VsZWN0IiwiYXV0b0NsZWFyU2VhcmNoVmFsdWUiLCJkb21FdmVudCIsIm9uQXJyb3dDbGljayIsIm9uUGxhY2Vob2xkZXJDbGljayIsIm9uT3V0ZXJGb2N1cyIsImlucHV0Tm9kZSIsIm1heWJlRm9jdXMiLCJvbk91dGVyQmx1ciIsImZpcnN0T3B0aW9uIiwiZmluZEZpcnN0TWVudUl0ZW0iLCJmb3VuZCIsInRtcFZhbHVlIiwiZ2V0VkxGb3JPbkNoYW5nZSIsIm9uQ2xlYXJTZWxlY3Rpb24iLCJvbkNob2ljZUFuaW1hdGlvbkxlYXZlIiwiZm9yY2VQb3B1cEFsaWduIiwiZ2V0T3B0aW9uSW5mb0J5U2luZ2xlVmFsdWUiLCJvcHRpb25zSW5mbyIsImRlZmF1bHRMYWJlbCIsInZhbHVlTGFiZWwiLCJkZWZhdWx0VmFsdWVMYWJlbCIsImdldE9wdGlvbkJ5U2luZ2xlVmFsdWUiLCJnZXRPcHRpb25zQnlTaW5nbGVWYWx1ZSIsImdldFZhbHVlQnlMYWJlbCIsIm9sZExhYmxlIiwiZ2V0VkxCeVNpbmdsZVZhbHVlIiwiZ2V0TGFiZWxCeVNpbmdsZVZhbHVlIiwidmxzUyIsInZscyIsInZsIiwiZ2V0RHJvcGRvd25Db250YWluZXIiLCJnZXRQbGFjZWhvbGRlckVsZW1lbnQiLCJoaWRkZW4iLCJkZWZhdWx0SW5wdXQiLCJhdXRvQ29tcGxldGUiLCJpbnB1dEVsZW1lbnQiLCJpbnB1dENscyIsInNhdmVJbnB1dFJlZiIsInNhdmVJbnB1dE1pcnJvclJlZiIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRJbnB1dE1pcnJvckRPTU5vZGUiLCJnZXRQb3B1cE1lbnVDb21wb25lbnQiLCJjb25maWciLCJoYXNOZXdWYWx1ZSIsInJlZyIsInNwbGl0IiwidG9rZW4iLCJzcGxpdEJ5U2VwYXJhdG9ycyIsIl9vcGVuIiwibWFya01vdXNlRG93biIsIm1hcmtNb3VzZUxlYXZlIiwiYmFja2ZpbGwiLCJkZWZhdWx0RmlsdGVyIiwiZmlsdGVyRm4iLCJjbGVhckZvY3VzVGltZSIsImNsZWFyQ29tYm9ib3hUaW1lIiwiYWN0aXZlRWxlbWVudCIsInNlbGVjdGVkS2V5IiwiaXNDaGlsZERpc2FibGVkIiwicmVuZGVyRmlsdGVyT3B0aW9ucyIsImNoaWxkcmVuS2V5cyIsInJlbmRlckZpbHRlck9wdGlvbnNGcm9tQ2hpbGRyZW4iLCJ2YWwxIiwidmFsMiIsIm1lbnVJdGVtIiwiYXR0cmlidXRlIiwic2VsIiwiaW5uZXJJdGVtcyIsInN1YkNoaWxkIiwiY2hpbGRWYWx1ZVN1YiIsIl9pbm5lckl0ZW1zIiwid2FybmluZ19kZWZhdWx0IiwiY2hpbGRWYWx1ZSIsImlzTXVsdGlwbGUiLCJ2YWxpZGF0ZU9wdGlvblZhbHVlIiwicmVuZGVyVG9wQ29udHJvbE5vZGUiLCJpbm5lck5vZGUiLCJzaG93U2VsZWN0ZWRWYWx1ZSIsIm9wYWNpdHkiLCJfdGhpcyRnZXRPcHRpb25JbmZvQnkzIiwibWF4VGFnUGxhY2Vob2xkZXJFbCIsInNlbGVjdGVkVmFsdWVOb2RlcyIsImxpbWl0ZWRDb3VudFZhbHVlIiwib21pdHRlZFZhbHVlcyIsImNvbnRlbnQiLCJjaG9pY2VDbGFzc05hbWUiLCJBbmltYXRlIiwib25MZWF2ZSIsInNhdmVUb3BDdHJsUmVmIiwiZ2V0T3B0aW9uc0luZm9Gcm9tUHJvcHMiLCJpc0Rpc2FibGVkRXhpc3QiLCJnZXRWYWx1ZUZyb21Qcm9wcyIsImdldElucHV0VmFsdWVGb3JDb21ib2JveCIsInNraXBCdWlsZE9wdGlvbnNJbmZvIiwic2F2ZVNlbGVjdFRyaWdnZXJSZWYiLCJzYXZlUm9vdFJlZiIsInNhdmVTZWxlY3Rpb25SZWYiLCJTZWxlY3RfaW5oZXJpdHMiLCJTZWxlY3RfY3JlYXRlQ2xhc3MiLCJnZXRUaW1lIiwiciIsInJhbmRvbSIsImdlbmVyYXRlVVVJRCIsIm1pcnJvck5vZGUiLCJfdGhpcyRwcm9wczQkc2hvd0Fycm8iLCJkZWZhdWx0SWNvbiIsIl90aGlzJHByb3BzNSIsIl9yb290Q2xzIiwiX3Byb3BzJHNob3dBcnJvdyIsImN0cmxOb2RlIiwiZmlsdGVyT3B0aW9ucyIsInJlYWxPcGVuIiwiZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzIiwiZXh0cmFTZWxlY3Rpb25Qcm9wcyIsInJvb3RDbHMiLCJvbk1vdXNlVXAiLCJvbk1vdXNlT3V0IiwiYXJpYS1hdXRvY29tcGxldGUiLCJhcmlhLWhhc3BvcHVwIiwiYXJpYS1jb250cm9scyIsImFyaWEtZXhwYW5kZWQiLCJyZW5kZXJDbGVhciIsInJlbmRlckFycm93IiwiZ2V0T3B0aW9uc0Zyb21DaGlsZHJlbiIsInVzZURlZmF1bHRWYWx1ZSIsImdldExhYmVsRnJvbU9wdGlvbiIsInByZVN0YXRlIiwib2xkT3B0aW9uc0luZm8iLCJlc19TZWxlY3QiLCJTZW50aW5lbENvbnRleHQiLCJTZW50aW5lbFByb3ZpZGVyIiwiUHJvdmlkZXIiLCJTZW50aW5lbENvbnN1bWVyIiwiQ29uc3VtZXIiLCJzZW50aW5lbFN0eWxlIiwiU2VudGluZWxfU2VudGluZWwiLCJTZW50aW5lbCIsIndoaWNoIiwibmV4dEVsZW1lbnQiLCJwcmV2RWxlbWVudCIsImVzX0tleUNvZGUiLCJlc19TZW50aW5lbCIsIlRhYlBhbmVfVGFiUGFuZSIsIl9pc0FjdGl2ZWQiLCJzZW50aW5lbFN0YXJ0Iiwic2VudGluZWxFbmQiLCJzZXRQYW5lbFNlbnRpbmVsU3RhcnQiLCJzZXRQYW5lbFNlbnRpbmVsRW5kIiwicGFuZWxTZW50aW5lbFN0YXJ0IiwicGFuZWxTZW50aW5lbEVuZCIsImFyaWEtaGlkZGVuIiwiZXNfVGFiUGFuZSIsImdldERlZmF1bHRBY3RpdmVLZXkiLCJUYWJzX1RhYnMiLCJUYWJzX2luaXRpYWxpc2VQcm9wcyIsImRlZmF1bHRBY3RpdmVLZXkiLCJzZW50aW5lbElkIiwiZm9yY2VVcGRhdGUiLCJ0YWJCYXIiLCJvbk5hdktleURvd24iLCJ0YWJDb250ZW50Iiwic2V0QWN0aXZlS2V5Iiwic2V0U2VudGluZWxTdGFydCIsInNldFNlbnRpbmVsRW5kIiwiY29udGVudHMiLCJhY3RpdmVLZXlJc1ZhbGlkIiwiZXZlbnRLZXlDb2RlIiwibmV4dEtleSIsImdldE5leHRBY3RpdmVLZXkiLCJwcmV2aW91c0tleSIsInVwZGF0ZVNlbnRpbmVsQ29udGV4dCIsImVzX1RhYnMiLCJUYWJDb250ZW50X1RhYkNvbnRlbnQiLCJlc19UYWJDb250ZW50IiwiUGFnZXJfUGFnZXIiLCJwYWdlIiwic2hvd1RpdGxlIiwib25LZXlQcmVzcyIsIml0ZW1SZW5kZXIiLCJlc19QYWdlciIsIk5VTVBBRF9aRVJPIiwiTlVNUEFEX05JTkUiLCJBUlJPV19VUCIsIkFSUk9XX0RPV04iLCJPcHRpb25zX09wdGlvbnMiLCJPcHRpb25zIiwiZ29JbnB1dFRleHQiLCJidWlsZE9wdGlvblRleHQiLCJpdGVtc19wZXJfcGFnZSIsImNoYW5nZVNpemUiLCJoYW5kbGVCbHVyIiwiZ29CdXR0b24iLCJxdWlja0dvIiwiZ2V0VmFsaWRWYWx1ZSIsImdvIiwiaXNOYU4iLCJwYWdlU2l6ZU9wdGlvbnMiLCJjaGFuZ2VTZWxlY3QiLCJnb0lucHV0IiwiZ290b0J1dHRvbiIsInRyaWdnZXJOb2RlIiwianVtcF90b19jb25maXJtIiwianVtcF90byIsImFycmF5T2YiLCJlc19PcHRpb25zIiwiY2FsY3VsYXRlUGFnZSIsIlBhZ2luYXRpb25fUGFnaW5hdGlvbiIsIlBhZ2luYXRpb25faW5pdGlhbGlzZVByb3BzIiwiaGFzT25DaGFuZ2UiLCJjb25zb2xlIiwid2FybiIsImN1cnJlbnRJbnB1dFZhbHVlIiwicGFnaW5hdGlvbk5vZGUiLCJsYXN0Q3VycmVudE5vZGUiLCJoaWRlT25TaW5nbGVQYWdlIiwiYWxsUGFnZXMiLCJwYWdlckxpc3QiLCJqdW1wUHJldiIsImp1bXBOZXh0IiwiZmlyc3RQYWdlciIsImxhc3RQYWdlciIsInNob3dRdWlja0p1bXBlciIsInBhZ2VCdWZmZXJTaXplIiwic2hvd0xlc3NJdGVtcyIsInByZXZQYWdlIiwibmV4dFBhZ2UiLCJzaW1wbGUiLCJoYW5kbGVHb1RPIiwic2F2ZVBhZ2luYXRpb25Ob2RlIiwicHJldl9wYWdlIiwiaGFzUHJldiIsInJ1bklmRW50ZXJQcmV2IiwiZ2V0SXRlbUljb24iLCJoYW5kbGVLZXlEb3duIiwiaGFuZGxlS2V5VXAiLCJuZXh0X3BhZ2UiLCJydW5JZkVudGVyTmV4dCIsImhhc05leHQiLCJwYWdlclByb3BzIiwicnVuSWZFbnRlciIsInByZXZJdGVtVGl0bGUiLCJwcmV2XzMiLCJwcmV2XzUiLCJuZXh0SXRlbVRpdGxlIiwibmV4dF8zIiwibmV4dF81Iiwic2hvd1ByZXZOZXh0SnVtcGVycyIsImp1bXBQcmV2Q2xhc3NTdHJpbmciLCJydW5JZkVudGVySnVtcFByZXYiLCJnZXRKdW1wUHJldlBhZ2UiLCJqdW1wTmV4dENsYXNzU3RyaW5nIiwicnVuSWZFbnRlckp1bXBOZXh0IiwiZ2V0SnVtcE5leHRQYWdlIiwiX2kiLCJfYWN0aXZlIiwidG90YWxUZXh0Iiwic2hvd1RvdGFsIiwicHJldkRpc2FibGVkIiwibmV4dERpc2FibGVkIiwic2hvd1NpemVDaGFuZ2VyIiwiY2hhbmdlUGFnZVNpemUiLCJzaG91bGREaXNwbGF5UXVpY2tKdW1wZXIiLCJuZXdDdXJyZW50IiwiaWNvbk5vZGUiLCJpc1ZhbGlkIiwiaXNGaW5pdGUiLCJpc0ludGVnZXIiLCJjdXJyZW50UGFnZSIsInJlc3RQYXJhbXMiLCJjaGFyQ29kZSIsImVzX1BhZ2luYXRpb24iXSwibWFwcGluZ3MiOiIyRkFFQUEsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBR0EsSUFFQUMsRUFBQUMsRUFGdUJDLEVBQVEsS0FJL0JKLEVBQUFLLFVBQ0FMLEVBQUFNLGVBZ0NBLFNBQUFDLEVBQUFDLEdBRUEsSUFEQSxJQUFBQyxFQUFBSixFQUFBRSxHQUNBRyxFQUFBLEVBQWlCQSxFQUFBRCxFQUFBRSxPQUFjRCxJQUMvQixHQUFBRCxFQUFBQyxHQUFBRSxNQUFBSixFQUNBLE9BQUFFLEVBR0EsVUF0Q0FWLEVBQUFhLGFBeUNBLFNBQUFOLEVBQUFPLEdBRUEsT0FEQVQsRUFBQUUsR0FDQU8sR0FBQUYsS0ExQ0FaLEVBQUFlLGVBQ0FmLEVBQUFnQix1QkFrREEsU0FBQUMsR0FDQSxxQkFBQUEsR0FBQSxvQkFBQUEsR0FBQSxpQkFBQUEsSUFBQUMsT0FBQUMsTUFsREFuQixFQUFBb0IsY0FxREEsU0FBQUgsRUFBQUksR0FDQUosRUFBQUssV0FBQUQsRUFDQUosRUFBQU0saUJBQUFGLEVBQ0FKLEVBQUFPLGNBQUFILEdBdkRBckIsRUFBQXlCLHNCQTBEQSxTQUFBSixHQUNBLE9BQ0FLLFVBQUFMLEVBQ0FNLGdCQUFBTixFQUNBTyxhQUFBUCxJQTdEQXJCLEVBQUE2QixhQUNBN0IsRUFBQThCLG9CQW9FQSxTQUFBaEIsRUFBQWlCLEdBRUEsT0FEQUYsRUFBQUUsR0FBQSwyQkFDQSxTQUFBakIsRUFBQSxvQkFyRUFkLEVBQUFnQyxlQXdFQSxTQUFBbEIsRUFBQWlCLEdBQ0EsSUFBQUUsRUFBQUosRUFBQUUsR0FBQSx5QkFDQSxTQUFBN0IsRUFBQSxZQUE0QytCLEVBQUEsS0FBQW5CLEVBQUEsTUF6RTVDZCxFQUFBa0MsV0FDQWxDLEVBQUFtQyxXQStFQSxTQUFBQyxFQUFBbkMsRUFBQW9DLEdBQ0FwQyxFQUFBb0MsRUFBQSxRQUFBcEMsRUFBQSxVQUFBQSxFQUFBLGVBQ0FjLEVBQUFxQixFQUFBbkIsTUFBQSxlQUFBaEIsRUFBQSxNQWhGQUQsRUFBQXNDLFlBbUZBLFNBQUFDLEdBQ0EsT0FBQXpDLE9BQUEwQyxLQUFBRCxHQUFBRSxPQUFBLFNBQUFDLEVBQUE5QixHQUlBLE1BSEEsVUFBQUEsRUFBQStCLE9BQUEsZ0JBQUEvQixFQUFBK0IsT0FBQSxlQUFBL0IsSUFDQThCLEVBQUE5QixHQUFBMkIsRUFBQTNCLElBRUE4QixRQXZGQTFDLEVBQUE0QyxRQStIQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFDLEVBQUEsNkJBQUFGLEVBQUFDLElBL0hBOUMsRUFBQWdELE9Ba0lBLFNBQUFILEVBQUFDLEdBQ0EsT0FBQUMsRUFBQSw4QkFBQUYsRUFBQUMsSUFqSUEsSUFFQUcsRUFBQTlDLEVBRmFDLEVBQVEsSUFJckIsU0FBQUQsRUFBQStDLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUU3RSxTQUFBN0MsRUFBQUUsR0FFQSxJQUFBRSxLQU1BLE9BTEF3QyxFQUFBLFFBQUFJLFNBQUFDLFFBQUEvQyxFQUFBLFNBQUFnRCxHQUNBQSxHQUNBOUMsRUFBQStDLEtBQUFELEtBR0E5QyxFQWtCQSxTQUFBTSxFQUFBRSxFQUFBSSxHQUNBSixFQUFBUyxVQUFBTCxFQUNBSixFQUFBd0MsZ0JBQUFwQyxFQUNBSixFQUFBeUMsYUFBQXJDLEVBcUJBLFNBQUFRLEVBQUFFLEdBQ0EsZUFBQUEsR0FBQSxVQUFBQSxFQWFBLFNBQUFHLEVBQUFFLEVBQUF1QixHQUNBLE9BQUF6QyxPQUFBMEMsaUJBQUF4QixHQUFBeUIsaUJBQUFGLEdBQUFHLFFBQUEsU0FpQkEsU0FBQUMsRUFBQTlDLEVBQUEwQyxHQUNBLE9BQUExQyxFQUFBNEMsaUJBQUFGLEdBQUFHLFFBQUEsU0FHQSxTQUFBZixFQUFBaUIsRUFBQUMsRUFBQUMsRUFBQXJCLEVBQUFDLEdBQ0EsSUFBQXFCLEVBQUFqQyxFQUFBWSxFQUFBLFdBQUFrQixHQUNBLElBQUFuQixNQUFBdUIsV0FDQSxPQUFBRCxFQUdBLElBQUFFLEVBQUF4QixFQUFBdUIsV0FBQUMsV0F1QkEsT0FyQkFDLE1BQUFDLFVBQUFDLEtBQUFDLEtBQUFKLEVBQUEsU0FBQUssR0FDQSxJQUFBekQsRUFBQUMsT0FBQTBDLGlCQUFBYyxHQUVBLE9BQUFBLElBQUE3QixHQUNBc0IsR0FBQUosRUFBQTlDLEVBQUEsVUFBQStDLEdBQ0FHLEdBQUFPLEVBQUFULEdBQ0FFLEdBQUFKLEVBQUE5QyxFQUFBLFVBQUFpRCxHQUVBLGdCQUFBakQsRUFBQTBELFlBQ0FSLEdBQUFKLEVBQUE5QyxFQUFBLFVBQUErQyxFQUFBLFVBQUFELEVBQUE5QyxFQUFBLFVBQUFpRCxFQUFBLFlBRUEsSUFLQUMsR0FBQUosRUFBQTlDLEVBQUEsVUFBQStDLElBRUEsS0FHQUcseUJDbkpBLElBQUFTLEVBQWlCeEUsRUFBUSxLQUN6QnlFLEVBQWV6RSxFQUFRLEtBK0J2QjBFLEVBQUE5RSxRQUpBLFNBQUFDLEdBQ0EsYUFBQUEsR0FBQTRFLEVBQUE1RSxFQUFBVSxVQUFBaUUsRUFBQTNFLHVDQzNCQUgsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsZUFFQSxJQUFBK0UsRUFBQTVFLEVBQXVDQyxFQUFRLE9BRS9DNEUsRUFBQTdFLEVBQW9DQyxFQUFRLE9BRTVDLFNBQUFELEVBQUErQyxHQUFzQyxPQUFBQSxLQUFBQyxXQUFBRCxHQUF1Q0UsUUFBQUYsR0FFN0U2QixFQUFBLFFBQUFFLE1BQUFELEVBQUEsUUFDQSxJQUFBRSxFQUFBSCxFQUFBLFFBQ0EvRSxFQUFBLFFBQUFrRixxQ0NiQXBGLE9BQUFDLGVBQUFDLEVBQUEsY0FDQUMsT0FBQSxJQUVBRCxFQUFBLGVBRUEsSUFBQW1GLEVBQUFDLEVBQW9DaEYsRUFBUSxJQUU1Q2lGLEVBQUFELEVBQXdDaEYsRUFBUSxJQUVoRGtGLEVBQUFuRixFQUF5Q0MsRUFBUSxPQUVqRG1GLEVBQUFwRixFQUF5Q0MsRUFBUSxLQUVqRG9GLEVBQUFyRixFQUEyQ0MsRUFBUSxPQUVuRHFGLEVBQXNCckYsRUFBUSxJQUU5QixTQUFBRCxFQUFBK0MsR0FBc0MsT0FBQUEsS0FBQUMsV0FBQUQsR0FBdUNFLFFBQUFGLEdBRTdFLFNBQUF3QyxJQUFxQyxzQkFBQUMsUUFBQSxZQUFnRCxJQUFBQyxFQUFBLElBQUFELFFBQTZHLE9BQWxGRCxFQUFBLFdBQWlFLE9BQUFFLEdBQWlCQSxFQUVsTSxTQUFBUixFQUFBbEMsR0FBdUMsR0FBQUEsS0FBQUMsV0FBNkIsT0FBQUQsRUFBYyxJQUFBMEMsRUFBQUYsSUFBd0MsR0FBQUUsS0FBQUMsSUFBQTNDLEdBQStCLE9BQUEwQyxFQUFBRSxJQUFBNUMsR0FBeUIsSUFBQTZDLEtBQWlCLFNBQUE3QyxFQUFBLENBQW1CLElBQUE4QyxFQUFBbEcsT0FBQUMsZ0JBQUFELE9BQUFtRyx5QkFBc0YsUUFBQXJGLEtBQUFzQyxFQUF1QixHQUFBcEQsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXZCLEVBQUF0QyxHQUFBLENBQXNELElBQUF1RixFQUFBSCxFQUFBbEcsT0FBQW1HLHlCQUFBL0MsRUFBQXRDLEdBQUEsS0FBcUZ1RixNQUFBTCxLQUFBSyxFQUFBQyxLQUFzQ3RHLE9BQUFDLGVBQUFnRyxFQUFBbkYsRUFBQXVGLEdBQW1ESixFQUFBbkYsR0FBQXNDLEVBQUF0QyxJQUFnRyxPQUFoRW1GLEVBQUEsUUFBQTdDLEVBQXlCMEMsR0FBYUEsRUFBQVEsSUFBQWxELEVBQUE2QyxHQUEwQkEsRUFFdm9CLFNBQUFNLEVBQUFuRCxHQUF3VSxPQUF0T21ELEVBQTNFLG1CQUFBQyxRQUFBLGlCQUFBQSxPQUFBQyxTQUEyRSxTQUFBckQsR0FBa0MsY0FBQUEsR0FBK0IsU0FBQUEsR0FBa0MsT0FBQUEsR0FBQSxtQkFBQW9ELFFBQUFwRCxFQUFBc0QsY0FBQUYsUUFBQXBELElBQUFvRCxPQUFBL0IsVUFBQSxnQkFBQXJCLElBQW1JQSxHQUV4VSxTQUFBdUQsRUFBQXZELEVBQUF0QyxFQUFBWCxHQUFtTSxPQUF4SlcsS0FBQXNDLEVBQWtCcEQsT0FBQUMsZUFBQW1ELEVBQUF0QyxHQUFrQ1gsUUFBQXlHLFlBQUEsRUFBQUMsY0FBQSxFQUFBQyxVQUFBLElBQWdGMUQsRUFBQXRDLEdBQUFYLEVBQW9CaUQsRUFFbk0sU0FBQTJELElBQW1SLE9BQTlQQSxFQUFBL0csT0FBQWdILFFBQUEsU0FBQUMsR0FBZ0QsUUFBQXJHLEVBQUEsRUFBZ0JBLEVBQUFzRyxVQUFBckcsT0FBc0JELElBQUEsQ0FBTyxJQUFBdUcsRUFBQUQsVUFBQXRHLEdBQTJCLFFBQUFFLEtBQUFxRyxFQUEwQm5ILE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF3QyxFQUFBckcsS0FBeURtRyxFQUFBbkcsR0FBQXFHLEVBQUFyRyxJQUFpQyxPQUFBbUcsSUFBa0JHLE1BQUFDLEtBQUFILFdBSW5SLFNBQUFJLEVBQUFMLEVBQUF4RSxHQUEyQyxRQUFBN0IsRUFBQSxFQUFnQkEsRUFBQTZCLEVBQUE1QixPQUFrQkQsSUFBQSxDQUFPLElBQUEyRyxFQUFBOUUsRUFBQTdCLEdBQTJCMkcsRUFBQVgsV0FBQVcsRUFBQVgsYUFBQSxFQUF3RFcsRUFBQVYsY0FBQSxFQUFnQyxVQUFBVSxNQUFBVCxVQUFBLEdBQXVEOUcsT0FBQUMsZUFBQWdILEVBQUFNLEVBQUF6RyxJQUFBeUcsSUFNOVAsU0FBQUMsRUFBQUMsR0FBZ0wsT0FBbkpELEVBQUF4SCxPQUFBMEgsZUFBQTFILE9BQUEySCxlQUFBLFNBQUFGLEdBQWdHLE9BQUFBLEVBQUFHLFdBQUE1SCxPQUFBMkgsZUFBQUYsS0FBbURBLEdBRWhMLFNBQUFJLEVBQUFDLEdBQXVDLFlBQUFBLEVBQXVCLFVBQUFDLGVBQUEsNkRBQXlGLE9BQUFELEVBSXZKLFNBQUFFLEVBQUFQLEVBQUFRLEdBQTBJLE9BQTFHRCxFQUFBaEksT0FBQTBILGdCQUFBLFNBQUFELEVBQUFRLEdBQTZGLE9BQWpCUixFQUFBRyxVQUFBSyxFQUFpQlIsSUFBYUEsRUFBQVEsR0FFMUksSUFBQUMsRUFBQSxTQUFBQyxFQUFBQyxHQUNBLElBQUFDLEtBRUEsUUFBQUosS0FBQUUsRUFDQW5JLE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF3RCxFQUFBRixJQUFBRyxFQUFBRSxRQUFBTCxHQUFBLElBQUFJLEVBQUFKLEdBQUFFLEVBQUFGLElBR0EsU0FBQUUsR0FBQSxtQkFBQW5JLE9BQUF1SSxzQkFBQSxLQUFBM0gsRUFBQSxNQUFBcUgsRUFBQWpJLE9BQUF1SSxzQkFBQUosR0FBMkh2SCxFQUFBcUgsRUFBQXBILE9BQWNELElBQ3pJd0gsRUFBQUUsUUFBQUwsRUFBQXJILElBQUEsR0FBQVosT0FBQXlFLFVBQUErRCxxQkFBQTdELEtBQUF3RCxFQUFBRixFQUFBckgsTUFBQXlILEVBQUFKLEVBQUFySCxJQUFBdUgsRUFBQUYsRUFBQXJILEtBRUEsT0FBQXlILEdBR0FJLEVBRUEsU0FBQUMsR0FHQSxTQUFBRCxJQUNBLElBQUFFLEVBNkRBLE9BaEdBLFNBQUFDLEVBQUFDLEdBQWlELEtBQUFELGFBQUFDLEdBQTBDLFVBQUFDLFVBQUEscUNBcUMzRkMsQ0FBQTFCLEtBQUFvQixJQUVBRSxFQWpDQSxTQUFBYixFQUFBbkQsR0FBaUQsT0FBQUEsR0FBQSxXQUFBNEIsRUFBQTVCLElBQUEsbUJBQUFBLEVBQXlGa0QsRUFBQUMsR0FBZm5ELEVBaUMzSHFFLENBQUEzQixLQUFBRyxFQUFBaUIsR0FBQXJCLE1BQUFDLEtBQUFILGFBRUErQixhQUFBLFNBQUFyRSxHQUNBK0QsRUFBQU8sV0FBQXRFLEdBR0ErRCxFQUFBUSxTQUFBLFNBQUFmLEdBQ0FPLEVBQUFsRyxNQUFBMEcsVUFDQVIsRUFBQWxHLE1BQUEwRyxTQUFBZixHQUdBTyxFQUFBUyxRQUFBQyxZQUFBVixFQUFBUyxRQUFBQyxXQUFBRixVQUNBUixFQUFBUyxRQUFBQyxXQUFBRixTQUFBZixJQUlBTyxFQUFBVyxZQUFBLFNBQUFDLEdBQ0EsSUFBQUMsRUFFQUMsRUFBQUYsRUFBQUUsYUFFQUMsRUFBQTdCLEVBQUFjLEdBQ0FsRyxFQUFBaUgsRUFBQWpILE1BQ0EyRyxFQUFBTSxFQUFBTixRQUVBTyxFQUFBbEgsRUFBQW1ILFVBQ0FDLEVBQUFwSCxFQUFBb0gsVUFDQXBKLEVBQUFnQyxFQUFBaEMsU0FDQVUsRUFBQXNCLEVBQUF0QixNQUNBMkksRUFBQTVCLEVBQUF6RixHQUFBLDZDQUVBNEcsRUFBQUQsRUFBQUMsV0FDQU8sRUFBQUgsRUFBQSxRQUFBRSxHQUVBSSxFQUFBaEQsS0FBa0MrQyxHQUVsQ1QsSUFDQVUsRUFBQUMsS0FBQVgsRUFBQVcsS0FDQUQsRUFBQVosU0FBQVIsRUFBQVEsU0FDQVksRUFBQUUsUUFBQXhILEVBQUF0QyxRQUFBa0osRUFBQWxKLE1BQ0E0SixFQUFBRyxTQUFBekgsRUFBQXlILFVBQUFiLEVBQUFhLFVBR0EsSUFBQUMsR0FBQSxFQUFBMUUsRUFBQSxTQUFBb0UsR0FBdUZsRCxFQUF2RjZDLEtBQXVGLEdBQUFZLE9BQUFSLEVBQUEsZ0JBQUFqRCxFQUFBNkMsRUFBQSxHQUFBWSxPQUFBUixFQUFBLG9CQUFBRyxFQUFBRSxTQUFBdEQsRUFBQTZDLEVBQUEsR0FBQVksT0FBQVIsRUFBQSxxQkFBQUcsRUFBQUcsVUFBQVYsSUFDdkYsT0FDQW5FLEVBQUFnRixjQUFBLFNBQ0FSLFVBQUFNLEVBQ0FoSixRQUNBbUosYUFBQTdILEVBQUE2SCxhQUNBQyxhQUFBOUgsRUFBQThILGNBQ1NsRixFQUFBZ0YsY0FBQTdFLEVBQUEsUUFBQXVCLEtBQXlEZ0QsR0FDbEVILFlBQ0FZLElBQUE3QixFQUFBTSxxQkFDU3dCLElBQUFoSyxFQUFBNEUsRUFBQWdGLGNBQUEsWUFBQTVKLEdBQUEsT0FJVGtJLEVBeUJBLE9BN0dBLFNBQUErQixFQUFBQyxHQUEwQyxzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBN0IsVUFBQSxzREFBNkU0QixFQUFBakcsVUFBQXpFLE9BQUE0SyxPQUFBRCxLQUFBbEcsV0FBeUVpQyxhQUFldkcsTUFBQXVLLEVBQUE1RCxVQUFBLEVBQUFELGNBQUEsS0FBMEQ4RCxHQUFBM0MsRUFBQTBDLEVBQUFDLEdBb0J4VUUsQ0FBQXBDLEVBMEZDcEQsRUFBQXlGLFdBdEhELFNBQUFqQyxFQUFBa0MsRUFBQUMsR0FBNkRELEdBQUF6RCxFQUFBdUIsRUFBQXBFLFVBQUFzRyxHQUFzRUMsR0FBQTFELEVBQUF1QixFQUFBbUMsR0ErRm5JQyxDQUFBeEMsSUFDQTNILElBQUEsd0JBQ0FYLE1BQUEsU0FBQStLLEVBQUFDLEVBQUFDLEdBQ0EsVUFBQTFGLEVBQUEsU0FBQTJCLEtBQUE1RSxNQUFBeUksTUFBQSxFQUFBeEYsRUFBQSxTQUFBMkIsS0FBQWdFLE1BQUFGLE1BQUEsRUFBQXpGLEVBQUEsU0FBQTJCLEtBQUErQixRQUFBQyxXQUFBK0IsRUFBQS9CLGVBR0F2SSxJQUFBLFFBQ0FYLE1BQUEsV0FDQWtILEtBQUE2QixXQUFBb0MsV0FHQXhLLElBQUEsT0FDQVgsTUFBQSxXQUNBa0gsS0FBQTZCLFdBQUFxQyxVQUdBekssSUFBQSxTQUNBWCxNQUFBLFdBQ0EsT0FBQWtGLEVBQUFnRixjQUFBMUUsRUFBQTZGLGVBQUEsS0FBQW5FLEtBQUFpQyxpQkFJQWIsRUExRkEsR0E2RkF2SSxFQUFBLFFBQUF1SSxFQUNBQSxFQUFBZ0QsY0FDQUMsS0FBQSxTQUVBakQsRUFBQWtELGNBQ0F0QyxXQUFBOUQsRUFBQXFHLDJCQ2hLQSxJQUFBQyxFQUFzQnZMLEVBQVEsS0FDOUJ3TCxFQUFTeEwsRUFBUSxLQWtCakIwRSxFQUFBOUUsUUFQQSxTQUFBNkwsRUFBQWpMLEVBQUFYLFNBQ0FzSyxJQUFBdEssR0FBQTJMLEVBQUFDLEVBQUFqTCxHQUFBWCxXQUNBc0ssSUFBQXRLLEdBQUFXLEtBQUFpTCxJQUNBRixFQUFBRSxFQUFBakwsRUFBQVgsMEJDZkEsSUFHQTZMLEVBSGMxTCxFQUFRLEtBR3RCMkwsQ0FBQWpNLE9BQUEySCxlQUFBM0gsUUFFQWdGLEVBQUE5RSxRQUFBOEwsc0JDSkEsSUFBQUUsRUFBQWxNLE9BQUF5RSxVQWdCQU8sRUFBQTlFLFFBUEEsU0FBQUMsR0FDQSxJQUFBZ00sRUFBQWhNLEtBQUF1RyxZQUdBLE9BQUF2RyxLQUZBLG1CQUFBZ00sS0FBQTFILFdBQUF5SCwyQkNaQSxTQUFBbEgsR0FBQSxJQUFBb0gsRUFBVzlMLEVBQVEsS0FDbkIrTCxFQUFnQi9MLEVBQVEsTUFHeEJnTSxFQUE0Q3BNLE1BQUFxTSxVQUFBck0sRUFHNUNzTSxFQUFBRixHQUFBLGlCQUFBdEgsU0FBQXVILFVBQUF2SCxFQU1BeUgsRUFIQUQsS0FBQXRNLFVBQUFvTSxFQUdBRixFQUFBSyxZQUFBaEMsRUFzQkFpQyxHQW5CQUQsSUFBQUMsY0FBQWpDLElBbUJBNEIsRUFFQXJILEVBQUE5RSxRQUFBd00sK0NDckNBLElBQUFDLEVBQXVCck0sRUFBUSxNQUMvQnNNLEVBQWdCdE0sRUFBUSxNQUN4QnVNLEVBQWV2TSxFQUFRLE1BR3ZCd00sRUFBQUQsS0FBQUUsYUFtQkFBLEVBQUFELEVBQUFGLEVBQUFFLEdBQUFILEVBRUEzSCxFQUFBOUUsUUFBQTZNLHNCQ05BL0gsRUFBQTlFLFFBWkEsU0FBQTZMLEVBQUFqTCxHQUNBLG9CQUFBQSxHQUFBLG1CQUFBaUwsRUFBQWpMLEtBSUEsYUFBQUEsRUFJQSxPQUFBaUwsRUFBQWpMLDBCQ2pCQSxJQUFBa00sRUFBb0IxTSxFQUFRLE1BQzVCMk0sRUFBaUIzTSxFQUFRLE1BQ3pCNE0sRUFBa0I1TSxFQUFRLE1BNkIxQjBFLEVBQUE5RSxRQUpBLFNBQUE2TCxHQUNBLE9BQUFtQixFQUFBbkIsR0FBQWlCLEVBQUFqQixHQUFBLEdBQUFrQixFQUFBbEIsd0JDUkEvRyxFQUFBOUUsUUFKQSxTQUFBQyxHQUNBLE9BQUFBLHNDQ2ZBSCxPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFFQUQsRUFBQSxlQUVBLElBQUFtRixFQUFBQyxFQUFvQ2hGLEVBQVEsSUFFNUNpRixFQUFBRCxFQUF3Q2hGLEVBQVEsSUFFaEQ2TSxFQUE2QjdNLEVBQVEsS0FFckNtRixFQUFBcEYsRUFBeUNDLEVBQVEsS0FFakRrRixFQUFBbkYsRUFBeUNDLEVBQVEsT0FFakRvRixFQUFBckYsRUFBMkNDLEVBQVEsT0FFbkRxRixFQUFzQnJGLEVBQVEsSUFFOUI4TSxFQUFBL00sRUFBc0NDLEVBQVEsS0FFOUMsU0FBQUQsRUFBQStDLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUU3RSxTQUFBd0MsSUFBcUMsc0JBQUFDLFFBQUEsWUFBZ0QsSUFBQUMsRUFBQSxJQUFBRCxRQUE2RyxPQUFsRkQsRUFBQSxXQUFpRSxPQUFBRSxHQUFpQkEsRUFFbE0sU0FBQVIsRUFBQWxDLEdBQXVDLEdBQUFBLEtBQUFDLFdBQTZCLE9BQUFELEVBQWMsSUFBQTBDLEVBQUFGLElBQXdDLEdBQUFFLEtBQUFDLElBQUEzQyxHQUErQixPQUFBMEMsRUFBQUUsSUFBQTVDLEdBQXlCLElBQUE2QyxLQUFpQixTQUFBN0MsRUFBQSxDQUFtQixJQUFBOEMsRUFBQWxHLE9BQUFDLGdCQUFBRCxPQUFBbUcseUJBQXNGLFFBQUFyRixLQUFBc0MsRUFBdUIsR0FBQXBELE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF2QixFQUFBdEMsR0FBQSxDQUFzRCxJQUFBdUYsRUFBQUgsRUFBQWxHLE9BQUFtRyx5QkFBQS9DLEVBQUF0QyxHQUFBLEtBQXFGdUYsTUFBQUwsS0FBQUssRUFBQUMsS0FBc0N0RyxPQUFBQyxlQUFBZ0csRUFBQW5GLEVBQUF1RixHQUFtREosRUFBQW5GLEdBQUFzQyxFQUFBdEMsSUFBZ0csT0FBaEVtRixFQUFBLFFBQUE3QyxFQUF5QjBDLEdBQWFBLEVBQUFRLElBQUFsRCxFQUFBNkMsR0FBMEJBLEVBRXZvQixTQUFBTSxFQUFBbkQsR0FBd1UsT0FBdE9tRCxFQUEzRSxtQkFBQUMsUUFBQSxpQkFBQUEsT0FBQUMsU0FBMkUsU0FBQXJELEdBQWtDLGNBQUFBLEdBQStCLFNBQUFBLEdBQWtDLE9BQUFBLEdBQUEsbUJBQUFvRCxRQUFBcEQsRUFBQXNELGNBQUFGLFFBQUFwRCxJQUFBb0QsT0FBQS9CLFVBQUEsZ0JBQUFyQixJQUFtSUEsR0FFeFUsU0FBQXVELEVBQUF2RCxFQUFBdEMsRUFBQVgsR0FBbU0sT0FBeEpXLEtBQUFzQyxFQUFrQnBELE9BQUFDLGVBQUFtRCxFQUFBdEMsR0FBa0NYLFFBQUF5RyxZQUFBLEVBQUFDLGNBQUEsRUFBQUMsVUFBQSxJQUFnRjFELEVBQUF0QyxHQUFBWCxFQUFvQmlELEVBRW5NLFNBQUEyRCxJQUFtUixPQUE5UEEsRUFBQS9HLE9BQUFnSCxRQUFBLFNBQUFDLEdBQWdELFFBQUFyRyxFQUFBLEVBQWdCQSxFQUFBc0csVUFBQXJHLE9BQXNCRCxJQUFBLENBQU8sSUFBQXVHLEVBQUFELFVBQUF0RyxHQUEyQixRQUFBRSxLQUFBcUcsRUFBMEJuSCxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0MsRUFBQXJHLEtBQXlEbUcsRUFBQW5HLEdBQUFxRyxFQUFBckcsSUFBaUMsT0FBQW1HLElBQWtCRyxNQUFBQyxLQUFBSCxXQUluUixTQUFBSSxFQUFBTCxFQUFBeEUsR0FBMkMsUUFBQTdCLEVBQUEsRUFBZ0JBLEVBQUE2QixFQUFBNUIsT0FBa0JELElBQUEsQ0FBTyxJQUFBMkcsRUFBQTlFLEVBQUE3QixHQUEyQjJHLEVBQUFYLFdBQUFXLEVBQUFYLGFBQUEsRUFBd0RXLEVBQUFWLGNBQUEsRUFBZ0MsVUFBQVUsTUFBQVQsVUFBQSxHQUF1RDlHLE9BQUFDLGVBQUFnSCxFQUFBTSxFQUFBekcsSUFBQXlHLElBTTlQLFNBQUFDLEVBQUFDLEdBQWdMLE9BQW5KRCxFQUFBeEgsT0FBQTBILGVBQUExSCxPQUFBMkgsZUFBQSxTQUFBRixHQUFnRyxPQUFBQSxFQUFBRyxXQUFBNUgsT0FBQTJILGVBQUFGLEtBQW1EQSxHQUVoTCxTQUFBSSxFQUFBQyxHQUF1QyxZQUFBQSxFQUF1QixVQUFBQyxlQUFBLDZEQUF5RixPQUFBRCxFQUl2SixTQUFBRSxFQUFBUCxFQUFBUSxHQUEwSSxPQUExR0QsRUFBQWhJLE9BQUEwSCxnQkFBQSxTQUFBRCxFQUFBUSxHQUE2RixPQUFqQlIsRUFBQUcsVUFBQUssRUFBaUJSLElBQWFBLEVBQUFRLEdBRTFJLElBQUFDLEVBQUEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBQyxLQUVBLFFBQUFKLEtBQUFFLEVBQ0FuSSxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0QsRUFBQUYsSUFBQUcsRUFBQUUsUUFBQUwsR0FBQSxJQUFBSSxFQUFBSixHQUFBRSxFQUFBRixJQUdBLFNBQUFFLEdBQUEsbUJBQUFuSSxPQUFBdUksc0JBQUEsS0FBQTNILEVBQUEsTUFBQXFILEVBQUFqSSxPQUFBdUksc0JBQUFKLEdBQTJIdkgsRUFBQXFILEVBQUFwSCxPQUFjRCxJQUN6SXdILEVBQUFFLFFBQUFMLEVBQUFySCxJQUFBLEdBQUFaLE9BQUF5RSxVQUFBK0QscUJBQUE3RCxLQUFBd0QsRUFBQUYsRUFBQXJILE1BQUF5SCxFQUFBSixFQUFBckgsSUFBQXVILEVBQUFGLEVBQUFySCxLQUVBLE9BQUF5SCxHQUdBZ0YsRUFFQSxTQUFBM0UsR0FHQSxTQUFBMkUsSUFDQSxJQUFBMUUsRUFrRUEsT0FyR0EsU0FBQUMsRUFBQUMsR0FBaUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQUMsVUFBQSxxQ0FxQzNGQyxDQUFBMUIsS0FBQWdHLElBRUExRSxFQWpDQSxTQUFBYixFQUFBbkQsR0FBaUQsT0FBQUEsR0FBQSxXQUFBNEIsRUFBQTVCLElBQUEsbUJBQUFBLEVBQXlGa0QsRUFBQUMsR0FBZm5ELEVBaUMzSHFFLENBQUEzQixLQUFBRyxFQUFBNkYsR0FBQWpHLE1BQUFDLEtBQUFILGFBRUErQixhQUFBLFNBQUFyRSxHQUNBK0QsRUFBQU8sV0FBQXRFLEdBR0ErRCxFQUFBMkUsZUFBQSxTQUFBL0QsR0FDQSxJQUFBQyxFQUVBQyxFQUFBRixFQUFBRSxhQUVBQyxFQUFBN0IsRUFBQWMsR0FDQWxHLEVBQUFpSCxFQUFBakgsTUFDQTJHLEVBQUFNLEVBQUFOLFFBRUFPLEVBQUFsSCxFQUFBbUgsVUFDQUMsRUFBQXBILEVBQUFvSCxVQUNBcEosRUFBQWdDLEVBQUFoQyxTQUNBOE0sRUFBQTlLLEVBQUE4SyxjQUNBcE0sRUFBQXNCLEVBQUF0QixNQUNBbUosRUFBQTdILEVBQUE2SCxhQUNBQyxFQUFBOUgsRUFBQThILGFBQ0FULEVBQUE1QixFQUFBekYsR0FBQSwyRkFFQStLLEVBQUFwRSxFQUFBb0UsY0FDQTVELEVBQUFILEVBQUEsV0FBQUUsR0FFQThELEVBQUExRyxLQUFxQytDLEdBRXJDMEQsSUFDQUMsRUFBQXRFLFNBQUEsV0FDQVcsRUFBQVgsVUFDQVcsRUFBQVgsU0FBQS9CLE1BQUEwQyxFQUFBNUMsV0FHQXNHLEVBQUFFLGNBQ0FDLE1BQUFsTixFQUNBTixNQUFBc0MsRUFBQXRDLFNBSUFzTixFQUFBekQsS0FBQXdELEVBQUF4RCxLQUNBeUQsRUFBQXhELFNBQUEsSUFBQXVELEVBQUFyTixNQUFBbUksUUFBQTdGLEVBQUF0QyxPQUNBc04sRUFBQXZELFNBQUF6SCxFQUFBeUgsVUFBQXNELEVBQUF0RCxVQUdBLElBQUEwRCxHQUFBLEVBQUFuSSxFQUFBLFNBQUFvRSxHQUFnRmxELEVBQWhGNkMsS0FBZ0YsR0FBQVksT0FBQVIsRUFBQSxnQkFBQWpELEVBQUE2QyxFQUFBLEdBQUFZLE9BQUFSLEVBQUEsb0JBQUE2RCxFQUFBeEQsU0FBQXRELEVBQUE2QyxFQUFBLEdBQUFZLE9BQUFSLEVBQUEscUJBQUE2RCxFQUFBdkQsVUFBQVYsSUFDaEZxRSxHQUFBLEVBQUFwSSxFQUFBLFNBQUFrQixLQUF3RSxHQUFBeUQsT0FBQVIsRUFBQSxrQkFBQTJELElBQ3hFLE9BQ0FsSSxFQUFBZ0YsY0FBQSxTQUNBUixVQUFBK0QsRUFDQXpNLFFBQ0FtSixlQUNBQyxnQkFDU2xGLEVBQUFnRixjQUFBN0UsRUFBQSxRQUFBdUIsS0FBeUQwRyxHQUNsRTdELFlBQ0FDLFVBQUFnRSxFQUNBckQsSUFBQTdCLEVBQUFNLHFCQUNTd0IsSUFBQWhLLEdBQUE0RSxFQUFBZ0YsY0FBQSxZQUFBNUosS0FJVGtJLEVBb0VBLE9BN0pBLFNBQUErQixFQUFBQyxHQUEwQyxzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBN0IsVUFBQSxzREFBNkU0QixFQUFBakcsVUFBQXpFLE9BQUE0SyxPQUFBRCxLQUFBbEcsV0FBeUVpQyxhQUFldkcsTUFBQXVLLEVBQUE1RCxVQUFBLEVBQUFELGNBQUEsS0FBMEQ4RCxHQUFBM0MsRUFBQTBDLEVBQUFDLEdBb0J4VUUsQ0FBQXdDLEVBMElDaEksRUFBQXlGLFdBdEtELFNBQUFqQyxFQUFBa0MsRUFBQUMsR0FBNkRELEdBQUF6RCxFQUFBdUIsRUFBQXBFLFVBQUFzRyxHQUFzRUMsR0FBQTFELEVBQUF1QixFQUFBbUMsR0FvR25JQyxDQUFBb0MsSUFDQXZNLElBQUEsb0JBQ0FYLE1BQUEsV0FDQSxJQUFBQSxFQUFBa0gsS0FBQTVFLE1BQUF0QyxNQUdBMk4sR0FEQXpHLEtBQUErQixhQUNBb0UsY0FDQUEsT0FBQSxJQUFBTSxLQUE2REEsRUFFN0ROLEVBQUFPLGVBQ0FQLEVBQUFPLGNBQUE1TixJQUdBLEVBQUFpTixFQUFBLHFCQUFBL0YsS0FBQTVFLFFBQUE0RSxLQUFBK0IsYUFBNkVvRSxpQkFBQSxVQUFBbkcsS0FBQTVFLE9BQUEsc0VBRzdFM0IsSUFBQSx3QkFDQVgsTUFBQSxTQUFBK0ssRUFBQUMsRUFBQUMsR0FDQSxVQUFBMUYsRUFBQSxTQUFBMkIsS0FBQTVFLE1BQUF5SSxNQUFBLEVBQUF4RixFQUFBLFNBQUEyQixLQUFBZ0UsTUFBQUYsTUFBQSxFQUFBekYsRUFBQSxTQUFBMkIsS0FBQStCLFFBQUFvRSxjQUFBcEMsRUFBQW9DLGtCQUdBMU0sSUFBQSxxQkFDQVgsTUFBQSxTQUFBNk4sR0FDQSxJQUFBQyxFQUFBRCxFQUFBN04sTUFDQUEsRUFBQWtILEtBQUE1RSxNQUFBdEMsTUFHQStOLEdBREE3RyxLQUFBK0IsYUFDQW9FLGNBQ0FBLE9BQUEsSUFBQVUsS0FBNkRBLEVBRTdEL04sSUFBQThOLEdBQUFULEVBQUFPLGVBQUFQLEVBQUFXLGNBQ0FYLEVBQUFXLFlBQUFGLEdBQ0FULEVBQUFPLGNBQUE1TixPQUlBVyxJQUFBLHVCQUNBWCxNQUFBLFdBQ0EsSUFBQUEsRUFBQWtILEtBQUE1RSxNQUFBdEMsTUFHQWlPLEdBREEvRyxLQUFBK0IsYUFDQW9FLGNBQ0FBLE9BQUEsSUFBQVksS0FBNkRBLEVBRTdEWixFQUFBVyxhQUNBWCxFQUFBVyxZQUFBaE8sTUFJQVcsSUFBQSxRQUNBWCxNQUFBLFdBQ0FrSCxLQUFBNkIsV0FBQW9DLFdBR0F4SyxJQUFBLE9BQ0FYLE1BQUEsV0FDQWtILEtBQUE2QixXQUFBcUMsVUFHQXpLLElBQUEsU0FDQVgsTUFBQSxXQUNBLE9BQUFrRixFQUFBZ0YsY0FBQTFFLEVBQUE2RixlQUFBLEtBQUFuRSxLQUFBaUcsb0JBSUFELEVBMUlBLEdBNklBQSxFQUFBZ0IsZ0JBQUEsRUFDQWhCLEVBQUE1QixjQUNBOEIsZUFBQSxHQUVBRixFQUFBMUIsY0FDQTZCLGNBQUFqSSxFQUFBcUcsTUFFQSxFQUFBdUIsRUFBQW1CLFVBQUFqQixHQUNBLElBQUFqSSxFQUFBaUksRUFDQW5OLEVBQUEsUUFBQWtGLHFDQ3ROQXBGLE9BQUFDLGVBQUFDLEVBQUEsY0FDQUMsT0FBQSxJQUVBSCxPQUFBQyxlQUFBQyxFQUFBLFNBQ0EwRyxZQUFBLEVBQ0FaLElBQUEsV0FDQSxPQUFBdUksRUFBQSxXQUdBdk8sT0FBQUMsZUFBQUMsRUFBQSxVQUNBMEcsWUFBQSxFQUNBWixJQUFBLFdBQ0EsT0FBQXdJLEVBQUEsV0FHQXRPLEVBQUEsZUFFQSxJQUFBdU8sRUFBQXBPLEVBQW9DQyxFQUFRLE9BRTVDaU8sRUFBQWxPLEVBQW9DQyxFQUFRLE9BRTVDa08sRUFBQW5PLEVBQTBDQyxFQUFRLE9BRWxELFNBQUFELEVBQUErQyxHQUFzQyxPQUFBQSxLQUFBQyxXQUFBRCxHQUF1Q0UsUUFBQUYsR0FFN0VxTCxFQUFBLFFBQUFDLE9BQUFGLEVBQUEsUUFDQUMsRUFBQSxRQUFBdEosTUFBQW9KLEVBQUEsUUFDQSxJQUFBbkosRUFBQXFKLEVBQUEsUUFDQXZPLEVBQUEsUUFBQWtGLHFDQzVCQXBGLE9BQUFDLGVBQUFDLEVBQUEsY0FDQUMsT0FBQSxJQUVBRCxFQUFBeU8sVUFzQkEsV0FDQSxJQUFBQyxFQUFBMUgsVUFBQXJHLE9BQUEsUUFBQTRKLElBQUF2RCxVQUFBLEdBQUFBLFVBQUEsTUFDQTJILEVBQUEzSCxVQUFBckcsT0FBQSxRQUFBNEosSUFBQXZELFVBQUEsR0FBQUEsVUFBQSxjQUNBNEgsS0FvQkEsT0FsQkEsU0FBQUMsRUFBQUMsR0FDQUEsRUFBQXhMLFFBQUEsU0FBQXlMLEdBQ0EsR0FBQUEsRUFBQUosR0FBQSxDQUNBLElBQUFLLEVBQUFuSSxLQUFpQ2tJLFVBRWpDQyxFQUFBTCxHQUNBQyxFQUFBcEwsS0FBQXdMLEdBRUFELEVBQUFKLEdBQUFoTyxPQUFBLEdBQ0FrTyxFQUFBRSxFQUFBSixTQUdBQyxFQUFBcEwsS0FBQXVMLEtBS0FGLENBQUFILEdBQ0FFLEdBNUNBNU8sRUFBQWlQLFFBK0NBLFNBQUFBLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQVIsRUFBQTNILFVBQUFyRyxPQUFBLFFBQUE0SixJQUFBdkQsVUFBQSxHQUFBQSxVQUFBLGNBQ0EsT0FBQWtJLEVBQUFFLElBQUEsU0FBQTFLLEVBQUE1RCxHQUNBLElBQUF1TyxLQU1BLE9BSkEzSyxFQUFBaUssS0FDQVUsRUFBQVYsR0FBQU0sRUFBQXZLLEVBQUFpSyxHQUFBUSxFQUFBUixJQUdBOUgsT0FBK0JzSSxFQUFBekssRUFBQTVELElBQUF1TyxNQXZEL0JyUCxFQUFBc1AsV0EyREEsU0FBQUEsRUFBQUosRUFBQUssR0FDQSxPQUFBTCxFQUFBek0sT0FBQSxTQUFBK00sRUFBQTlLLEdBS0EsR0FKQTZLLEVBQUE3SyxJQUNBOEssRUFBQWhNLEtBQUFrQixHQUdBQSxFQUFBbkUsU0FBQSxDQUNBLElBQUFBLEVBQUErTyxFQUFBNUssRUFBQW5FLFNBQUFnUCxHQUNBQyxFQUFBaE0sS0FBQTBELE1BQUFzSSxFQXpEQSxTQUFBQyxHQUFrQyxPQU1sQyxTQUFBQSxHQUFrQyxHQUFBbkwsTUFBQW9MLFFBQUFELEdBQUEsQ0FBMEIsUUFBQS9PLEVBQUEsRUFBQWlQLEVBQUEsSUFBQXJMLE1BQUFtTCxFQUFBOU8sUUFBOENELEVBQUErTyxFQUFBOU8sT0FBZ0JELElBQU9pUCxFQUFBalAsR0FBQStPLEVBQUEvTyxHQUFvQixPQUFBaVAsR0FObkhDLENBQUFILElBSWxDLFNBQUFJLEdBQWlDLEdBQUF2SixPQUFBQyxZQUFBekcsT0FBQStQLElBQUEsdUJBQUEvUCxPQUFBeUUsVUFBQXVMLFNBQUFyTCxLQUFBb0wsR0FBQSxPQUFBdkwsTUFBQXlMLEtBQUFGLEdBSkNHLENBQUFQLElBRWxDLFdBQStCLFVBQUE3RyxVQUFBLG1EQUZHcUgsR0F5RGxDQyxDQUFBM1AsSUFHQSxPQUFBaVAsUUFyRUF4UCxFQUFBbVEsaUJBeUVBLFNBQUFBLEVBQUFDLEdBQ0EsSUFBQUMsS0FDQWxMLEVBQUE5QixTQUFBQyxRQUFBOE0sRUFBQSxTQUFBRSxHQUNBLEdBQUFuTCxFQUFBb0wsZUFBQUQsR0FBQSxDQUlBLElBQUFFLEVBQUEzSixLQUE0QnlKLEVBQUEvTixPQUU1QitOLEVBQUExUCxNQUNBNFAsRUFBQTVQLElBQUEwUCxFQUFBMVAsS0FHQTBQLEVBQUE5RSxNQUFBOEUsRUFBQTlFLEtBQUFpRiwyQkFDQUQsRUFBQWpRLFNBQUE0UCxFQUFBSyxFQUFBalEsV0FHQThQLEVBQUE3TSxLQUFBZ04sTUFFQSxPQUFBSCxHQTNGQXJRLEVBQUEwUSxrQkE4RkEsU0FBQUEsRUFBQUMsR0FDQSxJQUFBQyxFQUFBNUosVUFBQXJHLE9BQUEsUUFBQTRKLElBQUF2RCxVQUFBLEdBQUFBLFVBQUEsT0FDQTJKLE9BQUFyTixRQUFBLFNBQUErRixHQUNBLElBQUFwSixFQUFBb0osRUFBQXBKLE1BQ0FNLEVBQUE4SSxFQUFBOUksU0FDQXFRLEVBQUEzUSxFQUFBNlAsWUFBQTdQLEVBQ0F5USxFQUFBblEsRUFBQXFRLEtBRUEsT0FBQUEsR0FwR0EsSUFBQXpMLEVBSUEsU0FBQWpDLEdBQXVDLEdBQUFBLEtBQUFDLFdBQTZCLE9BQUFELEVBQWMsSUFBQTBDLEVBQUFGLElBQXdDLEdBQUFFLEtBQUFDLElBQUEzQyxHQUErQixPQUFBMEMsRUFBQUUsSUFBQTVDLEdBQXlCLElBQUE2QyxLQUFpQixTQUFBN0MsRUFBQSxDQUFtQixJQUFBOEMsRUFBQWxHLE9BQUFDLGdCQUFBRCxPQUFBbUcseUJBQXNGLFFBQUFyRixLQUFBc0MsRUFBdUIsR0FBQXBELE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF2QixFQUFBdEMsR0FBQSxDQUFzRCxJQUFBdUYsRUFBQUgsRUFBQWxHLE9BQUFtRyx5QkFBQS9DLEVBQUF0QyxHQUFBLEtBQXFGdUYsTUFBQUwsS0FBQUssRUFBQUMsS0FBc0N0RyxPQUFBQyxlQUFBZ0csRUFBQW5GLEVBQUF1RixHQUFtREosRUFBQW5GLEdBQUFzQyxFQUFBdEMsSUFBZ0NtRixFQUFBLFFBQUE3QyxFQUF5QjBDLEdBQWFBLEVBQUFRLElBQUFsRCxFQUFBNkMsR0FBMEIsT0FBQUEsRUFKdm9CWCxDQUFvQ2hGLEVBQVEsSUFFNUMsU0FBQXNGLElBQXFDLHNCQUFBQyxRQUFBLFlBQWdELElBQUFDLEVBQUEsSUFBQUQsUUFBNkcsT0FBbEZELEVBQUEsV0FBaUUsT0FBQUUsR0FBaUJBLEVBWWxNLFNBQUFpQixJQUFtUixPQUE5UEEsRUFBQS9HLE9BQUFnSCxRQUFBLFNBQUFDLEdBQWdELFFBQUFyRyxFQUFBLEVBQWdCQSxFQUFBc0csVUFBQXJHLE9BQXNCRCxJQUFBLENBQU8sSUFBQXVHLEVBQUFELFVBQUF0RyxHQUEyQixRQUFBRSxLQUFBcUcsRUFBMEJuSCxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0MsRUFBQXJHLEtBQXlEbUcsRUFBQW5HLEdBQUFxRyxFQUFBckcsSUFBaUMsT0FBQW1HLElBQWtCRyxNQUFBQyxLQUFBSCwrQ0N2Qm5SbEgsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsZUFFQSxJQUFBbUYsRUFBQUMsRUFBb0NoRixFQUFRLElBRTVDaUYsRUFBQUQsRUFBd0NoRixFQUFRLElBRWhEeVEsRUFBQXpMLEVBQXdDaEYsRUFBUSxPQUVoRG1GLEVBQUFwRixFQUF5Q0MsRUFBUSxLQUVqRDBRLEVBQUEzUSxFQUFtQ0MsRUFBUSxLQUUzQ3FGLEVBQXNCckYsRUFBUSxJQUU5QjhNLEVBQUEvTSxFQUFzQ0MsRUFBUSxLQUU5QzJRLEVBQUE1USxFQUFtQ0MsRUFBUSxLQUkzQyxTQUFBRCxFQUFBK0MsR0FBc0MsT0FBQUEsS0FBQUMsV0FBQUQsR0FBdUNFLFFBQUFGLEdBRTdFLFNBQUF3QyxJQUFxQyxzQkFBQUMsUUFBQSxZQUFnRCxJQUFBQyxFQUFBLElBQUFELFFBQTZHLE9BQWxGRCxFQUFBLFdBQWlFLE9BQUFFLEdBQWlCQSxFQUVsTSxTQUFBUixFQUFBbEMsR0FBdUMsR0FBQUEsS0FBQUMsV0FBNkIsT0FBQUQsRUFBYyxJQUFBMEMsRUFBQUYsSUFBd0MsR0FBQUUsS0FBQUMsSUFBQTNDLEdBQStCLE9BQUEwQyxFQUFBRSxJQUFBNUMsR0FBeUIsSUFBQTZDLEtBQWlCLFNBQUE3QyxFQUFBLENBQW1CLElBQUE4QyxFQUFBbEcsT0FBQUMsZ0JBQUFELE9BQUFtRyx5QkFBc0YsUUFBQXJGLEtBQUFzQyxFQUF1QixHQUFBcEQsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXZCLEVBQUF0QyxHQUFBLENBQXNELElBQUF1RixFQUFBSCxFQUFBbEcsT0FBQW1HLHlCQUFBL0MsRUFBQXRDLEdBQUEsS0FBcUZ1RixNQUFBTCxLQUFBSyxFQUFBQyxLQUFzQ3RHLE9BQUFDLGVBQUFnRyxFQUFBbkYsRUFBQXVGLEdBQW1ESixFQUFBbkYsR0FBQXNDLEVBQUF0QyxJQUFnRyxPQUFoRW1GLEVBQUEsUUFBQTdDLEVBQXlCMEMsR0FBYUEsRUFBQVEsSUFBQWxELEVBQUE2QyxHQUEwQkEsRUFFdm9CLFNBQUFNLEVBQUFuRCxHQUF3VSxPQUF0T21ELEVBQTNFLG1CQUFBQyxRQUFBLGlCQUFBQSxPQUFBQyxTQUEyRSxTQUFBckQsR0FBa0MsY0FBQUEsR0FBK0IsU0FBQUEsR0FBa0MsT0FBQUEsR0FBQSxtQkFBQW9ELFFBQUFwRCxFQUFBc0QsY0FBQUYsUUFBQXBELElBQUFvRCxPQUFBL0IsVUFBQSxnQkFBQXJCLElBQW1JQSxHQUV4VSxTQUFBMkQsSUFBbVIsT0FBOVBBLEVBQUEvRyxPQUFBZ0gsUUFBQSxTQUFBQyxHQUFnRCxRQUFBckcsRUFBQSxFQUFnQkEsRUFBQXNHLFVBQUFyRyxPQUFzQkQsSUFBQSxDQUFPLElBQUF1RyxFQUFBRCxVQUFBdEcsR0FBMkIsUUFBQUUsS0FBQXFHLEVBQTBCbkgsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXdDLEVBQUFyRyxLQUF5RG1HLEVBQUFuRyxHQUFBcUcsRUFBQXJHLElBQWlDLE9BQUFtRyxJQUFrQkcsTUFBQUMsS0FBQUgsV0FFblIsU0FBQVAsRUFBQXZELEVBQUF0QyxFQUFBWCxHQUFtTSxPQUF4SlcsS0FBQXNDLEVBQWtCcEQsT0FBQUMsZUFBQW1ELEVBQUF0QyxHQUFrQ1gsUUFBQXlHLFlBQUEsRUFBQUMsY0FBQSxFQUFBQyxVQUFBLElBQWdGMUQsRUFBQXRDLEdBQUFYLEVBQW9CaUQsRUFJbk0sU0FBQWtFLEVBQUFMLEVBQUF4RSxHQUEyQyxRQUFBN0IsRUFBQSxFQUFnQkEsRUFBQTZCLEVBQUE1QixPQUFrQkQsSUFBQSxDQUFPLElBQUEyRyxFQUFBOUUsRUFBQTdCLEdBQTJCMkcsRUFBQVgsV0FBQVcsRUFBQVgsYUFBQSxFQUF3RFcsRUFBQVYsY0FBQSxFQUFnQyxVQUFBVSxNQUFBVCxVQUFBLEdBQXVEOUcsT0FBQUMsZUFBQWdILEVBQUFNLEVBQUF6RyxJQUFBeUcsSUFJOVAsU0FBQXlCLEVBQUFsQixFQUFBbkQsR0FBaUQsT0FBQUEsR0FBQSxXQUFBNEIsRUFBQTVCLElBQUEsbUJBQUFBLEVBRWpELFNBQUFtRCxHQUF1QyxZQUFBQSxFQUF1QixVQUFBQyxlQUFBLDZEQUF5RixPQUFBRCxFQUZiRCxDQUFBQyxHQUFmbkQsRUFJM0gsU0FBQTZDLEVBQUFDLEdBQWdMLE9BQW5KRCxFQUFBeEgsT0FBQTBILGVBQUExSCxPQUFBMkgsZUFBQSxTQUFBRixHQUFnRyxPQUFBQSxFQUFBRyxXQUFBNUgsT0FBQTJILGVBQUFGLEtBQW1EQSxHQUloTCxTQUFBTyxFQUFBUCxFQUFBUSxHQUEwSSxPQUExR0QsRUFBQWhJLE9BQUEwSCxnQkFBQSxTQUFBRCxFQUFBUSxHQUE2RixPQUFqQlIsRUFBQUcsVUFBQUssRUFBaUJSLElBQWFBLEVBQUFRLEdBRTFJLElBQUFDLEVBQUEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBQyxLQUVBLFFBQUFKLEtBQUFFLEVBQ0FuSSxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0QsRUFBQUYsSUFBQUcsRUFBQUUsUUFBQUwsR0FBQSxJQUFBSSxFQUFBSixHQUFBRSxFQUFBRixJQUdBLFNBQUFFLEdBQUEsbUJBQUFuSSxPQUFBdUksc0JBQUEsS0FBQTNILEVBQUEsTUFBQXFILEVBQUFqSSxPQUFBdUksc0JBQUFKLEdBQTJIdkgsRUFBQXFILEVBQUFwSCxPQUFjRCxJQUN6SXdILEVBQUFFLFFBQUFMLEVBQUFySCxJQUFBLEdBQUFaLE9BQUF5RSxVQUFBK0QscUJBQUE3RCxLQUFBd0QsRUFBQUYsRUFBQXJILE1BQUF5SCxFQUFBSixFQUFBckgsSUFBQXVILEVBQUFGLEVBQUFySCxLQUVBLE9BQUF5SCxHQUdBNkksR0FBQSxFQTNDWTVRLEVBQVEsSUEyQ3BCNlEsT0FBQSwyQkFDQUMsR0FDQXhILFVBQUFyRSxFQUFBOEwsT0FDQXhILFVBQUF0RSxFQUFBOEwsT0FDQUMsS0FBQS9MLEVBQUFnTSxNQUFBTCxHQUNBTSxnQkFBQWpNLEVBQUFxRyxJQUNBNkYsV0FBQWxNLEVBQUFtTSxLQUNBQyxnQkFBQXBNLEVBQUE4TCxPQUNBTyxlQUFBck0sRUFBQThMLE9BQ0FRLHFCQUFBdE0sRUFBQThMLE9BQ0FTLEdBQUF2TSxFQUFBOEwsUUFHQVUsRUFFQSxTQUFBckosR0FHQSxTQUFBcUosRUFBQXRQLEdBQ0EsSUFBQWtHLEVBcUZBLE9BcklBLFNBQUFDLEVBQUFDLEdBQWlELEtBQUFELGFBQUFDLEdBQTBDLFVBQUFDLFVBQUEscUNBa0QzRkMsQ0FBQTFCLEtBQUEwSyxJQUVBcEosRUFBQUssRUFBQTNCLEtBQUFHLEVBQUF1SyxHQUFBcE4sS0FBQTBDLEtBQUE1RSxLQUVBdVAsV0FBQSxTQUFBcE4sR0FDQStELEVBQUFzSixTQUFBck4sR0FHQStELEVBQUF1SixhQUFBLFNBQUEzSSxHQUNBLElBQUFDLEVBRUEySSxFQUFBNUksRUFBQTZJLGtCQUNBM0ksRUFBQUYsRUFBQUUsYUFDQTRJLEVBQUE5SSxFQUFBOEksWUFFQUMsRUFBQTNKLEVBQUFsRyxNQUNBa0gsRUFBQTJJLEVBQUExSSxVQUNBMkksRUFBQUQsRUFBQXpJLFVBQ0FBLE9BQUEsSUFBQTBJLEVBQUEsR0FBQUEsRUFDQWpCLEVBQUFnQixFQUFBaEIsS0FDQWtCLEVBQUFGLEVBQUFFLEtBQ0FKLEVBQUFFLEVBQUFGLGtCQUNBSyxFQUFBSCxFQUFBRyxXQUNBQyxFQUFBSixFQUFBSSxVQUNBQyxFQUFBTCxFQUFBSyxxQkFDQUMsRUFBQU4sRUFBQU0sVUFDQUMsRUFBQVAsRUFBQU8sV0FDQUMsRUFBQVIsRUFBQVEsWUFDQWhKLEVBQUE1QixFQUFBb0ssR0FBQSxtSkFFQVMsR0FBQSxFQUFBL0IsRUFBQSxTQUFBbEgsR0FBQSxjQUNBRixFQUFBSCxFQUFBLFNBQUFFLEdBQ0FxSixHQUFBLEVBQUF2TixFQUFBLFVBQTZEa0IsRUFBN0Q2QyxLQUE2RCxHQUFBWSxPQUFBUixFQUFBLGlCQUFBMEgsR0FBQTNLLEVBQUE2QyxFQUFBLEdBQUFZLE9BQUFSLEVBQUEsaUJBQUEwSCxHQUFBM0ssRUFBQTZDLEVBQUEsR0FBQVksT0FBQVIsRUFBQSxlQUFBZ0osR0FBQXBKLEdBQUFLLEdBQzdEOEgsRUFBQWhKLEVBQUFsRyxNQUFBa1AsZ0JBRUFoSixFQUFBc0ssZUFFQXRCLEtBQUEsU0FHQSxJQUFBdUIsR0FDQUMsU0FBQSxhQUFBWCxFQUNBWSxLQUFBLFNBQUFaLEVBQ0FhLFNBQUExSyxFQUFBc0ssY0FFQUssRUFBQWIsSUFBQXBOLEVBQUFvTCxlQUFBZ0MsR0FBQXBOLEVBQUFrTyxhQUFBZCxHQUNBNUksV0FBQSxFQUFBcEUsRUFBQSxTQUFBZ04sRUFBQWhRLE1BQUFvSCxVQUFBLEdBQUFPLE9BQUFSLEVBQUEsbUJBQ082SSxJQUFBcE4sRUFBQWdGLGNBQUE0RyxFQUFBLFNBQ1B2RixLQUFBLFFBQ0E3QixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsa0JBRUE0SixFQUFBZCxJQUFBck4sRUFBQW9MLGVBQUFpQyxHQUFBck4sRUFBQWtPLGFBQUFiLEdBQ0E3SSxXQUFBLEVBQUFwRSxFQUFBLFNBQUFpTixFQUFBalEsTUFBQW9ILFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxrQkFDTzhJLElBQUFyTixFQUFBZ0YsY0FBQTRHLEVBQUEsU0FDUHZGLEtBQUEsZUFDQStILE1BQUEsU0FDQTVKLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxpQkFFQThKLEVBQUFmLElBQUF0TixFQUFBb0wsZUFBQWtDLEdBQUF0TixFQUFBa08sYUFBQVosR0FDQTlJLFdBQUEsRUFBQXBFLEVBQUEsU0FBQWtOLEVBQUFsUSxNQUFBb0gsVUFBQSxHQUFBTyxPQUFBUixFQUFBLHFCQUNPK0ksSUFBQXROLEVBQUFnRixjQUFBNEcsRUFBQSxTQUNQdkYsS0FBQSxRQUNBN0IsVUFBQSxHQUFBTyxPQUFBUixFQUFBLG9CQUVBLE9BQUF2RSxFQUFBZ0YsY0FBQTBHLEVBQUEsUUFBQWhLLEdBQ0E0TSxVQUFBaEwsRUFBQWlMLGlCQUFBaEssR0FDQTZJLFdBQUFhLEVBQ0FaLFVBQUFjLEVBQ0FiLHFCQUFBZSxFQUNBZCxhQUNPRyxFQUFBRyxHQUNQTCxXQUFBQyxHQUFBRCxFQUNBakosWUFDQUMsVUFBQW1KLEVBQ0FyQixtQkFBQSxXQUNBSCxnQkFBQTdJLEVBQUFrTCxtQkFBQXhCLEdBQ0FELHFCQUFBRCxFQUNBM0gsSUFBQTdCLEVBQUFxSixnQkFJQSxFQUFBNUUsRUFBQSxzQkFBQTNLLEVBQUErUCxLQUFBLHdIQUNBLEVBQUFwRixFQUFBLDBCQUFBM0ssR0FBQSwwRUFDQWtHLEVBaUVBLE9BMUxBLFNBQUErQixFQUFBQyxHQUEwQyxzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBN0IsVUFBQSxzREFBNkU0QixFQUFBakcsVUFBQXpFLE9BQUE0SyxPQUFBRCxLQUFBbEcsV0FBeUVpQyxhQUFldkcsTUFBQXVLLEVBQUE1RCxVQUFBLEVBQUFELGNBQUEsS0FBMEQ4RCxHQUFBM0MsRUFBQTBDLEVBQUFDLEdBaUN4VUUsQ0FBQWtILEVBMEpDMU0sRUFBQXlGLFdBbk1ELFNBQUFqQyxFQUFBa0MsRUFBQUMsR0FBNkRELEdBQUF6RCxFQUFBdUIsRUFBQXBFLFVBQUFzRyxHQUFzRUMsR0FBQTFELEVBQUF1QixFQUFBbUMsR0FvSW5JQyxDQUFBOEcsSUFDQWpSLElBQUEscUJBQ0FYLE1BQUEsU0FBQWtTLEdBQ0EsSUFBQWIsRUFBQW5LLEtBQUE1RSxNQUFBK08sZ0JBRUEsWUFBQS9HLElBQUErRyxFQUNBQSxFQUdBbkssS0FBQTRMLGFBQ0EsS0FHQVosRUFBQSxhQUdBdlIsSUFBQSxRQUNBWCxNQUFBLFdBQ0FrSCxLQUFBNEssU0FBQTNHLFdBR0F4SyxJQUFBLE9BQ0FYLE1BQUEsV0FDQWtILEtBQUE0SyxTQUFBMUcsVUFHQXpLLElBQUEsYUFDQVgsTUFBQSxXQUNBLElBQUFxUyxFQUFBbkwsS0FBQTVFLE1BQUErUCxLQUNBLG1CQUFBQSxPQUFBVCxFQUFBK0IsbUNBR0FoVCxJQUFBLG1CQUNBWCxNQUFBLFNBQUF5SixHQUNBLElBQUFtSyxFQUFBMU0sS0FBQTVFLE1BQ0F1UixFQUFBRCxFQUFBQyxRQUNBQyxFQUFBRixFQUFBRSxXQUVBLE9BQUFBLEVBQ0E1TyxFQUFBb0wsZUFBQXdELEdBQUE1TyxFQUFBa08sYUFBQVUsR0FDQXBLLFdBQUEsRUFBQXBFLEVBQUEsU0FBQXdPLEVBQUF4UixNQUFBb0gsVUFBQSxHQUFBTyxPQUFBUixFQUFBLGtCQUNTcUssRUFHVEQsRUFDQTNPLEVBQUFnRixjQUFBNEcsRUFBQSxTQUNBdkYsS0FBQSxZQUlBckcsRUFBQWdGLGNBQUE0RyxFQUFBLFNBQ0F2RixLQUFBLE9BQ0E3QixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsb0JBSUE5SSxJQUFBLFNBQ0FYLE1BQUEsV0FDQSxPQUFBa0YsRUFBQWdGLGNBQUExRSxFQUFBNkYsZUFBQSxLQUFBbkUsS0FBQTZLLGtCQUlBSCxFQTFKQSxHQTZKQTdSLEVBQUEsUUFBQTZSLEVBQ0FBLEVBQUFtQyxPQUFBbkQsRUFBQW1ELE9BQ0FuQyxFQUFBb0MsU0FBQXBELEVBQUFvRCxTQUNBcEMsRUFBQStCLGdDQUFBLGtDQUNBL0IsRUFBQXRHLGNBQ0FnRyxZQUFBLEVBQ0FHLGVBQUEsV0FDQUMscUJBQUEsUUFFQUUsRUFBQXFDLFVBQUFoRCxxQ0NyUEE5USxFQUFRLElBRVJBLEVBQVEsa01DTUorVCxFQUFRLFNBQUFDLEdBR1osU0FBQWpILEVBQUE1SyxHQUNJOFIsSUFBZWxOLEtBQUFnRyxHQUVuQixJQUFBMUUsRUFBZ0I2TCxJQUEwQm5OLEtBQUFpTixFQUFBM1AsS0FBQTBDLEtBQUE1RSxJQUUxQ2tHLEVBQUE4TCxhQUFBLFNBQUFyTSxHQUNBLElBQUEyTCxFQUFBcEwsRUFBQWxHLE1BQ0F5SCxFQUFBNkosRUFBQTdKLFNBQ0FmLEVBQUE0SyxFQUFBNUssU0FFQWUsSUFHQSxZQUFBdkIsRUFBQWxHLE9BQ0FrRyxFQUFBK0wsVUFDQXpLLFFBQUE3QixFQUFBbkIsT0FBQWdELFVBR0FkLEdBQ0FBLEdBQ0FsQyxPQUFrQjBOLE9BQVdoTSxFQUFBbEcsT0FDN0J3SCxRQUFBN0IsRUFBQW5CLE9BQUFnRCxVQUVBMkssZ0JBQUEsV0FDQXhNLEVBQUF3TSxtQkFFQUMsZUFBQSxXQUNBek0sRUFBQXlNLGtCQUdBQyxZQUFBMU0sRUFBQTBNLGdCQUtBbk0sRUFBQW9NLFVBQUEsU0FBQW5RLEdBQ0ErRCxFQUFBcU0sTUFBQXBRLEdBR0EsSUFBQXFGLEVBQUEsWUFBQXhILElBQUF3SCxRQUFBeEgsRUFBQXdTLGVBS0EsT0FIQXRNLEVBQUEwQyxPQUNBcEIsV0FFQXRCLEVBMkVBLE9BekhFdU0sSUFBUzdILEVBQUFpSCxHQWlEWGpILEVBQUE4SCx5QkFBQSxTQUFBMVMsRUFBQTRJLEdBQ0Esa0JBQUE1SSxFQUNha1MsT0FBV3RKLEdBQ3hCcEIsUUFBQXhILEVBQUF3SCxVQUdBLE1BR0FvRCxFQUFBNUksVUFBQTZHLE1BQUEsV0FDQWpFLEtBQUEyTixNQUFBMUosU0FHQStCLEVBQUE1SSxVQUFBOEcsS0FBQSxXQUNBbEUsS0FBQTJOLE1BQUF6SixRQUdBOEIsRUFBQTVJLFVBQUEyUSxPQUFBLFdBQ0EsSUFBQTVMLEVBRUE2TCxFQUFBaE8sS0FBQTVFLE1BQ0FtSCxFQUFBeUwsRUFBQXpMLFVBQ0FDLEVBQUF3TCxFQUFBeEwsVUFDQTFJLEVBQUFrVSxFQUFBbFUsTUFDQTZJLEVBQUFxTCxFQUFBckwsS0FDQThILEVBQUF1RCxFQUFBdkQsR0FDQXBHLEVBQUEySixFQUFBM0osS0FDQXhCLEVBQUFtTCxFQUFBbkwsU0FDQW9MLEVBQUFELEVBQUFDLFNBQ0FDLEVBQUFGLEVBQUFFLFNBQ0FDLEVBQUFILEVBQUFHLFFBQ0FDLEVBQUFKLEVBQUFJLFFBQ0FDLEVBQUFMLEVBQUFLLE9BQ0FDLEVBQUFOLEVBQUFNLFVBQ0F4VixFQUFBa1YsRUFBQWxWLE1BQ0F5VixFQUFpQkMsSUFBd0JSLEdBQUEsdUlBRXpDUyxFQUFBOVYsT0FBQTBDLEtBQUFrVCxHQUFBalQsT0FBQSxTQUFBQyxFQUFBOUIsR0FJQSxNQUhBLFVBQUFBLEVBQUErQixPQUFBLGdCQUFBL0IsRUFBQStCLE9BQUEsZUFBQS9CLElBQ0E4QixFQUFBOUIsR0FBQThVLEVBQUE5VSxJQUVBOEIsT0FHQXFILEVBQUE1QyxLQUFBZ0UsTUFBQXBCLFFBRUEyRCxFQUFzQm1JLElBQVVuTSxFQUFBQyxJQUFBTCxNQUF3Q0ksRUFBQSxZQUFBSyxFQUFBVCxFQUFBSSxFQUFBLGFBQUFNLEVBQUFWLElBRXhFLE9BQVd3TSxFQUFBQyxFQUFLNUwsY0FDaEIsUUFDT1IsVUFBQStELEVBQUF6TSxTQUNENlUsRUFBQUMsRUFBSzVMLGNBQUEsUUFBd0JzSyxLQUNuQzNLLE9BQ0E4SCxLQUNBcEcsT0FDQTRKLFdBQ0FwTCxXQUNBcUwsV0FDQTFMLFVBQUFELEVBQUEsU0FDQUssWUFDQXVMLFVBQ0FDLFVBQ0FDLFNBQ0F2TSxTQUFBOUIsS0FBQW9OLGFBQ0FrQixZQUNBbkwsSUFBQW5ELEtBQUEwTixVQUNBNVUsU0FDTzJWLElBQ0RFLEVBQUFDLEVBQUs1TCxjQUFBLFFBQXdCUixVQUFBRCxFQUFBLGFBSW5DeUQsRUExSFksQ0EySFY2SSxFQUFBLFdBRUY3QixFQUFRRCxXQUNSeEssVUFBYXVNLEVBQUFGLEVBQVM1RSxPQUN0QnhILFVBQWFzTSxFQUFBRixFQUFTNUUsT0FDdEJsUSxNQUFTZ1YsRUFBQUYsRUFBU2xLLE9BQ2xCL0IsS0FBUW1NLEVBQUFGLEVBQVM1RSxPQUNqQlMsR0FBTXFFLEVBQUFGLEVBQVM1RSxPQUNmM0YsS0FBUXlLLEVBQUFGLEVBQVM1RSxPQUNqQjRELGVBQWtCa0IsRUFBQUYsRUFBU0csV0FBWUQsRUFBQUYsRUFBU0ksT0FBU0YsRUFBQUYsRUFBU3ZFLE9BQ2xFekgsUUFBV2tNLEVBQUFGLEVBQVNHLFdBQVlELEVBQUFGLEVBQVNJLE9BQVNGLEVBQUFGLEVBQVN2RSxPQUMzRHhILFNBQVlpTSxFQUFBRixFQUFTdkUsS0FDckIrRCxRQUFXVSxFQUFBRixFQUFTSyxLQUNwQlosT0FBVVMsRUFBQUYsRUFBU0ssS0FDbkJuTixTQUFZZ04sRUFBQUYsRUFBU0ssS0FDckJkLFFBQVdXLEVBQUFGLEVBQVNLLEtBQ3BCZixTQUFZWSxFQUFBRixFQUFTRyxXQUFZRCxFQUFBRixFQUFTNUUsT0FBUzhFLEVBQUFGLEVBQVNJLFNBQzVEZixTQUFZYSxFQUFBRixFQUFTdkUsS0FDckJpRSxVQUFhUSxFQUFBRixFQUFTdkUsS0FDdEJ2UixNQUFTZ1csRUFBQUYsRUFBU3JLLEtBRWxCeUksRUFBUTVJLGNBQ1I3QixVQUFBLGNBQ0FDLFVBQUEsR0FDQTFJLFNBQ0F1SyxLQUFBLFdBQ0F1SixnQkFBQSxFQUNBUSxRQUFBLGFBQ0FDLE9BQUEsYUFDQXZNLFNBQUEsY0FJQW5KLE9BQUF1VyxFQUFBLFNBQUF2VyxDQUFTcVUsR0FFTSxJQUFBbUMsRUFBQSxFQ3RLQUMsRUFBQSw2Q0NBZnpXLE9BQUFDLGVBQUFDLEVBQUEsY0FDQUMsT0FBQSxJQUVBRCxFQUFBLGVBTUEsSUFBQWtGLEVBRkEsU0FBQWhDLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUY3RS9DLENBQW9DQyxFQUFRLE9BSTVDLFFBQ0FKLEVBQUEsUUFBQWtGLHFDQ1ZBcEYsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsZUFFQSxJQUFBbUYsRUFBQUMsRUFBb0NoRixFQUFRLElBRTVDb1csRUFBQXBSLEVBQXVDaEYsRUFBUSxLQUUvQzBRLEVBQUEzUSxFQUFtQ0MsRUFBUSxLQUUzQ3FXLEVBQUFyUixFQUF1Q2hGLEVBQVEsT0FFL0NpRixFQUFBRCxFQUF3Q2hGLEVBQVEsSUFFaERtRixFQUFBcEYsRUFBeUNDLEVBQVEsS0FFakRvRixFQUFBckYsRUFBMkNDLEVBQVEsT0FFbkRzVyxFQUFBdlcsRUFBNkNDLEVBQVEsT0FFckR1VyxFQUFBeFcsRUFBMENDLEVBQVEsT0FFbER3VyxFQUFBelcsRUFBMkNDLEVBQVEsT0FFbkR5VyxFQUFBMVcsRUFBbURDLEVBQVEsT0FFM0QwVyxFQUFBM1csRUFBcUNDLEVBQVEsT0FFN0MyVyxFQUFBNVcsRUFBMENDLEVBQVEsT0FFbEQ0VyxFQUFBN1csRUFBNENDLEVBQVEsT0FFcEQ2VyxFQUFZN1csRUFBUSxNQUVwQjhXLEVBQUEvVyxFQUF5Q0MsRUFBUSxPQUVqRDJRLEVBQUE1USxFQUFtQ0MsRUFBUSxLQUUzQytXLEVBQUFoWCxFQUFtQ0MsRUFBUSxNQUUzQ2dYLEVBQUFqWCxFQUEwQ0MsRUFBUSxPQUVsRGlYLEVBQUFsWCxFQUE2Q0MsRUFBUSxNQUVyRDhFLEVBQUEvRSxFQUFzQ0MsRUFBUSxNQUU5Q3FGLEVBQXNCckYsRUFBUSxJQUU5QjhNLEVBQUEvTSxFQUFzQ0MsRUFBUSxLQUU5QyxTQUFBRCxFQUFBK0MsR0FBc0MsT0FBQUEsS0FBQUMsV0FBQUQsR0FBdUNFLFFBQUFGLEdBRTdFLFNBQUF3QyxJQUFxQyxzQkFBQUMsUUFBQSxZQUFnRCxJQUFBQyxFQUFBLElBQUFELFFBQTZHLE9BQWxGRCxFQUFBLFdBQWlFLE9BQUFFLEdBQWlCQSxFQUVsTSxTQUFBUixFQUFBbEMsR0FBdUMsR0FBQUEsS0FBQUMsV0FBNkIsT0FBQUQsRUFBYyxJQUFBMEMsRUFBQUYsSUFBd0MsR0FBQUUsS0FBQUMsSUFBQTNDLEdBQStCLE9BQUEwQyxFQUFBRSxJQUFBNUMsR0FBeUIsSUFBQTZDLEtBQWlCLFNBQUE3QyxFQUFBLENBQW1CLElBQUE4QyxFQUFBbEcsT0FBQUMsZ0JBQUFELE9BQUFtRyx5QkFBc0YsUUFBQXJGLEtBQUFzQyxFQUF1QixHQUFBcEQsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXZCLEVBQUF0QyxHQUFBLENBQXNELElBQUF1RixFQUFBSCxFQUFBbEcsT0FBQW1HLHlCQUFBL0MsRUFBQXRDLEdBQUEsS0FBcUZ1RixNQUFBTCxLQUFBSyxFQUFBQyxLQUFzQ3RHLE9BQUFDLGVBQUFnRyxFQUFBbkYsRUFBQXVGLEdBQW1ESixFQUFBbkYsR0FBQXNDLEVBQUF0QyxJQUFnRyxPQUFoRW1GLEVBQUEsUUFBQTdDLEVBQXlCMEMsR0FBYUEsRUFBQVEsSUFBQWxELEVBQUE2QyxHQUEwQkEsRUFFdm9CLFNBQUFNLEVBQUFuRCxHQUF3VSxPQUF0T21ELEVBQTNFLG1CQUFBQyxRQUFBLGlCQUFBQSxPQUFBQyxTQUEyRSxTQUFBckQsR0FBa0MsY0FBQUEsR0FBK0IsU0FBQUEsR0FBa0MsT0FBQUEsR0FBQSxtQkFBQW9ELFFBQUFwRCxFQUFBc0QsY0FBQUYsUUFBQXBELElBQUFvRCxPQUFBL0IsVUFBQSxnQkFBQXJCLElBQW1JQSxHQUV4VSxTQUFBdUQsRUFBQXZELEVBQUF0QyxFQUFBWCxHQUFtTSxPQUF4SlcsS0FBQXNDLEVBQWtCcEQsT0FBQUMsZUFBQW1ELEVBQUF0QyxHQUFrQ1gsUUFBQXlHLFlBQUEsRUFBQUMsY0FBQSxFQUFBQyxVQUFBLElBQWdGMUQsRUFBQXRDLEdBQUFYLEVBQW9CaUQsRUFFbk0sU0FBQTJELElBQW1SLE9BQTlQQSxFQUFBL0csT0FBQWdILFFBQUEsU0FBQUMsR0FBZ0QsUUFBQXJHLEVBQUEsRUFBZ0JBLEVBQUFzRyxVQUFBckcsT0FBc0JELElBQUEsQ0FBTyxJQUFBdUcsRUFBQUQsVUFBQXRHLEdBQTJCLFFBQUFFLEtBQUFxRyxFQUEwQm5ILE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF3QyxFQUFBckcsS0FBeURtRyxFQUFBbkcsR0FBQXFHLEVBQUFyRyxJQUFpQyxPQUFBbUcsSUFBa0JHLE1BQUFDLEtBQUFILFdBSW5SLFNBQUFJLEVBQUFMLEVBQUF4RSxHQUEyQyxRQUFBN0IsRUFBQSxFQUFnQkEsRUFBQTZCLEVBQUE1QixPQUFrQkQsSUFBQSxDQUFPLElBQUEyRyxFQUFBOUUsRUFBQTdCLEdBQTJCMkcsRUFBQVgsV0FBQVcsRUFBQVgsYUFBQSxFQUF3RFcsRUFBQVYsY0FBQSxFQUFnQyxVQUFBVSxNQUFBVCxVQUFBLEdBQXVEOUcsT0FBQUMsZUFBQWdILEVBQUFNLEVBQUF6RyxJQUFBeUcsSUFNOVAsU0FBQUMsRUFBQUMsR0FBZ0wsT0FBbkpELEVBQUF4SCxPQUFBMEgsZUFBQTFILE9BQUEySCxlQUFBLFNBQUFGLEdBQWdHLE9BQUFBLEVBQUFHLFdBQUE1SCxPQUFBMkgsZUFBQUYsS0FBbURBLEdBRWhMLFNBQUFJLEVBQUFDLEdBQXVDLFlBQUFBLEVBQXVCLFVBQUFDLGVBQUEsNkRBQXlGLE9BQUFELEVBSXZKLFNBQUFFLEVBQUFQLEVBQUFRLEdBQTBJLE9BQTFHRCxFQUFBaEksT0FBQTBILGdCQUFBLFNBQUFELEVBQUFRLEdBQTZGLE9BQWpCUixFQUFBRyxVQUFBSyxFQUFpQlIsSUFBYUEsRUFBQVEsR0FFMUksSUFBQUMsRUFBQSxTQUFBQyxFQUFBQyxHQUNBLElBQUFDLEtBRUEsUUFBQUosS0FBQUUsRUFDQW5JLE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF3RCxFQUFBRixJQUFBRyxFQUFBRSxRQUFBTCxHQUFBLElBQUFJLEVBQUFKLEdBQUFFLEVBQUFGLElBR0EsU0FBQUUsR0FBQSxtQkFBQW5JLE9BQUF1SSxzQkFBQSxLQUFBM0gsRUFBQSxNQUFBcUgsRUFBQWpJLE9BQUF1SSxzQkFBQUosR0FBMkh2SCxFQUFBcUgsRUFBQXBILE9BQWNELElBQ3pJd0gsRUFBQUUsUUFBQUwsRUFBQXJILElBQUEsR0FBQVosT0FBQXlFLFVBQUErRCxxQkFBQTdELEtBQUF3RCxFQUFBRixFQUFBckgsTUFBQXlILEVBQUFKLEVBQUFySCxJQUFBdUgsRUFBQUYsRUFBQXJILEtBRUEsT0FBQXlILEdBS0EsU0FBQW1QLEtBRUEsU0FBQTVDLEVBQUF4TSxHQUNBQSxFQUFBd00sa0JBRUF4TSxFQUFBME0sWUFBQTJDLDBCQUNBclAsRUFBQTBNLFlBQUEyQywyQkFJQSxTQUFBQyxFQUFBalYsR0FDQSxPQUFBQSxFQUFBa1YsaUJBR0EsU0FBQUMsRUFBQWxILEVBQUExUCxHQUNBLE9BQUEwUCxFQUFBNVAsS0FBQTRQLEVBQUFtSCxXQUFBN1csRUFlQSxJQUFBOFcsR0FDQTNPLFNBQUFxTyxFQUNBTyxpQkFBQVAsR0FPQVEsS0FFQUMsRUFFQSxTQUFBdlAsR0FHQSxTQUFBdVAsRUFBQXhWLEdBQ0EsSUFBQWtHLEdBOUVBLFNBQUFDLEVBQUFDLEdBQWlELEtBQUFELGFBQUFDLEdBQTBDLFVBQUFDLFVBQUEscUNBZ0YzRkMsQ0FBQTFCLEtBQUE0USxJQUVBdFAsRUE1RUEsU0FBQWIsRUFBQW5ELEdBQWlELE9BQUFBLEdBQUEsV0FBQTRCLEVBQUE1QixJQUFBLG1CQUFBQSxFQUF5RmtELEVBQUFDLEdBQWZuRCxFQTRFM0hxRSxDQUFBM0IsS0FBQUcsRUFBQXlRLEdBQUF0VCxLQUFBMEMsS0FBQTVFLEtBRUF5Vix1QkFBQSxTQUFBakosRUFBQWpPLEdBQ0EsSUFBQTJXLEVBQUFELEVBQUEvTyxFQUFBbEcsT0FFQSxJQUFBa1YsRUFBQVEsaUJBQ0EsU0FHQSxJQUFBclgsRUFBQTZILEVBQUF5UCxhQUFBbkosRUFBQWpPLEdBR0EsSUFBQTJILEVBQUEwUCxtQkFBQXZYLEdBQUEsQ0FDQTZILEVBQUEwUCxtQkFBQXZYLEdBQUE2VyxFQUFBUSxpQkFBQWxKLE9BQ0EsSUFBQXhCLEVBQUE5RSxFQUFBMFAsbUJBQUF2WCxJQUNBLEVBQUFzTSxFQUFBLHVCQUFBSyxHQUFBLG1CQUFBQSxHQUFBLGlIQUdBLE9BQUE5RSxFQUFBMFAsbUJBQUF2WCxJQUdBNkgsRUFBQXlQLGFBQUEsU0FBQUUsRUFBQXRYLEdBQ0EsSUFBQXVYLEVBQUE1UCxFQUFBbEcsTUFBQThWLE9BQ0FDLEVBQUEsbUJBQUFELElBQUFELEVBQUF0WCxHQUFBc1gsRUFBQUMsR0FFQSxPQURBLEVBQUFuTCxFQUFBLGNBQUEzQyxJQUFBK04sRUFBQSw4S0FDQS9OLElBQUErTixFQUFBeFgsRUFBQXdYLEdBR0E3UCxFQUFBOFAsTUFBQSxTQUFBN08sRUFBQTBPLEVBQUF0WCxHQUNBLElBQUF5WCxFQUFBOVAsRUFBQWxHLE1BQUFnVyxNQUVBLE9BQUExUixPQURBMFIsSUFBQUgsRUFBQXRYLFFBRUE0SSxZQUNBOE8sTUFBQS9QLEVBQUErUCxNQUNBSCxPQUFBNVAsRUFBQXlQLGFBQUFFLEVBQUF0WCxNQUlBMkgsRUFBQWdRLDJCQUFBLFNBQUF2RyxHQUNBLElBQUF3RyxFQUFBalEsRUFBQWxHLE1BQUFtVyxPQUVBLE9BQUF4RyxJQUtBd0csRUFBQSxXQUNBLE9BQUFsQyxFQUFBbUMsWUFBQWhSLEVBQUFjLFVBQ084QixJQUdQOUIsRUFBQW1RLGFBQUEsU0FBQXBJLEVBQUFxSSxHQUNBLElBQUF0VyxFQUFBa0csRUFBQWxHLE1BRUF1VyxFQUFBalMsS0FBa0M0QixFQUFBMEMsTUFBQTJOLFlBRWxDQyxFQUFBbFMsT0FBd0M0QixFQUFBMEMsTUFBQTROLFNBQUF0UyxLQUEwQ2lSLEVBQUFsSCxHQUFBcUksSUFHbEZHLE1BQ0EsRUFBQS9CLEVBQUFoSSxTQUFBeEcsRUFBQTRILFFBQUEsU0FBQTVQLEdBQ0FBLEVBQUFGLFVBQ0F5WSxFQUFBeFYsS0FBQWtVLEVBQUFqWCxNQUdBWCxPQUFBMEMsS0FBQXVXLEdBQUF6VixRQUFBLFNBQUEyVixHQUNBRCxFQUFBNVEsUUFBQTZRLEdBQUEsVUFDQUYsRUFBQUUsS0FJQTFXLEVBQUF1VyxhQUVBQSxFQUFBN1UsUUFBQSxFQUNBNlUsRUFBQTdQLFNBQUE2UCxFQUFBN1UsVUFHQSxJQUFBaVYsR0FDQUosYUFDQUMsWUFHQUksRUFBQXRTLEtBQXlDa1MsR0FHekN0USxFQUFBMlEsMEJBQUE5VixRQUFBLFNBQUErVixHQUNBLElBQUFKLEVBQUF2QixFQUFBMkIsR0FFQUosVUFDQUUsRUFBQUYsS0FJQW5aLE9BQUEwQyxLQUFBMlcsR0FBQXhZLE9BQUEsSUFDQXVZLEVBQUFILFFBQUFJLEdBSUEsV0FBQTlTLEVBQUE5RCxFQUFBdVcsYUFBQSxZQUFBdlcsRUFBQXVXLGFBQ0FJLEVBQUFKLFdBQUFqUyxPQUFrRGlTLElBQ2xEN1UsUUFBQXdFLEVBQUEwQyxNQUFBMk4sV0FBQTdVLFdBSUF3RSxFQUFBK0wsU0FBQTBFLEVBQUEsV0FDQXpRLEVBQUErUCxNQUFBaEUsVUFDQThFLGdCQUFBLElBR0EsSUFBQXJRLEVBQUFSLEVBQUFsRyxNQUFBMEcsU0FFQUEsR0FDQUEsRUFBQS9CLE1BQUEsS0FBQXVCLEVBQUE4USx1QkFBQTFTLE9BQWdGNEIsRUFBQTBDLFFBQ2hGbU8sZ0JBQUEsRUFDQVAsVUFDQUQsb0JBTUFyUSxFQUFBK1EsYUFBQSxTQUFBcEIsRUFBQXFCLEVBQUF2UixHQUNBLElBQUE2QixFQUFBN0IsRUFBQW5CLE9BQUFnRCxRQUNBNkssRUFBQTFNLEVBQUEwTSxZQUNBOEUsRUFBQWpSLEVBQUErUCxNQUFBbUIsV0FBQUwsa0JBQUE3USxFQUFBbVIsc0JBRUFDLEVBQUFwUixFQUFBK1AsTUFBQW1CLFdBQUFFLGdCQUFBM1AsT0FBQXdQLEdBRUE5WSxFQUFBNkgsRUFBQXlQLGFBQUFFLEVBQUFxQixHQUVBSyxFQUFBclIsRUFBQTBDLE1BQUEyTyxNQUVBQyxFQUFBdFIsRUFBQXVSLHlCQUVBQyxFQUFBUixFQVFBLEdBTkFoUixFQUFBbEcsTUFBQTJYLG9CQUNBRCxFQUFBRixFQUFBSSxVQUFBLFNBQUFDLEdBQ0EsT0FBQTNSLEVBQUF5UCxhQUFBa0MsRUFBQVgsS0FBQTdZLEtBSUFnVSxFQUFBeUYsZUFBQTlQLElBQUF1UCxHQUFBRyxJQUFBSCxFQUFBLENBOEJBLElBN0JBLElBQUFRLEtBQ0FDLEVBQUFDLEtBQUFDLEtBQUFYLEVBQUFHLEdBQ0FTLEVBQUFGLEtBQUFHLElBQUFiLEVBQUFHLEdBQ0FXLEVBQUEsRUFFQUMsRUFBQSxXQUNBLElBQUFuYSxFQUFBdVosRUFBQVcsRUFBQUwsRUFDQUssR0FBQSxFQUNBLElBQUFSLEVBQUFMLEVBQUFyWixHQUVBMlgsRUFBQTVQLEVBQUF5UCxhQUFBa0MsRUFBQTFaLEdBRUErSCxFQUFBdVAsdUJBQUFvQyxFQUFBMVosR0FFQXNKLFdBQ0E2UCxFQUFBaUIsU0FBQXpDLEdBQ0F0TyxJQUNBOFAsSUFBQWtCLE9BQUEsU0FBQUMsR0FDQSxPQUFBM0MsSUFBQTJDLElBRUFWLEVBQUE5VyxLQUFBNlUsSUFFYXRPLElBQ2I4UCxFQUFBclcsS0FBQTZVLEdBQ0FpQyxFQUFBOVcsS0FBQTZVLE1BS0F1QyxHQUFBRixHQUNBRyxJQUdBcFMsRUFBQStMLFVBQ0FzRixNQUFBRyxJQUdBeFIsRUFBQStQLE1BQUFoRSxVQUNBOEUsZ0JBQUEsSUFHQTdRLEVBQUF3UyxtQkFBQXBCLEdBQ0FxQixVQUFBLG1CQUNBOUMsU0FDQXJPLFVBQ0F1USxnQkFDQTFGLHFCQUdBN0ssRUFDQThQLEVBQUFyVyxLQUFBaUYsRUFBQXlQLGFBQUFFLEVBQUE2QixJQUVBSixJQUFBa0IsT0FBQSxTQUFBcmEsR0FDQSxPQUFBRSxJQUFBRixJQUlBK0gsRUFBQStMLFVBQ0FzRixNQUFBRyxJQUdBeFIsRUFBQStQLE1BQUFoRSxVQUNBOEUsZ0JBQUEsSUFHQTdRLEVBQUF3UyxtQkFBQXBCLEdBQ0FxQixVQUFBLFdBQ0E5QyxTQUNBck8sVUFDQXVRLG1CQUFBL1AsRUFDQXFLLGlCQUtBbk0sRUFBQTBTLGtCQUFBLFNBQUEvQyxFQUFBcUIsRUFBQXZSLEdBQ0EsSUFBQTZCLEVBQUE3QixFQUFBbkIsT0FBQWdELFFBQ0E2SyxFQUFBMU0sRUFBQTBNLFlBSUFpRixHQUZBcFIsRUFBQXlQLGFBQUFFLEVBQUFxQixJQUlBaFIsRUFBQStQLE1BQUFoRSxVQUNBOEUsZ0JBQUEsSUFHQTdRLEVBQUF3UyxtQkFBQXBCLEdBQ0FxQixVQUFBLFdBQ0E5QyxTQUNBck8sVUFDQXVRLG1CQUFBL1AsRUFDQXFLLGlCQUlBbk0sRUFBQTJTLGdCQUFBLFNBQUFDLEVBQUF2YSxFQUFBd2EsR0FDQSxJQWFBdlIsRUFiQTJFLEVBQUFqRyxFQUFBdVIseUJBRUFOLEVBQUFqUixFQUFBK1AsTUFBQW1CLFdBQUFMLGtCQUFBN1EsRUFBQW1SLHNCQUVBQyxFQUFBcFIsRUFBQStQLE1BQUFtQixXQUFBRSxnQkFBQTNQLE9BQUF3UCxHQUVBNkIsRUFBQTdNLEVBQUFxTSxPQUFBLFNBQUFoTSxFQUFBck8sR0FDQSxPQUFBK0gsRUFBQXVQLHVCQUFBakosRUFBQXJPLEdBQUFzSixXQUNPb0YsSUFBQSxTQUFBTCxFQUFBck8sR0FDUCxPQUFBK0gsRUFBQXlQLGFBQUFuSixFQUFBck8sS0FFQTRaLEtBQ0FZLEVBQUEsY0FHQSxPQUFBRyxHQUNBLFVBQ0FFLEVBQUFqWSxRQUFBLFNBQUExQyxHQUNBaVosRUFBQXpSLFFBQUF4SCxHQUFBLElBQ0FpWixFQUFBclcsS0FBQTVDLEdBQ0EwWixFQUFBOVcsS0FBQTVDLE1BR0FzYSxFQUFBLGNBQ0FuUixHQUFBLEVBQ0EsTUFFQSxnQkFDQXdSLEVBQUFqWSxRQUFBLFNBQUExQyxHQUNBaVosRUFBQXpSLFFBQUF4SCxJQUFBLElBQ0FpWixFQUFBMkIsT0FBQTNCLEVBQUF6UixRQUFBeEgsR0FBQSxHQUNBMFosRUFBQTlXLEtBQUE1QyxNQUdBc2EsRUFBQSxjQUNBblIsR0FBQSxFQUNBLE1BRUEsYUFDQXdSLEVBQUFqWSxRQUFBLFNBQUExQyxHQUNBaVosRUFBQXpSLFFBQUF4SCxHQUFBLEVBQ0FpWixFQUFBclcsS0FBQTVDLEdBRUFpWixFQUFBMkIsT0FBQTNCLEVBQUF6UixRQUFBeEgsR0FBQSxHQUdBMFosRUFBQTlXLEtBQUE1QyxHQUNBc2EsRUFBQSxtQkFRQXpTLEVBQUErUCxNQUFBaEUsVUFDQThFLGdCQUFBLElBSUEsSUFBQTdCLEVBQUFoUCxFQUFBbEcsTUFBQWtWLGFBQ0FnRSxFQUFBLEVBTUEsR0FKQWhFLEtBQUFpRSx3QkFDQUQsRUFBQSxHQUdBM2EsR0FBQTJhLEdBQUEsbUJBQUFILEVBQ0EsT0FBQUEsRUFBQUMsR0FHQTlTLEVBQUF3UyxtQkFBQXBCLEdBQ0FxQixZQUNBblIsVUFDQXVRLG1CQUlBN1IsRUFBQWtULGlCQUFBLFNBQUExWCxHQUNBLElBQUExQixFQUFBa0csRUFBQWxHLE1BRUF1VyxFQUFBalMsS0FBa0M0QixFQUFBMEMsTUFBQTJOLFlBR2xDQSxFQUFBN1UsUUFEQUEsSUFHQTZVLEVBQUE3VSxTQUFBLEdBR0EsUUFBQTJYLEVBQUE1VSxVQUFBckcsT0FBQWtiLEVBQUEsSUFBQXZYLE1BQUFzWCxFQUFBLEVBQUFBLEVBQUEsS0FBQUUsRUFBQSxFQUFzR0EsRUFBQUYsRUFBYUUsSUFDbkhELEVBQUFDLEVBQUEsR0FBQTlVLFVBQUE4VSxHQUdBaEQsRUFBQTdQLFNBQUEvQixNQUFBNFIsS0FBQTdVLFNBQUFpRyxPQUFBMlIsSUFDQSxJQUFBM0MsR0FDQUosY0FHQXZXLEVBQUF1VyxZQUFBLFdBQUF6UyxFQUFBOUQsRUFBQXVXLGFBQUEsWUFBQXZXLEVBQUF1VyxhQUNBSSxFQUFBSixXQUFBalMsT0FBa0RpUyxJQUNsRDdVLFFBQUF3RSxFQUFBMEMsTUFBQTJOLFdBQUE3VSxXQUlBd0UsRUFBQStMLFNBQUEwRSxHQUVBelEsRUFBQStQLE1BQUFoRSxVQUNBOEUsZ0JBQUEsSUFHQSxJQUFBclEsRUFBQVIsRUFBQWxHLE1BQUEwRyxTQUVBQSxHQUNBQSxFQUFBL0IsTUFBQSxLQUFBdUIsRUFBQThRLHVCQUFBMVMsT0FBOEU0QixFQUFBMEMsUUFDOUVtTyxnQkFBQSxFQUNBUixrQkFLQXJRLEVBQUFzVCxxQkFBQSxTQUFBOVgsRUFBQStYLEdBQ0EsSUFBQWxELEVBQUFyUSxFQUFBMEMsTUFBQTJOLFdBQ0FBLEVBQUFqQixpQkFBQTVULEVBQUErWCxHQUVBLElBQUFDLEVBQUFwVixPQUErQ2lTLElBQy9Da0QsV0FDQS9YLFlBR0F3RSxFQUFBK0wsVUFDQXNFLFdBQUFtRCxJQUdBLElBQUFoVCxFQUFBUixFQUFBbEcsTUFBQTBHLFNBRUFBLEdBQ0FBLEVBQUEvQixNQUFBLEtBQUF1QixFQUFBOFEsdUJBQUExUyxPQUE4RTRCLEVBQUEwQyxRQUM5RTJOLFdBQUFtRCxPQUtBeFQsRUFBQXlULGlCQUFBLFNBQUF4UyxHQUNBLGdCQUFBTCxHQUNBLElBQUE4UyxFQUFBOVMsRUFBQThTLFdBQ0FDLEVBQUEvUyxFQUFBK1MsU0FDQUMsRUFBQWhULEVBQUFnVCxpQkFDQWpFLEVBQUEvTyxFQUFBK08sT0FDQWtFLEVBQUFqVCxFQUFBaVQsU0FFQSxPQUFBSCxFQUNBaFgsRUFBQWdGLGNBQUFrTixFQUFBLFNBQ0FrRixjQUFBLFFBQ0FDLGNBQUF0WCxFQUFBLFFBQUE2UyxPQUNXLFNBQUEwRSxHQUNYLElBQUFuVCxFQUVBLE9BQUFuRSxFQUFBZ0YsY0FBQWlOLEVBQUEsU0FDQXpOLFdBQUEsRUFBQXBFLEVBQUEsWUFBQTJFLE9BQUFSLEVBQUEscUJBQUFKLEtBQWdIN0MsRUFBQTZDLEVBQUEsR0FBQVksT0FBQVIsRUFBQSxtQkFBQTBTLEdBQUEzVixFQUFBNkMsRUFBQSxHQUFBWSxPQUFBUixFQUFBLGlCQUFBMFMsR0FBQTlTLElBQ2hIZ00sUUFBQSxTQUFBb0gsR0FDQUosRUFBQWxFLEVBQUFzRSxJQUVBQyxhQUFBUCxFQUFBSyxFQUFBRyxTQUFBSCxFQUFBSSxPQUNBQyxTQUFBLE1BS0FULEVBQ0FsWCxFQUFBZ0YsY0FBQSxRQUNBUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEscUJBQUFRLE9BQUFSLEVBQUEsaUJBSUEsT0FJQWpCLEVBQUFzVSxtQkFBQSxTQUFBdlIsR0FDQSxnQkFBQXdSLEVBQUE1RSxFQUFBdFgsR0FDQSxJQUFBdVgsRUFBQTVQLEVBQUF5UCxhQUFBRSxFQUFBdFgsR0FFQXlCLEVBQUFrRyxFQUFBdVAsdUJBQUFJLEVBQUF0WCxHQU1BLE9BQUFxRSxFQUFBZ0YsY0FBQSxRQUNBbUwsUUFBQVosR0FDU3ZQLEVBQUFnRixjQUFBeU0sRUFBQSxRQUFBL1AsR0FDVDJFLE9BQ0FnTixNQUFBL1AsRUFBQStQLE1BQ0FpQixTQUFBcEIsRUFDQXBQLFNBVkEsU0FBQWYsR0FDQSxnQkFBQXNELEVBQUEvQyxFQUFBMFMsa0JBQUEvQyxFQUFBdFgsRUFBQW9ILEdBQUFPLEVBQUErUSxhQUFBcEIsRUFBQXRYLEVBQUFvSCxJQVVBd1IsaUJBQUFqUixFQUFBbVIsdUJBQ1NyWCxPQUlUa0csRUFBQXdVLFlBQUEsU0FBQUMsR0FDQSxJQUFBQyxFQUVBelQsRUFBQXdULEVBQUF4VCxVQUNBeUksRUFBQStLLEVBQUEvSyxZQUNBaUwsRUFBQUYsRUFBQUUsa0JBQ0FDLEVBQUFILEVBQUFHLGNBQ0FDLEVBQUFKLEVBQUFoTCxrQkFFQUUsRUFBQTNKLEVBQUFsRyxNQUNBZ2IsRUFBQW5MLEVBQUFtTCxXQUNBZCxFQUFBckssRUFBQXFLLE9BQ0F2SyxFQUFBRSxFQUFBRixrQkFDQXNMLEVBQUF4VixFQUFBb0ssR0FBQSw0Q0FHQXhJLEdBQUEsRUFBQWtILEVBQUEsU0FBQTBNLEdBQUEsVUFFQTlPLEVBQUFqRyxFQUFBZ1YscUJBRUFDLEVBQUFqVixFQUFBbEcsTUFBQTJYLG9CQUFBLElBQUF6UixFQUFBbEcsTUFBQW1iLGlCQUVBQyxFQUFBekwsR0FBQW9MLEVBRUFNLEVBQUEvVyxPQUE2Q3dXLEdBQUFaLEdBRTdDQSxLQUFBb0IsWUFDQUQsRUFBQUMsVUFBQTFMLEVBQUEsVUFHQSxJQUFBekUsR0FBQSxFQUFBbkksRUFBQSxVQUFzRWtCLEVBQXRFMFcsS0FBc0UsR0FBQWpULE9BQUFSLEVBQUEsS0FBQVEsT0FBQXpCLEVBQUFsRyxNQUFBNk8sT0FBQSxHQUFBM0ssRUFBQTBXLEVBQUEsR0FBQWpULE9BQUFSLEVBQUEsYUFBQWpCLEVBQUFsRyxNQUFBdWIsVUFBQXJYLEVBQUEwVyxFQUFBLEdBQUFqVCxPQUFBUixFQUFBLFdBQUFnRixFQUFBL04sUUFBQThGLEVBQUEwVyxFQUFBLEdBQUFqVCxPQUFBUixFQUFBLDJCQUFBNlQsR0FBQUosSUFFdEVZLEVBQUF0VixFQUFBdVYsb0JBQ0F0VSxZQUNBK1MsT0FBQW1CLEVBQ0ExTCxrQkFBQXlMLElBR0F0TixFQUFBNUgsRUFBQXdWLHVCQUNBNU4sUUFBQTBOLEVBQ0FyVSxZQUNBMFQsb0JBQ0FYLE9BQUFtQixFQUNBMUwsa0JBQUF5TCxJQUNPdk8sSUFBQSxTQUFBb0IsRUFBQTlQLEdBQ1AsSUFBQXdkLEVBQUFyWCxLQUFtQzJKLEdBR25DLE9BREEwTixFQUFBdGQsSUFBQThXLEVBQUF3RyxFQUFBeGQsR0FDQXdkLElBR0FDLEVBQUE5TixFQUFBLHlCQUFBQSxFQUFBLEdBQUF6UCxJQUFBLElBTUEsTUFKQSwwQkFBQWdKLElBQ0F1VSxFQUFBdlUsRUFBQXVVLHVCQUdBaFosRUFBQWdGLGNBQUFzTSxFQUFBLFFBQUE1UCxHQUNBakcsSUFBQSxRQUNBd2QsV0FBQTNWLEVBQUF5VCxpQkFBQXhTLElBQ09FLEdBQ1AyTyxNQUFBLFNBQUFILEVBQUF0WCxHQUNBLE9BQUEySCxFQUFBOFAsTUFBQTdPLEVBQUEwTyxFQUFBdFgsSUFFQXVkLFdBQUE1VixFQUFBNFYsV0FDQTNVLFlBQ0FnRixPQUNBMkIsVUFDQWtOLGFBQ0E1VCxVQUFBK0QsRUFDQXlRLHdCQUNBVCxtQkFDQUcsVUFBQUQsRUFBQUMsY0FJQXBWLEVBQUE2VixnQkFBQSxTQUFBeFEsR0FDQSxJQUFBdkUsRUFBQXVFLEVBQUF2RSxhQUNBNEksRUFBQXJFLEVBQUFxRSxZQUNBRCxFQUFBcEUsRUFBQW9FLGtCQUNBMkIsRUFBQXBMLEVBQUFsRyxNQUNBa0gsRUFBQW9LLEVBQUFuSyxVQUNBNlUsRUFBQTFLLEVBQUF1SixrQkFDQW5jLEVBQUE0UyxFQUFBNVMsTUFDQTBJLEVBQUFrSyxFQUFBbEssVUFFQStFLEVBQUFqRyxFQUFBZ1YscUJBRUEzSixFQUFBckwsRUFBQWxHLE1BQUF1UixRQUVBLGtCQUFBQSxJQUNBQSxHQUNBMEssU0FBQTFLLElBSUEsSUFBQXBLLEVBQUFILEVBQUEsUUFBQUUsR0FDQTJULEVBQUE3VCxFQUFBLFdBQUFnVixHQUNBRSxFQUFBdFosRUFBQWdGLGNBQUFrTixFQUFBLFNBQ0FrRixjQUFBLFFBQ0FDLGNBQUF0WCxFQUFBLFFBQUE2UyxPQUNPLFNBQUEwRSxHQUNQLE9BQUFoVSxFQUFBd1UsYUFDQXZULFlBQ0F5SSxjQUNBaUwsb0JBQ0FDLGNBQUFaLEVBQ0F2Syx3QkFLQXdNLEVBQUFqVyxFQUFBa1csaUJBQUFqUSxHQUFBLElBQUFBLEVBQUEvTixPQUFBLEdBQUF1SixPQUFBUixFQUFBLHVCQUFBUSxPQUFBUixFQUFBLHVCQUNBLE9BQUF2RSxFQUFBZ0YsY0FBQSxPQUNBUixXQUFBLEVBQUFwRSxFQUFBLFlBQUEyRSxPQUFBUixFQUFBLFlBQUFDLEdBQ0ExSSxTQUNPa0UsRUFBQWdGLGNBQUFnTixFQUFBLFFBQUF0USxLQUFtRGlOLEdBQzFEbkssVUFBQW1LLEVBQUEwSyxTQUFBLEdBQUF0VSxPQUFBd1UsRUFBQSxLQUFBeFUsT0FBQVIsRUFBQSxxQkFDT2pCLEVBQUFtVyxpQkFBQWxWLEVBQUEsT0FBQStVLEVBQUFoVyxFQUFBbVcsaUJBQUFsVixFQUFBLGFBR1AsSUFBQXdRLEVBQUEzWCxFQUFBMlgsa0JBQ0EyRSxFQUFBdGMsRUFBQThOLFFBQ0FBLE9BQUEsSUFBQXdPLE9BeUJBLE9BeEJBLEVBQUEzUixFQUFBLGdDQUFBM0ssR0FBQSxvQkFBQUEsR0FBQSw0SUFFQTJYLEdBQUE3SixFQUFBN0wsS0FBQSxTQUFBc2EsR0FFQSxRQURBQSxFQUFBQyxVQUdBLEVBQUE3UixFQUFBLHNIQUdBekUsRUFBQTRILFFBQUE5TixFQUFBOE4sVUFBQSxFQUFBNEcsRUFBQTlHLGtCQUFBNU4sRUFBQWhDLFVBRUFrSSxFQUFBdVcsaUJBQUF6YyxFQUFBOGIsWUFFQTVWLEVBQUEwQyxNQUFBdEUsT0FBc0M0QixFQUFBd1csb0JBQUF4VyxFQUFBNEgsV0FFdEMwSSxRQUFBdFEsRUFBQXlXLHdCQUNBcEcsV0FBQXJRLEVBQUEwVyxxQkFBQTVjLEdBQ0F1WCxXQUFBdlAsSUFFQTlCLEVBQUEwUCxzQkFDQTFQLEVBQUErUCxPQUFBLEVBQUE3QixFQUFBLFVBQ0FrRCxnQkFBQXJDLEVBQUFqVixHQUFBc1gsb0JBQ0FQLGdCQUFBLElBRUE3USxFQXVyQkEsT0F6MENBLFNBQUErQixFQUFBQyxHQUEwQyxzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBN0IsVUFBQSxzREFBNkU0QixFQUFBakcsVUFBQXpFLE9BQUE0SyxPQUFBRCxLQUFBbEcsV0FBeUVpQyxhQUFldkcsTUFBQXVLLEVBQUE1RCxVQUFBLEVBQUFELGNBQUEsS0FBMEQ4RCxHQUFBM0MsRUFBQTBDLEVBQUFDLEdBK0R4VUUsQ0FBQW9OLEVBMndDQzVTLEVBQUF5RixXQWwxQ0QsU0FBQWpDLEVBQUFrQyxFQUFBQyxHQUE2REQsR0FBQXpELEVBQUF1QixFQUFBcEUsVUFBQXNHLEdBQXNFQyxHQUFBMUQsRUFBQXVCLEVBQUFtQyxHQTZwQm5JQyxDQUFBZ04sSUFDQW5YLElBQUEsNEJBQ0FYLE1BQUEsU0FBQStLLEdBa0NBLEdBakNBN0QsS0FBQWtKLFFBQUFyRixFQUFBcUYsVUFBQSxFQUFBNEcsRUFBQTlHLGtCQUFBbkYsRUFBQXpLLFdBRUEsZUFBQXlLLEdBQUEsZUFBQTdELEtBQUE1RSxRQUNBNEUsS0FBQXFOLFNBQUEsU0FBQTRLLEdBQ0EsSUFBQUMsRUFBQXhZLFNBQTJEK1EsR0FBQXdILEVBQUF0RyxZQUFBOU4sRUFBQThOLFlBSTNELE9BRkF1RyxFQUFBcGIsUUFBQW9iLEVBQUFwYixTQUFBLEVBQ0FvYixFQUFBckQsU0FBQXFELEVBQUFyRCxVQUFBLElBRUFsRCxZQUFBLElBQUE5TixFQUFBOE4sV0FBQXVHLEVBQUF2SCxLQUtBOU0sRUFBQXlNLGNBQUEsb0JBQUF6TSxFQUFBeU0sYUFDQXRRLEtBQUFxUixNQUFBaEUsVUFDQXFGLGdCQUFBN08sRUFBQXlNLGFBQUFvQyxzQkFFTzFTLEtBQUE1RSxNQUFBa1YsZUFBQXpNLEVBQUF5TSxjQUNQdFEsS0FBQXFSLE1BQUFoRSxVQUNBcUYscUJBSUEsZUFBQTdPLEtBQUFzVSxhQUFBblksS0FBQTVFLE1BQUErYyxZQUNBblksS0FBQXFSLE1BQUFoRSxVQUNBOEUsZ0JBQUEsSUFLQW5TLEtBQUFnUixzQkFFQWhSLEtBQUFvWSxvQkFBQXBZLEtBQUFrSixTQUFBMVAsT0FBQSxHQUNBLElBQUE2ZSxFQUFBclksS0FBQXNZLHdCQUFBdFksS0FBQWtKLFNBRUFtUCxFQUFBRSxhQUFBdlksS0FBQWdFLE1BQUF1VSxZQUFBRixFQUFBRyxZQUFBeFksS0FBQWdFLE1BQUF3VSxXQUNBeFksS0FBQXFOLFNBQUFnTCxHQU1BLEdBRkFyWSxLQUFBaVMsd0JBQUFqUyxLQUFBa0osU0FFQTFQLE9BQUEsR0FDQSxJQUFBaWYsRUFBQXpZLEtBQUErWCxzQkFBQS9YLEtBQUFrSixTQUVBd1AsRUFBQWhaLEtBQW9DTSxLQUFBZ0UsTUFBQTROLFNBRXBDalosT0FBQTBDLEtBQUFvZCxHQUFBdGMsUUFBQSxTQUFBMUMsR0FDQWlmLEVBQUFqZixHQUFBZ2YsRUFBQWhmLEtBR0F1RyxLQUFBMlksaUJBQUFELElBQ0ExWSxLQUFBcU4sVUFDQXVFLFFBQUE4RyxJQUtBMVksS0FBQTZYLGlCQUFBaFUsRUFBQXFULFdBQUFsWCxLQUFBNUUsTUFBQThiLGVBR0F6ZCxJQUFBLHNCQUNBWCxNQUFBLFdBQ0EsSUFBQThmLEVBQUE1WSxLQUlBLE9BRkFxUSxFQUFBclEsS0FBQTVFLE9BRUEwVixpQkFJQTlRLEtBQUE2WSxjQUFBakYsT0FBQSxTQUFBaE0sRUFBQTBLLEdBQ0EsT0FBQXNHLEVBQUEvSCx1QkFBQWpKLEVBQUEwSyxHQUFBMUUsaUJBQ08zRixJQUFBLFNBQUFnSixFQUFBcUIsR0FDUCxPQUFBc0csRUFBQTdILGFBQUFFLEVBQUFxQixXQUlBN1ksSUFBQSx1QkFDQVgsTUFBQSxTQUFBc0MsR0FDQSxJQUNBMEIsRUFRQStYLEVBVEFsRCxFQUFBLFdBQUF6UyxFQUFBOUQsRUFBQXVXLFlBQUF2VyxFQUFBdVcsY0FpQkEsTUFkQSxZQUFBQSxFQUNBN1UsRUFBQTZVLEVBQUE3VSxRQUNPLG1CQUFBNlUsSUFDUDdVLEVBQUE2VSxFQUFBbUgsZ0JBS0EsYUFBQW5ILEVBQ0FrRCxFQUFBbEQsRUFBQWtELFNBQ08sb0JBQUFsRCxJQUNQa0QsRUFBQWxELEVBQUFvSCxpQkFHQS9ZLEtBQUF3WCxjQUFBcGMsR0FBQXNFLFNBQXNFK1EsR0FBQWtCLElBQ3RFN1UsV0FBQSxFQUNBK1gsWUFBQSxXQUlBcGIsSUFBQSxzQkFDQVgsTUFBQSxTQUFBb1EsR0FDQSxTQUFBNEcsRUFBQTNILFlBQUFlLEdBQUFsSixLQUFBa0osWUFBQSxTQUFBRyxHQUNBLG9CQUFBQSxPQUlBNVAsSUFBQSwwQkFDQVgsTUFBQSxTQUFBb1EsR0FDQSxTQUFBNEcsRUFBQTNILFlBQUFlLEdBQUFsSixLQUFBa0osWUFBQSxTQUFBRyxHQUNBLGdCQUFBQSxFQUFBMlAsbUJBSUF2ZixJQUFBLHdCQUNBWCxNQUFBLFNBQUFvUSxHQUNBLElBQUEwSSxLQUtBLE9BSkE1UixLQUFBaVMsd0JBQUEvSSxHQUFBL00sUUFBQSxTQUFBK1YsR0FDQSxJQUFBK0csRUFBQTFJLEVBQUEyQixHQUNBTixFQUFBcUgsR0FBQS9HLEVBQUE4RyxnQkFFQXBILEtBR0FuWSxJQUFBLHNCQUNBWCxNQUFBLFNBQUFvUSxHQUNBLElBQUFnUSxFQUFBbFosS0FBQXNZLHdCQUFBcFAsR0FDQWlRLEdBQUEsRUFBQXJKLEVBQUEzSCxZQUFBZSxNQUFBLFNBQUFHLEdBQ0EsYUFBQUEsRUFBQStQLG1CQUNPLEdBRVAsT0FBQUQsSUFBQUQsRUFBQVgsWUFFQUEsV0FBQVksRUFDQVgsVUFBQVcsRUFBQUMsa0JBSUFGLEtBR0F6ZixJQUFBLDBCQUNBWCxNQUFBLFNBQUFvUSxHQUVBLElBQUFtUSxFQUFBclosS0FBQW9ZLG9CQUFBbFAsR0FBQTBLLE9BQUEsU0FBQTFCLEdBQ0EsT0FBQUEsRUFBQXNHLFlBQ08sR0FFUCxPQUFBYSxHQUVBZCxXQUFBYyxFQUNBYixVQUFBYSxFQUFBYixZQUtBRCxXQUFBLEtBQ0FDLFVBQUEsU0FJQS9lLElBQUEsZ0JBQ0FYLE1BQUEsU0FBQWtFLEdBQ0EsSUFBQXNjLEVBQUF0WixLQUFBZ0UsTUFBQTJOLFdBQ0E3VSxFQUFBd2MsRUFBQXhjLFFBQ0ErWCxFQUFBeUUsRUFBQXpFLFNBRUEsT0FBQS9YLEVBQUEsR0FBQStYLEdBQUE3WCxFQUNBcVcsS0FBQWtHLE9BQUF2YyxFQUFBLEdBQUE2WCxHQUFBLEVBR0EvWCxLQUdBckQsSUFBQSxjQUNBWCxNQUFBLFNBQUFrTCxHQUNBLElBQUF3VixFQUFBeFYsR0FBQWhFLEtBQUFnRSxNQUNBd1UsRUFBQWdCLEVBQUFoQixVQUNBRCxFQUFBaUIsRUFBQWpCLFdBRUEsR0FBQUMsR0FBQUQsR0FBQSxtQkFBQUEsRUFBQWtCLE9BSUEsZ0JBQUE3SyxFQUFBOEssR0FDQSxJQUFBalMsRUFBQThRLEVBQUFrQixPQUFBN0ssRUFBQThLLEVBQUFsQixHQUVBLFdBQUEvUSxFQUNBLFlBQUErUSxHQUFBL1EsSUFHQSxNQUlBaE8sSUFBQSxxQkFDQVgsTUFBQSxXQUNBLElBQ0FnRSxFQUNBK1gsRUFGQXROLEVBQUF2SCxLQUFBMlosZUFHQTNWLEVBQUFoRSxLQUFBZ0UsTUFrQkEsT0FoQkFoRSxLQUFBd1gsaUJBSUEzQyxFQUFBN1EsRUFBQTJOLFdBQUFrRCxTQUNBL1gsRUFBQWtELEtBQUE0WixjQUFBNVYsRUFBQTJOLFdBQUEzVSxPQUFBdUssRUFBQS9OLFVBSkFxYixFQUFBZ0YsT0FBQUMsVUFDQWhkLEVBQUEsSUFVQXlLLEVBQUEvTixPQUFBcWIsT0FBQWdGLE9BQUFDLGFBQ0F2UyxJQUFBd1MsT0FBQWpkLEVBQUEsR0FBQStYLEVBQUEvWCxFQUFBK1gsSUFHQXROLEtBR0E5TixJQUFBLGNBQ0FYLE1BQUEsV0FDQSxJQUFBa2hCLEVBQUFoYSxLQUFBNUUsTUFBQTRlLG1CQUNBLFNBQUFsSyxFQUFBeEksV0FBQXRILEtBQUEyWixhQUFBLFNBQUFLLE1BR0F2Z0IsSUFBQSx5QkFDQVgsTUFBQSxXQUNBLElBQUFraEIsRUFBQWhhLEtBQUE1RSxNQUFBNGUsbUJBQ0EsU0FBQWxLLEVBQUF4SSxXQUFBdEgsS0FBQXNXLHFCQUFBMEQsTUFHQXZnQixJQUFBLGVBQ0FYLE1BQUEsU0FBQWtMLEdBQ0EsSUFBQWlXLEVBQUFqYSxLQUVBNFQsSUFBQS9ULFVBQUFyRyxPQUFBLFFBQUE0SixJQUFBdkQsVUFBQSxLQUFBQSxVQUFBLEdBQ0FxYSxFQUFBbFcsR0FBQWhFLEtBQUFnRSxNQUVBdUQsRUFEQXZILEtBQUE1RSxNQUFBK2MsZUFHQTVRLElBQUF3UyxNQUFBLEdBQ0EsSUFBQUksRUFBQW5hLEtBQUFvYSxZQUFBRixHQThCQSxPQTVCQUMsSUFDQTVTLEVBQUF2SCxLQUFBcWEsY0FBQTlTLEVBQUE0UyxJQUlBdkcsR0FBQXNHLEVBQUF0SSxTQUNBalosT0FBQTBDLEtBQUE2ZSxFQUFBdEksU0FBQXpWLFFBQUEsU0FBQTJWLEdBQ0EsSUFBQUksRUFBQStILEVBQUFLLFdBQUF4SSxHQUVBLEdBQUFJLEVBQUEsQ0FJQSxJQUFBcUksRUFBQUwsRUFBQXRJLFFBQUFFLE9BRUEsT0FBQXlJLEVBQUEvZ0IsT0FBQSxDQUlBLElBQUFnaEIsRUFBQXRJLEVBQUFzSSxTQUNBalQsRUFBQWlULEVBQUFqVCxFQUFBcU0sT0FBQSxTQUFBM0MsR0FDQSxPQUFBc0osRUFBQWxkLEtBQUEsU0FBQW5ELEdBQ0EsT0FBQXNnQixFQUFBdGdCLEVBQUErVyxPQUVXMUosTUFJWEEsS0FHQTlOLElBQUEscUJBQ0FYLE1BQUEsU0FBQTRaLEVBQUErSCxHQUNBLElBQUFDLEVBQUExYSxLQUVBK1QsRUFBQTBHLEVBQUExRyxVQUNBOUMsRUFBQXdKLEVBQUF4SixPQUNBck8sRUFBQTZYLEVBQUE3WCxRQUNBdVEsRUFBQXNILEVBQUF0SCxjQUNBMUYsRUFBQWdOLEVBQUFoTixZQUNBNkMsRUFBQUQsRUFBQXJRLEtBQUE1RSxRQUVBa1YsR0FBQSxvQkFBQUEsR0FDQXRRLEtBQUFxUixNQUFBaEUsVUFDQXFGLG9CQUlBLElBQUFuTCxFQUFBdkgsS0FBQTZZLGNBRUEsR0FBQXZJLEVBQUF4TyxVQUFBd08sRUFBQXlELEdBQUEsQ0FJQSxJQUFBNEcsRUFBQXBULEVBQUFxTSxPQUFBLFNBQUFYLEVBQUExWixHQUNBLE9BQUFtWixFQUFBelIsUUFBQXlaLEVBQUEzSixhQUFBa0MsRUFBQTFaLEtBQUEsSUFPQSxHQUpBK1csRUFBQXhPLFVBQ0F3TyxFQUFBeE8sU0FBQTRRLEVBQUFpSSxHQUdBLGFBQUE1RyxHQUFBekQsRUFBQXNLLFNBQ0F0SyxFQUFBc0ssU0FBQTNKLEVBQUFyTyxFQUFBK1gsRUFBQWxOLFFBQ08sd0JBQUFzRyxHQUFBekQsRUFBQXVLLGlCQUFBLENBQ1AsSUFBQUMsRUFBQXZULEVBQUFxTSxPQUFBLFNBQUFYLEVBQUExWixHQUNBLE9BQUE0WixFQUFBbFMsUUFBQXlaLEVBQUEzSixhQUFBa0MsRUFBQTFaLEtBQUEsSUFFQStXLEVBQUF1SyxpQkFBQWpZLEVBQUErWCxFQUFBRyxRQUNPLG1CQUFBL0csR0FBQXpELEVBQUF5SyxZQUFBLENBQ1AsSUFBQUMsRUFBQXpULEVBQUFxTSxPQUFBLFNBQUFYLEVBQUExWixHQUNBLE9BQUE0WixFQUFBbFMsUUFBQXlaLEVBQUEzSixhQUFBa0MsRUFBQTFaLEtBQUEsSUFHQStXLEVBQUF5SyxZQUFBblksRUFBQStYLEVBQUFLLE9BQ08sbUJBQUFqSCxHQUFBekQsRUFBQTJLLGdCQUNQM0ssRUFBQTJLLGVBQUF2SSxPQUlBalosSUFBQSxrQkFDQVgsTUFBQSxTQUFBdVEsR0FDQSxHQUFBQSxFQUFBb1EsT0FBQSxDQUlBLElBT0F5QixFQVBBdkosRUFBQWpTLEtBQWtDTSxLQUFBZ0UsTUFBQTJOLFlBRWxDd0osRUFBQTlSLEVBQUE4UixnQkFBQW5iLEtBQUE1RSxNQUFBK2YsZUFDQUMsRUFBQXBiLEtBQUFnRSxNQUNBd1UsRUFBQTRDLEVBQUE1QyxVQUtBLEdBMzhCQSxTQUFBNUosRUFBQThLLEdBQ0EsU0FBQTlLLEdBQUE4SyxHQUFBOUssRUFBQW5WLEtBQUFtVixFQUFBblYsTUFBQWlnQixFQUFBamdCLE1BSUFtVixJQUFBOEssSUFBQSxFQUFBcmIsRUFBQSxTQUFBdVEsRUFBQThLLEVBQUEsU0FBQTVnQixFQUFBdWlCLEdBQ0Esc0JBQUF2aUIsR0FBQSxtQkFBQXVpQixFQUNBLE9BQUF2aUIsSUFBQXVpQixHQUFBdmlCLEVBQUE2UCxhQUFBMFMsRUFBQTFTLGFBbzhCQTJTLENBSkFGLEVBQUE3QyxXQUlBbFAsU0FBQWpHLElBQUFvVixFQUFBLENBRUEsSUFBQStDLEVBQUFKLEVBQUFsYSxRQUFBdVgsR0FBQSxFQUNBMEMsRUFBQUssSUFBQUosRUFBQTNoQixZQUFBNEosRUFBQStYLEVBQUFJLFFBRUFMLEVBQUFDLEVBQUEsR0FHQW5iLEtBQUE1RSxNQUFBdVcsYUFFQUEsRUFBQTdVLFFBQUEsRUFDQTZVLEVBQUE3UCxTQUFBNlAsRUFBQTdVLFVBR0EsSUFBQWlWLEdBQ0FKLGFBQ0E2RyxVQUFBMEMsRUFDQTNDLFdBQUEyQyxFQUFBN1IsRUFBQSxNQUdBLElBQUFySixLQUFBb1ksc0JBQUE1ZSxRQUNBd0csS0FBQXFOLFNBQUEwRSxHQUdBLElBQUFqUSxFQUFBOUIsS0FBQTVFLE1BQUEwRyxTQUVBQSxHQUNBQSxFQUFBL0IsTUFBQSxLQUFBQyxLQUFBb1MsdUJBQUExUyxPQUE2RU0sS0FBQWdFLE9BQUErTixTQUk3RXRZLElBQUEsZ0JBQ0FYLE1BQUEsU0FBQXNDLEdBQ0EsWUFBQUEsR0FBQTRFLEtBQUE1RSxPQUFBdVcsY0FHQWxZLElBQUEsbUJBQ0FYLE1BQUEsU0FBQThZLEdBQ0EsSUFBQTRKLEVBQUF4YixLQUVBeWIsR0FBQSxFQVlBLE9BVkE5aUIsT0FBQTBDLEtBQUF1VyxHQUFBcFksU0FBQWIsT0FBQTBDLEtBQUEyRSxLQUFBZ0UsTUFBQTROLFNBQUFwWSxPQUNBaWlCLEdBQUEsRUFFQTlpQixPQUFBMEMsS0FBQXVXLEdBQUF6VixRQUFBLFNBQUEyVixHQUNBRixFQUFBRSxLQUFBMEosRUFBQXhYLE1BQUE0TixRQUFBRSxLQUNBMkosR0FBQSxLQUtBQSxLQUdBaGlCLElBQUEsZUFDQVgsTUFBQSxTQUFBdVEsR0FDQSxJQUFBa1AsRUFBQXZZLEtBQUFnRSxNQUFBdVUsV0FFQSxTQUFBbFAsSUFBQWtQLElBSUFoSSxFQUFBZ0ksS0FBQWhJLEVBQUFsSCxNQUlBNVAsSUFBQSx5QkFDQVgsTUFBQSxTQUFBa0wsR0FDQSxJQUFBMk4sRUFBQWpTLEtBQWtDc0UsRUFBQTJOLG1CQUdsQ0EsRUFBQTdQLGdCQUNBNlAsRUFBQWpCLGlCQUNBLElBQUFrQixFQUFBNU4sRUFBQTROLFFBQ0E2SCxLQVlBLE9BVkF6VixFQUFBdVUsWUFBQXZVLEVBQUF3VSxZQUNBaUIsRUFBQXBRLE9BQUFyRixFQUFBdVUsV0FDQWtCLEVBQUFpQyxNQUFBMVgsRUFBQXdVLFVBQ0FpQixFQUFBa0MsTUFBQTNYLEVBQUF1VSxXQUFBL0gsVUFDQWlKLEVBQUEzSCxVQUFBdkIsRUFBQXZNLEVBQUF1VSxjQU1BNUcsRUFBQUMsRUFBQTZILEdBRkFtQyxrQkFBQTViLEtBQUEyWixhQUFBM1YsUUFLQXZLLElBQUEsYUFDQVgsTUFBQSxTQUFBK2lCLEdBQ0EsSUFBQXhTLEVBTUEsT0FMQSxFQUFBeUcsRUFBQWhJLFNBQUE5SCxLQUFBa0osUUFBQSxTQUFBNVAsR0FDQWlYLEVBQUFqWCxLQUFBdWlCLElBQ0F4UyxFQUFBL1AsS0FHQStQLEtBR0E1UCxJQUFBLG1CQUNBWCxNQUFBLFdBQ0EsSUFBQW9lLEVBQUFyWCxVQUFBckcsT0FBQSxRQUFBNEosSUFBQXZELFVBQUEsR0FBQUEsVUFBQSxNQUNBaWMsRUFBQWpjLFVBQUFyRyxPQUFBLEVBQUFxRyxVQUFBLFFBQUF1RCxFQUNBMlksRUFBQTdFLEtBQUE4RSxNQUFBOUUsRUFBQThFLEtBQUEvSSxJQUNBZ0osRUFBQUgsS0FBQUUsTUFBQUYsRUFBQUUsS0FBQS9JLElBRUFqVCxLQUFBaVQsS0FBQThJLElBQUFFLElBQ0FqYyxLQUFBaVQsS0FBQSxFQUFBcEQsRUFBQSxTQUFBa00sSUFHQS9iLEtBQUFrWCxXQUFBeFgsT0FBNEN3WCxJQUM1QzhFLEtBQUF0YyxPQUFrQ3dYLEVBQUE4RSxPQUNsQy9JLElBQUFqVCxLQUFBaVQsV0FLQXhaLElBQUEsZ0JBQ0FYLE1BQUEsU0FBQXlPLEVBQUE0UyxHQUNBLElBQUErQixFQUFBbGMsS0FFQW1jLEVBQUFuYyxLQUFBNUUsTUFBQTRlLG1CQUNBQSxPQUFBLElBQUFtQyxFQUFBLFdBQUFBLEVBQ0EsT0FBQTVVLEVBQUE2VSxLQUFBakMsR0FBQWxTLElBQUEsU0FBQUwsR0FDQSxPQUFBQSxFQUFBb1MsR0FBQXRhLE9BQThEa0ksR0FBQXRJLEtBQTJCMGEsRUFBQWtDLEVBQUE3QixjQUFBelMsRUFBQW9TLEdBQUFHLEtBQUF2UyxPQUl6Rm5PLElBQUEsbUJBQ0FYLE1BQUEsU0FBQXlKLEVBQUE4WixHQUVBLElBQUFyYyxLQUFBd1gsZ0JBQ0EsWUFHQSxJQUFBdk4sRUFBQSxVQUNBMEgsRUFBQTNSLEtBQUFnRSxNQUFBMk4sV0FFQUEsRUFBQTFILEtBQ0FBLEVBQUEwSCxFQUFBMUgsS0FDTyxXQUFBakssS0FBQTVFLE1BQUE2TyxNQUFBLFVBQUFqSyxLQUFBNUUsTUFBQTZPLE9BQ1BBLEVBQUEsU0FHQSxJQUFBcVMsRUFBQTNLLEVBQUEySyxVQUFBLFNBQ0F0ZixFQUFBMlUsRUFBQTNVLE9BQUFnRCxLQUFBMlosZUFBQW5nQixPQUNBLE9BQUF3RCxFQUFBLElBQUFzZixJQUFBRCxHQUFBLFNBQUFDLEdBQUF0ZSxFQUFBZ0YsY0FBQStNLEVBQUEsUUFBQXJRLEdBQ0FqRyxJQUFBLGNBQUFzSixPQUFBc1osSUFDTzFLLEdBQ1BuUCxXQUFBLEVBQUFwRSxFQUFBLFNBQUF1VCxFQUFBblAsVUFBQSxHQUFBTyxPQUFBUixFQUFBLGdCQUNBVCxTQUFBOUIsS0FBQXdVLGlCQUNBeFgsUUFDQWlOLE9BQ0FuTixRQUFBa0QsS0FBQTRaLGNBQUE1YyxHQUNBMFQsaUJBQUExUSxLQUFBNFUsd0JBQ08sUUFHUG5iLElBQUEscUJBQ0FYLE1BQUEsU0FBQXlqQixHQUNBLElBQUFDLEVBQUF4YyxLQUVBdUMsRUFBQWdhLEVBQUFoYSxVQUNBK1MsRUFBQWlILEVBQUFqSCxPQUNBdkssRUFBQXdSLEVBQUF4UixrQkFDQXVGLEVBQUF0USxLQUFBNUUsTUFBQWtWLGFBQ0FwSCxFQUFBbEosS0FBQWtKLFFBQUFuRyxTQUVBLEdBQUF1TixFQUFBLENBQ0EsSUFBQS9JLEVBQUF2SCxLQUFBNlMseUJBQUFlLE9BQUEsU0FBQWhNLEVBQUFqTyxHQUNBLE9BQUEyVyxFQUFBUSxtQkFDQTBMLEVBQUEzTCx1QkFBQWpKLEVBQUFqTyxHQUFBa0osV0FLQTRaLEdBQUEsRUFBQXJlLEVBQUEsWUFBQTJFLE9BQUFSLEVBQUEscUJBQUFqRCxLQUE0SCxHQUFBeUQsT0FBQVIsRUFBQSw0QkFBQStOLEVBQUFvTSxhQUU1SEMsRUFBQXJkLEdBQ0E3RixJQUFBLG1CQUNBc1UsT0FBQS9OLEtBQUE0VixtQkFBQXRGLEVBQUFqTSxNQUNBN0IsVUFBQWlhLEVBQ0E3RSxNQUFBdEgsRUFBQXNILE1BQ0FnRixNQUFBdE0sRUFBQXVNLFlBQ0FDLE1BQUF4TSxFQUFBeU0sYUFDU3pOLEVBQUEwTixxQkFDVHhhLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxvQkFHQSxhQUFBK04sRUFBQWpNLEtBQUEsQ0FDQSxJQUFBNFksRUFBQTFWLEVBQUEyVixNQUFBLFNBQUF0VixFQUFBak8sR0FDQSxPQUFBNmlCLEVBQUEzTCx1QkFBQWpKLEVBQUFqTyxHQUFBa0osV0FFQThaLEVBQUFHLE1BQUFILEVBQUFHLE9BQUE5ZSxFQUFBZ0YsY0FBQTBNLEVBQUEsU0FDQTJCLE1BQUFyUixLQUFBcVIsTUFDQWlFLFNBQ0EvTixPQUNBc0osdUJBQUE3USxLQUFBNlEsdUJBQ0FFLGFBQUEvUSxLQUFBK1EsYUFDQWxPLFNBQUFvYSxFQUNBMWEsWUFDQXFZLFNBQUE1YSxLQUFBaVUsZ0JBQ0F5SSxXQUFBcE0sRUFBQW9NLFdBQ0FuSSxzQkFBQWpFLEVBQUFpRSxzQkFDQXhKLGtCQUFBL0ssS0FBQXNSLDJCQUFBdkcsS0FJQSxVQUFBdUYsRUFDQXFNLEVBQUEvRSxNQUFBdEgsRUFBQXNILE1BQ1MxTyxFQUFBN0wsS0FBQSxTQUFBZ00sR0FDVCxlQUFBQSxFQUFBdU8sUUFBQSxJQUFBdk8sRUFBQXVPLFVBRUErRSxFQUFBL0UsTUFBQSxRQUdBMU8sRUFBQSx5QkFBQUEsRUFBQSxHQUFBelAsSUFDQXlQLEVBQUEsR0FBQXlULEVBRUF6VCxFQUFBaVUsUUFBQVIsR0FJQSxPQUFBelQsS0FHQXpQLElBQUEsd0JBQ0FYLE1BQUEsU0FBQXNrQixHQUNBLElBQUFDLEVBQUFyZCxLQUVBdUMsRUFBQTZhLEVBQUE3YSxVQUNBMFQsRUFBQW1ILEVBQUFuSCxrQkFDQS9NLEVBQUFrVSxFQUFBbFUsUUFDQW9NLEVBQUE4SCxFQUFBOUgsT0FDQXZLLEVBQUFxUyxFQUFBclMsa0JBQ0F1UyxFQUFBdGQsS0FBQWdFLE1BQ0F3VSxFQUFBOEUsRUFBQTlFLFVBQ0E1RyxFQUFBMEwsRUFBQTFMLFFBQ0EsU0FBQTlCLEVBQUFoSSxTQUFBb0IsRUFBQSxTQUFBRyxFQUFBOVAsR0FDQSxJQUFBZ2tCLEVBR0FDLEVBQ0FDLEVBRkFoa0IsRUFBQThXLEVBQUFsSCxFQUFBOVAsR0FHQW1rQixFQUFBclUsRUFBQXFVLGFBRUFDLEVBQUFOLEVBQUFNLGFBQUF0VSxHQUVBLEdBQUFBLEVBQUF1SSxTQUFBdkksRUFBQXVJLFFBQUFwWSxPQUFBLEdBQUE2UCxFQUFBbVUsZUFBQSxDQUNBLElBQUFJLEVBQUFua0IsS0FBQW1ZLElBQUFuWSxNQUNBK2pCLEVBQUF4ZixFQUFBZ0YsY0FBQXVNLEVBQUEsU0FDQStGLFNBQ0FqTSxTQUNBd1UsYUFBQUQsRUFDQUUsY0FBQVQsRUFBQTVMLGFBQ0FsUCxVQUFBLEdBQUFRLE9BQUFSLEVBQUEsV0FDQTBULHFCQUFBLGVBQ0FsTCxrQkFBQXNTLEVBQUEvTCwyQkFBQXZHLEdBQ0F0UixJQUFBLG9CQUlBLEdBQUE0UCxFQUFBb1EsT0FBQSxDQUNBLElBQUEwQixFQUFBOVIsRUFBQThSLGdCQUFBa0MsRUFBQWppQixNQUFBK2YsZUFDQTRDLEVBQUFKLEdBQUEsV0FBQW5GLEVBQ0F3RixFQUFBTCxHQUFBLFlBQUFuRixFQUNBeUYsR0FBQSxJQUFBOUMsRUFBQWxhLFFBQUEsV0FBQWpELEVBQUFnRixjQUFBNEcsRUFBQSxTQUNBcEgsVUFBQSxHQUFBTyxPQUFBUixFQUFBLHNCQUFBUSxPQUFBZ2IsRUFBQSxZQUNBMVosS0FBQSxXQUNBK0gsTUFBQSxXQUVBOFIsR0FBQSxJQUFBL0MsRUFBQWxhLFFBQUEsWUFBQWpELEVBQUFnRixjQUFBNEcsRUFBQSxTQUNBcEgsVUFBQSxHQUFBTyxPQUFBUixFQUFBLHdCQUFBUSxPQUFBaWIsRUFBQSxZQUNBM1osS0FBQSxhQUNBK0gsTUFBQSxXQUVBcVIsRUFBQXpmLEVBQUFnRixjQUFBLE9BQ0E4WixNQUFBeEgsRUFBQTZJLFVBQ0EzYixXQUFBLEVBQUFwRSxFQUFBLFlBQUEyRSxPQUFBUixFQUFBLHdCQUFBMGIsR0FBQUMsR0FBQSxHQUFBbmIsT0FBQVIsRUFBQSw4QkFDQTlJLElBQUEsVUFDV3drQixFQUFBQyxHQUVYUixFQUFBLFNBQUF4TCxHQUNBLElBQUFrTSxLQUVBL1UsRUFBQXFVLGVBQ0FVLEVBQUExZSxLQUFvQzJKLEVBQUFxVSxhQUFBeEwsS0FJcEMsSUFBQW1NLEVBQUFELEVBQUFqUSxRQVVBLE9BUkFpUSxFQUFBalEsUUFBQSxXQUNBa1AsRUFBQWlCLGdCQUFBalYsR0FFQWdWLEdBQ0FBLEVBQUF0ZSxXQUFBLEVBQUFGLFlBSUF1ZSxHQUlBLE9BQUExZSxPQUFtQzJKLElBQ25DN0csV0FBQSxFQUFBcEUsRUFBQSxTQUFBaUwsRUFBQTdHLFdBQUErYSxLQUFxRmplLEVBQUFpZSxFQUFBLEdBQUF4YSxPQUFBUixFQUFBLHVCQUFBa2IsR0FBQUQsR0FBQWxlLEVBQUFpZSxFQUFBLEdBQUF4YSxPQUFBUixFQUFBLHVCQUFBaWIsR0FBQWxlLEVBQUFpZSxFQUFBLEdBQUF4YSxPQUFBUixFQUFBLHVCQUFBa2IsR0FBQW5lLEVBQUFpZSxFQUFBLEdBQUF4YSxPQUFBUixFQUFBLGdCQUFBb2IsR0FBQW5GLEdBQUErRSxJQUNyRlQsT0FBQTllLEVBQUFnRixjQUFBLFFBQ0F2SixJQUFBLFFBQ0ErSSxVQUFBLEdBQUFPLE9BQUFSLEVBQUEsbUJBQ1d2RSxFQUFBZ0YsY0FBQSxPQUNYUixVQUFBaWIsRUFBQSxHQUFBMWEsT0FBQVIsRUFBQSx3QkFBQWEsR0FDV3BGLEVBQUFnRixjQUFBLFFBQ1hSLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxrQkFDVzhhLEVBQUFrQixrQkFBQWxWLEVBQUF5VCxRQUFBOWUsRUFBQWdGLGNBQUEsUUFDWFIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLG1CQUNXa2IsS0FBQUQsR0FDWEUsc0JBS0Fqa0IsSUFBQSxvQkFDQVgsTUFBQSxTQUFBZ2tCLEdBQ0EsSUFBQTBCLEVBQUF4ZSxLQUFBZ0UsTUFDQTROLEVBQUE0TSxFQUFBNU0sUUFDQTRHLEVBQUFnRyxFQUFBaEcsVUFFQSxPQUFBc0UsYUFBQTJCLFNBQ0EzQixHQUNBbEwsVUFDQTRHLGNBSUFzRSxLQUdBcmpCLElBQUEsU0FDQVgsTUFBQSxXQUNBLE9BQUFrRixFQUFBZ0YsY0FBQTFFLEVBQUE2RixlQUFBLEtBQUFuRSxLQUFBbVgscUJBSUF2RyxFQTN3Q0EsR0E4d0NBL1gsRUFBQSxRQUFBK1gsRUFDQUEsRUFBQThOLE9BQUEvTyxFQUFBLFFBQ0FpQixFQUFBK04sWUFBQS9PLEVBQUEsUUFDQWdCLEVBQUE3RCxXQUNBb0wsV0FBQWphLEVBQUF5SixNQUNBdUIsUUFBQWhMLEVBQUF5SixNQUNBcEYsVUFBQXJFLEVBQUE4TCxPQUNBNFUsZUFBQTFnQixFQUFBbU0sS0FDQWlHLGFBQUFwUyxFQUFBd0csT0FDQWxDLFVBQUF0RSxFQUFBOEwsT0FDQUMsS0FBQS9MLEVBQUE4TCxPQUNBMkMsUUFBQXpPLEVBQUE2USxXQUFBN1EsRUFBQW1NLEtBQUFuTSxFQUFBd0csU0FDQWlTLFNBQUF6WSxFQUFBbU0sS0FDQXZJLFNBQUE1RCxFQUFBK1EsS0FDQXFHLE9BQUFwWCxFQUFBd0csT0FDQXVSLGtCQUFBL1gsRUFBQThMLE9BQ0FtUixlQUFBamQsRUFBQXlKLE1BQ0FvRCxrQkFBQTdNLEVBQUErUSxNQUVBMkIsRUFBQXhNLGNBQ0ErVCxjQUNBeUcsZ0JBQUEsRUFDQXBjLFVBQUEsR0FDQXlILEtBQUEsVUFDQTBDLFNBQUEsRUFDQWdLLFVBQUEsRUFDQWtJLFdBQUEsR0FDQXZKLFVBQ0FwRSxPQUFBLE1BQ0FrRixZQUFBLEVBQ0ErRSxnQkFBQSxvQkFDQW5CLG1CQUFBLGtDQ3g3Q0EsSUFBQThFLEVBQWdCN2xCLEVBQVEsTUFrQ3hCOGxCLEVBakNxQjlsQixFQUFRLEtBaUM3QitsQixDQUFBLFNBQUF0YSxFQUFBNUUsRUFBQW1mLEdBQ0FILEVBQUFwYSxFQUFBNUUsRUFBQW1mLEtBR0F0aEIsRUFBQTlFLFFBQUFrbUIsd0JDdENBLElBQUFHLEVBQVlqbUIsRUFBUSxNQUNwQmttQixFQUF1QmxtQixFQUFRLE1BQy9CbW1CLEVBQWNubUIsRUFBUSxNQUN0Qm9tQixFQUFvQnBtQixFQUFRLE1BQzVCcW1CLEVBQWVybUIsRUFBUSxLQUN2QnNtQixFQUFhdG1CLEVBQVEsTUFDckJ1bUIsRUFBY3ZtQixFQUFRLE1BbUN0QjBFLEVBQUE5RSxRQXRCQSxTQUFBaW1CLEVBQUFwYSxFQUFBNUUsRUFBQW1mLEVBQUFRLEVBQUFDLEdBQ0FoYixJQUFBNUUsR0FHQXNmLEVBQUF0ZixFQUFBLFNBQUE2ZixFQUFBbG1CLEdBRUEsR0FEQWltQixNQUFBLElBQUFSLEdBQ0FJLEVBQUFLLEdBQ0FOLEVBQUEzYSxFQUFBNUUsRUFBQXJHLEVBQUF3bEIsRUFBQUgsRUFBQVcsRUFBQUMsT0FFQSxDQUNBLElBQUFFLEVBQUFILEVBQ0FBLEVBQUFELEVBQUE5YSxFQUFBakwsR0FBQWttQixFQUFBbG1CLEVBQUEsR0FBQWlMLEVBQUE1RSxFQUFBNGYsUUFDQXRjLE9BRUFBLElBQUF3YyxJQUNBQSxFQUFBRCxHQUVBUixFQUFBemEsRUFBQWpMLEVBQUFtbUIsS0FFR0wsMEJDdENILElBQUFNLEVBQWdCNW1CLEVBQVEsS0FDeEI2bUIsRUFBaUI3bUIsRUFBUSxNQUN6QjhtQixFQUFrQjltQixFQUFRLE1BQzFCK21CLEVBQWUvbUIsRUFBUSxNQUN2QmduQixFQUFlaG5CLEVBQVEsTUFDdkJpbkIsRUFBZWpuQixFQUFRLE1BU3ZCLFNBQUFpbUIsRUFBQWlCLEdBQ0EsSUFBQTVZLEVBQUF2SCxLQUFBb2dCLFNBQUEsSUFBQVAsRUFBQU0sR0FDQW5nQixLQUFBaUssS0FBQTFDLEVBQUEwQyxLQUlBaVYsRUFBQTloQixVQUFBaWpCLE1BQUFQLEVBQ0FaLEVBQUE5aEIsVUFBQSxPQUFBMmlCLEVBQ0FiLEVBQUE5aEIsVUFBQXVCLElBQUFxaEIsRUFDQWQsRUFBQTloQixVQUFBc0IsSUFBQXVoQixFQUNBZixFQUFBOWhCLFVBQUE2QixJQUFBaWhCLEVBRUF2aUIsRUFBQTlFLFFBQUFxbUIsd0JDMUJBLElBQUFXLEVBQWdCNW1CLEVBQVEsS0FjeEIwRSxFQUFBOUUsUUFMQSxXQUNBbUgsS0FBQW9nQixTQUFBLElBQUFQLEVBQ0E3ZixLQUFBaUssS0FBQSx1QkNNQXRNLEVBQUE5RSxRQVJBLFNBQUFZLEdBQ0EsSUFBQThOLEVBQUF2SCxLQUFBb2dCLFNBQ0EzWSxFQUFBRixFQUFBLE9BQUE5TixHQUdBLE9BREF1RyxLQUFBaUssS0FBQTFDLEVBQUEwQyxLQUNBeEMsdUJDREE5SixFQUFBOUUsUUFKQSxTQUFBWSxHQUNBLE9BQUF1RyxLQUFBb2dCLFNBQUF6aEIsSUFBQWxGLHdCQ0dBa0UsRUFBQTlFLFFBSkEsU0FBQVksR0FDQSxPQUFBdUcsS0FBQW9nQixTQUFBMWhCLElBQUFqRiwwQkNWQSxJQUFBb21CLEVBQWdCNW1CLEVBQVEsS0FDeEJxbkIsRUFBVXJuQixFQUFRLEtBQ2xCc25CLEVBQWV0bkIsRUFBUSxLQUd2QnVuQixFQUFBLElBNEJBN2lCLEVBQUE5RSxRQWhCQSxTQUFBWSxFQUFBWCxHQUNBLElBQUF5TyxFQUFBdkgsS0FBQW9nQixTQUNBLEdBQUE3WSxhQUFBc1ksRUFBQSxDQUNBLElBQUFZLEVBQUFsWixFQUFBNlksU0FDQSxJQUFBRSxHQUFBRyxFQUFBam5CLE9BQUFnbkIsRUFBQSxFQUdBLE9BRkFDLEVBQUFwa0IsTUFBQTVDLEVBQUFYLElBQ0FrSCxLQUFBaUssT0FBQTFDLEVBQUEwQyxLQUNBakssS0FFQXVILEVBQUF2SCxLQUFBb2dCLFNBQUEsSUFBQUcsRUFBQUUsR0FJQSxPQUZBbFosRUFBQXRJLElBQUF4RixFQUFBWCxHQUNBa0gsS0FBQWlLLEtBQUExQyxFQUFBMEMsS0FDQWpLLDRCQzlCQSxJQWFBb2YsRUFib0JubUIsRUFBUSxLQWE1QnluQixHQUVBL2lCLEVBQUE5RSxRQUFBdW1CLHNCQ1NBemhCLEVBQUE5RSxRQWpCQSxTQUFBOG5CLEdBQ0EsZ0JBQUFqYyxFQUFBa2MsRUFBQUMsR0FNQSxJQUxBLElBQUFsbkIsR0FBQSxFQUNBbW5CLEVBQUFub0IsT0FBQStMLEdBQ0F0SixFQUFBeWxCLEVBQUFuYyxHQUNBbEwsRUFBQTRCLEVBQUE1QixPQUVBQSxLQUFBLENBQ0EsSUFBQUMsRUFBQTJCLEVBQUF1bEIsRUFBQW5uQixJQUFBRyxHQUNBLFFBQUFpbkIsRUFBQUUsRUFBQXJuQixLQUFBcW5CLEdBQ0EsTUFHQSxPQUFBcGMsMEJDcEJBLElBQUF5YSxFQUF1QmxtQixFQUFRLE1BQy9COG5CLEVBQWtCOW5CLEVBQVEsTUFDMUIrbkIsRUFBc0IvbkIsRUFBUSxNQUM5QmdvQixFQUFnQmhvQixFQUFRLE1BQ3hCaW9CLEVBQXNCam9CLEVBQVEsTUFDOUJrb0IsRUFBa0Jsb0IsRUFBUSxLQUMxQnNQLEVBQWN0UCxFQUFRLEtBQ3RCbW9CLEVBQXdCbm9CLEVBQVEsTUFDaENvTSxFQUFlcE0sRUFBUSxNQUN2QndFLEVBQWlCeEUsRUFBUSxLQUN6QnFtQixFQUFlcm1CLEVBQVEsS0FDdkJvb0IsRUFBb0Jwb0IsRUFBUSxNQUM1QnlNLEVBQW1Cek0sRUFBUSxNQUMzQnVtQixFQUFjdm1CLEVBQVEsTUFDdEJxb0IsRUFBb0Jyb0IsRUFBUSxNQStFNUIwRSxFQUFBOUUsUUE5REEsU0FBQTZMLEVBQUE1RSxFQUFBckcsRUFBQXdsQixFQUFBc0MsRUFBQTlCLEVBQUFDLEdBQ0EsSUFBQThCLEVBQUFoQyxFQUFBOWEsRUFBQWpMLEdBQ0FrbUIsRUFBQUgsRUFBQTFmLEVBQUFyRyxHQUNBZ29CLEVBQUEvQixFQUFBL2dCLElBQUFnaEIsR0FFQSxHQUFBOEIsRUFDQXRDLEVBQUF6YSxFQUFBakwsRUFBQWdvQixPQURBLENBSUEsSUFBQTdCLEVBQUFILEVBQ0FBLEVBQUErQixFQUFBN0IsRUFBQWxtQixFQUFBLEdBQUFpTCxFQUFBNUUsRUFBQTRmLFFBQ0F0YyxFQUVBc2UsT0FBQXRlLElBQUF3YyxFQUVBLEdBQUE4QixFQUFBLENBQ0EsSUFBQUMsRUFBQXBaLEVBQUFvWCxHQUNBaUMsR0FBQUQsR0FBQXRjLEVBQUFzYSxHQUNBa0MsR0FBQUYsSUFBQUMsR0FBQWxjLEVBQUFpYSxHQUVBQyxFQUFBRCxFQUNBZ0MsR0FBQUMsR0FBQUMsRUFDQXRaLEVBQUFpWixHQUNBNUIsRUFBQTRCLEVBRUFKLEVBQUFJLEdBQ0E1QixFQUFBcUIsRUFBQU8sR0FFQUksR0FDQUYsR0FBQSxFQUNBOUIsRUFBQW1CLEVBQUFwQixHQUFBLElBRUFrQyxHQUNBSCxHQUFBLEVBQ0E5QixFQUFBb0IsRUFBQXJCLEdBQUEsSUFHQUMsS0FHQXlCLEVBQUExQixJQUFBd0IsRUFBQXhCLElBQ0FDLEVBQUE0QixFQUNBTCxFQUFBSyxHQUNBNUIsRUFBQTBCLEVBQUFFLEdBRUFsQyxFQUFBa0MsS0FBQS9qQixFQUFBK2pCLEtBQ0E1QixFQUFBc0IsRUFBQXZCLEtBSUErQixHQUFBLEVBR0FBLElBRUFoQyxFQUFBemdCLElBQUEwZ0IsRUFBQUMsR0FDQTJCLEVBQUEzQixFQUFBRCxFQUFBVixFQUFBUSxFQUFBQyxHQUNBQSxFQUFBLE9BQUFDLElBRUFSLEVBQUF6YSxFQUFBakwsRUFBQW1tQiw0QkMxRkEsU0FBQWppQixHQUFBLElBQUFvSCxFQUFXOUwsRUFBUSxLQUduQmdNLEVBQTRDcE0sTUFBQXFNLFVBQUFyTSxFQUc1Q3NNLEVBQUFGLEdBQUEsaUJBQUF0SCxTQUFBdUgsVUFBQXZILEVBTUF5SCxFQUhBRCxLQUFBdE0sVUFBQW9NLEVBR0FGLEVBQUFLLFlBQUFoQyxFQUNBMGUsRUFBQTFjLElBQUEwYyxpQkFBQTFlLEVBcUJBekYsRUFBQTlFLFFBWEEsU0FBQWtwQixFQUFBQyxHQUNBLEdBQUFBLEVBQ0EsT0FBQUQsRUFBQWhJLFFBRUEsSUFBQXZnQixFQUFBdW9CLEVBQUF2b0IsT0FDQWlPLEVBQUFxYSxJQUFBdG9CLEdBQUEsSUFBQXVvQixFQUFBMWlCLFlBQUE3RixHQUdBLE9BREF1b0IsRUFBQUUsS0FBQXhhLEdBQ0FBLGdEQy9CQSxJQUFBeWEsRUFBdUJqcEIsRUFBUSxNQWUvQjBFLEVBQUE5RSxRQUxBLFNBQUFzcEIsRUFBQUgsR0FDQSxJQUFBRCxFQUFBQyxFQUFBRSxFQUFBQyxFQUFBSixRQUFBSSxFQUFBSixPQUNBLFdBQUFJLEVBQUE5aUIsWUFBQTBpQixFQUFBSSxFQUFBQyxXQUFBRCxFQUFBM29CLCtCQ1pBLElBQUE2b0IsRUFBaUJwcEIsRUFBUSxNQWV6QjBFLEVBQUE5RSxRQU5BLFNBQUF5cEIsR0FDQSxJQUFBN2EsRUFBQSxJQUFBNmEsRUFBQWpqQixZQUFBaWpCLEVBQUFDLFlBRUEsT0FEQSxJQUFBRixFQUFBNWEsR0FBQXhJLElBQUEsSUFBQW9qQixFQUFBQyxJQUNBN2EseUJDWkEsSUFHQTRhLEVBSFdwcEIsRUFBUSxLQUduQm9wQixXQUVBMWtCLEVBQUE5RSxRQUFBd3BCLHNCQ2NBMWtCLEVBQUE5RSxRQVhBLFNBQUFpSCxFQUFBNkgsR0FDQSxJQUFBaE8sR0FBQSxFQUNBSCxFQUFBc0csRUFBQXRHLE9BR0EsSUFEQW1PLE1BQUF4SyxNQUFBM0QsTUFDQUcsRUFBQUgsR0FDQW1PLEVBQUFoTyxHQUFBbUcsRUFBQW5HLEdBRUEsT0FBQWdPLHlCQ2hCQSxJQUFBNmEsRUFBaUJ2cEIsRUFBUSxNQUN6QjBMLEVBQW1CMUwsRUFBUSxNQUMzQndwQixFQUFrQnhwQixFQUFRLE1BZTFCMEUsRUFBQTlFLFFBTkEsU0FBQTZMLEdBQ0EseUJBQUFBLEVBQUFyRixhQUFBb2pCLEVBQUEvZCxNQUNBOGQsRUFBQTdkLEVBQUFELDJCQ2JBLElBQUE0YSxFQUFlcm1CLEVBQVEsS0FHdkJ5cEIsRUFBQS9wQixPQUFBNEssT0FVQWlmLEVBQUEsV0FDQSxTQUFBOWQsS0FDQSxnQkFBQWllLEdBQ0EsSUFBQXJELEVBQUFxRCxHQUNBLFNBRUEsR0FBQUQsRUFDQSxPQUFBQSxFQUFBQyxHQUVBamUsRUFBQXRILFVBQUF1bEIsRUFDQSxJQUFBbGIsRUFBQSxJQUFBL0MsRUFFQSxPQURBQSxFQUFBdEgsZUFBQWdHLEVBQ0FxRSxHQVpBLEdBZ0JBOUosRUFBQTlFLFFBQUEycEIsc0JDZkE3a0IsRUFBQTlFLFFBTkEsU0FBQW9XLEVBQUExVSxHQUNBLGdCQUFBcW9CLEdBQ0EsT0FBQTNULEVBQUExVSxFQUFBcW9CLDRCQ1ZBLElBQUEvYyxFQUFrQjVNLEVBQVEsTUFDMUI0cEIsRUFBbUI1cEIsRUFBUSxLQStCM0IwRSxFQUFBOUUsUUFKQSxTQUFBQyxHQUNBLE9BQUErcEIsRUFBQS9wQixJQUFBK00sRUFBQS9NLHdCQ1pBNkUsRUFBQTlFLFFBSkEsV0FDQSxnQ0NkQSxJQUFBaXFCLEVBQWlCN3BCLEVBQVEsS0FDekIwTCxFQUFtQjFMLEVBQVEsTUFDM0I0cEIsRUFBbUI1cEIsRUFBUSxLQUczQjhwQixFQUFBLGtCQUdBQyxFQUFBdkUsU0FBQXJoQixVQUNBeUgsRUFBQWxNLE9BQUF5RSxVQUdBNmxCLEVBQUFELEVBQUFyYSxTQUdBNUosRUFBQThGLEVBQUE5RixlQUdBbWtCLEVBQUFELEVBQUEzbEIsS0FBQTNFLFFBMkNBZ0YsRUFBQTlFLFFBYkEsU0FBQUMsR0FDQSxJQUFBK3BCLEVBQUEvcEIsSUFBQWdxQixFQUFBaHFCLElBQUFpcUIsRUFDQSxTQUVBLElBQUFKLEVBQUFoZSxFQUFBN0wsR0FDQSxVQUFBNnBCLEVBQ0EsU0FFQSxJQUFBN2QsRUFBQS9GLEVBQUF6QixLQUFBcWxCLEVBQUEsZ0JBQUFBLEVBQUF0akIsWUFDQSx5QkFBQXlGLG1CQUNBbWUsRUFBQTNsQixLQUFBd0gsSUFBQW9lLHlCQzFEQSxJQUFBSixFQUFpQjdwQixFQUFRLEtBQ3pCeUUsRUFBZXpFLEVBQVEsS0FDdkI0cEIsRUFBbUI1cEIsRUFBUSxLQThCM0JrcUIsS0FDQUEsRUFaQSx5QkFZQUEsRUFYQSx5QkFZQUEsRUFYQSxzQkFXQUEsRUFWQSx1QkFXQUEsRUFWQSx1QkFVQUEsRUFUQSx1QkFVQUEsRUFUQSw4QkFTQUEsRUFSQSx3QkFTQUEsRUFSQSx5QkFRQSxFQUNBQSxFQWpDQSxzQkFpQ0FBLEVBaENBLGtCQWlDQUEsRUFwQkEsd0JBb0JBQSxFQWhDQSxvQkFpQ0FBLEVBcEJBLHFCQW9CQUEsRUFoQ0EsaUJBaUNBQSxFQWhDQSxrQkFnQ0FBLEVBL0JBLHFCQWdDQUEsRUEvQkEsZ0JBK0JBQSxFQTlCQSxtQkErQkFBLEVBOUJBLG1CQThCQUEsRUE3QkEsbUJBOEJBQSxFQTdCQSxnQkE2QkFBLEVBNUJBLG1CQTZCQUEsRUE1QkEscUJBNEJBLEVBY0F4bEIsRUFBQTlFLFFBTEEsU0FBQUMsR0FDQSxPQUFBK3BCLEVBQUEvcEIsSUFDQTRFLEVBQUE1RSxFQUFBVSxXQUFBMnBCLEVBQUFMLEVBQUFocUIseUJDM0NBNkUsRUFBQTlFLFFBTkEsU0FBQW9XLEdBQ0EsZ0JBQUFuVyxHQUNBLE9BQUFtVyxFQUFBblcsNEJDVEEsU0FBQTZFLEdBQUEsSUFBQXlsQixFQUFpQm5xQixFQUFRLEtBR3pCZ00sRUFBNENwTSxNQUFBcU0sVUFBQXJNLEVBRzVDc00sRUFBQUYsR0FBQSxpQkFBQXRILFNBQUF1SCxVQUFBdkgsRUFNQTBsQixFQUhBbGUsS0FBQXRNLFVBQUFvTSxHQUdBbWUsRUFBQUUsUUFHQTlkLEVBQUEsV0FDQSxJQUVBLElBQUErZCxFQUFBcGUsS0FBQXFlLFNBQUFyZSxFQUFBcWUsUUFBQSxRQUFBRCxNQUVBLE9BQUFBLEdBS0FGLEtBQUFJLFNBQUFKLEVBQUFJLFFBQUEsUUFDRyxNQUFBMWlCLEtBWEgsR0FjQXBELEVBQUE5RSxRQUFBMk0sK0NDN0JBLElBQUFrZSxFQUFpQnpxQixFQUFRLE1BQ3pCc21CLEVBQWF0bUIsRUFBUSxNQThCckIwRSxFQUFBOUUsUUFKQSxTQUFBQyxHQUNBLE9BQUE0cUIsRUFBQTVxQixFQUFBeW1CLEVBQUF6bUIsMkJDNUJBLElBQUE2cUIsRUFBa0IxcUIsRUFBUSxLQUMxQnVMLEVBQXNCdkwsRUFBUSxLQXNDOUIwRSxFQUFBOUUsUUExQkEsU0FBQWlILEVBQUExRSxFQUFBc0osRUFBQSthLEdBQ0EsSUFBQW1FLEdBQUFsZixFQUNBQSxVQUtBLElBSEEsSUFBQS9LLEdBQUEsRUFDQUgsRUFBQTRCLEVBQUE1QixTQUVBRyxFQUFBSCxHQUFBLENBQ0EsSUFBQUMsRUFBQTJCLEVBQUF6QixHQUVBaW1CLEVBQUFILEVBQ0FBLEVBQUEvYSxFQUFBakwsR0FBQXFHLEVBQUFyRyxLQUFBaUwsRUFBQTVFLFFBQ0FzRCxPQUVBQSxJQUFBd2MsSUFDQUEsRUFBQTlmLEVBQUFyRyxJQUVBbXFCLEVBQ0FwZixFQUFBRSxFQUFBakwsRUFBQW1tQixHQUVBK0QsRUFBQWpmLEVBQUFqTCxFQUFBbW1CLEdBR0EsT0FBQWxiLHlCQ3BDQSxJQUFBbWYsRUFBZ0I1cUIsRUFBUSxNQUN4QmtvQixFQUFrQmxvQixFQUFRLEtBQzFCc1AsRUFBY3RQLEVBQVEsS0FDdEJvTSxFQUFlcE0sRUFBUSxNQUN2QjZxQixFQUFjN3FCLEVBQVEsS0FDdEJ5TSxFQUFtQnpNLEVBQVEsTUFNM0I4RixFQUhBcEcsT0FBQXlFLFVBR0EyQixlQXFDQXBCLEVBQUE5RSxRQTNCQSxTQUFBQyxFQUFBaXJCLEdBQ0EsSUFBQXBDLEVBQUFwWixFQUFBelAsR0FDQWtyQixHQUFBckMsR0FBQVIsRUFBQXJvQixHQUNBOG9CLEdBQUFELElBQUFxQyxHQUFBM2UsRUFBQXZNLEdBQ0FtckIsR0FBQXRDLElBQUFxQyxJQUFBcEMsR0FBQWxjLEVBQUE1TSxHQUNBb3JCLEVBQUF2QyxHQUFBcUMsR0FBQXBDLEdBQUFxQyxFQUNBeGMsRUFBQXljLEVBQUFMLEVBQUEvcUIsRUFBQVUsT0FBQTJxQixXQUNBM3FCLEVBQUFpTyxFQUFBak8sT0FFQSxRQUFBQyxLQUFBWCxHQUNBaXJCLElBQUFobEIsRUFBQXpCLEtBQUF4RSxFQUFBVyxJQUNBeXFCLElBRUEsVUFBQXpxQixHQUVBbW9CLElBQUEsVUFBQW5vQixHQUFBLFVBQUFBLElBRUF3cUIsSUFBQSxVQUFBeHFCLEdBQUEsY0FBQUEsR0FBQSxjQUFBQSxJQUVBcXFCLEVBQUFycUIsRUFBQUQsS0FFQWlPLEVBQUFwTCxLQUFBNUMsR0FHQSxPQUFBZ08sdUJDMUJBOUosRUFBQTlFLFFBVkEsU0FBQXVyQixFQUFBeEQsR0FJQSxJQUhBLElBQUFqbkIsR0FBQSxFQUNBOE4sRUFBQXRLLE1BQUFpbkIsS0FFQXpxQixFQUFBeXFCLEdBQ0EzYyxFQUFBOU4sR0FBQWluQixFQUFBam5CLEdBRUEsT0FBQThOLHlCQ2hCQSxJQUFBNlgsRUFBZXJtQixFQUFRLEtBQ3ZCd3BCLEVBQWtCeHBCLEVBQVEsTUFDMUJvckIsRUFBbUJwckIsRUFBUSxNQU0zQjhGLEVBSEFwRyxPQUFBeUUsVUFHQTJCLGVBd0JBcEIsRUFBQTlFLFFBZkEsU0FBQTZMLEdBQ0EsSUFBQTRhLEVBQUE1YSxHQUNBLE9BQUEyZixFQUFBM2YsR0FFQSxJQUFBNGYsRUFBQTdCLEVBQUEvZCxHQUNBK0MsS0FFQSxRQUFBaE8sS0FBQWlMLEdBQ0EsZUFBQWpMLElBQUE2cUIsR0FBQXZsQixFQUFBekIsS0FBQW9ILEVBQUFqTCxLQUNBZ08sRUFBQXBMLEtBQUE1QyxHQUdBLE9BQUFnTyx1QkNWQTlKLEVBQUE5RSxRQVZBLFNBQUE2TCxHQUNBLElBQUErQyxLQUNBLFNBQUEvQyxFQUNBLFFBQUFqTCxLQUFBZCxPQUFBK0wsR0FDQStDLEVBQUFwTCxLQUFBNUMsR0FHQSxPQUFBZ08seUJDaEJBLElBQUE4YyxFQUFldHJCLEVBQVEsTUFDdkJ1ckIsRUFBcUJ2ckIsRUFBUSxNQW1DN0IwRSxFQUFBOUUsUUExQkEsU0FBQTRyQixHQUNBLE9BQUFGLEVBQUEsU0FBQTdmLEVBQUFnZ0IsR0FDQSxJQUFBL3FCLEdBQUEsRUFDQUgsRUFBQWtyQixFQUFBbHJCLE9BQ0FpbUIsRUFBQWptQixFQUFBLEVBQUFrckIsRUFBQWxyQixFQUFBLFFBQUE0SixFQUNBdWhCLEVBQUFuckIsRUFBQSxFQUFBa3JCLEVBQUEsUUFBQXRoQixFQVdBLElBVEFxYyxFQUFBZ0YsRUFBQWpyQixPQUFBLHNCQUFBaW1CLEdBQ0FqbUIsSUFBQWltQixRQUNBcmMsRUFFQXVoQixHQUFBSCxFQUFBRSxFQUFBLEdBQUFBLEVBQUEsR0FBQUMsS0FDQWxGLEVBQUFqbUIsRUFBQSxPQUFBNEosRUFBQXFjLEVBQ0FqbUIsRUFBQSxHQUVBa0wsRUFBQS9MLE9BQUErTCxLQUNBL0ssRUFBQUgsR0FBQSxDQUNBLElBQUFzRyxFQUFBNGtCLEVBQUEvcUIsR0FDQW1HLEdBQ0Eya0IsRUFBQS9mLEVBQUE1RSxFQUFBbkcsRUFBQThsQixHQUdBLE9BQUEvYSwyQkNoQ0EsSUFBQWtnQixFQUFlM3JCLEVBQVEsTUFDdkI0ckIsRUFBZTVyQixFQUFRLE1BQ3ZCNnJCLEVBQWtCN3JCLEVBQVEsTUFjMUIwRSxFQUFBOUUsUUFKQSxTQUFBb1csRUFBQXBTLEdBQ0EsT0FBQWlvQixFQUFBRCxFQUFBNVYsRUFBQXBTLEVBQUErbkIsR0FBQTNWLEVBQUEsMkJDYkEsSUFBQWxQLEVBQVk5RyxFQUFRLE1BR3BCOHJCLEVBQUExUixLQUFBMlIsSUFnQ0FybkIsRUFBQTlFLFFBckJBLFNBQUFvVyxFQUFBcFMsRUFBQXRDLEdBRUEsT0FEQXNDLEVBQUFrb0IsT0FBQTNoQixJQUFBdkcsRUFBQW9TLEVBQUF6VixPQUFBLEVBQUFxRCxFQUFBLEdBQ0EsV0FNQSxJQUxBLElBQUFvb0IsRUFBQXBsQixVQUNBbEcsR0FBQSxFQUNBSCxFQUFBdXJCLEVBQUFFLEVBQUF6ckIsT0FBQXFELEVBQUEsR0FDQThLLEVBQUF4SyxNQUFBM0QsS0FFQUcsRUFBQUgsR0FDQW1PLEVBQUFoTyxHQUFBc3JCLEVBQUFwb0IsRUFBQWxELEdBRUFBLEdBQUEsRUFFQSxJQURBLElBQUF1ckIsRUFBQS9uQixNQUFBTixFQUFBLEtBQ0FsRCxFQUFBa0QsR0FDQXFvQixFQUFBdnJCLEdBQUFzckIsRUFBQXRyQixHQUdBLE9BREF1ckIsRUFBQXJvQixHQUFBdEMsRUFBQW9OLEdBQ0E1SCxFQUFBa1AsRUFBQWpQLEtBQUFrbEIseUJDWEF2bkIsRUFBQTlFLFFBVkEsU0FBQW9XLEVBQUFrVyxFQUFBRixHQUNBLE9BQUFBLEVBQUF6ckIsUUFDQSxjQUFBeVYsRUFBQTNSLEtBQUE2bkIsR0FDQSxjQUFBbFcsRUFBQTNSLEtBQUE2bkIsRUFBQUYsRUFBQSxJQUNBLGNBQUFoVyxFQUFBM1IsS0FBQTZuQixFQUFBRixFQUFBLEdBQUFBLEVBQUEsSUFDQSxjQUFBaFcsRUFBQTNSLEtBQUE2bkIsRUFBQUYsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFFQSxPQUFBaFcsRUFBQWxQLE1BQUFvbEIsRUFBQUYsMEJDakJBLElBQUFHLEVBQXNCbnNCLEVBQVEsTUFXOUI2ckIsRUFWZTdyQixFQUFRLEtBVXZCb3NCLENBQUFELEdBRUF6bkIsRUFBQTlFLFFBQUFpc0Isd0JDYkEsSUFBQVEsRUFBZXJzQixFQUFRLE1BQ3ZCTCxFQUFxQkssRUFBUSxLQUM3QjJyQixFQUFlM3JCLEVBQVEsTUFVdkJtc0IsRUFBQXhzQixFQUFBLFNBQUFxVyxFQUFBakYsR0FDQSxPQUFBcFIsRUFBQXFXLEVBQUEsWUFDQXpQLGNBQUEsRUFDQUQsWUFBQSxFQUNBekcsTUFBQXdzQixFQUFBdGIsR0FDQXZLLFVBQUEsS0FMQW1sQixFQVNBam5CLEVBQUE5RSxRQUFBdXNCLHNCQ0lBem5CLEVBQUE5RSxRQU5BLFNBQUFDLEdBQ0Esa0JBQ0EsT0FBQUEsd0JDcEJBLElBQUF5c0IsRUFBQSxJQUNBQyxFQUFBLEdBR0FDLEVBQUFDLEtBQUFDLElBK0JBaG9CLEVBQUE5RSxRQXBCQSxTQUFBb1csR0FDQSxJQUFBMlcsRUFBQSxFQUNBQyxFQUFBLEVBRUEsa0JBQ0EsSUFBQUMsRUFBQUwsSUFDQU0sRUFBQVAsR0FBQU0sRUFBQUQsR0FHQSxHQURBQSxFQUFBQyxFQUNBQyxFQUFBLEdBQ0EsS0FBQUgsR0FBQUwsRUFDQSxPQUFBMWxCLFVBQUEsUUFHQStsQixFQUFBLEVBRUEsT0FBQTNXLEVBQUFsUCxXQUFBcUQsRUFBQXZELG1DQ2hDQSxJQUFBNEUsRUFBU3hMLEVBQVEsS0FDakI0TSxFQUFrQjVNLEVBQVEsTUFDMUI2cUIsRUFBYzdxQixFQUFRLEtBQ3RCcW1CLEVBQWVybUIsRUFBUSxLQTBCdkIwRSxFQUFBOUUsUUFkQSxTQUFBQyxFQUFBYSxFQUFBK0ssR0FDQSxJQUFBNGEsRUFBQTVhLEdBQ0EsU0FFQSxJQUFBTCxTQUFBMUssRUFDQSxtQkFBQTBLLEVBQ0F3QixFQUFBbkIsSUFBQW9mLEVBQUFucUIsRUFBQStLLEVBQUFsTCxRQUNBLFVBQUE2SyxHQUFBMUssS0FBQStLLElBRUFELEVBQUFDLEVBQUEvSyxHQUFBYix1Q0NtQ0E2RSxFQUFBOUUsUUF6Q0EsZ0RDaEJBRixPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFFQUQsRUFBQSxlQUVBLElBQUFtRixFQUFBQyxFQUFvQ2hGLEVBQVEsSUFFNUNvVyxFQUFBcFIsRUFBdUNoRixFQUFRLEtBRS9DNk0sRUFBNkI3TSxFQUFRLEtBRXJDK3NCLEVBQUEvbkIsRUFBc0NoRixFQUFRLE9BRTlDZ3RCLEVBQUFqdEIsRUFBeUNDLEVBQVEsT0FFakRtRixFQUFBcEYsRUFBeUNDLEVBQVEsS0FFakRvRixFQUFBckYsRUFBMkNDLEVBQVEsT0FFbkRpdEIsRUFBQWx0QixFQUF1Q0MsRUFBUSxPQUUvQzJRLEVBQUE1USxFQUFtQ0MsRUFBUSxLQUUzQ2t0QixFQUFBbnRCLEVBQXVDQyxFQUFRLE9BRS9DbU8sRUFBQXBPLEVBQW9DQyxFQUFRLE9BRTVDbXRCLEVBQUFwdEIsRUFBd0RDLEVBQVEsT0FFaEU2VyxFQUFZN1csRUFBUSxNQUVwQixTQUFBRCxFQUFBK0MsR0FBc0MsT0FBQUEsS0FBQUMsV0FBQUQsR0FBdUNFLFFBQUFGLEdBRTdFLFNBQUF3QyxJQUFxQyxzQkFBQUMsUUFBQSxZQUFnRCxJQUFBQyxFQUFBLElBQUFELFFBQTZHLE9BQWxGRCxFQUFBLFdBQWlFLE9BQUFFLEdBQWlCQSxFQUVsTSxTQUFBUixFQUFBbEMsR0FBdUMsR0FBQUEsS0FBQUMsV0FBNkIsT0FBQUQsRUFBYyxJQUFBMEMsRUFBQUYsSUFBd0MsR0FBQUUsS0FBQUMsSUFBQTNDLEdBQStCLE9BQUEwQyxFQUFBRSxJQUFBNUMsR0FBeUIsSUFBQTZDLEtBQWlCLFNBQUE3QyxFQUFBLENBQW1CLElBQUE4QyxFQUFBbEcsT0FBQUMsZ0JBQUFELE9BQUFtRyx5QkFBc0YsUUFBQXJGLEtBQUFzQyxFQUF1QixHQUFBcEQsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXZCLEVBQUF0QyxHQUFBLENBQXNELElBQUF1RixFQUFBSCxFQUFBbEcsT0FBQW1HLHlCQUFBL0MsRUFBQXRDLEdBQUEsS0FBcUZ1RixNQUFBTCxLQUFBSyxFQUFBQyxLQUFzQ3RHLE9BQUFDLGVBQUFnRyxFQUFBbkYsRUFBQXVGLEdBQW1ESixFQUFBbkYsR0FBQXNDLEVBQUF0QyxJQUFnRyxPQUFoRW1GLEVBQUEsUUFBQTdDLEVBQXlCMEMsR0FBYUEsRUFBQVEsSUFBQWxELEVBQUE2QyxHQUEwQkEsRUFFdm9CLFNBQUFNLEVBQUFuRCxHQUF3VSxPQUF0T21ELEVBQTNFLG1CQUFBQyxRQUFBLGlCQUFBQSxPQUFBQyxTQUEyRSxTQUFBckQsR0FBa0MsY0FBQUEsR0FBK0IsU0FBQUEsR0FBa0MsT0FBQUEsR0FBQSxtQkFBQW9ELFFBQUFwRCxFQUFBc0QsY0FBQUYsUUFBQXBELElBQUFvRCxPQUFBL0IsVUFBQSxnQkFBQXJCLElBQW1JQSxHQUV4VSxTQUFBdUQsRUFBQXZELEVBQUF0QyxFQUFBWCxHQUFtTSxPQUF4SlcsS0FBQXNDLEVBQWtCcEQsT0FBQUMsZUFBQW1ELEVBQUF0QyxHQUFrQ1gsUUFBQXlHLFlBQUEsRUFBQUMsY0FBQSxFQUFBQyxVQUFBLElBQWdGMUQsRUFBQXRDLEdBQUFYLEVBQW9CaUQsRUFJbk0sU0FBQWtFLEVBQUFMLEVBQUF4RSxHQUEyQyxRQUFBN0IsRUFBQSxFQUFnQkEsRUFBQTZCLEVBQUE1QixPQUFrQkQsSUFBQSxDQUFPLElBQUEyRyxFQUFBOUUsRUFBQTdCLEdBQTJCMkcsRUFBQVgsV0FBQVcsRUFBQVgsYUFBQSxFQUF3RFcsRUFBQVYsY0FBQSxFQUFnQyxVQUFBVSxNQUFBVCxVQUFBLEdBQXVEOUcsT0FBQUMsZUFBQWdILEVBQUFNLEVBQUF6RyxJQUFBeUcsSUFNOVAsU0FBQUMsRUFBQUMsR0FBZ0wsT0FBbkpELEVBQUF4SCxPQUFBMEgsZUFBQTFILE9BQUEySCxlQUFBLFNBQUFGLEdBQWdHLE9BQUFBLEVBQUFHLFdBQUE1SCxPQUFBMkgsZUFBQUYsS0FBbURBLEdBRWhMLFNBQUFJLEVBQUFDLEdBQXVDLFlBQUFBLEVBQXVCLFVBQUFDLGVBQUEsNkRBQXlGLE9BQUFELEVBSXZKLFNBQUFFLEVBQUFQLEVBQUFRLEdBQTBJLE9BQTFHRCxFQUFBaEksT0FBQTBILGdCQUFBLFNBQUFELEVBQUFRLEdBQTZGLE9BQWpCUixFQUFBRyxVQUFBSyxFQUFpQlIsSUFBYUEsRUFBQVEsR0FFMUksU0FBQTJNLEVBQUF4TSxHQUNBQSxFQUFBd00sa0JBRUF4TSxFQUFBME0sWUFBQTJDLDBCQUNBclAsRUFBQTBNLFlBQUEyQywyQkFJQSxJQUFBaVcsRUFFQSxTQUFBaGxCLEdBR0EsU0FBQWdsQixFQUFBanJCLEdBQ0EsSUFBQWtHLEdBOUJBLFNBQUFDLEVBQUFDLEdBQWlELEtBQUFELGFBQUFDLEdBQTBDLFVBQUFDLFVBQUEscUNBZ0MzRkMsQ0FBQTFCLEtBQUFxbUIsSUFFQS9rQixFQTVCQSxTQUFBYixFQUFBbkQsR0FBaUQsT0FBQUEsR0FBQSxXQUFBNEIsRUFBQTVCLElBQUEsbUJBQUFBLEVBQXlGa0QsRUFBQUMsR0FBZm5ELEVBNEIzSHFFLENBQUEzQixLQUFBRyxFQUFBa21CLEdBQUEvb0IsS0FBQTBDLEtBQUE1RSxLQUVBa3JCLGNBQUEsU0FBQWpkLEdBQ0EsSUFBQWtkLEVBQUFsWCxFQUFBbUMsWUFBQWhSLEVBQUFjLE9BQ0EsRUFBQTJrQixFQUFBLFNBQUFNLEVBQUEsdUJBT0FqbEIsRUFBQWtsQixhQUFBbmQsRUFBQXVPLFFBSUF0VyxFQUFBbWxCLGdCQUFBLFNBQUF2a0IsR0FDQSxJQUFBMmIsRUFBQTNiLEVBQUEyYixhQUVBdmMsRUFBQStMLFVBQ0F3USxrQkFJQXZjLEVBQUFvbEIsbUJBQUEsV0FDQXBsQixFQUFBK0wsVUFDQXdRLGlCQUNPdmMsRUFBQXFsQixnQkFHUHJsQixFQUFBcWxCLGNBQUEsV0FDQXJsQixFQUFBc2xCLFlBQUEsR0FJQXRsQixFQUFBK0wsWUFBdUIvTCxFQUFBd2MsZ0JBR3ZCeGMsRUFBQXVsQixnQkFBQSxTQUFBQyxHQUNBeGxCLEVBQUFzbEIsV0FBQUUsR0FFQSxJQUFBemQsRUFBQS9ILEVBQUFsRyxNQUFBaU8sT0FFQXlkLEdBQUF6ZCxFQUFBbVUsMEJBQUFpQixVQUNBbmQsRUFBQXdjLGlCQUlBeGMsRUFBQXlsQixvQkFBQSxTQUFBQyxHQUNBLElBQUFuSixFQUFBdmMsRUFBQTBDLE1BQUE2WixhQUVBLEdBQUFtSixFQUFBQyxXQUFBRCxFQUFBQyxRQUFBenRCLFFBQUEsSUFJQSxJQUFBMHRCLEVBQUE1bEIsRUFBQTBDLE1BQUFrakIsc0JBRUFySixLQUFBNWMsUUFBQStsQixFQUFBdnRCLE1BQUEsU0FFQXl0QixFQUFBRixFQUFBdnRCLEtBR0F5dEIsRUFBQUYsRUFBQXZ0QixLQUFBdXRCLEVBQUFDLFFBR0EzbEIsRUFBQStMLFVBQ0E2Wiw0QkFJQTVsQixFQUFBNmxCLGlCQUFBLFdBQ0EsSUFBQWhsQixFQUVBdUssRUFBQXBMLEVBQUFsRyxNQUNBaU8sRUFBQXFELEVBQUFyRCxPQUNBaU0sRUFBQTVJLEVBQUE0SSxPQUNBL1MsRUFBQW1LLEVBQUFuSyxVQUNBc2IsRUFBQW5SLEVBQUFtUixhQUNBdUosRUFBQXZKLEtBQUFya0IsT0FBQSxFQUNBNnRCLEVBQUFoZSxFQUFBZ2UsV0FFQSxtQkFBQUEsSUFDQUEsSUFBQUQsSUFHQSxJQUFBRSxHQUFBLEVBQUFscEIsRUFBQSxVQUEyRWtCLEVBQTNFNkMsS0FBMkUsR0FBQVksT0FBQVIsRUFBQSxhQUFBNmtCLEdBQUE5bkIsRUFBQTZDLEVBQUEsR0FBQVksT0FBQVIsRUFBQSxTQUFBakIsRUFBQWltQixzQkFBQXBsQixJQUMzRSxPQUFBa2xCLEVBQUFycEIsRUFBQWtPLGFBQUFtYixHQUNBdkssTUFBQXhILEVBQUFrUyxZQUNBaGxCLFdBQUEsRUFBQXBFLEVBQUEsWUFBQTJFLE9BQUFSLEVBQUEsU0FBQStrQixFQUFBRCxFQUFBanNCLE1BQUFvSCxXQUNBMkwsUUFBQVosSUFDT3ZQLEVBQUFnRixjQUFBNEcsRUFBQSxTQUNQa1QsTUFBQXhILEVBQUFrUyxZQUNBbmpCLEtBQUEsU0FDQStILE1BQUEsU0FDQTVKLFVBQUE4a0IsRUFDQW5aLFFBQUFaLEtBSUEsSUFBQXVaLEVBQUEsMEJBQUExckIsRUFBQWlPLFFBQUFqTyxFQUFBaU8sT0FBQW9lLHNCQVFBLE9BUEFubUIsRUFBQTBDLE9BQ0E2WixhQUFBemlCLEVBQUF5aUIsYUFDQTZKLFdBQUEsRUFBQTVYLEVBQUF2RyxtQkFBQW5PLEVBQUFpTyxPQUFBdUksU0FDQXNWLHlCQUNBSixVQUNBYSxVQUFBdnNCLEdBRUFrRyxFQTJNQSxPQTNVQSxTQUFBK0IsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQTdCLFVBQUEsc0RBQTZFNEIsRUFBQWpHLFVBQUF6RSxPQUFBNEssT0FBQUQsS0FBQWxHLFdBQXlFaUMsYUFBZXZHLE1BQUF1SyxFQUFBNUQsVUFBQSxFQUFBRCxjQUFBLEtBQTBEOEQsR0FBQTNDLEVBQUEwQyxFQUFBQyxHQWV4VUUsQ0FBQTZpQixFQTZUQ3JvQixFQUFBeUYsV0FwVkQsU0FBQWpDLEVBQUFrQyxFQUFBQyxHQUE2REQsR0FBQXpELEVBQUF1QixFQUFBcEUsVUFBQXNHLEdBQXNFQyxHQUFBMUQsRUFBQXVCLEVBQUFtQyxHQTJJbklDLENBQUF5aUIsSUFDQTVzQixJQUFBLG9CQUNBWCxNQUFBLFdBQ0EsSUFBQXVRLEVBQUFySixLQUFBNUUsTUFBQWlPLE9BQ0FySixLQUFBc21CLGNBQUFqZCxNQUdBNVAsSUFBQSxxQkFDQVgsTUFBQSxXQUNBLElBQUF1USxFQUFBckosS0FBQTVFLE1BQUFpTyxPQUNBckosS0FBQXNtQixjQUFBamQsTUFHQTVQLElBQUEscUJBQ0FYLE1BQUEsV0FDQSxPQUFBa0gsS0FBQXdtQixZQUFBeG1CLEtBQUFnRSxNQUFBOGlCLFdBR0FydEIsSUFBQSxhQUNBWCxNQUFBLFNBQUFndUIsR0FDQSxJQUFBemQsRUFBQXJKLEtBQUE1RSxNQUFBaU8sT0FFQSwwQkFBQUEsR0FDQXJKLEtBQUFxTixVQUNBeVosWUFJQXpkLEVBQUF1ZSwrQkFDQXZlLEVBQUF1ZSw4QkFBQWQsTUFJQXJ0QixJQUFBLGFBQ0FYLE1BQUEsV0FDQSxJQUFBK3VCLEVBQUE3bkIsS0FBQTVFLE1BQUFpTyxPQUFBdUksUUFFQSxZQURBLElBQUFpVyxRQUNBeHFCLEtBQUEsU0FBQXVLLEdBQ0EsU0FBQUEsRUFBQXhPLFVBQUF3TyxFQUFBeE8sU0FBQUksT0FBQSxRQUlBQyxJQUFBLGdCQUNBWCxNQUFBLFdBQ0EsSUFBQWd2QixFQUFBOW5CLEtBQUE1RSxNQUNBaU8sRUFBQXllLEVBQUF6ZSxPQUNBMGUsRUFBQUQsRUFBQWpLLGFBQ0FDLEVBQUFnSyxFQUFBaEssY0FDQTFDLEVBQUFwYixLQUFBZ0UsTUFDQTZaLEVBQUF6QyxFQUFBeUMsYUFDQTZKLEVBQUF0TSxFQUFBc00sVUFDQWxLLEVBQUFuVSxFQUFBbVUsZ0JBRUEsRUFBQW5mLEVBQUEsU0FBQXdmLEVBQUFrSyxJQUNBakssRUFBQXpVLEVBQUFtVSxFQUFBSyxJQUFBNVYsSUFBQSxTQUFBeE8sR0FDQSxPQUFBaXVCLEVBQUFqdUIsS0FDU21hLE9BQUEsU0FBQW5hLEdBQ1QsWUFBQTJKLElBQUEzSixRQUtBQSxJQUFBLGNBQ0FYLE1BQUEsU0FBQTBRLEdBQ0EsSUFBQW9QLEVBQUE1WSxLQUVBLE9BQUF3SixFQUFBdkIsSUFBQSxTQUFBTCxHQUNBLEdBQUFBLEVBQUF4TyxVQUFBd08sRUFBQXhPLFNBQUFJLE9BQUEsR0FDQSxJQUFBMHRCLEVBQUF0TyxFQUFBNVUsTUFBQWtqQixzQkFJQWMsRUFIQXJ2QixPQUFBMEMsS0FBQTZyQixHQUFBN3BCLEtBQUEsU0FBQTVELEdBQ0EsT0FBQXl0QixFQUFBenRCLEdBQUF3SCxRQUFBMkcsRUFBQTlPLFFBQUEsSUFFQSxHQUFBaUssT0FBQTZWLEVBQUF4ZCxNQUFBNmEsa0JBQUEsZ0NBQ0EsT0FBQWpZLEVBQUFnRixjQUFBZ2pCLEVBQUFpQyxTQUNBbkwsTUFBQWxWLEVBQUFzZ0IsS0FDQTFsQixVQUFBd2xCLEVBQ0F2dUIsSUFBQW1PLEVBQUE5TyxNQUFBNlAsWUFDV2lRLEVBQUF1UCxZQUFBdmdCLEVBQUF4TyxXQUdYLE9BQUF3ZixFQUFBd1AsZUFBQXhnQixRQUlBbk8sSUFBQSxpQkFDQVgsTUFBQSxTQUFBOE8sR0FDQSxJQUFBeUIsRUFBQXJKLEtBQUE1RSxNQUFBaU8sT0FDQXdVLEVBQUE3ZCxLQUFBZ0UsTUFBQTZaLGFBQ0EvUixJQUFBLG1CQUFBekMsTUFBQWdmLGVBRUFDLEdBQUF6SyxPQUFBNVYsSUFBQSxTQUFBeE8sR0FDQSxPQUFBQSxFQUFBa1AsYUFFQWdGLEVBQUE3QixFQUFBOU4sRUFBQWdGLGNBQUFtakIsRUFBQSxTQUNBdmpCLFFBQUEwbEIsRUFBQXJuQixRQUFBMkcsRUFBQTlPLE1BQUE2UCxhQUFBLElBQ08zSyxFQUFBZ0YsY0FBQW9FLEVBQUEsU0FDUHhFLFFBQUEwbEIsRUFBQXJuQixRQUFBMkcsRUFBQTlPLE1BQUE2UCxhQUFBLElBRUEsT0FBQTNLLEVBQUFnRixjQUFBZ2pCLEVBQUF1QyxNQUNBOXVCLElBQUFtTyxFQUFBOU8sT0FDTzZVLEVBQUEzUCxFQUFBZ0YsY0FBQSxZQUFBNEUsRUFBQXNnQixVQUdQenVCLElBQUEsU0FDQVgsTUFBQSxXQUNBLElBQUFtaEIsRUFBQWphLEtBRUF3b0IsRUFBQXhvQixLQUFBZ0UsTUFBQTZaLGFBQ0E0SyxFQUFBem9CLEtBQUE1RSxNQUNBaU8sRUFBQW9mLEVBQUFwZixPQUNBaU0sRUFBQW1ULEVBQUFuVCxPQUNBL1MsRUFBQWttQixFQUFBbG1CLFVBQ0EwVCxFQUFBd1MsRUFBQXhTLGtCQUNBbEwsRUFBQTBkLEVBQUExZCxrQkFFQWUsSUFBQSxtQkFBQXpDLE1BQUFnZixlQUNBSyxHQUFBLEVBQUF0cUIsRUFBQSxTQUFBa0IsS0FBNEUsR0FBQXlELE9BQUFrVCxFQUFBLDBCQUFBalcsS0FBQTJvQixlQUM1RW5MLEVBQUFuVSxFQUFBbVUsZUFFQUEsYUFBQWlCLFdBQ0FqQixLQUNBamIsVUFBQSxHQUFBUSxPQUFBa1QsRUFBQSxXQUNBd1EsZ0JBQUEsU0FBQTVJLEdBQ0EsT0FBQTVELEVBQUF3TSxpQkFDQTVJLGtCQUdBQSxhQUFBMkssRUFDQUksUUFBQTVvQixLQUFBMm1CLGNBQ0FrQyxhQUFBN29CLEtBQUEwbUIsbUJBQ0E5VSxRQUFBdkksRUFBQXVJLFdBSUEsSUFBQWtYLEVBQUF0TCxFQUFBeGYsRUFBQWdGLGNBQUFvakIsRUFBQSxTQUNBNWpCLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxjQUNPaWIsR0FBQXhmLEVBQUFnRixjQUFBb2pCLEVBQUEsU0FDUDVqQixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsY0FDT3ZFLEVBQUFnRixjQUFBZ2pCLEVBQUEsU0FDUGxhLFdBQ0FxQyxRQUFBbk8sS0FBQSttQixvQkFDQXhrQixVQUFBLEdBQUFRLE9BQUFrVCxFQUFBLFNBQ0F6VCxVQUFBa21CLEVBQ0E5TixTQUFBNWEsS0FBQXltQixnQkFDQXNDLFdBQUEvb0IsS0FBQXltQixnQkFDQTVJLGFBQUEySyxLQUFBdmdCLElBQUEsU0FBQStnQixHQUNBLE9BQUFBLEVBQUFyZ0IsYUFFQW9DLHFCQUNPL0ssS0FBQW1vQixZQUFBOWUsRUFBQXVJLFVBQUE1VCxFQUFBZ0YsY0FBQSxPQUNQUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsbUJBQ092RSxFQUFBZ0YsY0FBQSxLQUNQUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsMEJBQ0E0TCxRQUFBbk8sS0FBQTJtQixlQUNPclIsRUFBQTJULGVBQUFqckIsRUFBQWdGLGNBQUEsS0FDUFIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLHdCQUNBNEwsUUFBQW5PLEtBQUEwbUIsb0JBQ09wUixFQUFBNFQsZUFDUCxPQUFBbHJCLEVBQUFnRixjQUFBa2pCLEVBQUEsU0FDQWlELFNBQUEsU0FDQUMsVUFBQSxjQUNBQyxRQUFBUCxFQUNBaEMsUUFBQTltQixLQUFBdW5CLHFCQUNBVixnQkFBQTdtQixLQUFBNm1CLGdCQUNBOWIsb0JBQ0F1ZSxhQUFBLEdBQ090cEIsS0FBQW1uQix5QkFHUDF0QixJQUFBLDJCQUNBWCxNQUFBLFNBQUErSyxFQUFBMGxCLEdBQ0EsSUFBQWxnQixFQUFBeEYsRUFBQXdGLE9BQ0FzZSxFQUFBNEIsRUFBQTVCLFVBQ0E1VixHQUNBNFYsVUFBQTlqQixHQXNCQSxNQVpBLGlCQUFBQSxLQUFBLEVBQUF4RixFQUFBLFNBQUFzcEIsRUFBQTlKLGFBQUFoYSxFQUFBZ2EsZ0JBQ0E5TCxFQUFBOEwsYUFBQWhhLEVBQUFnYSxlQUdBLEVBQUF4ZixFQUFBLFVBQUFzcEIsRUFBQXRlLFlBQWdFdUksU0FBQS9OLEVBQUF3RixZQUFrQ3VJLFdBQ2xHRyxFQUFBMlYsV0FBQSxFQUFBNVgsRUFBQXZHLG1CQUFBMUYsRUFBQXdGLE9BQUF1SSxVQUdBLDBCQUFBdkksSUFDQTBJLEVBQUErVSxRQUFBemQsRUFBQW9lLHVCQUdBMVYsTUFJQXNVLEVBN1RBLEdBZ1VBQSxFQUFBamlCLGNBQ0FxTixhQUFBLGFBQ0FwSSxZQUVBLEVBQUF2RCxFQUFBbUIsVUFBQW9mLEdBQ0EsSUFBQXRvQixFQUFBc29CLEVBQ0F4dEIsRUFBQSxRQUFBa0Ysd0JDdllBLElBQUF5ckIsRUFBY3Z3QixFQUFRLE1BUXRCMEUsRUFBQTlFLFFBQUEsU0FBQXNRLEVBQUFzZ0IsRUFBQTFuQixHQUtBLElBSkFBLEtBQUEybkIsU0FFQXZnQixHQUFhbE0sV0FBQWtNLElBRWJBLElBQUFsTSxhQUFBa00sSUFBQXBILEdBQ0EsR0FBQXluQixFQUFBcmdCLEVBQUFzZ0IsR0FDQSxPQUFBdGdCLHNDQzZCQXhMLEVBQUE5RSxRQXJDQSxTQUFBOHdCLEVBQUFGLEdBRUEsSUFBQTlHLEVBQUE1b0IsT0FBQTZ2QixRQUFBeHNCLFVBQ0F5c0IsRUFBQWxILEVBQUE2RyxTQUNBN0csRUFBQW1ILG9CQUNBbkgsRUFBQW9ILG1CQUNBcEgsRUFBQXFILGtCQUNBckgsRUFBQXNILHNCQUVBLElBQUFOLEdBQUEsSUFBQUEsRUFBQXprQixTQUNBLFNBR0EsSUFBQWdsQixFQUFBUCxFQUFBMXNCLFdBR0EsR0FBQTRzQixFQUNBLE9BQUFBLEVBQUF2c0IsS0FBQXFzQixFQUFBRixHQU9BLElBSEEsSUFBQVUsRUFBQUQsRUFBQUUsaUJBQUFYLEdBQ0FZLEVBQUFGLEVBQUEzd0IsT0FFQUQsRUFBQSxFQUFpQkEsRUFBQTh3QixFQUFTOXdCLElBQzFCLEdBQUE0d0IsRUFBQTV3QixLQUFBb3dCLEVBQ0EsU0FJQSw2Q0N2Q0FoeEIsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsZUFFQSxJQUFBbUYsRUFBQUMsRUFBb0NoRixFQUFRLElBRTVDaUYsRUFBQUQsRUFBd0NoRixFQUFRLElBRWhENk0sRUFBNkI3TSxFQUFRLEtBRXJDbUYsRUFBQXBGLEVBQXlDQyxFQUFRLEtBRWpEb0YsRUFBQXJGLEVBQTJDQyxFQUFRLE9BRW5EMFEsRUFBQTNRLEVBQW1DQyxFQUFRLEtBRTNDMkUsRUFBQTVFLEVBQXVDQyxFQUFRLE9BRS9DcUYsRUFBc0JyRixFQUFRLElBRTlCLFNBQUFELEVBQUErQyxHQUFzQyxPQUFBQSxLQUFBQyxXQUFBRCxHQUF1Q0UsUUFBQUYsR0FFN0UsU0FBQXdDLElBQXFDLHNCQUFBQyxRQUFBLFlBQWdELElBQUFDLEVBQUEsSUFBQUQsUUFBNkcsT0FBbEZELEVBQUEsV0FBaUUsT0FBQUUsR0FBaUJBLEVBRWxNLFNBQUFSLEVBQUFsQyxHQUF1QyxHQUFBQSxLQUFBQyxXQUE2QixPQUFBRCxFQUFjLElBQUEwQyxFQUFBRixJQUF3QyxHQUFBRSxLQUFBQyxJQUFBM0MsR0FBK0IsT0FBQTBDLEVBQUFFLElBQUE1QyxHQUF5QixJQUFBNkMsS0FBaUIsU0FBQTdDLEVBQUEsQ0FBbUIsSUFBQThDLEVBQUFsRyxPQUFBQyxnQkFBQUQsT0FBQW1HLHlCQUFzRixRQUFBckYsS0FBQXNDLEVBQXVCLEdBQUFwRCxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBdkIsRUFBQXRDLEdBQUEsQ0FBc0QsSUFBQXVGLEVBQUFILEVBQUFsRyxPQUFBbUcseUJBQUEvQyxFQUFBdEMsR0FBQSxLQUFxRnVGLE1BQUFMLEtBQUFLLEVBQUFDLEtBQXNDdEcsT0FBQUMsZUFBQWdHLEVBQUFuRixFQUFBdUYsR0FBbURKLEVBQUFuRixHQUFBc0MsRUFBQXRDLElBQWdHLE9BQWhFbUYsRUFBQSxRQUFBN0MsRUFBeUIwQyxHQUFhQSxFQUFBUSxJQUFBbEQsRUFBQTZDLEdBQTBCQSxFQUV2b0IsU0FBQU0sRUFBQW5ELEdBQXdVLE9BQXRPbUQsRUFBM0UsbUJBQUFDLFFBQUEsaUJBQUFBLE9BQUFDLFNBQTJFLFNBQUFyRCxHQUFrQyxjQUFBQSxHQUErQixTQUFBQSxHQUFrQyxPQUFBQSxHQUFBLG1CQUFBb0QsUUFBQXBELEVBQUFzRCxjQUFBRixRQUFBcEQsSUFBQW9ELE9BQUEvQixVQUFBLGdCQUFBckIsSUFBbUlBLEdBRXhVLFNBQUEyRCxJQUFtUixPQUE5UEEsRUFBQS9HLE9BQUFnSCxRQUFBLFNBQUFDLEdBQWdELFFBQUFyRyxFQUFBLEVBQWdCQSxFQUFBc0csVUFBQXJHLE9BQXNCRCxJQUFBLENBQU8sSUFBQXVHLEVBQUFELFVBQUF0RyxHQUEyQixRQUFBRSxLQUFBcUcsRUFBMEJuSCxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0MsRUFBQXJHLEtBQXlEbUcsRUFBQW5HLEdBQUFxRyxFQUFBckcsSUFBaUMsT0FBQW1HLElBQWtCRyxNQUFBQyxLQUFBSCxXQUVuUixTQUFBa0osRUFBQVQsR0FBa0MsT0FNbEMsU0FBQUEsR0FBa0MsR0FBQW5MLE1BQUFvTCxRQUFBRCxHQUFBLENBQTBCLFFBQUEvTyxFQUFBLEVBQUFpUCxFQUFBLElBQUFyTCxNQUFBbUwsRUFBQTlPLFFBQThDRCxFQUFBK08sRUFBQTlPLE9BQWdCRCxJQUFPaVAsRUFBQWpQLEdBQUErTyxFQUFBL08sR0FBb0IsT0FBQWlQLEdBTm5IQyxDQUFBSCxJQUlsQyxTQUFBSSxHQUFpQyxHQUFBdkosT0FBQUMsWUFBQXpHLE9BQUErUCxJQUFBLHVCQUFBL1AsT0FBQXlFLFVBQUF1TCxTQUFBckwsS0FBQW9MLEdBQUEsT0FBQXZMLE1BQUF5TCxLQUFBRixHQUpDRyxDQUFBUCxJQUVsQyxXQUErQixVQUFBN0csVUFBQSxtREFGR3FILEdBVWxDLFNBQUE3SSxFQUFBTCxFQUFBeEUsR0FBMkMsUUFBQTdCLEVBQUEsRUFBZ0JBLEVBQUE2QixFQUFBNUIsT0FBa0JELElBQUEsQ0FBTyxJQUFBMkcsRUFBQTlFLEVBQUE3QixHQUEyQjJHLEVBQUFYLFdBQUFXLEVBQUFYLGFBQUEsRUFBd0RXLEVBQUFWLGNBQUEsRUFBZ0MsVUFBQVUsTUFBQVQsVUFBQSxHQUF1RDlHLE9BQUFDLGVBQUFnSCxFQUFBTSxFQUFBekcsSUFBQXlHLElBTTlQLFNBQUFDLEVBQUFDLEdBQWdMLE9BQW5KRCxFQUFBeEgsT0FBQTBILGVBQUExSCxPQUFBMkgsZUFBQSxTQUFBRixHQUFnRyxPQUFBQSxFQUFBRyxXQUFBNUgsT0FBQTJILGVBQUFGLEtBQW1EQSxHQUVoTCxTQUFBSSxFQUFBQyxHQUF1QyxZQUFBQSxFQUF1QixVQUFBQyxlQUFBLDZEQUF5RixPQUFBRCxFQUl2SixTQUFBRSxFQUFBUCxFQUFBUSxHQUEwSSxPQUExR0QsRUFBQWhJLE9BQUEwSCxnQkFBQSxTQUFBRCxFQUFBUSxHQUE2RixPQUFqQlIsRUFBQUcsVUFBQUssRUFBaUJSLElBQWFBLEVBQUFRLEdBRTFJLElBQUFDLEVBQUEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBQyxLQUVBLFFBQUFKLEtBQUFFLEVBQ0FuSSxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0QsRUFBQUYsSUFBQUcsRUFBQUUsUUFBQUwsR0FBQSxJQUFBSSxFQUFBSixHQUFBRSxFQUFBRixJQUdBLFNBQUFFLEdBQUEsbUJBQUFuSSxPQUFBdUksc0JBQUEsS0FBQTNILEVBQUEsTUFBQXFILEVBQUFqSSxPQUFBdUksc0JBQUFKLEdBQTJIdkgsRUFBQXFILEVBQUFwSCxPQUFjRCxJQUN6SXdILEVBQUFFLFFBQUFMLEVBQUFySCxJQUFBLEdBQUFaLE9BQUF5RSxVQUFBK0QscUJBQUE3RCxLQUFBd0QsRUFBQUYsRUFBQXJILE1BQUF5SCxFQUFBSixFQUFBckgsSUFBQXVILEVBQUFGLEVBQUFySCxLQUVBLE9BQUF5SCxHQUdBc3BCLEVBRUEsU0FBQWpwQixHQUdBLFNBQUFpcEIsRUFBQWx2QixHQUNBLElBQUFrRyxFQTJHQSxPQTlJQSxTQUFBQyxFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQXFDM0ZDLENBQUExQixLQUFBc3FCLElBRUFocEIsRUFqQ0EsU0FBQWIsRUFBQW5ELEdBQWlELE9BQUFBLEdBQUEsV0FBQTRCLEVBQUE1QixJQUFBLG1CQUFBQSxFQUF5RmtELEVBQUFDLEdBQWZuRCxFQWlDM0hxRSxDQUFBM0IsS0FBQUcsRUFBQW1xQixHQUFBaHRCLEtBQUEwQyxLQUFBNUUsS0FFQTBMLFlBQUEsU0FBQWhPLEdBQ0F3SSxFQUFBK0wsU0FBQSxTQUFBbkwsR0FFQSxPQUNBcW9CLGlCQUZBcm9CLEVBQUFxb0IsaUJBRUEzVyxPQUFBLFNBQUFvVixHQUNBLE9BQUFBLElBQUFsd0IsUUFNQXdJLEVBQUFvRixjQUFBLFNBQUE1TixHQUNBd0ksRUFBQStMLFNBQUEsU0FBQTBJLEdBQ0EsSUFBQXdVLEVBQUF4VSxFQUFBd1UsaUJBQ0EsT0FDQUEsb0JBQUF4bkIsT0FBQWdHLEVBQUF3aEIsSUFBQXp4QixRQUtBd0ksRUFBQStFLGFBQUEsU0FBQW1rQixHQUNBLElBQUFELEVBQUFqcEIsRUFBQTBDLE1BQUF1bUIsaUJBRUFFLEVBQUFucEIsRUFBQTBDLE1BQUFsTCxNQUFBbUksUUFBQXVwQixFQUFBMXhCLE9BRUFBLEVBQUFpUSxFQUFBekgsRUFBQTBDLE1BQUFsTCxRQUVBLElBQUEyeEIsRUFDQTN4QixFQUFBdUQsS0FBQW11QixFQUFBMXhCLE9BRUFBLEVBQUF1YixPQUFBb1csRUFBQSxHQUdBLFVBQUFucEIsRUFBQWxHLE9BQ0FrRyxFQUFBK0wsVUFDQXZVLFVBSUEsSUFBQWdKLEVBQUFSLEVBQUFsRyxNQUFBMEcsU0FFQSxHQUFBQSxFQUFBLENBQ0EsSUFBQTRvQixFQUFBcHBCLEVBQUFxcEIsYUFFQTdvQixFQUFBaEosRUFBQThhLE9BQUEsU0FBQW9WLEdBQ0EsV0FBQXVCLEVBQUF0cEIsUUFBQStuQixLQUNTNU0sS0FBQSxTQUFBeE4sRUFBQThLLEdBT1QsT0FOQWdSLEVBQUExWCxVQUFBLFNBQUE0WCxHQUNBLE9BQUFBLEVBQUE5eEIsUUFBQThWLElBRUE4YixFQUFBMVgsVUFBQSxTQUFBNFgsR0FDQSxPQUFBQSxFQUFBOXhCLFFBQUE0Z0IsU0FPQXBZLEVBQUF1cEIsWUFBQSxTQUFBbGtCLEdBQ0EsSUFBQXZFLEVBQUF1RSxFQUFBdkUsYUFFQUMsRUFBQTdCLEVBQUFjLEdBQ0FsRyxFQUFBaUgsRUFBQWpILE1BQ0E0SSxFQUFBM0IsRUFBQTJCLE1BRUExQixFQUFBbEgsRUFBQW1ILFVBQ0FDLEVBQUFwSCxFQUFBb0gsVUFDQTFJLEVBQUFzQixFQUFBdEIsTUFDQTR3QixFQUFBdHZCLEVBQUFzdkIsUUFDQWpvQixFQUFBNUIsRUFBQXpGLEdBQUEsNENBRUFtSCxFQUFBSCxFQUFBLFdBQUFFLEdBQ0F3b0IsRUFBQSxHQUFBL25CLE9BQUFSLEVBQUEsVUFDQXdvQixHQUFBLEVBQUFwaEIsRUFBQSxTQUFBbEgsR0FBQSwwREFDQXJKLEVBQUFnQyxFQUFBaEMsU0FFQXN4QixLQUFBbHhCLE9BQUEsSUFDQUosRUFBQWtJLEVBQUFxcEIsYUFBQTFpQixJQUFBLFNBQUF1aUIsR0FDQSxPQUFBeHNCLEVBQUFnRixjQUFBcEYsRUFBQSxTQUNBMkUsWUFDQTlJLElBQUErd0IsRUFBQTF4QixNQUFBNlAsV0FDQTlGLFNBQUEsYUFBQTJuQixJQUFBM25CLFNBQUF6SCxFQUFBeUgsU0FDQS9KLE1BQUEweEIsRUFBQTF4QixNQUNBOEosU0FBQSxJQUFBb0IsRUFBQWxMLE1BQUFtSSxRQUFBdXBCLEVBQUExeEIsT0FDQWdKLFNBQUEwb0IsRUFBQTFvQixTQUNBVSxVQUFBLEdBQUFPLE9BQUErbkIsRUFBQSxVQUNXTixFQUFBbGtCLFVBSVgsSUFBQUMsR0FBQSxFQUFBbkksRUFBQSxTQUFBMHNCLEVBQUF0b0IsR0FDQSxPQUFBeEUsRUFBQWdGLGNBQUEsTUFBQXRELEdBQ0E4QyxVQUFBK0QsRUFDQXpNLFNBQ09peEIsR0FBQTN4QixJQUdQa0ksRUFBQTBDLE9BQ0FsTCxNQUFBc0MsRUFBQXRDLE9BQUFzQyxFQUFBNHZCLGlCQUNBVCxxQkFFQWpwQixFQXlEQSxPQTNMQSxTQUFBK0IsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQTdCLFVBQUEsc0RBQTZFNEIsRUFBQWpHLFVBQUF6RSxPQUFBNEssT0FBQUQsS0FBQWxHLFdBQXlFaUMsYUFBZXZHLE1BQUF1SyxFQUFBNUQsVUFBQSxFQUFBRCxjQUFBLEtBQTBEOEQsR0FBQTNDLEVBQUEwQyxFQUFBQyxHQW9CeFVFLENBQUE4bUIsRUF3S0N0c0IsRUFBQXlGLFdBcE1ELFNBQUFqQyxFQUFBa0MsRUFBQUMsR0FBNkRELEdBQUF6RCxFQUFBdUIsRUFBQXBFLFVBQUFzRyxHQUFzRUMsR0FBQTFELEVBQUF1QixFQUFBbUMsR0E2SW5JQyxDQUFBMG1CLElBQ0E3d0IsSUFBQSxrQkFDQVgsTUFBQSxXQUNBLE9BQ0FxTixlQUNBRSxhQUFBckcsS0FBQXFHLGFBQ0F2TixNQUFBa0gsS0FBQWdFLE1BQUFsTCxNQUNBK0osU0FBQTdDLEtBQUE1RSxNQUFBeUgsU0FDQUYsS0FBQTNDLEtBQUE1RSxNQUFBdUgsS0FFQStELGNBQUExRyxLQUFBMEcsY0FDQUksWUFBQTlHLEtBQUE4RyxpQkFLQXJOLElBQUEsd0JBQ0FYLE1BQUEsU0FBQStLLEVBQUFDLEdBQ0EsVUFBQXpGLEVBQUEsU0FBQTJCLEtBQUE1RSxNQUFBeUksTUFBQSxFQUFBeEYsRUFBQSxTQUFBMkIsS0FBQWdFLE1BQUFGLE1BR0FySyxJQUFBLGFBQ0FYLE1BQUEsV0FHQSxPQUZBa0gsS0FBQTVFLE1BQUFzdkIsUUFFQXppQixJQUFBLFNBQUF1aUIsR0FDQSx1QkFBQUEsR0FFQWxrQixNQUFBa2tCLEVBQ0ExeEIsTUFBQTB4QixHQUlBQSxPQUlBL3dCLElBQUEsU0FDQVgsTUFBQSxXQUNBLE9BQUFrRixFQUFBZ0YsY0FBQTFFLEVBQUE2RixlQUFBLEtBQUFuRSxLQUFBNnFCLGtCQUdBcHhCLElBQUEsMkJBQ0FYLE1BQUEsU0FBQStLLEdBQ0EsZ0JBQUFBLEdBRUEvSyxNQUFBK0ssRUFBQS9LLFdBSUEsU0FJQXd4QixFQXhLQSxHQTJLQUEsRUFBQWxtQixjQUNBc21CLFlBRUFKLEVBQUF2ZCxXQUNBaWUsYUFBQTlzQixFQUFBeUosTUFDQTdPLE1BQUFvRixFQUFBeUosTUFDQStpQixRQUFBeHNCLEVBQUF5SixNQUFBc2pCLFdBQ0FucEIsU0FBQTVELEVBQUErUSxNQUVBcWIsRUFBQVksbUJBQ0Eva0IsY0FBQWpJLEVBQUFxRyxNQUVBLEVBQUF1QixFQUFBbUIsVUFBQXFqQixHQUNBLElBQUF2c0IsRUFBQXVzQixFQUNBenhCLEVBQUEsUUFBQWtGLHFDQy9QQXBGLE9BQUFDLGVBQUFDLEVBQUEsY0FDQUMsT0FBQSxJQUVBRCxFQUFBLGVBRUEsSUFBQW1GLEVBQUFDLEVBQW9DaEYsRUFBUSxJQUU1Q2lGLEVBQUFELEVBQXdDaEYsRUFBUSxJQUVoRG1GLEVBQUFwRixFQUF5Q0MsRUFBUSxLQUVqRG9GLEVBQUFyRixFQUEyQ0MsRUFBUSxPQUVuRDZNLEVBQTZCN00sRUFBUSxLQUVyQ21PLEVBQUFwTyxFQUFvQ0MsRUFBUSxPQUU1Q3FGLEVBQXNCckYsRUFBUSxJQUU5QixTQUFBRCxFQUFBK0MsR0FBc0MsT0FBQUEsS0FBQUMsV0FBQUQsR0FBdUNFLFFBQUFGLEdBRTdFLFNBQUF3QyxJQUFxQyxzQkFBQUMsUUFBQSxZQUFnRCxJQUFBQyxFQUFBLElBQUFELFFBQTZHLE9BQWxGRCxFQUFBLFdBQWlFLE9BQUFFLEdBQWlCQSxFQUVsTSxTQUFBUixFQUFBbEMsR0FBdUMsR0FBQUEsS0FBQUMsV0FBNkIsT0FBQUQsRUFBYyxJQUFBMEMsRUFBQUYsSUFBd0MsR0FBQUUsS0FBQUMsSUFBQTNDLEdBQStCLE9BQUEwQyxFQUFBRSxJQUFBNUMsR0FBeUIsSUFBQTZDLEtBQWlCLFNBQUE3QyxFQUFBLENBQW1CLElBQUE4QyxFQUFBbEcsT0FBQUMsZ0JBQUFELE9BQUFtRyx5QkFBc0YsUUFBQXJGLEtBQUFzQyxFQUF1QixHQUFBcEQsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXZCLEVBQUF0QyxHQUFBLENBQXNELElBQUF1RixFQUFBSCxFQUFBbEcsT0FBQW1HLHlCQUFBL0MsRUFBQXRDLEdBQUEsS0FBcUZ1RixNQUFBTCxLQUFBSyxFQUFBQyxLQUFzQ3RHLE9BQUFDLGVBQUFnRyxFQUFBbkYsRUFBQXVGLEdBQW1ESixFQUFBbkYsR0FBQXNDLEVBQUF0QyxJQUFnRyxPQUFoRW1GLEVBQUEsUUFBQTdDLEVBQXlCMEMsR0FBYUEsRUFBQVEsSUFBQWxELEVBQUE2QyxHQUEwQkEsRUFFdm9CLFNBQUFNLEVBQUFuRCxHQUF3VSxPQUF0T21ELEVBQTNFLG1CQUFBQyxRQUFBLGlCQUFBQSxPQUFBQyxTQUEyRSxTQUFBckQsR0FBa0MsY0FBQUEsR0FBK0IsU0FBQUEsR0FBa0MsT0FBQUEsR0FBQSxtQkFBQW9ELFFBQUFwRCxFQUFBc0QsY0FBQUYsUUFBQXBELElBQUFvRCxPQUFBL0IsVUFBQSxnQkFBQXJCLElBQW1JQSxHQU14VSxTQUFBa0UsRUFBQUwsRUFBQXhFLEdBQTJDLFFBQUE3QixFQUFBLEVBQWdCQSxFQUFBNkIsRUFBQTVCLE9BQWtCRCxJQUFBLENBQU8sSUFBQTJHLEVBQUE5RSxFQUFBN0IsR0FBMkIyRyxFQUFBWCxXQUFBVyxFQUFBWCxhQUFBLEVBQXdEVyxFQUFBVixjQUFBLEVBQWdDLFVBQUFVLE1BQUFULFVBQUEsR0FBdUQ5RyxPQUFBQyxlQUFBZ0gsRUFBQU0sRUFBQXpHLElBQUF5RyxJQU05UCxTQUFBQyxFQUFBQyxHQUFnTCxPQUFuSkQsRUFBQXhILE9BQUEwSCxlQUFBMUgsT0FBQTJILGVBQUEsU0FBQUYsR0FBZ0csT0FBQUEsRUFBQUcsV0FBQTVILE9BQUEySCxlQUFBRixLQUFtREEsR0FFaEwsU0FBQUksRUFBQUMsR0FBdUMsWUFBQUEsRUFBdUIsVUFBQUMsZUFBQSw2REFBeUYsT0FBQUQsRUFJdkosU0FBQUUsRUFBQVAsRUFBQVEsR0FBMEksT0FBMUdELEVBQUFoSSxPQUFBMEgsZ0JBQUEsU0FBQUQsRUFBQVEsR0FBNkYsT0FBakJSLEVBQUFHLFVBQUFLLEVBQWlCUixJQUFhQSxFQUFBUSxHQUUxSSxTQUFBdXFCLEVBQUEveEIsR0FDQSxJQUFBTixFQUFBLEtBQ0FzeUIsR0FBQSxFQU9BLE9BTkFwdEIsRUFBQTlCLFNBQUFDLFFBQUEvQyxFQUFBLFNBQUFpeUIsR0FDQUEsS0FBQWp3QixPQUFBaXdCLEVBQUFqd0IsTUFBQXdILFVBQ0E5SixFQUFBdXlCLEVBQUFqd0IsTUFBQXRDLE1BQ0FzeUIsR0FBQSxLQUdBQSxHQUNBdHlCLGNBQ0dzSyxFQUdILElBQUFrb0IsRUFFQSxTQUFBanFCLEdBR0EsU0FBQWlxQixFQUFBbHdCLEdBQ0EsSUFBQWtHLEVBd0VBeEksRUFFQSxHQTlHQSxTQUFBeUksRUFBQUMsR0FBaUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQUMsVUFBQSxxQ0FzQzNGQyxDQUFBMUIsS0FBQXNyQixJQUVBaHFCLEVBbENBLFNBQUFiLEVBQUFuRCxHQUFpRCxPQUFBQSxHQUFBLFdBQUE0QixFQUFBNUIsSUFBQSxtQkFBQUEsRUFBeUZrRCxFQUFBQyxHQUFmbkQsRUFrQzNIcUUsQ0FBQTNCLEtBQUFHLEVBQUFtckIsR0FBQWh1QixLQUFBMEMsS0FBQTVFLEtBRUFtd0IsY0FBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUFucUIsRUFBQTBDLE1BQUFsTCxNQUNBQSxFQUFBMHlCLEVBQUE1ckIsT0FBQTlHLE1BRUEsVUFBQXdJLEVBQUFsRyxPQUNBa0csRUFBQStMLFVBQ0F2VSxVQUlBLElBQUFnSixFQUFBUixFQUFBbEcsTUFBQTBHLFNBRUFBLEdBQUFoSixJQUFBMnlCLEdBQ0EzcEIsRUFBQTBwQixJQUlBbHFCLEVBQUF1cEIsWUFBQSxTQUFBM29CLEdBQ0EsSUFBQUUsRUFBQUYsRUFBQUUsYUFHQWhILEVBREFvRixFQUFBYyxHQUNBbEcsTUFFQWtILEVBQUFsSCxFQUFBbUgsVUFDQW1wQixFQUFBdHdCLEVBQUFvSCxVQUNBQSxPQUFBLElBQUFrcEIsRUFBQSxHQUFBQSxFQUNBaEIsRUFBQXR2QixFQUFBc3ZCLFFBQ0FpQixFQUFBdndCLEVBQUF1d0IsWUFDQXBwQixFQUFBSCxFQUFBLFFBQUFFLEdBQ0F3b0IsRUFBQSxHQUFBL25CLE9BQUFSLEVBQUEsVUFDQWdFLEdBQUEsRUFBQW5JLEVBQUEsU0FBQTBzQixFQUFBLEdBQUEvbkIsT0FBQStuQixFQUFBLEtBQUEvbkIsT0FBQTRvQixHQTFFQSxTQUFBNXZCLEVBQUF0QyxFQUFBWCxHQUFtTSxPQUF4SlcsS0FBQXNDLEVBQWtCcEQsT0FBQUMsZUFBQW1ELEVBQUF0QyxHQUFrQ1gsUUFBQXlHLFlBQUEsRUFBQUMsY0FBQSxFQUFBQyxVQUFBLElBQWdGMUQsRUFBQXRDLEdBQUFYLEVBQW9CaUQsRUEwRW5NdUQsSUFBMEksR0FBQXlELE9BQUErbkIsRUFBQSxLQUFBL25CLE9BQUEzSCxFQUFBNk8sTUFBQTdPLEVBQUE2TyxNQUFBekgsR0FDMUlwSixFQUFBZ0MsRUFBQWhDLFNBMEJBLE9BeEJBc3hCLEtBQUFseEIsT0FBQSxJQUNBSixFQUFBc3hCLEVBQUF6aUIsSUFBQSxTQUFBdWlCLEdBQ0EsdUJBQUFBLEVBRUF4c0IsRUFBQWdGLGNBQUFvRSxFQUFBLFNBQ0EzTixJQUFBK3dCLEVBQ0Fqb0IsWUFDQU0sU0FBQXZCLEVBQUFsRyxNQUFBeUgsU0FDQS9KLE1BQUEweEIsRUFDQTVuQixRQUFBdEIsRUFBQTBDLE1BQUFsTCxRQUFBMHhCLEdBQ2FBLEdBSWJ4c0IsRUFBQWdGLGNBQUFvRSxFQUFBLFNBQ0EzTixJQUFBLDZCQUFBc0osT0FBQXluQixFQUFBMXhCLE9BQ0F5SixZQUNBTSxTQUFBMm5CLEVBQUEzbkIsVUFBQXZCLEVBQUFsRyxNQUFBeUgsU0FDQS9KLE1BQUEweEIsRUFBQTF4QixNQUNBOEosUUFBQXRCLEVBQUEwQyxNQUFBbEwsUUFBQTB4QixFQUFBMXhCLE9BQ1cweEIsRUFBQWxrQixVQUlYdEksRUFBQWdGLGNBQUEsT0FDQVIsVUFBQStELEVBQ0F6TSxNQUFBc0IsRUFBQXRCLE1BQ0FtSixhQUFBN0gsRUFBQTZILGFBQ0FDLGFBQUE5SCxFQUFBOEgsYUFDQXVILEdBQUFyUCxFQUFBcVAsSUFDT3JSLElBS1AsVUFBQWdDLEVBQ0F0QyxFQUFBc0MsRUFBQXRDLFdBQ0ssb0JBQUFzQyxFQUNMdEMsRUFBQXNDLEVBQUE0dkIsaUJBQ0ssQ0FDTCxJQUFBWSxFQUFBVCxFQUFBL3ZCLEVBQUFoQyxVQUNBTixFQUFBOHlCLEtBQUE5eUIsTUFNQSxPQUhBd0ksRUFBQTBDLE9BQ0FsTCxTQUVBd0ksRUE4Q0EsT0E1SkEsU0FBQStCLEVBQUFDLEdBQTBDLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUE3QixVQUFBLHNEQUE2RTRCLEVBQUFqRyxVQUFBekUsT0FBQTRLLE9BQUFELEtBQUFsRyxXQUF5RWlDLGFBQWV2RyxNQUFBdUssRUFBQTVELFVBQUEsRUFBQUQsY0FBQSxLQUEwRDhELEdBQUEzQyxFQUFBMEMsRUFBQUMsR0FxQnhVRSxDQUFBOG5CLEVBd0lDdHRCLEVBQUF5RixXQXJLRCxTQUFBakMsRUFBQWtDLEVBQUFDLEdBQTZERCxHQUFBekQsRUFBQXVCLEVBQUFwRSxVQUFBc0csR0FBc0VDLEdBQUExRCxFQUFBdUIsRUFBQW1DLEdBeUhuSUMsQ0FBQTBuQixJQUNBN3hCLElBQUEsa0JBQ0FYLE1BQUEsV0FDQSxPQUNBa0osWUFDQUYsU0FBQTlCLEtBQUF1ckIsY0FDQXp5QixNQUFBa0gsS0FBQWdFLE1BQUFsTCxNQUNBK0osU0FBQTdDLEtBQUE1RSxNQUFBeUgsU0FDQUYsS0FBQTNDLEtBQUE1RSxNQUFBdUgsVUFLQWxKLElBQUEsd0JBQ0FYLE1BQUEsU0FBQStLLEVBQUFDLEdBQ0EsVUFBQXpGLEVBQUEsU0FBQTJCLEtBQUE1RSxNQUFBeUksTUFBQSxFQUFBeEYsRUFBQSxTQUFBMkIsS0FBQWdFLE1BQUFGLE1BR0FySyxJQUFBLFNBQ0FYLE1BQUEsV0FDQSxPQUFBa0YsRUFBQWdGLGNBQUExRSxFQUFBNkYsZUFBQSxLQUFBbkUsS0FBQTZxQixrQkFHQXB4QixJQUFBLDJCQUNBWCxNQUFBLFNBQUErSyxHQUNBLGFBQUFBLEVBQ0EsT0FDQS9LLE1BQUErSyxFQUFBL0ssT0FJQSxJQUFBOHlCLEVBQUFULEVBQUF0bkIsRUFBQXpLLFVBRUEsT0FBQXd5QixHQUVBOXlCLE1BQUE4eUIsRUFBQTl5QixPQUlBLFNBSUF3eUIsRUF4SUEsR0EySUFBLEVBQUFsbkIsY0FDQXVuQixZQUFBLFdBRUFMLEVBQUFKLG1CQUNBbHBCLFdBQUE5RCxFQUFBcUcsTUFFQSxFQUFBdUIsRUFBQW1CLFVBQUFxa0IsR0FDQSxJQUFBdnRCLEVBQUF1dEIsRUFDQXp5QixFQUFBLFFBQUFrRixxQ0NoTkFwRixPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFFQUQsRUFBQSxlQUVBLElBQUFtRixFQUFBQyxFQUFvQ2hGLEVBQVEsSUFFNUNpRixFQUFBRCxFQUF3Q2hGLEVBQVEsSUFFaERtTyxFQUlBLFNBQUFyTCxHQUFzQyxPQUFBQSxLQUFBQyxXQUFBRCxHQUF1Q0UsUUFBQUYsR0FKN0UvQyxDQUFvQ0MsRUFBUSxPQUU1Q3FGLEVBQXNCckYsRUFBUSxJQUk5QixTQUFBc0YsSUFBcUMsc0JBQUFDLFFBQUEsWUFBZ0QsSUFBQUMsRUFBQSxJQUFBRCxRQUE2RyxPQUFsRkQsRUFBQSxXQUFpRSxPQUFBRSxHQUFpQkEsRUFFbE0sU0FBQVIsRUFBQWxDLEdBQXVDLEdBQUFBLEtBQUFDLFdBQTZCLE9BQUFELEVBQWMsSUFBQTBDLEVBQUFGLElBQXdDLEdBQUFFLEtBQUFDLElBQUEzQyxHQUErQixPQUFBMEMsRUFBQUUsSUFBQTVDLEdBQXlCLElBQUE2QyxLQUFpQixTQUFBN0MsRUFBQSxDQUFtQixJQUFBOEMsRUFBQWxHLE9BQUFDLGdCQUFBRCxPQUFBbUcseUJBQXNGLFFBQUFyRixLQUFBc0MsRUFBdUIsR0FBQXBELE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF2QixFQUFBdEMsR0FBQSxDQUFzRCxJQUFBdUYsRUFBQUgsRUFBQWxHLE9BQUFtRyx5QkFBQS9DLEVBQUF0QyxHQUFBLEtBQXFGdUYsTUFBQUwsS0FBQUssRUFBQUMsS0FBc0N0RyxPQUFBQyxlQUFBZ0csRUFBQW5GLEVBQUF1RixHQUFtREosRUFBQW5GLEdBQUFzQyxFQUFBdEMsSUFBZ0csT0FBaEVtRixFQUFBLFFBQUE3QyxFQUF5QjBDLEdBQWFBLEVBQUFRLElBQUFsRCxFQUFBNkMsR0FBMEJBLEVBRXZvQixTQUFBTSxFQUFBbkQsR0FBd1UsT0FBdE9tRCxFQUEzRSxtQkFBQUMsUUFBQSxpQkFBQUEsT0FBQUMsU0FBMkUsU0FBQXJELEdBQWtDLGNBQUFBLEdBQStCLFNBQUFBLEdBQWtDLE9BQUFBLEdBQUEsbUJBQUFvRCxRQUFBcEQsRUFBQXNELGNBQUFGLFFBQUFwRCxJQUFBb0QsT0FBQS9CLFVBQUEsZ0JBQUFyQixJQUFtSUEsR0FFeFUsU0FBQTJELElBQW1SLE9BQTlQQSxFQUFBL0csT0FBQWdILFFBQUEsU0FBQUMsR0FBZ0QsUUFBQXJHLEVBQUEsRUFBZ0JBLEVBQUFzRyxVQUFBckcsT0FBc0JELElBQUEsQ0FBTyxJQUFBdUcsRUFBQUQsVUFBQXRHLEdBQTJCLFFBQUFFLEtBQUFxRyxFQUEwQm5ILE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF3QyxFQUFBckcsS0FBeURtRyxFQUFBbkcsR0FBQXFHLEVBQUFyRyxJQUFpQyxPQUFBbUcsSUFBa0JHLE1BQUFDLEtBQUFILFdBSW5SLFNBQUFJLEVBQUFMLEVBQUF4RSxHQUEyQyxRQUFBN0IsRUFBQSxFQUFnQkEsRUFBQTZCLEVBQUE1QixPQUFrQkQsSUFBQSxDQUFPLElBQUEyRyxFQUFBOUUsRUFBQTdCLEdBQTJCMkcsRUFBQVgsV0FBQVcsRUFBQVgsYUFBQSxFQUF3RFcsRUFBQVYsY0FBQSxFQUFnQyxVQUFBVSxNQUFBVCxVQUFBLEdBQXVEOUcsT0FBQUMsZUFBQWdILEVBQUFNLEVBQUF6RyxJQUFBeUcsSUFJOVAsU0FBQXlCLEVBQUFsQixFQUFBbkQsR0FBaUQsT0FBQUEsR0FBQSxXQUFBNEIsRUFBQTVCLElBQUEsbUJBQUFBLEVBRWpELFNBQUFtRCxHQUF1QyxZQUFBQSxFQUF1QixVQUFBQyxlQUFBLDZEQUF5RixPQUFBRCxFQUZiRCxDQUFBQyxHQUFmbkQsRUFJM0gsU0FBQTZDLEVBQUFDLEdBQWdMLE9BQW5KRCxFQUFBeEgsT0FBQTBILGVBQUExSCxPQUFBMkgsZUFBQSxTQUFBRixHQUFnRyxPQUFBQSxFQUFBRyxXQUFBNUgsT0FBQTJILGVBQUFGLEtBQW1EQSxHQUloTCxTQUFBTyxFQUFBUCxFQUFBUSxHQUEwSSxPQUExR0QsRUFBQWhJLE9BQUEwSCxnQkFBQSxTQUFBRCxFQUFBUSxHQUE2RixPQUFqQlIsRUFBQUcsVUFBQUssRUFBaUJSLElBQWFBLEVBQUFRLEdBRTFJLElBQUFDLEVBQUEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBQyxLQUVBLFFBQUFKLEtBQUFFLEVBQ0FuSSxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0QsRUFBQUYsSUFBQUcsRUFBQUUsUUFBQUwsR0FBQSxJQUFBSSxFQUFBSixHQUFBRSxFQUFBRixJQUdBLFNBQUFFLEdBQUEsbUJBQUFuSSxPQUFBdUksc0JBQUEsS0FBQTNILEVBQUEsTUFBQXFILEVBQUFqSSxPQUFBdUksc0JBQUFKLEdBQTJIdkgsRUFBQXFILEVBQUFwSCxPQUFjRCxJQUN6SXdILEVBQUFFLFFBQUFMLEVBQUFySCxJQUFBLEdBQUFaLE9BQUF5RSxVQUFBK0QscUJBQUE3RCxLQUFBd0QsRUFBQUYsRUFBQXJILE1BQUF5SCxFQUFBSixFQUFBckgsSUFBQXVILEVBQUFGLEVBQUFySCxLQUVBLE9BQUF5SCxHQUdBNnFCLEVBRUEsU0FBQXhxQixHQUdBLFNBQUF3cUIsSUFDQSxJQUFBdnFCLEVBeUJBLE9BNURBLFNBQUFDLEVBQUFDLEdBQWlELEtBQUFELGFBQUFDLEdBQTBDLFVBQUFDLFVBQUEscUNBcUMzRkMsQ0FBQTFCLEtBQUE2ckIsSUFFQXZxQixFQUFBSyxFQUFBM0IsS0FBQUcsRUFBQTByQixHQUFBOXJCLE1BQUFDLEtBQUFILGFBRUFpc0Isa0JBQUEsU0FBQTVwQixHQUNBLElBQUFFLEVBQUFGLEVBQUFFLGFBRUE2SSxFQUFBM0osRUFBQWxHLE1BQ0FrSCxFQUFBMkksRUFBQTFJLFVBQ0FHLEVBQUE3QixFQUFBb0ssR0FBQSxjQUVBMUksRUFBQUgsRUFBQSxlQUFBRSxHQU9BLE9BTEFoQixFQUFBUyxRQUFBQyxhQUNBVSxFQUFBRSxRQUFBdEIsRUFBQWxHLE1BQUF0QyxRQUFBd0ksRUFBQVMsUUFBQUMsV0FBQWxKLE1BQ0E0SixFQUFBRyxTQUFBdkIsRUFBQWxHLE1BQUF5SCxVQUFBdkIsRUFBQVMsUUFBQUMsV0FBQWEsVUFHQTdFLEVBQUFnRixjQUFBb0UsRUFBQSxRQUFBMUgsR0FDQTZDLGFBQ09HLEtBR1BwQixFQVVBLE9BMURBLFNBQUErQixFQUFBQyxHQUEwQyxzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBN0IsVUFBQSxzREFBNkU0QixFQUFBakcsVUFBQXpFLE9BQUE0SyxPQUFBRCxLQUFBbEcsV0FBeUVpQyxhQUFldkcsTUFBQXVLLEVBQUE1RCxVQUFBLEVBQUFELGNBQUEsS0FBMEQ4RCxHQUFBM0MsRUFBQTBDLEVBQUFDLEdBb0J4VUUsQ0FBQXFvQixFQXVDQzd0QixFQUFBeUYsV0FuRUQsU0FBQWpDLEVBQUFrQyxFQUFBQyxHQUE2REQsR0FBQXpELEVBQUF1QixFQUFBcEUsVUFBQXNHLEdBQXNFQyxHQUFBMUQsRUFBQXVCLEVBQUFtQyxHQTJEbklDLENBQUFpb0IsSUFDQXB5QixJQUFBLFNBQ0FYLE1BQUEsV0FDQSxPQUFBa0YsRUFBQWdGLGNBQUExRSxFQUFBNkYsZUFBQSxLQUFBbkUsS0FBQThyQix1QkFJQUQsRUF2Q0EsR0EwQ0FoekIsRUFBQSxRQUFBZ3pCLEVBQ0FBLEVBQUF2bkIsY0FDQXRDLFdBQUE5RCxFQUFBcUcsd0NDbEdBNUwsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsZUFFQSxJQUFBbUYsRUFJQSxTQUFBakMsR0FBdUMsR0FBQUEsS0FBQUMsV0FBNkIsT0FBQUQsRUFBYyxJQUFBMEMsRUFBQUYsSUFBd0MsR0FBQUUsS0FBQUMsSUFBQTNDLEdBQStCLE9BQUEwQyxFQUFBRSxJQUFBNUMsR0FBeUIsSUFBQTZDLEtBQWlCLFNBQUE3QyxFQUFBLENBQW1CLElBQUE4QyxFQUFBbEcsT0FBQUMsZ0JBQUFELE9BQUFtRyx5QkFBc0YsUUFBQXJGLEtBQUFzQyxFQUF1QixHQUFBcEQsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXZCLEVBQUF0QyxHQUFBLENBQXNELElBQUF1RixFQUFBSCxFQUFBbEcsT0FBQW1HLHlCQUFBL0MsRUFBQXRDLEdBQUEsS0FBcUZ1RixNQUFBTCxLQUFBSyxFQUFBQyxLQUFzQ3RHLE9BQUFDLGVBQUFnRyxFQUFBbkYsRUFBQXVGLEdBQW1ESixFQUFBbkYsR0FBQXNDLEVBQUF0QyxJQUFnQ21GLEVBQUEsUUFBQTdDLEVBQXlCMEMsR0FBYUEsRUFBQVEsSUFBQWxELEVBQUE2QyxHQUEwQixPQUFBQSxFQUp2b0JYLENBQW9DaEYsRUFBUSxJQUU1QyxTQUFBc0YsSUFBcUMsc0JBQUFDLFFBQUEsWUFBZ0QsSUFBQUMsRUFBQSxJQUFBRCxRQUE2RyxPQUFsRkQsRUFBQSxXQUFpRSxPQUFBRSxHQUFpQkEsRUFJbE0sSUFTQVYsRUFUQSxTQUFBM0MsR0FDQSxPQUFBNEMsRUFBQWdGLGNBQUEsT0FDQVIsVUFBQXBILEVBQUFvSCxVQUNBMkwsUUFBQSxTQUFBcE4sR0FDQSxPQUFBQSxFQUFBd00sb0JBRUduUyxFQUFBaEMsV0FJSFAsRUFBQSxRQUFBa0YscUNDaEJBLFNBQUEyQixJQUFtUixPQUE5UEEsRUFBQS9HLE9BQUFnSCxRQUFBLFNBQUFDLEdBQWdELFFBQUFyRyxFQUFBLEVBQWdCQSxFQUFBc0csVUFBQXJHLE9BQXNCRCxJQUFBLENBQU8sSUFBQXVHLEVBQUFELFVBQUF0RyxHQUEyQixRQUFBRSxLQUFBcUcsRUFBMEJuSCxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0MsRUFBQXJHLEtBQXlEbUcsRUFBQW5HLEdBQUFxRyxFQUFBckcsSUFBaUMsT0FBQW1HLElBQWtCRyxNQUFBQyxLQUFBSCxXQUxuUmxILE9BQUFDLGVBQUFDLEVBQUEsY0FDQUMsT0FBQSxJQUVBRCxFQUFBLFFBSUEsU0FBQWt6QixHQUNBLElBQUEvbkIsRUFBQStuQixFQUNBQyxLQXNCQSxPQUNBM2UsU0FyQkEsU0FBQTRlLEdBQ0Fqb0IsRUFBQXRFLE9BQWdDc0UsR0FBQWlvQixHQUVoQyxRQUFBMXlCLEVBQUEsRUFBbUJBLEVBQUF5eUIsRUFBQXh5QixPQUFzQkQsSUFDekN5eUIsRUFBQXp5QixNQWtCQWlaLFNBZEEsV0FDQSxPQUFBeE8sR0FjQWtvQixVQVhBLFNBQUFDLEdBRUEsT0FEQUgsRUFBQTN2QixLQUFBOHZCLEdBQ0EsV0FDQSxJQUFBeHlCLEVBQUFxeUIsRUFBQS9xQixRQUFBa3JCLEdBQ0FILEVBQUEzWCxPQUFBMWEsRUFBQSwwQ0MzQkFoQixPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFFQUQsRUFBQSxlQUVBLElBQUFtRixFQVVBLFNBQUFqQyxHQUF1QyxHQUFBQSxLQUFBQyxXQUE2QixPQUFBRCxFQUFjLElBQUEwQyxFQUFBRixJQUF3QyxHQUFBRSxLQUFBQyxJQUFBM0MsR0FBK0IsT0FBQTBDLEVBQUFFLElBQUE1QyxHQUF5QixJQUFBNkMsS0FBaUIsU0FBQTdDLEVBQUEsQ0FBbUIsSUFBQThDLEVBQUFsRyxPQUFBQyxnQkFBQUQsT0FBQW1HLHlCQUFzRixRQUFBckYsS0FBQXNDLEVBQXVCLEdBQUFwRCxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBdkIsRUFBQXRDLEdBQUEsQ0FBc0QsSUFBQXVGLEVBQUFILEVBQUFsRyxPQUFBbUcseUJBQUEvQyxFQUFBdEMsR0FBQSxLQUFxRnVGLE1BQUFMLEtBQUFLLEVBQUFDLEtBQXNDdEcsT0FBQUMsZUFBQWdHLEVBQUFuRixFQUFBdUYsR0FBbURKLEVBQUFuRixHQUFBc0MsRUFBQXRDLElBQWdDbUYsRUFBQSxRQUFBN0MsRUFBeUIwQyxHQUFhQSxFQUFBUSxJQUFBbEQsRUFBQTZDLEdBQTBCLE9BQUFBLEVBVnZvQlgsQ0FBb0NoRixFQUFRLElBRTVDa3RCLEVBQUFudEIsRUFBdUNDLEVBQVEsT0FFL0NtTyxFQUFBcE8sRUFBb0NDLEVBQVEsT0FFNUMsU0FBQUQsRUFBQStDLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUU3RSxTQUFBd0MsSUFBcUMsc0JBQUFDLFFBQUEsWUFBZ0QsSUFBQUMsRUFBQSxJQUFBRCxRQUE2RyxPQUFsRkQsRUFBQSxXQUFpRSxPQUFBRSxHQUFpQkEsRUFJbE0sU0FBQVMsRUFBQW5ELEdBQXdVLE9BQXRPbUQsRUFBM0UsbUJBQUFDLFFBQUEsaUJBQUFBLE9BQUFDLFNBQTJFLFNBQUFyRCxHQUFrQyxjQUFBQSxHQUErQixTQUFBQSxHQUFrQyxPQUFBQSxHQUFBLG1CQUFBb0QsUUFBQXBELEVBQUFzRCxjQUFBRixRQUFBcEQsSUFBQW9ELE9BQUEvQixVQUFBLGdCQUFBckIsSUFBbUlBLEdBRXhVLFNBQUEyRCxJQUFtUixPQUE5UEEsRUFBQS9HLE9BQUFnSCxRQUFBLFNBQUFDLEdBQWdELFFBQUFyRyxFQUFBLEVBQWdCQSxFQUFBc0csVUFBQXJHLE9BQXNCRCxJQUFBLENBQU8sSUFBQXVHLEVBQUFELFVBQUF0RyxHQUEyQixRQUFBRSxLQUFBcUcsRUFBMEJuSCxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0MsRUFBQXJHLEtBQXlEbUcsRUFBQW5HLEdBQUFxRyxFQUFBckcsSUFBaUMsT0FBQW1HLElBQWtCRyxNQUFBQyxLQUFBSCxXQUluUixTQUFBSSxFQUFBTCxFQUFBeEUsR0FBMkMsUUFBQTdCLEVBQUEsRUFBZ0JBLEVBQUE2QixFQUFBNUIsT0FBa0JELElBQUEsQ0FBTyxJQUFBMkcsRUFBQTlFLEVBQUE3QixHQUEyQjJHLEVBQUFYLFdBQUFXLEVBQUFYLGFBQUEsRUFBd0RXLEVBQUFWLGNBQUEsRUFBZ0MsVUFBQVUsTUFBQVQsVUFBQSxHQUF1RDlHLE9BQUFDLGVBQUFnSCxFQUFBTSxFQUFBekcsSUFBQXlHLElBSTlQLFNBQUF5QixFQUFBbEIsRUFBQW5ELEdBQWlELE9BQUFBLEdBQUEsV0FBQTRCLEVBQUE1QixJQUFBLG1CQUFBQSxFQUVqRCxTQUFBbUQsR0FBdUMsWUFBQUEsRUFBdUIsVUFBQUMsZUFBQSw2REFBeUYsT0FBQUQsRUFGYkQsQ0FBQUMsR0FBZm5ELEVBSTNILFNBQUE2QyxFQUFBQyxHQUFnTCxPQUFuSkQsRUFBQXhILE9BQUEwSCxlQUFBMUgsT0FBQTJILGVBQUEsU0FBQUYsR0FBZ0csT0FBQUEsRUFBQUcsV0FBQTVILE9BQUEySCxlQUFBRixLQUFtREEsR0FJaEwsU0FBQU8sRUFBQVAsRUFBQVEsR0FBMEksT0FBMUdELEVBQUFoSSxPQUFBMEgsZ0JBQUEsU0FBQUQsRUFBQVEsR0FBNkYsT0FBakJSLEVBQUFHLFVBQUFLLEVBQWlCUixJQUFhQSxFQUFBUSxHQUUxSSxJQUFBQyxFQUFBLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsS0FFQSxRQUFBSixLQUFBRSxFQUNBbkksT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXdELEVBQUFGLElBQUFHLEVBQUFFLFFBQUFMLEdBQUEsSUFBQUksRUFBQUosR0FBQUUsRUFBQUYsSUFHQSxTQUFBRSxHQUFBLG1CQUFBbkksT0FBQXVJLHNCQUFBLEtBQUEzSCxFQUFBLE1BQUFxSCxFQUFBakksT0FBQXVJLHNCQUFBSixHQUEySHZILEVBQUFxSCxFQUFBcEgsT0FBY0QsSUFDekl3SCxFQUFBRSxRQUFBTCxFQUFBckgsSUFBQSxHQUFBWixPQUFBeUUsVUFBQStELHFCQUFBN0QsS0FBQXdELEVBQUFGLEVBQUFySCxNQUFBeUgsRUFBQUosRUFBQXJILElBQUF1SCxFQUFBRixFQUFBckgsS0FFQSxPQUFBeUgsR0FHQW9yQixFQUVBLFNBQUEvcUIsR0FHQSxTQUFBK3FCLEVBQUFoeEIsR0FDQSxJQUFBa0csRUFRQSxPQTNDQSxTQUFBQyxFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQXFDM0ZDLENBQUExQixLQUFBb3NCLElBRUE5cUIsRUFBQUssRUFBQTNCLEtBQUFHLEVBQUFpc0IsR0FBQTl1QixLQUFBMEMsS0FBQTVFLEtBQ0E0SSxPQUNBcEIsUUFBQXRCLEVBQUErcUIsY0FBQWp4QixJQUVBa0csRUFxRUEsT0FwR0EsU0FBQStCLEVBQUFDLEdBQTBDLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUE3QixVQUFBLHNEQUE2RTRCLEVBQUFqRyxVQUFBekUsT0FBQTRLLE9BQUFELEtBQUFsRyxXQUF5RWlDLGFBQWV2RyxNQUFBdUssRUFBQTVELFVBQUEsRUFBQUQsY0FBQSxLQUEwRDhELEdBQUEzQyxFQUFBMEMsRUFBQUMsR0FvQnhVRSxDQUFBNG9CLEVBaUZDcHVCLEVBQUF5RixXQTdHRCxTQUFBakMsRUFBQWtDLEVBQUFDLEdBQTZERCxHQUFBekQsRUFBQXVCLEVBQUFwRSxVQUFBc0csR0FBc0VDLEdBQUExRCxFQUFBdUIsRUFBQW1DLEdBMENuSUMsQ0FBQXdvQixJQUNBM3lCLElBQUEsb0JBQ0FYLE1BQUEsV0FDQWtILEtBQUFrc0IsZUFHQXp5QixJQUFBLHVCQUNBWCxNQUFBLFdBQ0FrSCxLQUFBc3NCLGFBQ0F0c0IsS0FBQXNzQixpQkFLQTd5QixJQUFBLGdCQUNBWCxNQUFBLFNBQUFzQyxHQUNBLElBQUFpVyxFQUFBalcsRUFBQWlXLE1BQ0FrQixFQUFBblgsRUFBQW1YLGlCQUNBRCxFQUFBbFgsRUFBQWtYLFNBU0EsT0FOQWpCLEVBQUFtQixXQUFBTCxlQUNBZCxFQUFBbUIsV0FBQUUsZ0JBQUF6UixRQUFBcVIsSUFBQSxFQUVBakIsRUFBQW1CLFdBQUFFLGdCQUFBelIsUUFBQXFSLElBQUEsR0FBQUMsRUFBQXRSLFFBQUFxUixJQUFBLEtBTUE3WSxJQUFBLFlBQ0FYLE1BQUEsV0FDQSxJQUFBOGYsRUFBQTVZLEtBRUFxUixFQUFBclIsS0FBQTVFLE1BQUFpVyxNQUNBclIsS0FBQXNzQixZQUFBamIsRUFBQTZhLFVBQUEsV0FDQSxJQUFBdHBCLEVBQUFnVyxFQUFBeVQsY0FBQXpULEVBQUF4ZCxPQUVBd2QsRUFBQXZMLFVBQ0F6SyxpQkFLQW5KLElBQUEsU0FDQVgsTUFBQSxXQUNBLElBQUFtUyxFQUFBakwsS0FBQTVFLE1BQ0FpSixFQUFBNEcsRUFBQTVHLEtBQ0FpTyxFQUFBckgsRUFBQXFILFNBQ0E1RyxFQUFBN0ssRUFBQW9LLEdBQUEsb0JBRUFySSxFQUFBNUMsS0FBQWdFLE1BQUFwQixRQUVBLGdCQUFBeUIsRUFDQXJHLEVBQUFnRixjQUFBb0UsRUFBQSxRQUFBMUgsR0FDQWtELFVBQ0E5SixNQUFBd1osR0FDUzVHLElBR1QxTixFQUFBZ0YsY0FBQW1qQixFQUFBLFFBQUF6bUIsR0FDQWtELFdBQ084SSxRQUlQMGdCLEVBakZBLEdBb0ZBdnpCLEVBQUEsUUFBQXV6QixxQ0N4SUF6ekIsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsZUFFQSxJQUFBbUYsRUFrQkEsU0FBQWpDLEdBQXVDLEdBQUFBLEtBQUFDLFdBQTZCLE9BQUFELEVBQWMsSUFBQTBDLEVBQUFGLElBQXdDLEdBQUFFLEtBQUFDLElBQUEzQyxHQUErQixPQUFBMEMsRUFBQUUsSUFBQTVDLEdBQXlCLElBQUE2QyxLQUFpQixTQUFBN0MsRUFBQSxDQUFtQixJQUFBOEMsRUFBQWxHLE9BQUFDLGdCQUFBRCxPQUFBbUcseUJBQXNGLFFBQUFyRixLQUFBc0MsRUFBdUIsR0FBQXBELE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF2QixFQUFBdEMsR0FBQSxDQUFzRCxJQUFBdUYsRUFBQUgsRUFBQWxHLE9BQUFtRyx5QkFBQS9DLEVBQUF0QyxHQUFBLEtBQXFGdUYsTUFBQUwsS0FBQUssRUFBQUMsS0FBc0N0RyxPQUFBQyxlQUFBZ0csRUFBQW5GLEVBQUF1RixHQUFtREosRUFBQW5GLEdBQUFzQyxFQUFBdEMsSUFBZ0NtRixFQUFBLFFBQUE3QyxFQUF5QjBDLEdBQWFBLEVBQUFRLElBQUFsRCxFQUFBNkMsR0FBMEIsT0FBQUEsRUFsQnZvQlgsQ0FBb0NoRixFQUFRLElBRTVDbUYsRUFBQXBGLEVBQXlDQyxFQUFRLEtBRWpENk0sRUFBNkI3TSxFQUFRLEtBRXJDa3RCLEVBQUFudEIsRUFBdUNDLEVBQVEsT0FFL0NpdEIsRUFBQWx0QixFQUF1Q0MsRUFBUSxPQUUvQ3N6QixFQUFBdnpCLEVBQW1DQyxFQUFRLE9BRTNDMlEsRUFBQTVRLEVBQW1DQyxFQUFRLEtBRTNDLFNBQUFELEVBQUErQyxHQUFzQyxPQUFBQSxLQUFBQyxXQUFBRCxHQUF1Q0UsUUFBQUYsR0FFN0UsU0FBQXdDLElBQXFDLHNCQUFBQyxRQUFBLFlBQWdELElBQUFDLEVBQUEsSUFBQUQsUUFBNkcsT0FBbEZELEVBQUEsV0FBaUUsT0FBQUUsR0FBaUJBLEVBSWxNLFNBQUFTLEVBQUFuRCxHQUF3VSxPQUF0T21ELEVBQTNFLG1CQUFBQyxRQUFBLGlCQUFBQSxPQUFBQyxTQUEyRSxTQUFBckQsR0FBa0MsY0FBQUEsR0FBK0IsU0FBQUEsR0FBa0MsT0FBQUEsR0FBQSxtQkFBQW9ELFFBQUFwRCxFQUFBc0QsY0FBQUYsUUFBQXBELElBQUFvRCxPQUFBL0IsVUFBQSxnQkFBQXJCLElBQW1JQSxHQU14VSxTQUFBa0UsRUFBQUwsRUFBQXhFLEdBQTJDLFFBQUE3QixFQUFBLEVBQWdCQSxFQUFBNkIsRUFBQTVCLE9BQWtCRCxJQUFBLENBQU8sSUFBQTJHLEVBQUE5RSxFQUFBN0IsR0FBMkIyRyxFQUFBWCxXQUFBVyxFQUFBWCxhQUFBLEVBQXdEVyxFQUFBVixjQUFBLEVBQWdDLFVBQUFVLE1BQUFULFVBQUEsR0FBdUQ5RyxPQUFBQyxlQUFBZ0gsRUFBQU0sRUFBQXpHLElBQUF5RyxJQUk5UCxTQUFBeUIsRUFBQWxCLEVBQUFuRCxHQUFpRCxPQUFBQSxHQUFBLFdBQUE0QixFQUFBNUIsSUFBQSxtQkFBQUEsRUFFakQsU0FBQW1ELEdBQXVDLFlBQUFBLEVBQXVCLFVBQUFDLGVBQUEsNkRBQXlGLE9BQUFELEVBRmJELENBQUFDLEdBQWZuRCxFQUkzSCxTQUFBNkMsRUFBQUMsR0FBZ0wsT0FBbkpELEVBQUF4SCxPQUFBMEgsZUFBQTFILE9BQUEySCxlQUFBLFNBQUFGLEdBQWdHLE9BQUFBLEVBQUFHLFdBQUE1SCxPQUFBMkgsZUFBQUYsS0FBbURBLEdBSWhMLFNBQUFPLEVBQUFQLEVBQUFRLEdBQTBJLE9BQTFHRCxFQUFBaEksT0FBQTBILGdCQUFBLFNBQUFELEVBQUFRLEdBQTZGLE9BQWpCUixFQUFBRyxVQUFBSyxFQUFpQlIsSUFBYUEsRUFBQVEsR0FFMUksU0FBQWxCLElBQW1SLE9BQTlQQSxFQUFBL0csT0FBQWdILFFBQUEsU0FBQUMsR0FBZ0QsUUFBQXJHLEVBQUEsRUFBZ0JBLEVBQUFzRyxVQUFBckcsT0FBc0JELElBQUEsQ0FBTyxJQUFBdUcsRUFBQUQsVUFBQXRHLEdBQTJCLFFBQUFFLEtBQUFxRyxFQUEwQm5ILE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF3QyxFQUFBckcsS0FBeURtRyxFQUFBbkcsR0FBQXFHLEVBQUFyRyxJQUFpQyxPQUFBbUcsSUFBa0JHLE1BQUFDLEtBQUFILFdBRW5SLFNBQUEyc0IsRUFBQXRxQixHQUNBLElBQUFtUCxFQUFBblAsRUFBQW1QLE1BQ0FSLEVBQUEzTyxFQUFBMk8sdUJBQ0FFLEVBQUE3TyxFQUFBNk8sYUFDQXhKLEVBQUFyRixFQUFBcUYsS0FDQWxELEVBQUFuQyxFQUFBbUMsS0FDQW9vQixFQUFBdnFCLEVBQUF1cUIsaUJBR0EsaUJBQUFwb0IsR0FBQSxTQUFBQSxLQUNBb29CLEVBQUFsbEIsRUFBQWxELEdBQUEsU0FBQXVELEVBQUFyTyxHQUNBLE9BQUFzWCxFQUFBakosRUFBQXJPLEdBQUFxVSxpQkFDS3JHLEVBQUFsRCxHQUFBLFNBQUF1RCxFQUFBck8sR0FDTCxPQUFBOFgsRUFBQW1CLFdBQUFFLGdCQUFBelIsUUFBQThQLEVBQUFuSixFQUFBck8sS0FBQSxLQU9BLFNBQUFtekIsRUFBQXR4QixHQUNBLElBQUFpVyxFQUFBalcsRUFBQWlXLE1BQ0E5SixFQUFBbk0sRUFBQW1NLEtBRUEsSUFBQUEsRUFBQS9OLE9BQ0EsU0FHQSxJQUFBbXpCLEVBQUFILEVBQUE5c0IsT0FBMEV0RSxJQUMxRW1NLE9BQ0FsRCxLQUFBLE9BQ0Fvb0Isa0JBQUEsT0FDR0QsRUFBQTlzQixPQUEwQ3RFLElBQzdDbU0sT0FDQWxELEtBQUEsUUFDQW9vQixrQkFBQSxLQUVBRyxFQUFBSixFQUFBOXNCLE9BQXVFdEUsSUFDdkVtTSxPQUNBbEQsS0FBQSxPQUNBb29CLGtCQUFBLE9BQ0dELEVBQUE5c0IsT0FBMEN0RSxJQUM3Q21NLE9BQ0FsRCxLQUFBLFFBQ0Fvb0Isa0JBQUEsS0FHQSxPQUFBcGIsRUFBQW1CLFdBQUFMLGVBQ0F3YSxFQUdBQSxHQUFBQyxFQUdBLFNBQUFQLEVBQUFqeEIsR0FDQSxJQUFBaVcsRUFBQWpXLEVBQUFpVyxNQUNBOUosRUFBQW5NLEVBQUFtTSxLQUVBLFFBQUFBLEVBQUEvTixTQUlBNlgsRUFBQW1CLFdBQUFMLGVBQ0FxYSxFQUFBOXNCLE9BQThDdEUsSUFDOUNtTSxPQUNBbEQsS0FBQSxRQUNBb29CLGtCQUFBLEtBSUFELEVBQUE5c0IsT0FBNEN0RSxJQUM1Q21NLE9BQ0FsRCxLQUFBLFFBQ0Fvb0Isa0JBQUEsTUFDR0QsRUFBQTlzQixPQUF5Q3RFLElBQzVDbU0sT0FDQWxELEtBQUEsUUFDQW9vQixrQkFBQSxNQUlBLElBQUFJLEVBRUEsU0FBQXhyQixHQUdBLFNBQUF3ckIsRUFBQXp4QixHQUNBLElBQUFrRyxFQXlCQSxPQWxJQSxTQUFBQyxFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQTJHM0ZDLENBQUExQixLQUFBNnNCLElBRUF2ckIsRUFBQUssRUFBQTNCLEtBQUFHLEVBQUEwc0IsR0FBQXZ2QixLQUFBMEMsS0FBQTVFLEtBQ0E0SSxPQUNBcEIsU0FBQSxFQUNBc0QsZUFBQSxHQUdBNUUsRUFBQXdyQixzQkFBQSxTQUFBL3JCLEdBQ0EsSUFBQTZCLEVBQUE3QixFQUFBbkIsT0FBQWdELFFBRUF0QixFQUFBbEcsTUFBQXdmLFNBQUFoWSxFQUFBLDJCQUdBdEIsRUFBQXlyQixrQkFBQTN4QixFQUFBbVosMkJBQ0E5YSxJQUFBLE1BQ0F5dUIsS0FBQTlzQixFQUFBa2EsT0FBQTBYLFVBQ0FwUyxTQUFBLGVBRUFuaEIsSUFBQSxTQUNBeXVCLEtBQUE5c0IsRUFBQWthLE9BQUEyWCxhQUNBclMsU0FBQSxlQUVBdFosRUFzSEEsT0E1T0EsU0FBQStCLEVBQUFDLEdBQTBDLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUE3QixVQUFBLHNEQUE2RTRCLEVBQUFqRyxVQUFBekUsT0FBQTRLLE9BQUFELEtBQUFsRyxXQUF5RWlDLGFBQWV2RyxNQUFBdUssRUFBQTVELFVBQUEsRUFBQUQsY0FBQSxLQUEwRDhELEdBQUEzQyxFQUFBMEMsRUFBQUMsR0EwRnhVRSxDQUFBcXBCLEVBbUpDN3VCLEVBQUF5RixXQXJQRCxTQUFBakMsRUFBQWtDLEVBQUFDLEdBQTZERCxHQUFBekQsRUFBQXVCLEVBQUFwRSxVQUFBc0csR0FBc0VDLEdBQUExRCxFQUFBdUIsRUFBQW1DLEdBaUluSUMsQ0FBQWlwQixJQUNBcHpCLElBQUEsb0JBQ0FYLE1BQUEsV0FDQWtILEtBQUFrc0IsZUFHQXp5QixJQUFBLHVCQUNBWCxNQUFBLFdBQ0FrSCxLQUFBc3NCLGFBQ0F0c0IsS0FBQXNzQixpQkFJQTd5QixJQUFBLGdCQUNBWCxNQUFBLFNBQUFzQyxHQUNBLElBQUF3SCxFQUFBeXBCLEVBQUFqeEIsR0FDQThLLEVBQUF3bUIsRUFBQXR4QixHQUNBNEUsS0FBQXFOLFNBQUEsU0FBQWtjLEdBQ0EsSUFBQXhYLEtBVUEsT0FSQTdMLElBQUFxakIsRUFBQXJqQixnQkFDQTZMLEVBQUE3TCxpQkFHQXRELElBQUEybUIsRUFBQTNtQixVQUNBbVAsRUFBQW5QLFdBR0FtUCxPQUlBdFksSUFBQSxZQUNBWCxNQUFBLFdBQ0EsSUFBQThmLEVBQUE1WSxLQUVBcVIsRUFBQXJSLEtBQUE1RSxNQUFBaVcsTUFDQXJSLEtBQUFzc0IsWUFBQWpiLEVBQUE2YSxVQUFBLFdBQ0F0VCxFQUFBc1UsY0FBQXRVLEVBQUF4ZCxZQUlBM0IsSUFBQSxjQUNBWCxNQUFBLFNBQUE0akIsR0FDQSxJQUFBekMsRUFBQWphLEtBRUEsT0FBQTBjLEVBQUF6VSxJQUFBLFNBQUFrbEIsRUFBQXh6QixHQUNBLE9BQUFxRSxFQUFBZ0YsY0FBQXVwQixFQUFBLFFBQUFoRSxNQUNBOXVCLElBQUEwekIsRUFBQTF6QixLQUFBRSxHQUNTcUUsRUFBQWdGLGNBQUEsT0FDVG1MLFFBQUEsV0FDQThMLEVBQUE3ZSxNQUFBd2YsU0FBQXVTLEVBQUExekIsSUFBQUUsRUFBQXd6QixFQUFBdlMsWUFFU3VTLEVBQUFqRixZQUlUenVCLElBQUEsU0FDQVgsTUFBQSxXQUNBLElBQUE0VCxFQUFBMU0sS0FBQTVFLE1BQ0F5SCxFQUFBNkosRUFBQTdKLFNBQ0FOLEVBQUFtSyxFQUFBbkssVUFDQW1hLEVBQUFoUSxFQUFBZ1EsV0FDQTNSLEVBQUEyQixFQUFBM0Isa0JBQ0FxUSxFQUFBcGIsS0FBQWdFLE1BQ0FwQixFQUFBd1ksRUFBQXhZLFFBQ0FzRCxFQUFBa1YsRUFBQWxWLGNBQ0FrbkIsRUFBQSxHQUFBcnFCLE9BQUFSLEVBQUEsY0FDQThxQixFQUFBLEtBRUEsR0FBQTNRLEVBQUEsQ0FDQSxJQUFBNFEsRUFBQW53QixNQUFBb0wsUUFBQW1VLEdBQUExYyxLQUFBK3NCLGtCQUFBaHFCLE9BQUEyWixHQUFBMWMsS0FBQStzQixrQkFDQVEsRUFBQXZ2QixFQUFBZ0YsY0FBQXVwQixFQUFBLFNBQ0EvcEIsVUFBQSxHQUFBTyxPQUFBcXFCLEVBQUEsU0FDQXZQLGlCQUNTN2QsS0FBQW1vQixZQUFBbUYsSUFDVEQsRUFBQUMsRUFBQTl6QixPQUFBLEVBQUF3RSxFQUFBZ0YsY0FBQWtqQixFQUFBLFNBQ0FtRCxRQUFBa0UsRUFDQXhpQixxQkFDUy9NLEVBQUFnRixjQUFBLE9BQ1RSLFVBQUEsR0FBQU8sT0FBQXFxQixFQUFBLFVBQ1NwdkIsRUFBQWdGLGNBQUE0RyxFQUFBLFNBQ1R2RixLQUFBLFdBQ1MsS0FHVCxPQUFBckcsRUFBQWdGLGNBQUEsT0FDQVIsVUFBQTRxQixHQUNPcHZCLEVBQUFnRixjQUFBbWpCLEVBQUEsU0FDUDNqQixXQUFBLEVBQUFwRSxFQUFBLFNBaE9BLFNBQUFyQyxFQUFBdEMsRUFBQVgsR0FBbU0sT0FBeEpXLEtBQUFzQyxFQUFrQnBELE9BQUFDLGVBQUFtRCxFQUFBdEMsR0FBa0NYLFFBQUF5RyxZQUFBLEVBQUFDLGNBQUEsRUFBQUMsVUFBQSxJQUFnRjFELEVBQUF0QyxHQUFBWCxFQUFvQmlELEVBZ09uTXVELElBQWlFLEdBQUF5RCxPQUFBcXFCLEVBQUEsc0JBQUFDLElBQ2pFenFCLFVBQ0FzRCxnQkFDQXJELFdBQ0FmLFNBQUE5QixLQUFBOHNCLHdCQUNPTyxRQUdQNXpCLElBQUEsMkJBQ0FYLE1BQUEsU0FBQXNDLEVBQUE0SSxHQUNBLElBQUFwQixFQUFBeXBCLEVBQUFqeEIsR0FDQThLLEVBQUF3bUIsRUFBQXR4QixHQUNBMlcsS0FVQSxPQVJBN0wsSUFBQWxDLEVBQUFrQyxnQkFDQTZMLEVBQUE3TCxpQkFHQXRELElBQUFvQixFQUFBcEIsVUFDQW1QLEVBQUFuUCxXQUdBbVAsTUFJQThhLEVBbkpBLElBc0pBLEVBQUEvbUIsRUFBQW1CLFVBQUE0bEIsR0FDQSxJQUFBOXVCLEVBQUE4dUIsRUFDQWgwQixFQUFBLFFBQUFrRixxQ0MxUkFwRixPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFFQUQsRUFBQSxlQUVBLElBQUFtRixFQUlBLFNBQUFqQyxHQUF1QyxHQUFBQSxLQUFBQyxXQUE2QixPQUFBRCxFQUFjLElBQUEwQyxFQUFBRixJQUF3QyxHQUFBRSxLQUFBQyxJQUFBM0MsR0FBK0IsT0FBQTBDLEVBQUFFLElBQUE1QyxHQUF5QixJQUFBNkMsS0FBaUIsU0FBQTdDLEVBQUEsQ0FBbUIsSUFBQThDLEVBQUFsRyxPQUFBQyxnQkFBQUQsT0FBQW1HLHlCQUFzRixRQUFBckYsS0FBQXNDLEVBQXVCLEdBQUFwRCxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBdkIsRUFBQXRDLEdBQUEsQ0FBc0QsSUFBQXVGLEVBQUFILEVBQUFsRyxPQUFBbUcseUJBQUEvQyxFQUFBdEMsR0FBQSxLQUFxRnVGLE1BQUFMLEtBQUFLLEVBQUFDLEtBQXNDdEcsT0FBQUMsZUFBQWdHLEVBQUFuRixFQUFBdUYsR0FBbURKLEVBQUFuRixHQUFBc0MsRUFBQXRDLElBQWdDbUYsRUFBQSxRQUFBN0MsRUFBeUIwQyxHQUFhQSxFQUFBUSxJQUFBbEQsRUFBQTZDLEdBQTBCLE9BQUFBLEVBSnZvQlgsQ0FBb0NoRixFQUFRLElBRTVDLFNBQUFzRixJQUFxQyxzQkFBQUMsUUFBQSxZQUFnRCxJQUFBQyxFQUFBLElBQUFELFFBQTZHLE9BQWxGRCxFQUFBLFdBQWlFLE9BQUFFLEdBQWlCQSxFQUlsTSxTQUFBUyxFQUFBbkQsR0FBd1UsT0FBdE9tRCxFQUEzRSxtQkFBQUMsUUFBQSxpQkFBQUEsT0FBQUMsU0FBMkUsU0FBQXJELEdBQWtDLGNBQUFBLEdBQStCLFNBQUFBLEdBQWtDLE9BQUFBLEdBQUEsbUJBQUFvRCxRQUFBcEQsRUFBQXNELGNBQUFGLFFBQUFwRCxJQUFBb0QsT0FBQS9CLFVBQUEsZ0JBQUFyQixJQUFtSUEsR0FJeFUsU0FBQTRGLEVBQUFsQixFQUFBbkQsR0FBaUQsT0FBQUEsR0FBQSxXQUFBNEIsRUFBQTVCLElBQUEsbUJBQUFBLEVBRWpELFNBQUFtRCxHQUF1QyxZQUFBQSxFQUF1QixVQUFBQyxlQUFBLDZEQUF5RixPQUFBRCxFQUZiRCxDQUFBQyxHQUFmbkQsRUFJM0gsU0FBQTZDLEVBQUFDLEdBQWdMLE9BQW5KRCxFQUFBeEgsT0FBQTBILGVBQUExSCxPQUFBMkgsZUFBQSxTQUFBRixHQUFnRyxPQUFBQSxFQUFBRyxXQUFBNUgsT0FBQTJILGVBQUFGLEtBQW1EQSxHQUloTCxTQUFBTyxFQUFBUCxFQUFBUSxHQUEwSSxPQUExR0QsRUFBQWhJLE9BQUEwSCxnQkFBQSxTQUFBRCxFQUFBUSxHQUE2RixPQUFqQlIsRUFBQUcsVUFBQUssRUFBaUJSLElBQWFBLEVBQUFRLEdBRzFJLElBQUE4ZCxFQUVBLFNBQUFyZCxHQUdBLFNBQUFxZCxJQUdBLE9BckJBLFNBQUFuZCxFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQW1CM0ZDLENBQUExQixLQUFBMGUsR0FFQS9jLEVBQUEzQixLQUFBRyxFQUFBdWUsR0FBQTNlLE1BQUFDLEtBQUFILFlBR0EsT0FoQkEsU0FBQXdELEVBQUFDLEdBQTBDLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUE3QixVQUFBLHNEQUE2RTRCLEVBQUFqRyxVQUFBekUsT0FBQTRLLE9BQUFELEtBQUFsRyxXQUF5RWlDLGFBQWV2RyxNQUFBdUssRUFBQTVELFVBQUEsRUFBQUQsY0FBQSxLQUEwRDhELEdBQUEzQyxFQUFBMEMsRUFBQUMsR0FReFVFLENBQUFrYixFQVNDMWdCLEVBQUF5RixXQUREaWIsRUFUQSxHQVlBN2xCLEVBQUEsUUFBQTZsQixxQ0N4Q0EvbEIsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsZUFFQSxJQUFBbUYsRUFJQSxTQUFBakMsR0FBdUMsR0FBQUEsS0FBQUMsV0FBNkIsT0FBQUQsRUFBYyxJQUFBMEMsRUFBQUYsSUFBd0MsR0FBQUUsS0FBQUMsSUFBQTNDLEdBQStCLE9BQUEwQyxFQUFBRSxJQUFBNUMsR0FBeUIsSUFBQTZDLEtBQWlCLFNBQUE3QyxFQUFBLENBQW1CLElBQUE4QyxFQUFBbEcsT0FBQUMsZ0JBQUFELE9BQUFtRyx5QkFBc0YsUUFBQXJGLEtBQUFzQyxFQUF1QixHQUFBcEQsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXZCLEVBQUF0QyxHQUFBLENBQXNELElBQUF1RixFQUFBSCxFQUFBbEcsT0FBQW1HLHlCQUFBL0MsRUFBQXRDLEdBQUEsS0FBcUZ1RixNQUFBTCxLQUFBSyxFQUFBQyxLQUFzQ3RHLE9BQUFDLGVBQUFnRyxFQUFBbkYsRUFBQXVGLEdBQW1ESixFQUFBbkYsR0FBQXNDLEVBQUF0QyxJQUFnQ21GLEVBQUEsUUFBQTdDLEVBQXlCMEMsR0FBYUEsRUFBQVEsSUFBQWxELEVBQUE2QyxHQUEwQixPQUFBQSxFQUp2b0JYLENBQW9DaEYsRUFBUSxJQUU1QyxTQUFBc0YsSUFBcUMsc0JBQUFDLFFBQUEsWUFBZ0QsSUFBQUMsRUFBQSxJQUFBRCxRQUE2RyxPQUFsRkQsRUFBQSxXQUFpRSxPQUFBRSxHQUFpQkEsRUFJbE0sU0FBQVMsRUFBQW5ELEdBQXdVLE9BQXRPbUQsRUFBM0UsbUJBQUFDLFFBQUEsaUJBQUFBLE9BQUFDLFNBQTJFLFNBQUFyRCxHQUFrQyxjQUFBQSxHQUErQixTQUFBQSxHQUFrQyxPQUFBQSxHQUFBLG1CQUFBb0QsUUFBQXBELEVBQUFzRCxjQUFBRixRQUFBcEQsSUFBQW9ELE9BQUEvQixVQUFBLGdCQUFBckIsSUFBbUlBLEdBSXhVLFNBQUE0RixFQUFBbEIsRUFBQW5ELEdBQWlELE9BQUFBLEdBQUEsV0FBQTRCLEVBQUE1QixJQUFBLG1CQUFBQSxFQUVqRCxTQUFBbUQsR0FBdUMsWUFBQUEsRUFBdUIsVUFBQUMsZUFBQSw2REFBeUYsT0FBQUQsRUFGYkQsQ0FBQUMsR0FBZm5ELEVBSTNILFNBQUE2QyxFQUFBQyxHQUFnTCxPQUFuSkQsRUFBQXhILE9BQUEwSCxlQUFBMUgsT0FBQTJILGVBQUEsU0FBQUYsR0FBZ0csT0FBQUEsRUFBQUcsV0FBQTVILE9BQUEySCxlQUFBRixLQUFtREEsR0FJaEwsU0FBQU8sRUFBQVAsRUFBQVEsR0FBMEksT0FBMUdELEVBQUFoSSxPQUFBMEgsZ0JBQUEsU0FBQUQsRUFBQVEsR0FBNkYsT0FBakJSLEVBQUFHLFVBQUFLLEVBQWlCUixJQUFhQSxFQUFBUSxHQUUxSSxJQUFBK2QsRUFFQSxTQUFBdGQsR0FHQSxTQUFBc2QsSUFHQSxPQXBCQSxTQUFBcGQsRUFBQUMsR0FBaUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQUMsVUFBQSxxQ0FrQjNGQyxDQUFBMUIsS0FBQTJlLEdBRUFoZCxFQUFBM0IsS0FBQUcsRUFBQXdlLEdBQUE1ZSxNQUFBQyxLQUFBSCxZQUdBLE9BZkEsU0FBQXdELEVBQUFDLEdBQTBDLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUE3QixVQUFBLHNEQUE2RTRCLEVBQUFqRyxVQUFBekUsT0FBQTRLLE9BQUFELEtBQUFsRyxXQUF5RWlDLGFBQWV2RyxNQUFBdUssRUFBQTVELFVBQUEsRUFBQUQsY0FBQSxLQUEwRDhELEdBQUEzQyxFQUFBMEMsRUFBQUMsR0FPeFVFLENBQUFtYixFQVNDM2dCLEVBQUF5RixXQUREa2IsRUFUQSxHQVlBOWxCLEVBQUEsUUFBQThsQixFQUNBQSxFQUFBclYsMEJBQUEscUNDeENBM1EsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsUUFvQ0EsV0FDQSxJQUFBNEssRUFBQTVELFVBQUFyRyxPQUFBLFFBQUE0SixJQUFBdkQsVUFBQSxHQUFBQSxVQUFBLFFBdUVBLE9BbkVBLFNBQUF3QixHQUdBLFNBQUFtc0IsRUFBQXB5QixHQUNBLElBQUFrRyxHQXpCQSxTQUFBQyxFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQTJCM0ZDLENBQUExQixLQUFBd3RCLElBRUFsc0IsRUF2QkEsU0FBQWIsRUFBQW5ELEdBQWlELEdBQUFBLElBQUEsV0FBQTRCLEVBQUE1QixJQUFBLG1CQUFBQSxHQUEwRSxPQUFBQSxFQUFlLE9BRTFJLFNBQUFtRCxHQUF1QyxZQUFBQSxFQUF1QixVQUFBQyxlQUFBLDZEQUF5RixPQUFBRCxFQUZiRCxDQUFBQyxHQXVCMUlrQixDQUFBM0IsS0FBQUcsRUFBQXF0QixHQUFBbHdCLEtBQUEwQyxLQUFBNUUsS0FDQWlXLE1BQUFqVyxFQUFBaVcsTUFFQSxJQUFBb2MsRUFBQW5zQixFQUFBK1AsTUFBQW1CLFdBQ0FFLEVBQUErYSxFQUFBL2EsZ0JBS0EsT0FIQXBSLEVBQUEwQyxPQUNBMHBCLFNBQUFoYixFQUFBelIsUUFBQTdGLEVBQUE4VixTQUFBLEdBRUE1UCxFQStDQSxPQXpFQSxTQUFBK0IsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQTdCLFVBQUEsc0RBQTZFNEIsRUFBQWpHLFVBQUF6RSxPQUFBNEssT0FBQUQsS0FBQWxHLFdBQXlFaUMsYUFBZXZHLE1BQUF1SyxFQUFBNUQsVUFBQSxFQUFBRCxjQUFBLEtBQTBEOEQsR0FBQTNDLEVBQUEwQyxFQUFBQyxHQVV4VUUsQ0FBQWdxQixFQUFBbnNCLEdBbEJBLFNBQUFHLEVBQUFrQyxFQUFBQyxHQUE2REQsR0FBQXpELEVBQUF1QixFQUFBcEUsVUFBQXNHLEdBQXNFQyxHQUFBMUQsRUFBQXVCLEVBQUFtQyxHQXFDbklDLENBQUE0cEIsSUFDQS96QixJQUFBLG9CQUNBWCxNQUFBLFdBQ0FrSCxLQUFBa3NCLGVBR0F6eUIsSUFBQSx1QkFDQVgsTUFBQSxXQUNBa0gsS0FBQXNzQixhQUNBdHNCLEtBQUFzc0IsaUJBSUE3eUIsSUFBQSxZQUNBWCxNQUFBLFdBQ0EsSUFBQThmLEVBQUE1WSxLQUVBME0sRUFBQTFNLEtBQUE1RSxNQUNBaVcsRUFBQTNFLEVBQUEyRSxNQUNBSCxFQUFBeEUsRUFBQXdFLE9BQ0FsUixLQUFBc3NCLFlBQUFqYixFQUFBNmEsVUFBQSxXQUNBLElBQUF5QixFQUFBL1UsRUFBQXZILE1BQUFtQixXQUNBRSxFQUFBaWIsRUFBQWpiLGdCQUVBZ2IsRUFBQWhiLEVBQUF6UixRQUFBaVEsSUFBQSxFQUVBd2MsSUFBQTlVLEVBQUE1VSxNQUFBMHBCLFVBQ0E5VSxFQUFBdkwsVUFDQXFnQixrQkFNQWowQixJQUFBLFNBQ0FYLE1BQUEsV0FDQSxJQUFBODBCLEdBQUEsRUFBQWprQixFQUFBLFNBQUEzSixLQUFBNUUsT0FBQSwrQkFDQW9ILEdBQUEsRUFBQXFyQixFQUFBLFNBQUE3dEIsS0FBQTVFLE1BQUFvSCxVQWhGQSxTQUFBekcsRUFBQXRDLEVBQUFYLEdBQTJDVyxLQUFBc0MsRUFBa0JwRCxPQUFBQyxlQUFBbUQsRUFBQXRDLEdBQWtDWCxRQUFBeUcsWUFBQSxFQUFBQyxjQUFBLEVBQUFDLFVBQUEsSUFBZ0YxRCxFQUFBdEMsR0FBQVgsRUFBb0IsT0FBQWlELEVBZ0ZuTXVELElBQTZGLEdBQUF5RCxPQUFBL0MsS0FBQTVFLE1BQUFtSCxVQUFBLGlCQUFBdkMsS0FBQWdFLE1BQUEwcEIsV0FDN0YsT0FBQTF2QixFQUFBZ0YsY0FBQVMsRUFBQS9ELE9BQWtFa3VCLElBQ2xFcHJCLGNBQ1N4QyxLQUFBNUUsTUFBQWhDLGNBSVRvMEIsRUFoRUEsQ0FpRUd4dkIsRUFBQXlGLFlBeEdILElBQUF6RixFQVVBLFNBQUFqQyxHQUF1QyxHQUFBQSxLQUFBQyxXQUE2QixPQUFBRCxFQUFjLElBQUEwQyxFQUFBRixJQUF3QyxHQUFBRSxLQUFBQyxJQUFBM0MsR0FBK0IsT0FBQTBDLEVBQUFFLElBQUE1QyxHQUF5QixJQUFBNkMsS0FBaUIsU0FBQTdDLEVBQUEsQ0FBbUIsSUFBQThDLEVBQUFsRyxPQUFBQyxnQkFBQUQsT0FBQW1HLHlCQUFzRixRQUFBckYsS0FBQXNDLEVBQXVCLEdBQUFwRCxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBdkIsRUFBQXRDLEdBQUEsQ0FBc0QsSUFBQXVGLEVBQUFILEVBQUFsRyxPQUFBbUcseUJBQUEvQyxFQUFBdEMsR0FBQSxLQUFxRnVGLE1BQUFMLEtBQUFLLEVBQUFDLEtBQXNDdEcsT0FBQUMsZUFBQWdHLEVBQUFuRixFQUFBdUYsR0FBbURKLEVBQUFuRixHQUFBc0MsRUFBQXRDLElBQWdDbUYsRUFBQSxRQUFBN0MsRUFBeUIwQyxHQUFhQSxFQUFBUSxJQUFBbEQsRUFBQTZDLEdBQTBCLE9BQUFBLEVBVnZvQlgsQ0FBb0NoRixFQUFRLElBRTVDNDBCLEVBQUE3MEIsRUFBMENDLEVBQVEsS0FFbEQwUSxFQUFBM1EsRUFBbUNDLEVBQVEsS0FFM0MsU0FBQUQsRUFBQStDLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUU3RSxTQUFBd0MsSUFBcUMsc0JBQUFDLFFBQUEsWUFBZ0QsSUFBQUMsRUFBQSxJQUFBRCxRQUE2RyxPQUFsRkQsRUFBQSxXQUFpRSxPQUFBRSxHQUFpQkEsRUFJbE0sU0FBQVMsRUFBQW5ELEdBQXdVLE9BQXRPbUQsRUFBM0UsbUJBQUFDLFFBQUEsaUJBQUFBLE9BQUFDLFNBQTJFLFNBQUFyRCxHQUFrQyxjQUFBQSxHQUErQixTQUFBQSxHQUFrQyxPQUFBQSxHQUFBLG1CQUFBb0QsUUFBQXBELEVBQUFzRCxjQUFBRixRQUFBcEQsSUFBQW9ELE9BQUEvQixVQUFBLGdCQUFBckIsSUFBbUlBLEdBRXhVLFNBQUEyRCxJQUFtUixPQUE5UEEsRUFBQS9HLE9BQUFnSCxRQUFBLFNBQUFDLEdBQWdELFFBQUFyRyxFQUFBLEVBQWdCQSxFQUFBc0csVUFBQXJHLE9BQXNCRCxJQUFBLENBQU8sSUFBQXVHLEVBQUFELFVBQUF0RyxHQUEyQixRQUFBRSxLQUFBcUcsRUFBMEJuSCxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0MsRUFBQXJHLEtBQXlEbUcsRUFBQW5HLEdBQUFxRyxFQUFBckcsSUFBaUMsT0FBQW1HLElBQWtCRyxNQUFBQyxLQUFBSCxXQU1uUixTQUFBSSxFQUFBTCxFQUFBeEUsR0FBMkMsUUFBQTdCLEVBQUEsRUFBZ0JBLEVBQUE2QixFQUFBNUIsT0FBa0JELElBQUEsQ0FBTyxJQUFBMkcsRUFBQTlFLEVBQUE3QixHQUEyQjJHLEVBQUFYLFdBQUFXLEVBQUFYLGFBQUEsRUFBd0RXLEVBQUFWLGNBQUEsRUFBZ0MsVUFBQVUsTUFBQVQsVUFBQSxHQUF1RDlHLE9BQUFDLGVBQUFnSCxFQUFBTSxFQUFBekcsSUFBQXlHLElBUTlQLFNBQUFDLEVBQUFDLEdBQWdMLE9BQW5KRCxFQUFBeEgsT0FBQTBILGVBQUExSCxPQUFBMkgsZUFBQSxTQUFBRixHQUFnRyxPQUFBQSxFQUFBRyxXQUFBNUgsT0FBQTJILGVBQUFGLEtBQW1EQSxHQUloTCxTQUFBTyxFQUFBUCxFQUFBUSxHQUEwSSxPQUExR0QsRUFBQWhJLE9BQUEwSCxnQkFBQSxTQUFBRCxFQUFBUSxHQUE2RixPQUFqQlIsRUFBQUcsVUFBQUssRUFBaUJSLElBQWFBLEVBQUFRLHVDQ3JDMUlqSSxPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFFQUQsRUFBQSxlQU1BLElBQUFrRixFQUZBLFNBQUFoQyxHQUFzQyxPQUFBQSxLQUFBQyxXQUFBRCxHQUF1Q0UsUUFBQUYsR0FGN0UvQyxDQUF5Q0MsRUFBUSxPQUlqRCxRQUNBSixFQUFBLFFBQUFrRixxQ0NWQXBGLE9BQUFDLGVBQUFDLEVBQUEsY0FDQUMsT0FBQSxJQUVBRCxFQUFBLGVBRUEsSUFBQW1GLEVBc0JBLFNBQUFqQyxHQUF1QyxHQUFBQSxLQUFBQyxXQUE2QixPQUFBRCxFQUFjLElBQUEwQyxFQUFBRixJQUF3QyxHQUFBRSxLQUFBQyxJQUFBM0MsR0FBK0IsT0FBQTBDLEVBQUFFLElBQUE1QyxHQUF5QixJQUFBNkMsS0FBaUIsU0FBQTdDLEVBQUEsQ0FBbUIsSUFBQThDLEVBQUFsRyxPQUFBQyxnQkFBQUQsT0FBQW1HLHlCQUFzRixRQUFBckYsS0FBQXNDLEVBQXVCLEdBQUFwRCxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBdkIsRUFBQXRDLEdBQUEsQ0FBc0QsSUFBQXVGLEVBQUFILEVBQUFsRyxPQUFBbUcseUJBQUEvQyxFQUFBdEMsR0FBQSxLQUFxRnVGLE1BQUFMLEtBQUFLLEVBQUFDLEtBQXNDdEcsT0FBQUMsZUFBQWdHLEVBQUFuRixFQUFBdUYsR0FBbURKLEVBQUFuRixHQUFBc0MsRUFBQXRDLElBQWdDbUYsRUFBQSxRQUFBN0MsRUFBeUIwQyxHQUFhQSxFQUFBUSxJQUFBbEQsRUFBQTZDLEdBQTBCLE9BQUFBLEVBdEJ2b0JYLENBQW9DaEYsRUFBUSxJQUU1QzYwQixFQUFBOTBCLEVBQTJDQyxFQUFRLE9BRW5EODBCLEVBQUEvMEIsRUFBb0NDLEVBQVEsTUFFNUNtRixFQUFBcEYsRUFBeUNDLEVBQVEsS0FFakQrMEIsRUFBQWgxQixFQUF5Q0MsRUFBUSxPQUVqRDJRLEVBQUE1USxFQUFtQ0MsRUFBUSxLQUUzQ2cxQixFQUFBajFCLEVBQXFDQyxFQUFRLE9BRTdDaVgsRUFBQWxYLEVBQTZDQyxFQUFRLE1BRXJEcUYsRUFBc0JyRixFQUFRLElBRTlCLFNBQUFELEVBQUErQyxHQUFzQyxPQUFBQSxLQUFBQyxXQUFBRCxHQUF1Q0UsUUFBQUYsR0FFN0UsU0FBQXdDLElBQXFDLHNCQUFBQyxRQUFBLFlBQWdELElBQUFDLEVBQUEsSUFBQUQsUUFBNkcsT0FBbEZELEVBQUEsV0FBaUUsT0FBQUUsR0FBaUJBLEVBSWxNLFNBQUFTLEVBQUFuRCxHQUF3VSxPQUF0T21ELEVBQTNFLG1CQUFBQyxRQUFBLGlCQUFBQSxPQUFBQyxTQUEyRSxTQUFBckQsR0FBa0MsY0FBQUEsR0FBK0IsU0FBQUEsR0FBa0MsT0FBQUEsR0FBQSxtQkFBQW9ELFFBQUFwRCxFQUFBc0QsY0FBQUYsUUFBQXBELElBQUFvRCxPQUFBL0IsVUFBQSxnQkFBQXJCLElBQW1JQSxHQUV4VSxTQUFBMkQsSUFBbVIsT0FBOVBBLEVBQUEvRyxPQUFBZ0gsUUFBQSxTQUFBQyxHQUFnRCxRQUFBckcsRUFBQSxFQUFnQkEsRUFBQXNHLFVBQUFyRyxPQUFzQkQsSUFBQSxDQUFPLElBQUF1RyxFQUFBRCxVQUFBdEcsR0FBMkIsUUFBQUUsS0FBQXFHLEVBQTBCbkgsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXdDLEVBQUFyRyxLQUF5RG1HLEVBQUFuRyxHQUFBcUcsRUFBQXJHLElBQWlDLE9BQUFtRyxJQUFrQkcsTUFBQUMsS0FBQUgsV0FJblIsU0FBQUksRUFBQUwsRUFBQXhFLEdBQTJDLFFBQUE3QixFQUFBLEVBQWdCQSxFQUFBNkIsRUFBQTVCLE9BQWtCRCxJQUFBLENBQU8sSUFBQTJHLEVBQUE5RSxFQUFBN0IsR0FBMkIyRyxFQUFBWCxXQUFBVyxFQUFBWCxhQUFBLEVBQXdEVyxFQUFBVixjQUFBLEVBQWdDLFVBQUFVLE1BQUFULFVBQUEsR0FBdUQ5RyxPQUFBQyxlQUFBZ0gsRUFBQU0sRUFBQXpHLElBQUF5RyxJQUk5UCxTQUFBeUIsRUFBQWxCLEVBQUFuRCxHQUFpRCxPQUFBQSxHQUFBLFdBQUE0QixFQUFBNUIsSUFBQSxtQkFBQUEsRUFFakQsU0FBQW1ELEdBQXVDLFlBQUFBLEVBQXVCLFVBQUFDLGVBQUEsNkRBQXlGLE9BQUFELEVBRmJELENBQUFDLEdBQWZuRCxFQUkzSCxTQUFBNkMsRUFBQUMsR0FBZ0wsT0FBbkpELEVBQUF4SCxPQUFBMEgsZUFBQTFILE9BQUEySCxlQUFBLFNBQUFGLEdBQWdHLE9BQUFBLEVBQUFHLFdBQUE1SCxPQUFBMkgsZUFBQUYsS0FBbURBLEdBSWhMLFNBQUFPLEVBQUFQLEVBQUFRLEdBQTBJLE9BQTFHRCxFQUFBaEksT0FBQTBILGdCQUFBLFNBQUFELEVBQUFRLEdBQTZGLE9BQWpCUixFQUFBRyxVQUFBSyxFQUFpQlIsSUFBYUEsRUFBQVEsR0FFMUksSUFBQUMsRUFBQSxTQUFBQyxFQUFBQyxHQUNBLElBQUFDLEtBRUEsUUFBQUosS0FBQUUsRUFDQW5JLE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF3RCxFQUFBRixJQUFBRyxFQUFBRSxRQUFBTCxHQUFBLElBQUFJLEVBQUFKLEdBQUFFLEVBQUFGLElBR0EsU0FBQUUsR0FBQSxtQkFBQW5JLE9BQUF1SSxzQkFBQSxLQUFBM0gsRUFBQSxNQUFBcUgsRUFBQWpJLE9BQUF1SSxzQkFBQUosR0FBMkh2SCxFQUFBcUgsRUFBQXBILE9BQWNELElBQ3pJd0gsRUFBQUUsUUFBQUwsRUFBQXJILElBQUEsR0FBQVosT0FBQXlFLFVBQUErRCxxQkFBQTdELEtBQUF3RCxFQUFBRixFQUFBckgsTUFBQXlILEVBQUFKLEVBQUFySCxJQUFBdUgsRUFBQUYsRUFBQXJILEtBRUEsT0FBQXlILEdBR0FrdEIsRUFFQSxTQUFBN3NCLEdBR0EsU0FBQTZzQixJQUNBLElBQUE1c0IsRUEwRUEsT0E3R0EsU0FBQUMsRUFBQUMsR0FBaUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQUMsVUFBQSxxQ0FxQzNGQyxDQUFBMUIsS0FBQWt1QixJQUVBNXNCLEVBQUFLLEVBQUEzQixLQUFBRyxFQUFBK3RCLEdBQUFudUIsTUFBQUMsS0FBQUgsYUFFQXN1QixjQUFBLFNBQUE1ckIsR0ErQkEsT0FDQTZyQixTQS9CQXB3QixFQUFBZ0YsY0FBQSxLQUNBUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsZUFDT3ZFLEVBQUFnRixjQUFBNEcsRUFBQSxTQUNQdkYsS0FBQSxVQTZCQWdxQixTQTNCQXJ3QixFQUFBZ0YsY0FBQSxLQUNBUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsZUFDT3ZFLEVBQUFnRixjQUFBNEcsRUFBQSxTQUNQdkYsS0FBQSxXQXlCQWlxQixhQXZCQXR3QixFQUFBZ0YsY0FBQSxLQUNBUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsZUFDT3ZFLEVBQUFnRixjQUFBLE9BQ1BSLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxvQkFDT3ZFLEVBQUFnRixjQUFBNEcsRUFBQSxTQUNQcEgsVUFBQSxHQUFBTyxPQUFBUixFQUFBLG1CQUNBOEIsS0FBQSxnQkFDT3JHLEVBQUFnRixjQUFBLFFBQ1BSLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxtQkFDTyxTQWVQZ3NCLGFBZEF2d0IsRUFBQWdGLGNBQUEsS0FDQVIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLGVBQ092RSxFQUFBZ0YsY0FBQSxPQUNQUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsb0JBQ092RSxFQUFBZ0YsY0FBQTRHLEVBQUEsU0FDUHBILFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxtQkFDQThCLEtBQUEsaUJBQ09yRyxFQUFBZ0YsY0FBQSxRQUNQUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsbUJBQ08sV0FTUGpCLEVBQUFtVyxpQkFBQSxTQUFBdkIsR0FDQSxJQUFBakwsRUFBQTNKLEVBQUFsRyxNQUNBa0gsRUFBQTJJLEVBQUExSSxVQUNBaXNCLEVBQUF2akIsRUFBQXdqQixnQkFDQWpzQixFQUFBeUksRUFBQXpJLFVBQ0F5SCxFQUFBZ0IsRUFBQWhCLEtBQ0F5a0IsRUFBQXpqQixFQUFBcUssT0FDQTdTLEVBQUE1QixFQUFBb0ssR0FBQSw0REFFQXFLLEVBQUE1VixPQUF1Q3dXLEdBQUF3WSxHQUV2Q0MsRUFBQSxVQUFBMWtCLEVBQ0EsT0FBQWpNLEVBQUFnRixjQUFBMUUsRUFBQTZGLGVBQUEsY0FBQWpDLEdBQ0EsSUFBQUUsRUFBQUYsRUFBQUUsYUFDQUcsRUFBQUgsRUFBQSxhQUFBRSxHQUNBbXNCLEVBQUFyc0IsRUFBQSxTQUFBb3NCLEdBQ0EsT0FBQXh3QixFQUFBZ0YsY0FBQThxQixFQUFBLFFBQUFwdUIsS0FBd0UrQyxHQUN4RUYsWUFDQWtzQixtQkFDU250QixFQUFBNnNCLGNBQUE1ckIsSUFDVEMsV0FBQSxFQUFBcEUsRUFBQSxTQUFBb0UsR0FDQW9zQixLQUFBRCxJQUVBRSxxQkFBQUYsRUFBQVgsRUFBQSxRQUFBQyxFQUFBLFFBQ0EzWSxlQUtBaFUsRUFhQSxPQTlHQSxTQUFBK0IsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQTdCLFVBQUEsc0RBQTZFNEIsRUFBQWpHLFVBQUF6RSxPQUFBNEssT0FBQUQsS0FBQWxHLFdBQXlFaUMsYUFBZXZHLE1BQUF1SyxFQUFBNUQsVUFBQSxFQUFBRCxjQUFBLEtBQTBEOEQsR0FBQTNDLEVBQUEwQyxFQUFBQyxHQW9CeFVFLENBQUEwcUIsRUEyRkNsd0IsRUFBQXlGLFdBdkhELFNBQUFqQyxFQUFBa0MsRUFBQUMsR0FBNkRELEdBQUF6RCxFQUFBdUIsRUFBQXBFLFVBQUFzRyxHQUFzRUMsR0FBQTFELEVBQUF1QixFQUFBbUMsR0E0R25JQyxDQUFBc3FCLElBQ0F6MEIsSUFBQSxTQUNBWCxNQUFBLFdBQ0EsT0FBQWtGLEVBQUFnRixjQUFBa04sRUFBQSxTQUNBa0YsY0FBQSxhQUNBQyxjQUFBMFksRUFBQSxTQUNPL3RCLEtBQUF5WCxzQkFJUHlXLEVBM0ZBLEdBOEZBcjFCLEVBQUEsUUFBQXExQixxQ0M5SkF2MUIsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsZUFFQSxJQUFBbUYsRUFRQSxTQUFBakMsR0FBdUMsR0FBQUEsS0FBQUMsV0FBNkIsT0FBQUQsRUFBYyxJQUFBMEMsRUFBQUYsSUFBd0MsR0FBQUUsS0FBQUMsSUFBQTNDLEdBQStCLE9BQUEwQyxFQUFBRSxJQUFBNUMsR0FBeUIsSUFBQTZDLEtBQWlCLFNBQUE3QyxFQUFBLENBQW1CLElBQUE4QyxFQUFBbEcsT0FBQUMsZ0JBQUFELE9BQUFtRyx5QkFBc0YsUUFBQXJGLEtBQUFzQyxFQUF1QixHQUFBcEQsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXZCLEVBQUF0QyxHQUFBLENBQXNELElBQUF1RixFQUFBSCxFQUFBbEcsT0FBQW1HLHlCQUFBL0MsRUFBQXRDLEdBQUEsS0FBcUZ1RixNQUFBTCxLQUFBSyxFQUFBQyxLQUFzQ3RHLE9BQUFDLGVBQUFnRyxFQUFBbkYsRUFBQXVGLEdBQW1ESixFQUFBbkYsR0FBQXNDLEVBQUF0QyxJQUFnQ21GLEVBQUEsUUFBQTdDLEVBQXlCMEMsR0FBYUEsRUFBQVEsSUFBQWxELEVBQUE2QyxHQUEwQixPQUFBQSxFQVJ2b0JYLENBQW9DaEYsRUFBUSxJQUU1Q2cxQixFQUVBLFNBQUFseUIsR0FBc0MsT0FBQUEsS0FBQUMsV0FBQUQsR0FBdUNFLFFBQUFGLEdBRjdFL0MsQ0FBcUNDLEVBQVEsT0FJN0MsU0FBQXNGLElBQXFDLHNCQUFBQyxRQUFBLFlBQWdELElBQUFDLEVBQUEsSUFBQUQsUUFBNkcsT0FBbEZELEVBQUEsV0FBaUUsT0FBQUUsR0FBaUJBLEVBSWxNLFNBQUFTLEVBQUFuRCxHQUF3VSxPQUF0T21ELEVBQTNFLG1CQUFBQyxRQUFBLGlCQUFBQSxPQUFBQyxTQUEyRSxTQUFBckQsR0FBa0MsY0FBQUEsR0FBK0IsU0FBQUEsR0FBa0MsT0FBQUEsR0FBQSxtQkFBQW9ELFFBQUFwRCxFQUFBc0QsY0FBQUYsUUFBQXBELElBQUFvRCxPQUFBL0IsVUFBQSxnQkFBQXJCLElBQW1JQSxHQUV4VSxTQUFBMkQsSUFBbVIsT0FBOVBBLEVBQUEvRyxPQUFBZ0gsUUFBQSxTQUFBQyxHQUFnRCxRQUFBckcsRUFBQSxFQUFnQkEsRUFBQXNHLFVBQUFyRyxPQUFzQkQsSUFBQSxDQUFPLElBQUF1RyxFQUFBRCxVQUFBdEcsR0FBMkIsUUFBQUUsS0FBQXFHLEVBQTBCbkgsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXdDLEVBQUFyRyxLQUF5RG1HLEVBQUFuRyxHQUFBcUcsRUFBQXJHLElBQWlDLE9BQUFtRyxJQUFrQkcsTUFBQUMsS0FBQUgsV0FJblIsU0FBQUksRUFBQUwsRUFBQXhFLEdBQTJDLFFBQUE3QixFQUFBLEVBQWdCQSxFQUFBNkIsRUFBQTVCLE9BQWtCRCxJQUFBLENBQU8sSUFBQTJHLEVBQUE5RSxFQUFBN0IsR0FBMkIyRyxFQUFBWCxXQUFBVyxFQUFBWCxhQUFBLEVBQXdEVyxFQUFBVixjQUFBLEVBQWdDLFVBQUFVLE1BQUFULFVBQUEsR0FBdUQ5RyxPQUFBQyxlQUFBZ0gsRUFBQU0sRUFBQXpHLElBQUF5RyxJQUk5UCxTQUFBeUIsRUFBQWxCLEVBQUFuRCxHQUFpRCxPQUFBQSxHQUFBLFdBQUE0QixFQUFBNUIsSUFBQSxtQkFBQUEsRUFFakQsU0FBQW1ELEdBQXVDLFlBQUFBLEVBQXVCLFVBQUFDLGVBQUEsNkRBQXlGLE9BQUFELEVBRmJELENBQUFDLEdBQWZuRCxFQUkzSCxTQUFBNkMsRUFBQUMsR0FBZ0wsT0FBbkpELEVBQUF4SCxPQUFBMEgsZUFBQTFILE9BQUEySCxlQUFBLFNBQUFGLEdBQWdHLE9BQUFBLEVBQUFHLFdBQUE1SCxPQUFBMkgsZUFBQUYsS0FBbURBLEdBSWhMLFNBQUFPLEVBQUFQLEVBQUFRLEdBQTBJLE9BQTFHRCxFQUFBaEksT0FBQTBILGdCQUFBLFNBQUFELEVBQUFRLEdBQTZGLE9BQWpCUixFQUFBRyxVQUFBSyxFQUFpQlIsSUFBYUEsRUFBQVEsR0FFMUksSUFBQWt1QixFQUVBLFNBQUF6dEIsR0FHQSxTQUFBeXRCLElBR0EsT0F4QkEsU0FBQXZ0QixFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQXNCM0ZDLENBQUExQixLQUFBOHVCLEdBRUFudEIsRUFBQTNCLEtBQUFHLEVBQUEydUIsR0FBQS91QixNQUFBQyxLQUFBSCxZQVlBLE9BeEJBLFNBQUF3RCxFQUFBQyxHQUEwQyxzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBN0IsVUFBQSxzREFBNkU0QixFQUFBakcsVUFBQXpFLE9BQUE0SyxPQUFBRCxLQUFBbEcsV0FBeUVpQyxhQUFldkcsTUFBQXVLLEVBQUE1RCxVQUFBLEVBQUFELGNBQUEsS0FBMEQ4RCxHQUFBM0MsRUFBQTBDLEVBQUFDLEdBT3hVRSxDQUFBc3JCLEVBa0JDOXdCLEVBQUF5RixXQWpDRCxTQUFBakMsRUFBQWtDLEVBQUFDLEdBQTZERCxHQUFBekQsRUFBQXVCLEVBQUFwRSxVQUFBc0csR0FBc0VDLEdBQUExRCxFQUFBdUIsRUFBQW1DLEdBdUJuSUMsQ0FBQWtyQixJQUNBcjFCLElBQUEsU0FDQVgsTUFBQSxXQUNBLE9BQUFrRixFQUFBZ0YsY0FBQWlyQixFQUFBLFFBQUF2dUIsR0FDQXVLLEtBQUEsU0FDT2pLLEtBQUE1RSxZQUlQMHpCLEVBbEJBLEdBcUJBajJCLEVBQUEsUUFBQWkyQixFQUNBQSxFQUFBamlCLE9BQUFvaEIsRUFBQSxRQUFBcGhCLDBDQzNEQWxVLE9BQUFDLGVBQUFDLEVBQUEsY0FDQUMsT0FBQSxJQUVBRCxFQUFBLGVBRUEsSUFBQW1GLEVBUUEsU0FBQWpDLEdBQXVDLEdBQUFBLEtBQUFDLFdBQTZCLE9BQUFELEVBQWMsSUFBQTBDLEVBQUFGLElBQXdDLEdBQUFFLEtBQUFDLElBQUEzQyxHQUErQixPQUFBMEMsRUFBQUUsSUFBQTVDLEdBQXlCLElBQUE2QyxLQUFpQixTQUFBN0MsRUFBQSxDQUFtQixJQUFBOEMsRUFBQWxHLE9BQUFDLGdCQUFBRCxPQUFBbUcseUJBQXNGLFFBQUFyRixLQUFBc0MsRUFBdUIsR0FBQXBELE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF2QixFQUFBdEMsR0FBQSxDQUFzRCxJQUFBdUYsRUFBQUgsRUFBQWxHLE9BQUFtRyx5QkFBQS9DLEVBQUF0QyxHQUFBLEtBQXFGdUYsTUFBQUwsS0FBQUssRUFBQUMsS0FBc0N0RyxPQUFBQyxlQUFBZ0csRUFBQW5GLEVBQUF1RixHQUFtREosRUFBQW5GLEdBQUFzQyxFQUFBdEMsSUFBZ0NtRixFQUFBLFFBQUE3QyxFQUF5QjBDLEdBQWFBLEVBQUFRLElBQUFsRCxFQUFBNkMsR0FBMEIsT0FBQUEsRUFSdm9CWCxDQUFvQ2hGLEVBQVEsSUFFNUM4MUIsRUFFQSxTQUFBaHpCLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUY3RS9DLENBQXNDQyxFQUFRLE9BSTlDLFNBQUFzRixJQUFxQyxzQkFBQUMsUUFBQSxZQUFnRCxJQUFBQyxFQUFBLElBQUFELFFBQTZHLE9BQWxGRCxFQUFBLFdBQWlFLE9BQUFFLEdBQWlCQSxFQUlsTSxTQUFBUyxFQUFBbkQsR0FBd1UsT0FBdE9tRCxFQUEzRSxtQkFBQUMsUUFBQSxpQkFBQUEsT0FBQUMsU0FBMkUsU0FBQXJELEdBQWtDLGNBQUFBLEdBQStCLFNBQUFBLEdBQWtDLE9BQUFBLEdBQUEsbUJBQUFvRCxRQUFBcEQsRUFBQXNELGNBQUFGLFFBQUFwRCxJQUFBb0QsT0FBQS9CLFVBQUEsZ0JBQUFyQixJQUFtSUEsR0FFeFUsU0FBQTJELElBQW1SLE9BQTlQQSxFQUFBL0csT0FBQWdILFFBQUEsU0FBQUMsR0FBZ0QsUUFBQXJHLEVBQUEsRUFBZ0JBLEVBQUFzRyxVQUFBckcsT0FBc0JELElBQUEsQ0FBTyxJQUFBdUcsRUFBQUQsVUFBQXRHLEdBQTJCLFFBQUFFLEtBQUFxRyxFQUEwQm5ILE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF3QyxFQUFBckcsS0FBeURtRyxFQUFBbkcsR0FBQXFHLEVBQUFyRyxJQUFpQyxPQUFBbUcsSUFBa0JHLE1BQUFDLEtBQUFILFdBSW5SLFNBQUFJLEVBQUFMLEVBQUF4RSxHQUEyQyxRQUFBN0IsRUFBQSxFQUFnQkEsRUFBQTZCLEVBQUE1QixPQUFrQkQsSUFBQSxDQUFPLElBQUEyRyxFQUFBOUUsRUFBQTdCLEdBQTJCMkcsRUFBQVgsV0FBQVcsRUFBQVgsYUFBQSxFQUF3RFcsRUFBQVYsY0FBQSxFQUFnQyxVQUFBVSxNQUFBVCxVQUFBLEdBQXVEOUcsT0FBQUMsZUFBQWdILEVBQUFNLEVBQUF6RyxJQUFBeUcsSUFJOVAsU0FBQXlCLEVBQUFsQixFQUFBbkQsR0FBaUQsT0FBQUEsR0FBQSxXQUFBNEIsRUFBQTVCLElBQUEsbUJBQUFBLEVBRWpELFNBQUFtRCxHQUF1QyxZQUFBQSxFQUF1QixVQUFBQyxlQUFBLDZEQUF5RixPQUFBRCxFQUZiRCxDQUFBQyxHQUFmbkQsRUFJM0gsU0FBQTZDLEVBQUFDLEdBQWdMLE9BQW5KRCxFQUFBeEgsT0FBQTBILGVBQUExSCxPQUFBMkgsZUFBQSxTQUFBRixHQUFnRyxPQUFBQSxFQUFBRyxXQUFBNUgsT0FBQTJILGVBQUFGLEtBQW1EQSxHQUloTCxTQUFBTyxFQUFBUCxFQUFBUSxHQUEwSSxPQUExR0QsRUFBQWhJLE9BQUEwSCxnQkFBQSxTQUFBRCxFQUFBUSxHQUE2RixPQUFqQlIsRUFBQUcsVUFBQUssRUFBaUJSLElBQWFBLEVBQUFRLEdBRTFJLElBQUFDLEVBQUEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBQyxLQUVBLFFBQUFKLEtBQUFFLEVBQ0FuSSxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0QsRUFBQUYsSUFBQUcsRUFBQUUsUUFBQUwsR0FBQSxJQUFBSSxFQUFBSixHQUFBRSxFQUFBRixJQUdBLFNBQUFFLEdBQUEsbUJBQUFuSSxPQUFBdUksc0JBQUEsS0FBQTNILEVBQUEsTUFBQXFILEVBQUFqSSxPQUFBdUksc0JBQUFKLEdBQTJIdkgsRUFBQXFILEVBQUFwSCxPQUFjRCxJQUN6SXdILEVBQUFFLFFBQUFMLEVBQUFySCxJQUFBLEdBQUFaLE9BQUF5RSxVQUFBK0QscUJBQUE3RCxLQUFBd0QsRUFBQUYsRUFBQXJILE1BQUF5SCxFQUFBSixFQUFBckgsSUFBQXVILEVBQUFGLEVBQUFySCxLQUVBLE9BQUF5SCxHQVFBZ3VCLEdBQ0FDLE9BQUEsRUFDQUMsV0FBQSxjQUNBQyxRQUFBLEVBQ0FDLFdBQUEsVUFDQUMsUUFBQSxnQkE0RUF0eEIsRUF2RUEsU0FBQXNELEdBR0EsU0FBQWl1QixJQUNBLElBQUFodUIsRUEyQkEsT0EzRUEsU0FBQUMsRUFBQUMsR0FBaUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQUMsVUFBQSxxQ0FrRDNGQyxDQUFBMUIsS0FBQXN2QixJQUVBaHVCLEVBQUFLLEVBQUEzQixLQUFBRyxFQUFBbXZCLEdBQUF2dkIsTUFBQUMsS0FBQUgsYUFFQTB2QixVQUFBLFNBQUFoYSxHQUNBQSxFQUFBaWEsVUFFQVQsRUFBQSxRQUFBVSxPQUNBbGEsRUFBQS9ILGtCQUlBbE0sRUFBQW91QixRQUFBLFNBQUFuYSxHQUNBLElBQUFpYSxFQUFBamEsRUFBQWlhLFFBQ0FyaEIsRUFBQTdNLEVBQUFsRyxNQUFBK1MsUUFFQXFoQixJQUFBVCxFQUFBLFFBQUFVLE9BQUF0aEIsR0FDQUEsS0FJQTdNLEVBQUFxdUIsT0FBQSxTQUFBQyxHQUNBdHVCLEVBQUF1dUIsSUFBQUQsR0FHQXR1QixFQXFDQSxPQXBHQSxTQUFBK0IsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQTdCLFVBQUEsc0RBQTZFNEIsRUFBQWpHLFVBQUF6RSxPQUFBNEssT0FBQUQsS0FBQWxHLFdBQXlFaUMsYUFBZXZHLE1BQUF1SyxFQUFBNUQsVUFBQSxFQUFBRCxjQUFBLEtBQTBEOEQsR0FBQTNDLEVBQUEwQyxFQUFBQyxHQWlDeFVFLENBQUE4ckIsRUFvRUN0eEIsRUFBQXlGLFdBN0dELFNBQUFqQyxFQUFBa0MsRUFBQUMsR0FBNkRELEdBQUF6RCxFQUFBdUIsRUFBQXBFLFVBQUFzRyxHQUFzRUMsR0FBQTFELEVBQUF1QixFQUFBbUMsR0EwRW5JQyxDQUFBMHJCLElBQ0E3MUIsSUFBQSxRQUNBWCxNQUFBLFdBQ0FrSCxLQUFBNnZCLEtBQ0E3dkIsS0FBQTZ2QixJQUFBNXJCLFdBSUF4SyxJQUFBLE9BQ0FYLE1BQUEsV0FDQWtILEtBQUE2dkIsS0FDQTd2QixLQUFBNnZCLElBQUEzckIsVUFJQXpLLElBQUEsU0FDQVgsTUFBQSxXQUNBLElBQUFtUyxFQUFBakwsS0FBQTVFLE1BQ0F0QixFQUFBbVIsRUFBQW5SLE1BQ0E2YixFQUFBMUssRUFBQTBLLFFBQ0FsVCxFQUFBNUIsRUFBQW9LLEdBQUEsb0JBRUEsT0FBQWpOLEVBQUFnRixjQUFBLE1BQUF0RCxHQUNBb3dCLEtBQUEsU0FDQTVoQixTQUFBLEVBQ0EvSyxJQUFBbkQsS0FBQTJ2QixRQUNPbHRCLEdBQ1A4c0IsVUFBQXZ2QixLQUFBdXZCLFVBQ0FHLFFBQUExdkIsS0FBQTB2QixRQUNBNTFCLE1BQUE0RixPQUFtQ2lXLEVBQUEsS0FBQXFaLEdBQUFsMUIsVUFLbkN3MUIsRUFwRUEsR0F3RUF6MkIsRUFBQSxRQUFBa0YscUNDdklBcEYsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUFvRCxhQUFBLEVBT0EsSUFBQTh6QixHQUlBQyxVQUFBLEVBS0FDLFVBQUEsRUFLQUMsSUFBQSxFQUtBQyxXQUFBLEdBTUFWLE1BQUEsR0FLQVcsTUFBQSxHQUtBQyxLQUFBLEdBS0FDLElBQUEsR0FLQUMsTUFBQSxHQUtBQyxVQUFBLEdBS0FDLElBQUEsR0FLQUMsTUFBQSxHQUtBQyxRQUFBLEdBTUFDLFVBQUEsR0FNQUMsSUFBQSxHQU1BQyxLQUFBLEdBTUFDLEtBQUEsR0FNQUMsR0FBQSxHQU1BQyxNQUFBLEdBTUFDLEtBQUEsR0FNQUMsYUFBQSxHQUtBQyxPQUFBLEdBTUFDLE9BQUEsR0FNQUMsS0FBQSxHQUtBQyxJQUFBLEdBS0FDLElBQUEsR0FLQUMsTUFBQSxHQUtBQyxLQUFBLEdBS0FDLEtBQUEsR0FLQUMsSUFBQSxHQUtBQyxNQUFBLEdBS0FDLE1BQUEsR0FLQUMsS0FBQSxHQUtBQyxjQUFBLEdBTUFDLEVBQUEsR0FLQUMsRUFBQSxHQUtBQyxFQUFBLEdBS0FDLEVBQUEsR0FLQUMsRUFBQSxHQUtBQyxFQUFBLEdBS0FDLEVBQUEsR0FLQUMsRUFBQSxHQUtBQyxFQUFBLEdBS0FDLEVBQUEsR0FLQUMsRUFBQSxHQUtBQyxFQUFBLEdBS0FDLEVBQUEsR0FLQUMsRUFBQSxHQUtBQyxFQUFBLEdBS0FDLEVBQUEsR0FLQUMsRUFBQSxHQUtBQyxFQUFBLEdBS0FDLEVBQUEsR0FLQUMsRUFBQSxHQUtBQyxFQUFBLEdBS0FDLEVBQUEsR0FLQUMsRUFBQSxHQUtBQyxFQUFBLEdBS0FDLEVBQUEsR0FLQUMsRUFBQSxHQUtBQyxLQUFBLEdBTUFDLGNBQUEsR0FLQUMsYUFBQSxHQUtBQyxTQUFBLEdBS0FDLFFBQUEsR0FLQUMsUUFBQSxHQUtBQyxVQUFBLEdBS0FDLFNBQUEsSUFLQUMsU0FBQSxJQUtBQyxRQUFBLElBS0FDLFVBQUEsSUFLQUMsVUFBQSxJQUtBQyxTQUFBLElBS0FDLGFBQUEsSUFLQUMsU0FBQSxJQUtBQyxVQUFBLElBS0FDLFdBQUEsSUFLQUMsYUFBQSxJQUtBQyxHQUFBLElBS0FDLEdBQUEsSUFLQUMsR0FBQSxJQUtBQyxHQUFBLElBS0FDLEdBQUEsSUFLQUMsR0FBQSxJQUtBQyxHQUFBLElBS0FDLEdBQUEsSUFLQUMsR0FBQSxJQUtBQyxJQUFBLElBS0FDLElBQUEsSUFLQUMsSUFBQSxJQUtBQyxRQUFBLElBS0FDLFVBQUEsSUFNQUMsS0FBQSxJQU1BQyxPQUFBLElBTUFDLE1BQUEsSUFNQUMsT0FBQSxJQU1BQyxNQUFBLElBTUFDLFdBQUEsSUFNQUMsYUFBQSxJQU1BQyxvQkFBQSxJQU1BQyxVQUFBLElBTUFDLHFCQUFBLElBTUFDLFFBQUEsSUFLQUMsWUFBQSxJQU1BQyxRQUFBLElBTUFDLHdCQUFBLFNBQUF6MUIsR0FDQSxJQUFBeXVCLEVBQUF6dUIsRUFBQXl1QixRQUVBLEdBQUF6dUIsRUFBQTAxQixTQUFBMTFCLEVBQUEyMUIsU0FBQTMxQixFQUFBNDFCLFNBQ0FuSCxHQUFBTyxFQUFBOEUsSUFBQXJGLEdBQUFPLEVBQUF5RixJQUNBLFNBS0EsT0FBQWhHLEdBQ0EsS0FBQU8sRUFBQU8sSUFDQSxLQUFBUCxFQUFBUyxVQUNBLEtBQUFULEVBQUE4RCxhQUNBLEtBQUE5RCxFQUFBTSxLQUNBLEtBQUFOLEVBQUFtQixLQUNBLEtBQUFuQixFQUFBYyxJQUNBLEtBQUFkLEVBQUFVLElBQ0EsS0FBQVYsRUFBQWUsS0FDQSxLQUFBZixFQUFBcUIsT0FDQSxLQUFBckIsRUFBQWdCLEtBQ0EsS0FBQWhCLEVBQUF1RyxZQUNBLEtBQUF2RyxFQUFBNEQsS0FDQSxLQUFBNUQsRUFBQTBGLFFBQ0EsS0FBQTFGLEVBQUFJLFdBQ0EsS0FBQUosRUFBQWEsVUFDQSxLQUFBYixFQUFBWSxRQUNBLEtBQUFaLEVBQUFRLE1BQ0EsS0FBQVIsRUFBQW9CLGFBQ0EsS0FBQXBCLEVBQUFrQixNQUNBLEtBQUFsQixFQUFBSyxNQUNBLEtBQUFMLEVBQUFpQixHQUNBLEtBQUFqQixFQUFBc0csUUFDQSxLQUFBdEcsRUFBQTZELGNBQ0EsU0FFQSxRQUNBLFdBUUFnRCxlQUFBLFNBQUFwSCxHQUNBLEdBQUFBLEdBQUFPLEVBQUF1QixNQUFBOUIsR0FBQU8sRUFBQWdDLEtBQ0EsU0FHQSxHQUFBdkMsR0FBQU8sRUFBQStELFVBQUF0RSxHQUFBTyxFQUFBeUUsYUFDQSxTQUdBLEdBQUFoRixHQUFBTyxFQUFBa0MsR0FBQXpDLEdBQUFPLEVBQUEyRCxFQUNBLFNBSUEsUUFBQTM1QixPQUFBODhCLFdBQUFDLFVBQUE3MUIsUUFBQSxlQUFBdXVCLEVBQ0EsU0FHQSxPQUFBQSxHQUNBLEtBQUFPLEVBQUFXLE1BQ0EsS0FBQVgsRUFBQWlDLGNBQ0EsS0FBQWpDLEVBQUEwRSxTQUNBLEtBQUExRSxFQUFBMkUsVUFDQSxLQUFBM0UsRUFBQTRFLFdBQ0EsS0FBQTVFLEVBQUE2RSxhQUNBLEtBQUE3RSxFQUFBMkYsVUFDQSxLQUFBM0YsRUFBQTRGLEtBQ0EsS0FBQTVGLEVBQUE2RixPQUNBLEtBQUE3RixFQUFBOEYsTUFDQSxLQUFBOUYsRUFBQStGLE9BQ0EsS0FBQS9GLEVBQUFnRyxNQUNBLEtBQUFoRyxFQUFBaUcsV0FDQSxLQUFBakcsRUFBQWtHLGFBQ0EsS0FBQWxHLEVBQUFtRyxvQkFDQSxLQUFBbkcsRUFBQW9HLFVBQ0EsS0FBQXBHLEVBQUFxRyxxQkFDQSxTQUVBLFFBQ0EsWUFJQXI0QixFQUFBZ3lCLEVBQ0FsM0IsRUFBQW9ELFFBQUE4QixxQ0M5b0JBcEYsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsZUFFQSxJQUFBbUYsRUF3QkEsU0FBQWpDLEdBQXVDLEdBQUFBLEtBQUFDLFdBQTZCLE9BQUFELEVBQWMsSUFBQTBDLEVBQUFGLElBQXdDLEdBQUFFLEtBQUFDLElBQUEzQyxHQUErQixPQUFBMEMsRUFBQUUsSUFBQTVDLEdBQXlCLElBQUE2QyxLQUFpQixTQUFBN0MsRUFBQSxDQUFtQixJQUFBOEMsRUFBQWxHLE9BQUFDLGdCQUFBRCxPQUFBbUcseUJBQXNGLFFBQUFyRixLQUFBc0MsRUFBdUIsR0FBQXBELE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF2QixFQUFBdEMsR0FBQSxDQUFzRCxJQUFBdUYsRUFBQUgsRUFBQWxHLE9BQUFtRyx5QkFBQS9DLEVBQUF0QyxHQUFBLEtBQXFGdUYsTUFBQUwsS0FBQUssRUFBQUMsS0FBc0N0RyxPQUFBQyxlQUFBZ0csRUFBQW5GLEVBQUF1RixHQUFtREosRUFBQW5GLEdBQUFzQyxFQUFBdEMsSUFBZ0NtRixFQUFBLFFBQUE3QyxFQUF5QjBDLEdBQWFBLEVBQUFRLElBQUFsRCxFQUFBNkMsR0FBMEIsT0FBQUEsRUF4QnZvQlgsQ0FBb0NoRixFQUFRLElBRTVDbUYsRUFBQXBGLEVBQXlDQyxFQUFRLEtBRWpEMFEsRUFBQTNRLEVBQW1DQyxFQUFRLEtBRTNDODlCLEVBQUEvOUIsRUFBbUNDLEVBQVEsT0FFM0MrOUIsRUFBQWgrQixFQUFtQ0MsRUFBUSxPQUUzQ2crQixFQUFBaitCLEVBQW1DQyxFQUFRLE9BRTNDaStCLEVBQUFsK0IsRUFBa0NDLEVBQVEsT0FFMUNrK0IsRUFBQW4rQixFQUFrQ0MsRUFBUSxPQUUxQ3FGLEVBQXNCckYsRUFBUSxJQUU5QjhNLEVBQUEvTSxFQUFzQ0MsRUFBUSxLQUU5QyxTQUFBRCxFQUFBK0MsR0FBc0MsT0FBQUEsS0FBQUMsV0FBQUQsR0FBdUNFLFFBQUFGLEdBRTdFLFNBQUF3QyxJQUFxQyxzQkFBQUMsUUFBQSxZQUFnRCxJQUFBQyxFQUFBLElBQUFELFFBQTZHLE9BQWxGRCxFQUFBLFdBQWlFLE9BQUFFLEdBQWlCQSxFQUlsTSxTQUFBUyxFQUFBbkQsR0FBd1UsT0FBdE9tRCxFQUEzRSxtQkFBQUMsUUFBQSxpQkFBQUEsT0FBQUMsU0FBMkUsU0FBQXJELEdBQWtDLGNBQUFBLEdBQStCLFNBQUFBLEdBQWtDLE9BQUFBLEdBQUEsbUJBQUFvRCxRQUFBcEQsRUFBQXNELGNBQUFGLFFBQUFwRCxJQUFBb0QsT0FBQS9CLFVBQUEsZ0JBQUFyQixJQUFtSUEsR0FFeFUsU0FBQTJELElBQW1SLE9BQTlQQSxFQUFBL0csT0FBQWdILFFBQUEsU0FBQUMsR0FBZ0QsUUFBQXJHLEVBQUEsRUFBZ0JBLEVBQUFzRyxVQUFBckcsT0FBc0JELElBQUEsQ0FBTyxJQUFBdUcsRUFBQUQsVUFBQXRHLEdBQTJCLFFBQUFFLEtBQUFxRyxFQUEwQm5ILE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF3QyxFQUFBckcsS0FBeURtRyxFQUFBbkcsR0FBQXFHLEVBQUFyRyxJQUFpQyxPQUFBbUcsSUFBa0JHLE1BQUFDLEtBQUFILFdBRW5SLFNBQUFQLEVBQUF2RCxFQUFBdEMsRUFBQVgsR0FBbU0sT0FBeEpXLEtBQUFzQyxFQUFrQnBELE9BQUFDLGVBQUFtRCxFQUFBdEMsR0FBa0NYLFFBQUF5RyxZQUFBLEVBQUFDLGNBQUEsRUFBQUMsVUFBQSxJQUFnRjFELEVBQUF0QyxHQUFBWCxFQUFvQmlELEVBSW5NLFNBQUFrRSxFQUFBTCxFQUFBeEUsR0FBMkMsUUFBQTdCLEVBQUEsRUFBZ0JBLEVBQUE2QixFQUFBNUIsT0FBa0JELElBQUEsQ0FBTyxJQUFBMkcsRUFBQTlFLEVBQUE3QixHQUEyQjJHLEVBQUFYLFdBQUFXLEVBQUFYLGFBQUEsRUFBd0RXLEVBQUFWLGNBQUEsRUFBZ0MsVUFBQVUsTUFBQVQsVUFBQSxHQUF1RDlHLE9BQUFDLGVBQUFnSCxFQUFBTSxFQUFBekcsSUFBQXlHLElBSTlQLFNBQUF5QixFQUFBbEIsRUFBQW5ELEdBQWlELE9BQUFBLEdBQUEsV0FBQTRCLEVBQUE1QixJQUFBLG1CQUFBQSxFQUVqRCxTQUFBbUQsR0FBdUMsWUFBQUEsRUFBdUIsVUFBQUMsZUFBQSw2REFBeUYsT0FBQUQsRUFGYkQsQ0FBQUMsR0FBZm5ELEVBSTNILFNBQUE2QyxFQUFBQyxHQUFnTCxPQUFuSkQsRUFBQXhILE9BQUEwSCxlQUFBMUgsT0FBQTJILGVBQUEsU0FBQUYsR0FBZ0csT0FBQUEsRUFBQUcsV0FBQTVILE9BQUEySCxlQUFBRixLQUFtREEsR0FJaEwsU0FBQU8sRUFBQVAsRUFBQVEsR0FBMEksT0FBMUdELEVBQUFoSSxPQUFBMEgsZ0JBQUEsU0FBQUQsRUFBQVEsR0FBNkYsT0FBakJSLEVBQUFHLFVBQUFLLEVBQWlCUixJQUFhQSxFQUFBUSxHQUUxSSxJQUFBQyxFQUFBLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsS0FFQSxRQUFBSixLQUFBRSxFQUNBbkksT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXdELEVBQUFGLElBQUFHLEVBQUFFLFFBQUFMLEdBQUEsSUFBQUksRUFBQUosR0FBQUUsRUFBQUYsSUFHQSxTQUFBRSxHQUFBLG1CQUFBbkksT0FBQXVJLHNCQUFBLEtBQUEzSCxFQUFBLE1BQUFxSCxFQUFBakksT0FBQXVJLHNCQUFBSixHQUEySHZILEVBQUFxSCxFQUFBcEgsT0FBY0QsSUFDekl3SCxFQUFBRSxRQUFBTCxFQUFBckgsSUFBQSxHQUFBWixPQUFBeUUsVUFBQStELHFCQUFBN0QsS0FBQXdELEVBQUFGLEVBQUFySCxNQUFBeUgsRUFBQUosRUFBQXJILElBQUF1SCxFQUFBRixFQUFBckgsS0FFQSxPQUFBeUgsR0FpQkEsSUFBQW8yQixFQUVBLFNBQUEvMUIsR0FHQSxTQUFBKzFCLElBQ0EsSUFBQTkxQixFQWdKQSxPQWpNQSxTQUFBQyxFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQW1EM0ZDLENBQUExQixLQUFBbzNCLElBRUE5MUIsRUFBQUssRUFBQTNCLEtBQUFHLEVBQUFpM0IsR0FBQXIzQixNQUFBQyxLQUFBSCxhQUVBdzNCLFlBQUEsU0FBQTU5QixHQUNBNkgsRUFBQWxHLE1BQUFpOEIsYUFDQS8xQixFQUFBbEcsTUFBQWk4QixZQUFBNTlCLElBSUE2SCxFQUFBZzJCLFdBQUEsU0FBQXAxQixHQUNBLElBQUFDLEVBQUFvMUIsRUF5RkFDLEVBdkZBcDFCLEVBQUFGLEVBQUFFLGFBRUE2SSxFQUFBM0osRUFBQWxHLE1BQ0FrSCxFQUFBMkksRUFBQTFJLFVBQ0FDLEVBQUF5SSxFQUFBekksVUFDQTBGLEVBQUErQyxFQUFBL0MsTUFDQXV2QixFQUFBeHNCLEVBQUF5c0IsVUFDQUEsT0FBQSxJQUFBRCxLQUFrREEsRUFDbERFLEVBQUExc0IsRUFBQTJzQixVQUNBQSxPQUFBLElBQUFELEtBQWtEQSxFQUNsRDdhLEVBQUE3UixFQUFBNlIsTUFDQW5RLEVBQUExQixFQUFBMEIsUUFDQWtyQixFQUFBNXNCLEVBQUEwTCxTQUNBQSxPQUFBLElBQUFraEIsS0FDQUMsRUFBQTdzQixFQUFBaEIsS0FDQUEsT0FBQSxJQUFBNnRCLEVBQUEsVUFBQUEsRUFDQXp6QixFQUFBNEcsRUFBQTVHLEtBQ0EwekIsRUFBQTlzQixFQUFBOHNCLE1BQ0FDLEVBQUEvc0IsRUFBQStzQixRQUNBQyxFQUFBaHRCLEVBQUFndEIsUUFDQTcrQixFQUFBNlIsRUFBQTdSLFNBQ0E4K0IsRUFBQWp0QixFQUFBaXRCLGFBQ0FDLEVBQUFsdEIsRUFBQWt0QixvQkFDQUMsRUFBQW50QixFQUFBbXRCLG1CQUNBN3BCLEVBQUExTixFQUFBb0ssR0FBQSxzTUFFQTFJLEVBQUFILEVBQUEsT0FBQUUsR0FDQWlFLEdBQUEsRUFBQW5JLEVBQUEsU0FBQW1FLEVBQUFDLEdBQTJGbEQsRUFBM0Y2QyxLQUEyRixHQUFBWSxPQUFBUixFQUFBLFlBQUFvSyxHQUFBck4sRUFBQTZDLEVBQUEsR0FBQVksT0FBQVIsRUFBQSxhQUFBb1UsR0FBQXJYLEVBQUE2QyxFQUFBLEdBQUFZLE9BQUFSLEVBQUEsY0FBQWpCLEVBQUErMkIsMEJBQUEvNEIsRUFBQTZDLEVBQUEsR0FBQVksT0FBQVIsRUFBQSxpQkFBQWpCLEVBQUFnM0IsaUJBQUFoNUIsRUFBQTZDLEVBQUEsR0FBQVksT0FBQVIsRUFBQSxpQkFBQTAxQixLQUFBeitCLFFBQUE4RixFQUFBNkMsRUFBQSxHQUFBWSxPQUFBUixFQUFBLEtBQUFRLE9BQUFrSCxHQUFBLFlBQUFBLEdBQUEzSyxFQUFBNkMsRUFBQSxHQUFBWSxPQUFBUixFQUFBLFVBQUFRLE9BQUFzQixRQUFBbEMsSUFDM0ZvMkIsRUFBQSxJQUFBWCxFQUFBekksU0FBQSxRQUFBeUksRUFBQXpJLFNBQ0FBLFFBQUEsU0FDTy9yQixFQUNQbzFCLEVBQUF4NkIsRUFBQWdGLGNBQUEsT0FDQVIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLG9CQUNBekksTUFBQXkrQixHQUNPdjZCLEVBQUFnRixjQUFBazBCLEVBQUEsU0FDUHVCLE9BQUEsR0FDT3o2QixFQUFBZ0YsY0FBQW0wQixFQUFBLFNBQ1B1QixLQUFBLElBQ08xNkIsRUFBQWdGLGNBQUEsT0FDUFIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLHNCQUNPdkUsRUFBQWdGLGNBQUFrMEIsRUFBQSxTQUNQdUIsT0FBQSxHQUNPejZCLEVBQUFnRixjQUFBbTBCLEVBQUEsU0FDUHVCLEtBQUEsR0FDTzE2QixFQUFBZ0YsY0FBQSxPQUNQUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEscUJBQ092RSxFQUFBZ0YsY0FBQW0wQixFQUFBLFNBQ1B1QixLQUFBLElBQ08xNkIsRUFBQWdGLGNBQUEsT0FDUFIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLHNCQUNPdkUsRUFBQWdGLGNBQUFrMEIsRUFBQSxTQUNQdUIsT0FBQSxHQUNPejZCLEVBQUFnRixjQUFBbTBCLEVBQUEsU0FDUHVCLEtBQUEsR0FDTzE2QixFQUFBZ0YsY0FBQSxPQUNQUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEscUJBQ092RSxFQUFBZ0YsY0FBQW0wQixFQUFBLFNBQ1B1QixLQUFBLElBQ08xNkIsRUFBQWdGLGNBQUEsT0FDUFIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLHNCQUNPdkUsRUFBQWdGLGNBQUFrMEIsRUFBQSxTQUNQdUIsT0FBQSxHQUNPejZCLEVBQUFnRixjQUFBbTBCLEVBQUEsU0FDUHVCLEtBQUEsSUFDTzE2QixFQUFBZ0YsY0FBQSxPQUNQUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEscUJBQ092RSxFQUFBZ0YsY0FBQW0wQixFQUFBLFNBQ1B1QixLQUFBLEdBQ08xNkIsRUFBQWdGLGNBQUEsT0FDUFIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLHNCQUNPdkUsRUFBQWdGLGNBQUFrMEIsRUFBQSxTQUNQdUIsT0FBQSxHQUNPejZCLEVBQUFnRixjQUFBbTBCLEVBQUEsU0FDUHVCLEtBQUEsR0FDTzE2QixFQUFBZ0YsY0FBQSxPQUNQUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEscUJBQ092RSxFQUFBZ0YsY0FBQW0wQixFQUFBLFNBQ1B1QixLQUFBLEdBQ08xNkIsRUFBQWdGLGNBQUEsT0FDUFIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLHFCQUNPdkUsRUFBQWdGLGNBQUFtMEIsRUFBQSxTQUNQdUIsS0FBQSxJQUNPMTZCLEVBQUFnRixjQUFBLE9BQ1BSLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSx1QkFFQW8yQixPQUFBdjFCLElBQUE4MEIsRUFDQVUsR0FBd0N0NUIsRUFBeENpNEIsS0FBd0NvQixFQUFBLCtCQUFBQSxFQUFBVCxFQUFBQyxHQUFBNzRCLEVBQUFpNEIsRUFBQSxxQkFBQWEsR0FBQWIsR0FFeENzQixFQUFBWixLQUFBeitCLE9BQUF3RSxFQUFBZ0YsY0FBQWkwQixFQUFBLFFBQUF2M0IsS0FBOEZrNUIsR0FDOUZwMkIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLGNBQ0EwSCxLQUFBLFFBQ0FuSSxTQUFBUixFQUFBKzFCLGNBQ09ZLEVBQUFod0IsSUFBQSxTQUFBTCxHQUNQLE9BQUE1SixFQUFBZ0YsY0FBQWkwQixFQUFBLFFBQUE2QixTQUNBQyxJQUFBbnhCLEVBQUFteEIsSUFDQWwyQixTQUFBK0UsRUFBQS9FLFNBQ0FwSixJQUFBbU8sRUFBQW5PLFNBRU8sTUFFUHFqQixHQUFBNVUsR0FBQTJ3QixLQUNBckIsRUFBQXg1QixFQUFBZ0YsY0FBQSxPQUNBUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsU0FDQXpJLE1BQUE0OUIsR0FDUzE1QixFQUFBZ0YsY0FBQSxPQUNUUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsa0JBQ1N1YSxHQUFBOWUsRUFBQWdGLGNBQUEsT0FDVFIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLGdCQUNTdWEsR0FBQTVVLEdBQUFsSyxFQUFBZ0YsY0FBQSxPQUNUUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsV0FDUzJGLElBQUEyd0IsSUFHVCxJQUFBRyxFQUFBakIsRUFBQS81QixFQUFBZ0YsY0FBQSxPQUNBUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsV0FDT3cxQixHQUFBLEtBQ1AvYixFQUFBaGUsRUFBQWdGLGNBQUEsT0FDQVIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLFNBQ0F6SSxNQUFBODlCLEdBQ09qckIsRUFBQTZyQixFQUFBcC9CLEdBQ1A2L0IsRUFBQWpCLEtBQUF4K0IsT0FBQXdFLEVBQUFnRixjQUFBLE1BQ0FSLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxhQTVKQSxTQUFBeTFCLEdBV0EsT0FWQUEsRUFBQS92QixJQUFBLFNBQUFpeEIsRUFBQXYvQixHQUNBLE9BQ0FxRSxFQUFBZ0YsY0FBQSxNQUNBbEosT0FDQThpQixNQUFBLEdBQUE3WixPQUFBLElBQUFpMUIsRUFBQXgrQixPQUFBLE1BRUFDLElBQUEsVUFBQXNKLE9BQUFwSixJQUNPcUUsRUFBQWdGLGNBQUEsWUFBQWsyQixNQXFKQUMsQ0FBQW5CLElBQUEsS0FDUG9CLEdBQUEsRUFBQXp2QixFQUFBLFNBQUE0RSxHQUFBLHlDQUNBLE9BQUF2USxFQUFBZ0YsY0FBQSxNQUFBdEQsS0FBbUQwNUIsR0FDbkQ1MkIsVUFBQStELElBQ09peEIsRUFBQXdCLEVBQUFoZCxFQUFBaWQsSUFHUDMzQixFQTJDQSxPQWhPQSxTQUFBK0IsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQTdCLFVBQUEsc0RBQTZFNEIsRUFBQWpHLFVBQUF6RSxPQUFBNEssT0FBQUQsS0FBQWxHLFdBQXlFaUMsYUFBZXZHLE1BQUF1SyxFQUFBNUQsVUFBQSxFQUFBRCxjQUFBLEtBQTBEOEQsR0FBQTNDLEVBQUEwQyxFQUFBQyxHQWtDeFVFLENBQUE0ekIsRUErTENwNUIsRUFBQXlGLFdBek9ELFNBQUFqQyxFQUFBa0MsRUFBQUMsR0FBNkRELEdBQUF6RCxFQUFBdUIsRUFBQXBFLFVBQUFzRyxHQUFzRUMsR0FBQTFELEVBQUF1QixFQUFBbUMsR0FnTW5JQyxDQUFBd3pCLElBQ0EzOUIsSUFBQSxvQkFDQVgsTUFBQSxXQUNBLGVBQUFrSCxLQUFBNUUsU0FDQSxFQUFBMkssRUFBQSxVQUFBL0YsS0FBQTVFLE1BQUFpK0IsV0FBQSw0RkFDQSxFQUFBdHpCLEVBQUEsV0FBQS9GLEtBQUE1RSxNQUFBaStCLFdBQUEsMkVBS0E1L0IsSUFBQSx5QkFDQVgsTUFBQSxXQUNBLElBQUE0VCxFQUFBMU0sS0FBQTVFLE1BQ0FpK0IsRUFBQTNzQixFQUFBMnNCLFdBQ0FDLEVBQUE1c0IsRUFBQTRzQixVQUVBLHFCQUFBdDVCLEtBQUE1RSxPQUNBaStCLEdBQUFDLElBR0FBLEtBR0E3L0IsSUFBQSxnQkFDQVgsTUFBQSxXQUNBLElBQUF5Z0MsRUFNQSxPQUxBdjdCLEVBQUE5QixTQUFBQyxRQUFBNkQsS0FBQTVFLE1BQUFoQyxTQUFBLFNBQUErUCxHQUNBQSxLQUFBOUUsTUFBQThFLEVBQUE5RSxPQUFBMHlCLEVBQUEsVUFDQXdDLEdBQUEsS0FHQUEsS0FHQTkvQixJQUFBLFNBQ0FYLE1BQUEsV0FDQSxPQUFBa0YsRUFBQWdGLGNBQUExRSxFQUFBNkYsZUFBQSxLQUFBbkUsS0FBQXMzQixnQkFJQUYsRUEvTEEsR0FrTUF2K0IsRUFBQSxRQUFBdStCLEVBQ0FBLEVBQUFvQyxLQUFBekMsRUFBQSxRQUNBSyxFQUFBcUMsS0FBQXpDLEVBQUEsMkNDdFJBcitCLE9BQUFDLGVBQUFDLEVBQUEsY0FDQUMsT0FBQSxJQUVBRCxFQUFBLGVBRUEsSUFBQW1GLEVBVUEsU0FBQWpDLEdBQXVDLEdBQUFBLEtBQUFDLFdBQTZCLE9BQUFELEVBQWMsSUFBQTBDLEVBQUFGLElBQXdDLEdBQUFFLEtBQUFDLElBQUEzQyxHQUErQixPQUFBMEMsRUFBQUUsSUFBQTVDLEdBQXlCLElBQUE2QyxLQUFpQixTQUFBN0MsRUFBQSxDQUFtQixJQUFBOEMsRUFBQWxHLE9BQUFDLGdCQUFBRCxPQUFBbUcseUJBQXNGLFFBQUFyRixLQUFBc0MsRUFBdUIsR0FBQXBELE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF2QixFQUFBdEMsR0FBQSxDQUFzRCxJQUFBdUYsRUFBQUgsRUFBQWxHLE9BQUFtRyx5QkFBQS9DLEVBQUF0QyxHQUFBLEtBQXFGdUYsTUFBQUwsS0FBQUssRUFBQUMsS0FBc0N0RyxPQUFBQyxlQUFBZ0csRUFBQW5GLEVBQUF1RixHQUFtREosRUFBQW5GLEdBQUFzQyxFQUFBdEMsSUFBZ0NtRixFQUFBLFFBQUE3QyxFQUF5QjBDLEdBQWFBLEVBQUFRLElBQUFsRCxFQUFBNkMsR0FBMEIsT0FBQUEsRUFWdm9CWCxDQUFvQ2hGLEVBQVEsSUFFNUNtRixFQUlBLFNBQUFyQyxHQUFzQyxPQUFBQSxLQUFBQyxXQUFBRCxHQUF1Q0UsUUFBQUYsR0FKN0UvQyxDQUF5Q0MsRUFBUSxLQUVqRHFGLEVBQXNCckYsRUFBUSxJQUk5QixTQUFBc0YsSUFBcUMsc0JBQUFDLFFBQUEsWUFBZ0QsSUFBQUMsRUFBQSxJQUFBRCxRQUE2RyxPQUFsRkQsRUFBQSxXQUFpRSxPQUFBRSxHQUFpQkEsRUFJbE0sU0FBQWlCLElBQW1SLE9BQTlQQSxFQUFBL0csT0FBQWdILFFBQUEsU0FBQUMsR0FBZ0QsUUFBQXJHLEVBQUEsRUFBZ0JBLEVBQUFzRyxVQUFBckcsT0FBc0JELElBQUEsQ0FBTyxJQUFBdUcsRUFBQUQsVUFBQXRHLEdBQTJCLFFBQUFFLEtBQUFxRyxFQUEwQm5ILE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF3QyxFQUFBckcsS0FBeURtRyxFQUFBbkcsR0FBQXFHLEVBQUFyRyxJQUFpQyxPQUFBbUcsSUFBa0JHLE1BQUFDLEtBQUFILFdBSW5SLElBQUFnQixFQUFBLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsS0FFQSxRQUFBSixLQUFBRSxFQUNBbkksT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXdELEVBQUFGLElBQUFHLEVBQUFFLFFBQUFMLEdBQUEsSUFBQUksRUFBQUosR0FBQUUsRUFBQUYsSUFHQSxTQUFBRSxHQUFBLG1CQUFBbkksT0FBQXVJLHNCQUFBLEtBQUEzSCxFQUFBLE1BQUFxSCxFQUFBakksT0FBQXVJLHNCQUFBSixHQUEySHZILEVBQUFxSCxFQUFBcEgsT0FBY0QsSUFDekl3SCxFQUFBRSxRQUFBTCxFQUFBckgsSUFBQSxHQUFBWixPQUFBeUUsVUFBQStELHFCQUFBN0QsS0FBQXdELEVBQUFGLEVBQUFySCxNQUFBeUgsRUFBQUosRUFBQXJILElBQUF1SCxFQUFBRixFQUFBckgsS0FFQSxPQUFBeUgsR0FxQkFqRCxFQWxCQSxTQUFBM0MsR0FDQSxPQUFBNEMsRUFBQWdGLGNBQUExRSxFQUFBNkYsZUFBQSxjQUFBakMsR0FDQSxJQUFBRSxFQUFBRixFQUFBRSxhQUVBRSxFQUFBbEgsRUFBQW1ILFVBQ0FDLEVBQUFwSCxFQUFBb0gsVUFDQWszQixFQUFBdCtCLEVBQUFrK0IsVUFDQUEsT0FBQSxJQUFBSSxLQUNBbnJCLEVBQUExTixFQUFBekYsR0FBQSxzQ0FFQW1ILEVBQUFILEVBQUEsT0FBQUUsR0FDQWlFLEdBQUEsRUFBQW5JLEVBQUEsWUFBQTJFLE9BQUFSLEVBQUEsU0FBQUMsRUExQkEsU0FBQXpHLEVBQUF0QyxFQUFBWCxHQUFtTSxPQUF4SlcsS0FBQXNDLEVBQWtCcEQsT0FBQUMsZUFBQW1ELEVBQUF0QyxHQUFrQ1gsUUFBQXlHLFlBQUEsRUFBQUMsY0FBQSxFQUFBQyxVQUFBLElBQWdGMUQsRUFBQXRDLEdBQUFYLEVBQW9CaUQsRUEwQm5NdUQsSUFBOEcsR0FBQXlELE9BQUFSLEVBQUEsbUJBQUErMkIsSUFDOUcsT0FBQXQ3QixFQUFBZ0YsY0FBQSxNQUFBdEQsS0FBaUQ2TyxHQUNqRC9MLFVBQUErRCxRQU1BMU4sRUFBQSxRQUFBa0YscUNDckRBcEYsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsZUFFQSxJQUFBbUYsRUFVQSxTQUFBakMsR0FBdUMsR0FBQUEsS0FBQUMsV0FBNkIsT0FBQUQsRUFBYyxJQUFBMEMsRUFBQUYsSUFBd0MsR0FBQUUsS0FBQUMsSUFBQTNDLEdBQStCLE9BQUEwQyxFQUFBRSxJQUFBNUMsR0FBeUIsSUFBQTZDLEtBQWlCLFNBQUE3QyxFQUFBLENBQW1CLElBQUE4QyxFQUFBbEcsT0FBQUMsZ0JBQUFELE9BQUFtRyx5QkFBc0YsUUFBQXJGLEtBQUFzQyxFQUF1QixHQUFBcEQsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXZCLEVBQUF0QyxHQUFBLENBQXNELElBQUF1RixFQUFBSCxFQUFBbEcsT0FBQW1HLHlCQUFBL0MsRUFBQXRDLEdBQUEsS0FBcUZ1RixNQUFBTCxLQUFBSyxFQUFBQyxLQUFzQ3RHLE9BQUFDLGVBQUFnRyxFQUFBbkYsRUFBQXVGLEdBQW1ESixFQUFBbkYsR0FBQXNDLEVBQUF0QyxJQUFnQ21GLEVBQUEsUUFBQTdDLEVBQXlCMEMsR0FBYUEsRUFBQVEsSUFBQWxELEVBQUE2QyxHQUEwQixPQUFBQSxFQVZ2b0JYLENBQW9DaEYsRUFBUSxJQUU1Q21GLEVBSUEsU0FBQXJDLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUo3RS9DLENBQXlDQyxFQUFRLEtBRWpEcUYsRUFBc0JyRixFQUFRLElBSTlCLFNBQUFzRixJQUFxQyxzQkFBQUMsUUFBQSxZQUFnRCxJQUFBQyxFQUFBLElBQUFELFFBQTZHLE9BQWxGRCxFQUFBLFdBQWlFLE9BQUFFLEdBQWlCQSxFQUlsTSxTQUFBaUIsSUFBbVIsT0FBOVBBLEVBQUEvRyxPQUFBZ0gsUUFBQSxTQUFBQyxHQUFnRCxRQUFBckcsRUFBQSxFQUFnQkEsRUFBQXNHLFVBQUFyRyxPQUFzQkQsSUFBQSxDQUFPLElBQUF1RyxFQUFBRCxVQUFBdEcsR0FBMkIsUUFBQUUsS0FBQXFHLEVBQTBCbkgsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXdDLEVBQUFyRyxLQUF5RG1HLEVBQUFuRyxHQUFBcUcsRUFBQXJHLElBQWlDLE9BQUFtRyxJQUFrQkcsTUFBQUMsS0FBQUgsV0FFblIsSUFBQWdCLEVBQUEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBQyxLQUVBLFFBQUFKLEtBQUFFLEVBQ0FuSSxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0QsRUFBQUYsSUFBQUcsRUFBQUUsUUFBQUwsR0FBQSxJQUFBSSxFQUFBSixHQUFBRSxFQUFBRixJQUdBLFNBQUFFLEdBQUEsbUJBQUFuSSxPQUFBdUksc0JBQUEsS0FBQTNILEVBQUEsTUFBQXFILEVBQUFqSSxPQUFBdUksc0JBQUFKLEdBQTJIdkgsRUFBQXFILEVBQUFwSCxPQUFjRCxJQUN6SXdILEVBQUFFLFFBQUFMLEVBQUFySCxJQUFBLEdBQUFaLE9BQUF5RSxVQUFBK0QscUJBQUE3RCxLQUFBd0QsRUFBQUYsRUFBQXJILE1BQUF5SCxFQUFBSixFQUFBckgsSUFBQXVILEVBQUFGLEVBQUFySCxLQUVBLE9BQUF5SCxHQWtDQWpELEVBL0JBLFNBQUEzQyxHQUNBLE9BQUE0QyxFQUFBZ0YsY0FBQTFFLEVBQUE2RixlQUFBLGNBQUFqQyxHQUNBLElBQUFFLEVBQUFGLEVBQUFFLGFBRUFFLEVBQUFsSCxFQUFBbUgsVUFDQUMsRUFBQXBILEVBQUFvSCxVQUNBbTNCLEVBQUF2K0IsRUFBQXUrQixPQUNBN2MsRUFBQTFoQixFQUFBMGhCLE1BQ0E4YyxFQUFBeCtCLEVBQUF3K0IsWUFDQXJyQixFQUFBMU4sRUFBQXpGLEdBQUEseURBRUFtSCxFQUFBSCxFQUFBLE9BQUFFLEdBQ0FpRSxHQUFBLEVBQUFuSSxFQUFBLFlBQUEyRSxPQUFBUixFQUFBLFNBQUFDLEdBQ0FxM0IsRUFBQUYsRUFBQTM3QixFQUFBZ0YsY0FBQSxPQUNBUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsaUJBQ0tvM0IsR0FBQSxLQUNMRyxFQUFBaGQsRUFBQTllLEVBQUFnRixjQUFBLE9BQ0FSLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxnQkFDS3VhLEdBQUEsS0FDTGlkLEVBQUFILEVBQUE1N0IsRUFBQWdGLGNBQUEsT0FDQVIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLHNCQUNLcTNCLEdBQUEsS0FDTEksRUFBQUYsR0FBQUMsRUFBQS83QixFQUFBZ0YsY0FBQSxPQUNBUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsaUJBQ0t1M0IsRUFBQUMsR0FBQSxLQUNMLE9BQUEvN0IsRUFBQWdGLGNBQUEsTUFBQXRELEtBQWlENk8sR0FDakQvTCxVQUFBK0QsSUFDS3N6QixFQUFBRyxNQUtMbmhDLEVBQUEsUUFBQWtGLHFDQ2hFQXBGLE9BQUFDLGVBQUFDLEVBQUEsY0FDQUMsT0FBQSxJQUVBRCxFQUFBLGVBRUEsSUFBQW1GLEVBQUFDLEVBQW9DaEYsRUFBUSxJQUU1Q29XLEVBQUFwUixFQUF1Q2hGLEVBQVEsS0FFL0NnaEMsRUFBQWg4QixFQUFzQ2hGLEVBQVEsT0FFOUNpaEMsRUFBQWxoQyxFQUF5Q0MsRUFBUSxPQUVqRG1GLEVBQUFwRixFQUF5Q0MsRUFBUSxLQUVqRDBRLEVBQUEzUSxFQUFtQ0MsRUFBUSxLQUUzQ2toQyxFQUFBbmhDLEVBQXFDQyxFQUFRLE9BRTdDMlEsRUFBQTVRLEVBQW1DQyxFQUFRLEtBRTNDcUYsRUFBc0JyRixFQUFRLElBRTlCOE0sRUFBQS9NLEVBQXNDQyxFQUFRLEtBRTlDbWhDLEVBQW9CbmhDLEVBQVEsTUFFNUIsU0FBQUQsRUFBQStDLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUU3RSxTQUFBd0MsSUFBcUMsc0JBQUFDLFFBQUEsWUFBZ0QsSUFBQUMsRUFBQSxJQUFBRCxRQUE2RyxPQUFsRkQsRUFBQSxXQUFpRSxPQUFBRSxHQUFpQkEsRUFFbE0sU0FBQVIsRUFBQWxDLEdBQXVDLEdBQUFBLEtBQUFDLFdBQTZCLE9BQUFELEVBQWMsSUFBQTBDLEVBQUFGLElBQXdDLEdBQUFFLEtBQUFDLElBQUEzQyxHQUErQixPQUFBMEMsRUFBQUUsSUFBQTVDLEdBQXlCLElBQUE2QyxLQUFpQixTQUFBN0MsRUFBQSxDQUFtQixJQUFBOEMsRUFBQWxHLE9BQUFDLGdCQUFBRCxPQUFBbUcseUJBQXNGLFFBQUFyRixLQUFBc0MsRUFBdUIsR0FBQXBELE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF2QixFQUFBdEMsR0FBQSxDQUFzRCxJQUFBdUYsRUFBQUgsRUFBQWxHLE9BQUFtRyx5QkFBQS9DLEVBQUF0QyxHQUFBLEtBQXFGdUYsTUFBQUwsS0FBQUssRUFBQUMsS0FBc0N0RyxPQUFBQyxlQUFBZ0csRUFBQW5GLEVBQUF1RixHQUFtREosRUFBQW5GLEdBQUFzQyxFQUFBdEMsSUFBZ0csT0FBaEVtRixFQUFBLFFBQUE3QyxFQUF5QjBDLEdBQWFBLEVBQUFRLElBQUFsRCxFQUFBNkMsR0FBMEJBLEVBRXZvQixTQUFBYyxJQUFtUixPQUE5UEEsRUFBQS9HLE9BQUFnSCxRQUFBLFNBQUFDLEdBQWdELFFBQUFyRyxFQUFBLEVBQWdCQSxFQUFBc0csVUFBQXJHLE9BQXNCRCxJQUFBLENBQU8sSUFBQXVHLEVBQUFELFVBQUF0RyxHQUEyQixRQUFBRSxLQUFBcUcsRUFBMEJuSCxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0MsRUFBQXJHLEtBQXlEbUcsRUFBQW5HLEdBQUFxRyxFQUFBckcsSUFBaUMsT0FBQW1HLElBQWtCRyxNQUFBQyxLQUFBSCxXQUVuUixTQUFBUCxFQUFBdkQsRUFBQXRDLEVBQUFYLEdBQW1NLE9BQXhKVyxLQUFBc0MsRUFBa0JwRCxPQUFBQyxlQUFBbUQsRUFBQXRDLEdBQWtDWCxRQUFBeUcsWUFBQSxFQUFBQyxjQUFBLEVBQUFDLFVBQUEsSUFBZ0YxRCxFQUFBdEMsR0FBQVgsRUFBb0JpRCxFQUVuTSxTQUFBbUQsRUFBQW5ELEdBQXdVLE9BQXRPbUQsRUFBM0UsbUJBQUFDLFFBQUEsaUJBQUFBLE9BQUFDLFNBQTJFLFNBQUFyRCxHQUFrQyxjQUFBQSxHQUErQixTQUFBQSxHQUFrQyxPQUFBQSxHQUFBLG1CQUFBb0QsUUFBQXBELEVBQUFzRCxjQUFBRixRQUFBcEQsSUFBQW9ELE9BQUEvQixVQUFBLGdCQUFBckIsSUFBbUlBLEdBSXhVLFNBQUFrRSxFQUFBTCxFQUFBeEUsR0FBMkMsUUFBQTdCLEVBQUEsRUFBZ0JBLEVBQUE2QixFQUFBNUIsT0FBa0JELElBQUEsQ0FBTyxJQUFBMkcsRUFBQTlFLEVBQUE3QixHQUEyQjJHLEVBQUFYLFdBQUFXLEVBQUFYLGFBQUEsRUFBd0RXLEVBQUFWLGNBQUEsRUFBZ0MsVUFBQVUsTUFBQVQsVUFBQSxHQUF1RDlHLE9BQUFDLGVBQUFnSCxFQUFBTSxFQUFBekcsSUFBQXlHLElBSTlQLFNBQUF5QixFQUFBbEIsRUFBQW5ELEdBQWlELE9BQUFBLEdBQUEsV0FBQTRCLEVBQUE1QixJQUFBLG1CQUFBQSxFQUVqRCxTQUFBbUQsR0FBdUMsWUFBQUEsRUFBdUIsVUFBQUMsZUFBQSw2REFBeUYsT0FBQUQsRUFGYkQsQ0FBQUMsR0FBZm5ELEVBSTNILFNBQUE2QyxFQUFBQyxHQUFnTCxPQUFuSkQsRUFBQXhILE9BQUEwSCxlQUFBMUgsT0FBQTJILGVBQUEsU0FBQUYsR0FBZ0csT0FBQUEsRUFBQUcsV0FBQTVILE9BQUEySCxlQUFBRixLQUFtREEsR0FJaEwsU0FBQU8sRUFBQVAsRUFBQVEsR0FBMEksT0FBMUdELEVBQUFoSSxPQUFBMEgsZ0JBQUEsU0FBQUQsRUFBQVEsR0FBNkYsT0FBakJSLEVBQUFHLFVBQUFLLEVBQWlCUixJQUFhQSxFQUFBUSxHQUUxSSxJQUFBQyxFQUFBLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsS0FFQSxRQUFBSixLQUFBRSxFQUNBbkksT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXdELEVBQUFGLElBQUFHLEVBQUFFLFFBQUFMLEdBQUEsSUFBQUksRUFBQUosR0FBQUUsRUFBQUYsSUFHQSxTQUFBRSxHQUFBLG1CQUFBbkksT0FBQXVJLHNCQUFBLEtBQUEzSCxFQUFBLE1BQUFxSCxFQUFBakksT0FBQXVJLHNCQUFBSixHQUEySHZILEVBQUFxSCxFQUFBcEgsT0FBY0QsSUFDekl3SCxFQUFBRSxRQUFBTCxFQUFBckgsSUFBQSxHQUFBWixPQUFBeUUsVUFBQStELHFCQUFBN0QsS0FBQXdELEVBQUFGLEVBQUFySCxNQUFBeUgsRUFBQUosRUFBQXJILElBQUF1SCxFQUFBRixFQUFBckgsS0FFQSxPQUFBeUgsR0FHQXE1QixFQUVBLFNBQUFoNUIsR0FHQSxTQUFBZzVCLElBQ0EsSUFBQS80QixFQTBIQSxPQTdKQSxTQUFBQyxFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQXFDM0ZDLENBQUExQixLQUFBcTZCLElBRUEvNEIsRUFBQUssRUFBQTNCLEtBQUFHLEVBQUFrNkIsR0FBQXQ2QixNQUFBQyxLQUFBSCxhQUVBeTZCLFVBQUEsU0FBQUMsRUFBQXg1QixHQUdBLEdBRkFBLEVBQUF3TSxrQkFFQWd0QixFQUFBLENBSUEsSUFBQUMsRUFBQWw1QixFQUFBbEcsTUFBQW8vQixPQUVBQSxHQUNBQSxFQUFBRCxFQUFBLFlBSUFqNUIsRUFBQThMLGFBQUEsU0FBQS9ULEdBQ0EsSUFBQXlJLEVBQUFSLEVBQUFsRyxNQUFBMEcsU0FFQUEsR0FDQUEsRUFBQXpJLElBSUFpSSxFQUFBbTVCLGFBQUEsU0FBQUYsR0FDQSxJQUFBQyxFQUFBbDVCLEVBQUFsRyxNQUFBby9CLE9BRUFBLEdBQ0FBLEVBQUFELEVBQUEsUUFJQWo1QixFQUFBbzVCLFdBQUEsU0FBQXg0QixHQUNBLElBQUFDLEVBRUFDLEVBQUFGLEVBQUFFLGFBQ0FzSyxFQUFBcEwsRUFBQWxHLE1BQ0FrSCxFQUFBb0ssRUFBQW5LLFVBQ0FvNEIsRUFBQWp1QixFQUFBbEssVUFDQUEsT0FBQSxJQUFBbTRCLEVBQUEsR0FBQUEsRUFDQTF3QixFQUFBeUMsRUFBQXpDLEtBQ0Eyd0IsRUFBQWx1QixFQUFBckksS0FDQUEsT0FBQSxJQUFBdTJCLEVBQUEsT0FBQUEsRUFDQUMsRUFBQW51QixFQUFBbXVCLFlBQ0F6aEMsRUFBQXNULEVBQUF0VCxTQUNBMGhDLEVBQUFwdUIsRUFBQXF1QixTQUNBQSxPQUFBLElBQUFELEtBQ0FFLEVBQUF0dUIsRUFBQXN1QixRQUNBNUMsRUFBQTkyQixFQUFBbEcsTUFBQWc5QixtQkFDQTZDLEVBQUEsV0FBQS83QixFQUFBNjdCLEtBQUFHLFFBQUFILEVBRUEsU0FBQTEyQixJQUNBNDJCLEVBQUEsYUFBQTM1QixFQUFBbEcsT0FBQTYvQixJQUdBLEVBQUFsMUIsRUFBQSxXQUFBMUIsRUFBQXBELFFBQUEsdUJBQUFnSixHQUFBLFVBQUFBLElBQUEsc0ZBQ0EsSUFBQTFILEVBQUFILEVBQUEsT0FBQUUsR0FDQXFKLEdBQUEsRUFBQXZOLEVBQUEsU0FBQW9FLEdBQXdFbEQsRUFBeEU2QyxLQUF3RSxHQUFBWSxPQUFBUixFQUFBLHNCQUFBczRCLEdBQUEsVUFBQUEsR0FBQXY3QixFQUFBNkMsRUFBQSxHQUFBWSxPQUFBUixFQUFBLEtBQUFRLE9BQUFrSCxRQUFBM0ssRUFBQTZDLEVBQUEsR0FBQVksT0FBQVIsRUFBQSxTQUFBOEIsRUFBQXBELFFBQUEsWUFBQTNCLEVBQUE2QyxFQUFBLEdBQUFZLE9BQUFSLEVBQUEsS0FBQVEsT0FBQXNCLElBQUEsR0FBQS9FLEVBQUE2QyxFQUFBLEdBQUFZLE9BQUFSLEVBQUEsa0JBQUEwNEIsR0FBQTk0QixJQUV4RWc1QixLQUVBLGtCQUFBOTJCLElBQ0E4MkIsS0FDQW45QixFQUFBOUIsU0FBQUMsUUFBQS9DLEVBQUEsU0FBQWdELEVBQUF6QyxHQUNBLElBQUFxRSxFQUFBb0wsZUFBQWhOLEdBQUEsT0FBQUEsRUFDQSxJQUFBZy9CLEVBQUFoL0IsRUFBQWhCLE1BQUFnZ0MsU0FFQUMsR0FEQUQsT0FBQSxJQUFBQSxNQUNBcDlCLEVBQUFnRixjQUFBNEcsRUFBQSxTQUNBdkYsS0FBQSxRQUNBN0IsVUFBQSxHQUFBTyxPQUFBUixFQUFBLFlBQ0E0TCxRQUFBLFNBQUFwTixHQUNBLE9BQUFPLEVBQUFnNUIsVUFBQWwrQixFQUFBM0MsSUFBQXNILE1BRVcsS0FDWG82QixFQUFBOStCLEtBQUEyQixFQUFBa08sYUFBQTlQLEdBQ0EyOEIsSUFBQS82QixFQUFBZ0YsY0FBQSxPQUNBUixVQUFBNDRCLE9BQUFoNEIsRUFBQSxHQUFBTCxPQUFBUixFQUFBLG9CQUNhbkcsRUFBQWhCLE1BQUEyOUIsSUFBQXNDLEdBQ2I1aEMsSUFBQTJDLEVBQUEzQyxLQUFBRSxPQUlBcWhDLElBQ0E1QyxFQUFBcDZCLEVBQUFnRixjQUFBLFlBQUFoRixFQUFBZ0YsY0FBQTRHLEVBQUEsU0FDQXZGLEtBQUEsT0FDQTdCLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxZQUNBNEwsUUFBQTdNLEVBQUFtNUIsZUFDV3JDLEtBSVhBLElBQUFwNkIsRUFBQWdGLGNBQUEsT0FDQVIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLG1CQUNPNjFCLEdBQUEsS0FFUCxJQUFBa0QsRUFBQXo2QixFQUFBUyxFQUFBbEcsVUFFQW1nQyxHQUFBLEVBQUFuOUIsRUFBQSxZQUFBMkUsT0FBQVIsRUFBQSxLQUFBUSxPQUFBODNCLEVBQUEsWUFBQXgyQixFQUFBcEQsUUFBQSxlQUFBOEIsT0FBQVIsRUFBQSxrQkFDQSxPQUFBdkUsRUFBQWdGLGNBQUFpM0IsRUFBQSxRQUFBdjZCLEtBQWdFNEIsRUFBQWxHLE9BQ2hFbUgsWUFDQUMsVUFBQW1KLEVBQ0EvUSxlQUFBaWdDLEVBQ0FXLGFBQUEsV0FDQSxPQUFBeDlCLEVBQUFnRixjQUFBbTNCLEVBQUEsUUFBQXo2QixNQUFvRSxFQUFBaUssRUFBQSxTQUFBMnhCLEdBQUEsZUFDcEVsRCx5QkFHQXFELGlCQUFBLFdBQ0EsT0FBQXo5QixFQUFBZ0YsY0FBQWszQixFQUFBLFNBQ0ExM0IsVUFBQSs0QixFQUNBUixTQUFBRSxFQUNBUyxvQkFBQSxLQUdBNTVCLFNBQUFSLEVBQUE4TCxlQUNPK3RCLEVBQUEzaEMsT0FBQSxFQUFBMmhDLEVBQUEvaEMsSUFHUGtJLEVBb0JBLE9BcktBLFNBQUErQixFQUFBQyxHQUEwQyxzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBN0IsVUFBQSxzREFBNkU0QixFQUFBakcsVUFBQXpFLE9BQUE0SyxPQUFBRCxLQUFBbEcsV0FBeUVpQyxhQUFldkcsTUFBQXVLLEVBQUE1RCxVQUFBLEVBQUFELGNBQUEsS0FBMEQ4RCxHQUFBM0MsRUFBQTBDLEVBQUFDLEdBb0J4VUUsQ0FBQTYyQixFQWtKQ3I4QixFQUFBeUYsV0E5S0QsU0FBQWpDLEVBQUFrQyxFQUFBQyxHQUE2REQsR0FBQXpELEVBQUF1QixFQUFBcEUsVUFBQXNHLEdBQXNFQyxHQUFBMUQsRUFBQXVCLEVBQUFtQyxHQTRKbklDLENBQUF5MkIsSUFDQTVnQyxJQUFBLG9CQUNBWCxNQUFBLFdBQ0EsSUFDQTRDLEVBQUEyVCxFQUFBbUMsWUFBQXhSLE1BRUF0RSxJQUFBMCtCLEVBQUF1QixrQkFBQSxJQUFBamdDLEVBQUE4RyxVQUFBdkIsUUFIQSxjQUlBdkYsRUFBQThHLFdBSkEsZUFRQS9JLElBQUEsU0FDQVgsTUFBQSxXQUNBLE9BQUFrRixFQUFBZ0YsY0FBQTFFLEVBQUE2RixlQUFBLEtBQUFuRSxLQUFBMDZCLGdCQUlBTCxFQWxKQSxHQXFKQXhoQyxFQUFBLFFBQUF3aEMsRUFDQUEsRUFBQXZCLFFBQUFtQixFQUFBbkIsUUFDQXVCLEVBQUFqMkIsY0FDQTQyQixTQUFBLEVBQ0FILFlBQUEsMENDL05BbGlDLE9BQUFDLGVBQUFDLEVBQUEsY0FDQUMsT0FBQSxJQUdBLElBRUE4aUMsRUFBQTVpQyxFQUZnQkMsRUFBUSxJQU14QkYsRUFBQUMsRUFGdUJDLEVBQVEsS0FNL0I0aUMsRUFBQTdpQyxFQUZ1QkMsRUFBUSxLQU0vQjZpQyxFQUFBOWlDLEVBRm9CQyxFQUFRLEtBTTVCOGlDLEVBQUEvaUMsRUFGa0NDLEVBQVEsS0FNMUMraUMsRUFBQWhqQyxFQUZpQkMsRUFBUSxLQU16QjZDLEVBQUE5QyxFQUZhQyxFQUFRLElBTXJCZ2pDLEVBQUFqakMsRUFGaUJDLEVBQVEsSUFNekJpakMsRUFBQWxqQyxFQUZtQkMsRUFBUSxLQUkzQmtqQyxFQUFhbGpDLEVBQVEsTUFFckIsU0FBQUQsRUFBQStDLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUU3RSxJQUFBcWdDLEVBQUEsU0FBQS82QixHQUdBLFNBQUErNkIsSUFFQSxPQURBLEVBQUFQLEVBQUEsU0FBQTc3QixLQUFBbzhCLElBQ0EsRUFBQUwsRUFBQSxTQUFBLzdCLE1BQUFvOEIsRUFBQTc3QixXQUFBNUgsT0FBQTJILGVBQUE4N0IsSUFBQXI4QixNQUFBQyxLQUFBSCxZQStEQSxPQW5FQSxFQUFBbThCLEVBQUEsU0FBQUksRUFBQS82QixJQU9BLEVBQUF5NkIsRUFBQSxTQUFBTSxJQUNBM2lDLElBQUEsY0FDQVgsTUFBQSxXQUNBLElBQUFzQyxFQUFBNEUsS0FBQTVFLE1BQ0EvQixFQUFBK0IsRUFBQS9CLFVBQ0FELEVBQUFnQyxFQUFBaEMsU0FDQWlqQyxLQWVBLE9BYkF2Z0MsRUFBQSxRQUFBSSxTQUFBQyxRQUFBL0MsRUFBQSxTQUFBZ0QsR0FDQSxHQUFBQSxFQUFBLENBR0EsSUFBQTNDLEVBQUEyQyxFQUFBM0MsSUFDQTZpQyxFQUFBampDLElBQUFJLEVBQ0E0aUMsRUFBQWhnQyxLQUFBUCxFQUFBLFFBQUFvUSxhQUFBOVAsR0FDQWtnQyxTQUNBQyx1QkFBQW5oQyxFQUFBbWhDLHVCQUNBQyxjQUFBcGhDLEVBQUFtSCxnQkFJQTg1QixLQUdBNWlDLElBQUEsU0FDQVgsTUFBQSxXQUNBLElBQUFzRixFQUVBaEQsRUFBQTRFLEtBQUE1RSxNQUNBbUgsRUFBQW5ILEVBQUFtSCxVQUNBbkosRUFBQWdDLEVBQUFoQyxTQUNBQyxFQUFBK0IsRUFBQS9CLFVBQ0FtSixFQUFBcEgsRUFBQW9ILFVBQ0E1SCxFQUFBUSxFQUFBUixlQUNBbWdDLEVBQUEzL0IsRUFBQTIvQixTQUNBVyxFQUFBdGdDLEVBQUFzZ0MsbUJBQ0E1aEMsRUFBQXNCLEVBQUF0QixNQUVBMmlDLEdBQUEsRUFBQVAsRUFBQSxVQUFBOTlCLE1BQWtFLEVBQUFyRixFQUFBLFNBQUFxRixFQUFBbUUsRUFBQSxrQkFBQXhKLEVBQUEsU0FBQXFGLEVBQUEyOEIsRUFBQXg0QixFQUFBLG9CQUFBQSxFQUFBLDJCQUFBbkUsR0FBQW9FLEdBQ2xFLEdBQUF1NEIsRUFBQSxDQUNBLElBQUEyQixHQUFBLEVBQUFQLEVBQUFoakMsZ0JBQUFDLEVBQUFDLEdBQ0EsUUFBQXFqQyxFQUFBLENBQ0EsSUFBQUMsRUFBQWpCLEdBQUEsRUFBQVMsRUFBQXRoQyxnQkFBQTZoQyxFQUFBOWhDLElBQUEsRUFBQXVoQyxFQUFBN2hDLHdCQUFBLEVBQUE2aEMsRUFBQXhoQyxxQkFBQStoQyxFQUFBOWhDLElBQ0FkLEdBQUEsRUFBQThoQyxFQUFBLFlBQThDOWhDLEVBQUE2aUMsUUFFOUM3aUMsR0FBQSxFQUFBOGhDLEVBQUEsWUFBOEM5aEMsR0FDOUN1MUIsUUFBQSxTQUlBLE9BQUF2ekIsRUFBQSxRQUFBa0gsY0FDQSxPQUVBUixVQUFBaTZCLEVBQ0EzaUMsU0FFQWtHLEtBQUE0OEIsbUJBSUFSLEVBcEVBLENBcUVDdGdDLEVBQUEsUUFBQTJILFdBRUQ1SyxFQUFBLFFBQUF1akMsRUFHQUEsRUFBQXJ2QixXQUNBZ3VCLFNBQUFrQixFQUFBLFFBQUE1eEIsS0FDQXF4QixtQkFBQU8sRUFBQSxRQUFBNXhCLEtBQ0E5SCxVQUFBMDVCLEVBQUEsUUFBQWp5QixPQUNBNVEsU0FBQTZpQyxFQUFBLFFBQUExK0IsS0FDQWxFLFVBQUE0aUMsRUFBQSxRQUFBanlCLE9BQ0FsUSxNQUFBbWlDLEVBQUEsUUFBQTEzQixJQUNBM0osZUFBQXFoQyxFQUFBLFFBQUFqeUIsT0FDQXhILFVBQUF5NUIsRUFBQSxRQUFBanlCLE9BQ0F1eUIsdUJBQUFOLEVBQUEsUUFBQTV4QixNQUdBK3hCLEVBQUFoNEIsY0FDQTIyQixVQUFBLEdBRUFwOUIsRUFBQTlFLFVBQUEsMkNDcklBRixPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFFQUQsRUFBQSxlQUVBLElBQUFtRixFQVlBLFNBQUFqQyxHQUF1QyxHQUFBQSxLQUFBQyxXQUE2QixPQUFBRCxFQUFjLElBQUEwQyxFQUFBRixJQUF3QyxHQUFBRSxLQUFBQyxJQUFBM0MsR0FBK0IsT0FBQTBDLEVBQUFFLElBQUE1QyxHQUF5QixJQUFBNkMsS0FBaUIsU0FBQTdDLEVBQUEsQ0FBbUIsSUFBQThDLEVBQUFsRyxPQUFBQyxnQkFBQUQsT0FBQW1HLHlCQUFzRixRQUFBckYsS0FBQXNDLEVBQXVCLEdBQUFwRCxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBdkIsRUFBQXRDLEdBQUEsQ0FBc0QsSUFBQXVGLEVBQUFILEVBQUFsRyxPQUFBbUcseUJBQUEvQyxFQUFBdEMsR0FBQSxLQUFxRnVGLE1BQUFMLEtBQUFLLEVBQUFDLEtBQXNDdEcsT0FBQUMsZUFBQWdHLEVBQUFuRixFQUFBdUYsR0FBbURKLEVBQUFuRixHQUFBc0MsRUFBQXRDLElBQWdDbUYsRUFBQSxRQUFBN0MsRUFBeUIwQyxHQUFhQSxFQUFBUSxJQUFBbEQsRUFBQTZDLEdBQTBCLE9BQUFBLEVBWnZvQlgsQ0FBb0NoRixFQUFRLElBRTVDNGpDLEVBQUE3akMsRUFBa0RDLEVBQVEsT0FFMURtRixFQUFBcEYsRUFBeUNDLEVBQVEsS0FFakQyUSxFQUFBNVEsRUFBbUNDLEVBQVEsS0FFM0MsU0FBQUQsRUFBQStDLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUU3RSxTQUFBd0MsSUFBcUMsc0JBQUFDLFFBQUEsWUFBZ0QsSUFBQUMsRUFBQSxJQUFBRCxRQUE2RyxPQUFsRkQsRUFBQSxXQUFpRSxPQUFBRSxHQUFpQkEsRUFJbE0sU0FBQWlCLElBQW1SLE9BQTlQQSxFQUFBL0csT0FBQWdILFFBQUEsU0FBQUMsR0FBZ0QsUUFBQXJHLEVBQUEsRUFBZ0JBLEVBQUFzRyxVQUFBckcsT0FBc0JELElBQUEsQ0FBTyxJQUFBdUcsRUFBQUQsVUFBQXRHLEdBQTJCLFFBQUFFLEtBQUFxRyxFQUEwQm5ILE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF3QyxFQUFBckcsS0FBeURtRyxFQUFBbkcsR0FBQXFHLEVBQUFyRyxJQUFpQyxPQUFBbUcsSUFBa0JHLE1BQUFDLEtBQUFILFdBRW5SLFNBQUFQLEVBQUF2RCxFQUFBdEMsRUFBQVgsR0FBbU0sT0FBeEpXLEtBQUFzQyxFQUFrQnBELE9BQUFDLGVBQUFtRCxFQUFBdEMsR0FBa0NYLFFBQUF5RyxZQUFBLEVBQUFDLGNBQUEsRUFBQUMsVUFBQSxJQUFnRjFELEVBQUF0QyxHQUFBWCxFQUFvQmlELEVBRW5NLFNBQUFtRCxFQUFBbkQsR0FBd1UsT0FBdE9tRCxFQUEzRSxtQkFBQUMsUUFBQSxpQkFBQUEsT0FBQUMsU0FBMkUsU0FBQXJELEdBQWtDLGNBQUFBLEdBQStCLFNBQUFBLEdBQWtDLE9BQUFBLEdBQUEsbUJBQUFvRCxRQUFBcEQsRUFBQXNELGNBQUFGLFFBQUFwRCxJQUFBb0QsT0FBQS9CLFVBQUEsZ0JBQUFyQixJQUFtSUEsR0FJeFUsU0FBQWtFLEVBQUFMLEVBQUF4RSxHQUEyQyxRQUFBN0IsRUFBQSxFQUFnQkEsRUFBQTZCLEVBQUE1QixPQUFrQkQsSUFBQSxDQUFPLElBQUEyRyxFQUFBOUUsRUFBQTdCLEdBQTJCMkcsRUFBQVgsV0FBQVcsRUFBQVgsYUFBQSxFQUF3RFcsRUFBQVYsY0FBQSxFQUFnQyxVQUFBVSxNQUFBVCxVQUFBLEdBQXVEOUcsT0FBQUMsZUFBQWdILEVBQUFNLEVBQUF6RyxJQUFBeUcsSUFJOVAsU0FBQXlCLEVBQUFsQixFQUFBbkQsR0FBaUQsT0FBQUEsR0FBQSxXQUFBNEIsRUFBQTVCLElBQUEsbUJBQUFBLEVBRWpELFNBQUFtRCxHQUF1QyxZQUFBQSxFQUF1QixVQUFBQyxlQUFBLDZEQUF5RixPQUFBRCxFQUZiRCxDQUFBQyxHQUFmbkQsRUFJM0gsU0FBQTZDLEVBQUFDLEdBQWdMLE9BQW5KRCxFQUFBeEgsT0FBQTBILGVBQUExSCxPQUFBMkgsZUFBQSxTQUFBRixHQUFnRyxPQUFBQSxFQUFBRyxXQUFBNUgsT0FBQTJILGVBQUFGLEtBQW1EQSxHQUloTCxTQUFBTyxFQUFBUCxFQUFBUSxHQUEwSSxPQUExR0QsRUFBQWhJLE9BQUEwSCxnQkFBQSxTQUFBRCxFQUFBUSxHQUE2RixPQUFqQlIsRUFBQUcsVUFBQUssRUFBaUJSLElBQWFBLEVBQUFRLEdBRTFJLElBQUFrOEIsRUFFQSxTQUFBejdCLEdBR0EsU0FBQXk3QixJQUdBLE9BeEJBLFNBQUF2N0IsRUFBQUMsR0FBaUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQUMsVUFBQSxxQ0FzQjNGQyxDQUFBMUIsS0FBQTg4QixHQUVBbjdCLEVBQUEzQixLQUFBRyxFQUFBMjhCLEdBQUEvOEIsTUFBQUMsS0FBQUgsWUEyREEsT0F2RUEsU0FBQXdELEVBQUFDLEdBQTBDLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUE3QixVQUFBLHNEQUE2RTRCLEVBQUFqRyxVQUFBekUsT0FBQTRLLE9BQUFELEtBQUFsRyxXQUF5RWlDLGFBQWV2RyxNQUFBdUssRUFBQTVELFVBQUEsRUFBQUQsY0FBQSxLQUEwRDhELEdBQUEzQyxFQUFBMEMsRUFBQUMsR0FPeFVFLENBQUFzNUIsRUFpRUM5K0IsRUFBQXlGLFdBaEZELFNBQUFqQyxFQUFBa0MsRUFBQUMsR0FBNkRELEdBQUF6RCxFQUFBdUIsRUFBQXBFLFVBQUFzRyxHQUFzRUMsR0FBQTFELEVBQUF1QixFQUFBbUMsR0F1Qm5JQyxDQUFBazVCLElBQ0FyakMsSUFBQSxTQUNBWCxNQUFBLFdBQ0EsSUFBQXFKLEVBeUNBNDZCLEVBdkNBcndCLEVBQUExTSxLQUFBNUUsTUFDQTRoQyxFQUFBdHdCLEVBQUFzd0IsWUFDQWpDLEVBQUFydUIsRUFBQXF1QixTQUNBUyxFQUFBOXVCLEVBQUE4dUIsYUFDQXBELEVBQUExckIsRUFBQTByQixtQkFDQXlDLEVBQUFudUIsRUFBQW11QixZQUNBdDRCLEVBQUFtSyxFQUFBbkssVUFDQUMsRUFBQWtLLEVBQUFsSyxVQUNBeUgsRUFBQXlDLEVBQUF6QyxLQUNBNUYsRUFBQXFJLEVBQUFySSxLQUNBNDRCLEVBQUEsV0FBQS85QixFQUFBNjdCLEtBQUFtQyxPQUFBbkMsRUFDQXJnQyxFQUFBLFNBQUFtZ0MsR0FBQSxVQUFBQSxFQUNBc0MsRUFBQXppQyxFQUFBLFlBQ0EwaUMsRUFBQTFpQyxFQUFBLGVBQ0EwekIsRUFBQXB3QixFQUFBZ0YsY0FBQSxRQUNBUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsbUJBQ092RSxFQUFBZ0YsY0FBQTRHLEVBQUEsU0FDUHZGLEtBQUE4NEIsRUFDQTM2QixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsNEJBRUE4ckIsRUFBQXJ3QixFQUFBZ0YsY0FBQSxRQUNBUixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsbUJBQ092RSxFQUFBZ0YsY0FBQTRHLEVBQUEsU0FDUHZGLEtBQUErNEIsRUFDQTU2QixVQUFBLEdBQUFPLE9BQUFSLEVBQUEsNEJBR0FvSixHQUFBLEVBQUF2TixFQUFBLFlBQUEyRSxPQUFBUixFQUFBLEtBQUFRLE9BQUE4M0IsRUFBQSxTQUFvSHY3QixFQUFwSDZDLEtBQW9ILEdBQUFZLE9BQUFSLEVBQUEsS0FBQVEsT0FBQWtILEVBQUEsVUFBQUEsR0FBQTNLLEVBQUE2QyxFQUFBLEdBQUFZLE9BQUFSLEVBQUEsYUFBQThCLEtBQUFwRCxRQUFBLFlBQUFrQixHQUFBSyxHQUVwSDY2QixFQUFBMzlCLE9BQTRDTSxLQUFBNUUsUUFDNUNoQyxTQUFBLEtBQ0E2akMsaUJBQ0FLLGFBQUFsRixFQUNBdCtCLE1BQUFrakMsRUFDQTVPLFdBQ0FDLFdBQ0E3ckIsVUFBQW1KLElBV0EsT0FMQW94QixFQURBdkIsRUFDQUEsRUFBQTZCLEVBQUFSLEVBQUEsU0FFQTcrQixFQUFBZ0YsY0FBQTY1QixFQUFBLFFBQUFRLEdBR0FyL0IsRUFBQWtPLGFBQUE2d0IsT0FJQUQsRUFqRUEsR0FvRUFqa0MsRUFBQSxRQUFBaWtDLEVBQ0FBLEVBQUExNEIsY0FDQTIyQixVQUFBLEVBQ0ExMkIsS0FBQSwyQ0NsSEExTCxPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFHQSxJQUVBOGlDLEVBQUE1aUMsRUFGZ0JDLEVBQVEsSUFNeEJza0MsRUFBQXZrQyxFQUZnQ0MsRUFBUSxLQU14QzRpQyxFQUFBN2lDLEVBRnVCQyxFQUFRLEtBTS9CNmlDLEVBQUE5aUMsRUFGb0JDLEVBQVEsS0FNNUI4aUMsRUFBQS9pQyxFQUZrQ0MsRUFBUSxLQU0xQytpQyxFQUFBaGpDLEVBRmlCQyxFQUFRLEtBTXpCNkMsRUFBQTlDLEVBRmFDLEVBQVEsSUFNckJnakMsRUFBQWpqQyxFQUZpQkMsRUFBUSxJQU16QnVrQyxFQUFBeGtDLEVBRnFCQyxFQUFRLE9BTTdCd2tDLEVBQUF6a0MsRUFGc0JDLEVBQVEsT0FNOUJ5a0MsRUFBQTFrQyxFQUZzQkMsRUFBUSxPQU05QjBrQyxFQUFBM2tDLEVBRjRCQyxFQUFRLE9BTXBDMmtDLEVBQUE1a0MsRUFGZUMsRUFBUSxPQUl2QixTQUFBRCxFQUFBK0MsR0FBc0MsT0FBQUEsS0FBQUMsV0FBQUQsR0FBdUNFLFFBQUFGLEdBRTdFLElBQUE4aEMsRUFBQSxTQUFBeDhCLEdBR0EsU0FBQXc4QixJQUVBLE9BREEsRUFBQWhDLEVBQUEsU0FBQTc3QixLQUFBNjlCLElBQ0EsRUFBQTlCLEVBQUEsU0FBQS83QixNQUFBNjlCLEVBQUF0OUIsV0FBQTVILE9BQUEySCxlQUFBdTlCLElBQUE5OUIsTUFBQUMsS0FBQUgsWUE2QkEsT0FqQ0EsRUFBQW04QixFQUFBLFNBQUE2QixFQUFBeDhCLElBT0EsRUFBQXk2QixFQUFBLFNBQUErQixJQUNBcGtDLElBQUEsU0FDQVgsTUFBQSxXQUNBLElBQUFrVixFQUFBaE8sS0FBQTVFLE1BQ0EwaUMsRUFBQTl2QixFQUFBNVUsU0FDQXFKLEdBQUEsRUFBQTg2QixFQUFBLFNBQUF2dkIsR0FBQSxhQUdBLE9BQUFsUyxFQUFBLFFBQUFrSCxjQUNBNDZCLEVBQUEsUUFDQSxLQUNBLFNBQUFHLEVBQUFDLEdBQ0EsT0FBQWxpQyxFQUFBLFFBQUFrSCxjQUNBMDZCLEVBQUEsU0FDQSxFQUFBOUIsRUFBQSxVQUF1Q21DLFdBQW1CdDdCLEdBQzFEM0csRUFBQSxRQUFBa0gsY0FDQTI2QixFQUFBLFNBQ0EsRUFBQS9CLEVBQUEsVUFBeUNtQyxVQUFBQyxVQUFtQ3Y3QixHQUM1RTNHLEVBQUEsUUFBQWtILGNBQUF5NkIsRUFBQSxXQUFBN0IsRUFBQSxVQUF1R21DLFVBQUFELG9CQUF1RHI3QixJQUM5SjNHLEVBQUEsUUFBQWtILGNBQUF3NkIsRUFBQSxXQUFBNUIsRUFBQSxVQUFzR21DLFVBQUFDLFVBQW1DdjdCLFlBT3pJbzdCLEVBbENBLENBbUNDL2hDLEVBQUEsUUFBQTJILFdBR0Q1SyxFQUFBLFFBQUFnbEMsRUFHQUEsRUFBQTl3QixXQUNBM1QsU0FBQTZpQyxFQUFBLFFBQUFodEIsTUFFQXRSLEVBQUE5RSxVQUFBLDJDQ3RHQUYsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBR0EsSUFFQUMsRUFBQUMsRUFGdUJDLEVBQVEsS0FNL0I0aUMsRUFBQTdpQyxFQUZ1QkMsRUFBUSxLQU0vQjZpQyxFQUFBOWlDLEVBRm9CQyxFQUFRLEtBTTVCOGlDLEVBQUEvaUMsRUFGa0NDLEVBQVEsS0FNMUMraUMsRUFBQWhqQyxFQUZpQkMsRUFBUSxLQU16QjZDLEVBQUE5QyxFQUZhQyxFQUFRLElBTXJCZ2pDLEVBQUFqakMsRUFGaUJDLEVBQVEsSUFNekJpakMsRUFBQWxqQyxFQUZtQkMsRUFBUSxLQUkzQmtqQyxFQUFhbGpDLEVBQVEsTUFFckIsU0FBQUQsRUFBQStDLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUU3RSxTQUFBa2lDLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQUYsRUFBQTlpQyxNQUNBaWpDLEVBQUFELEVBQUFDLE9BQ0FDLEVBQUFGLEVBQUFFLE9BQ0FqbEMsRUFBQStrQyxFQUFBL2tDLFVBRUFrdEIsRUFBQTJYLEVBQUE5aUMsTUFBQTRpQyxPQUFBLFFBQ0FPLEVBQUFMLEVBQUE5aUMsTUFBQTRpQyxPQUFBLFFBQUF6WCxFQUNBaVksRUFBQU4sRUFBQTlpQyxNQUFBNGlDLE9BQUEsVUFDQVMsRUFBQVAsRUFBQTlpQyxNQUFBNGlDLE9BQUEsYUFDQVUsRUFBQUYsRUFBQTFrQyxNQUNBYyxFQUFBc2pDLEVBQUE5aUMsTUFBQVIsZUFDQThoQyxHQUFBLEVBQUFQLEVBQUFoakMsZ0JBQUFtbEMsRUFBQWpsQyxHQUtBLEdBSkE4a0MsSUFFQU8sRUFBQXJQLFFBQUEsUUFFQW9QLEVBQUEsQ0FDQSxJQUFBL2lDLEVBQUEraUMsRUFDQUUsR0FBQSxFQUFBeEMsRUFBQXRpQyx3QkFBQTZrQyxHQVdBLElBUkEsRUFBQXZDLEVBQUF2aUMsY0FBQThrQyxFQUFBLElBQ0FBLEVBQUE5aEIsTUFBQSxHQUNBOGhCLEVBQUFFLE9BQUEsR0FDQUYsRUFBQUcsS0FBQSxHQUNBSCxFQUFBSSxJQUFBLEdBQ0FKLEVBQUFLLE9BQUEsR0FDQUwsRUFBQU0sTUFBQSxHQUVBLFFBQUFwa0MsR0FBQSxXQUFBQSxFQUFBLENBQ0EsSUFBQWlrQyxHQUFBLEVBQUExQyxFQUFBMWdDLFNBQUFDLEVBQUE2aUMsR0FDQTNoQixFQUFBbGhCLEVBQUF1akMsWUFLQXJpQixJQUFBMkosRUFBQTBZLFlBQ0FyaUIsRUFBQSxFQUNPeWhCLEVBQUFuQixhQUFBOTVCLElBQUFpN0IsRUFBQW5CLE9BQUF0Z0IsUUFDUEEsRUFBQXNpQixXQUFBYixFQUFBbkIsT0FBQXRnQixNQUFBLE9BRUFpaUIsSUFBQW5qQyxFQUFBdWpDLFlBQUFyaUIsR0FBQSxHQUtBK2hCLEdBQ0EsRUFBQXhDLEVBQUF2aUMsY0FBQThrQyxFQUFBLGVBQUFHLEVBQUEsV0FFQUgsRUFBQUcsT0FBQSxLQUVBSCxFQUFBOWhCLFFBQUEsU0FDSyxDQUNMLElBQUFraUIsR0FBQSxFQUFBM0MsRUFBQXRnQyxRQUFBSCxFQUFBNmlDLEdBQUEsR0FDQUssRUFBQWxqQyxFQUFBeWpDLGFBQ0FkLEVBQUFuQixhQUFBOTVCLElBQUFpN0IsRUFBQW5CLE9BQUEwQixTQUNBQSxFQUFBTSxXQUFBYixFQUFBbkIsT0FBQTBCLE9BQUEsT0FFQUUsSUFBQXBqQyxFQUFBeWpDLGFBQUFQLEdBQUEsR0FHQUQsSUFDQSxFQUFBeEMsRUFBQXZpQyxjQUFBOGtDLEVBQUEsaUJBQUFJLEVBQUEsU0FDQUosRUFBQUksSUFBQSxLQUVBSixFQUFBSSxNQUFBLEtBRUFKLEVBQUFFLFNBQUEsTUFHQUYsRUFBQXJQLFNBQUEsSUFBQXFOLEVBQUEsZUFHQSxJQUFBMEMsRUFBQSxTQUFBLzlCLEdBR0EsU0FBQSs5QixJQUVBLE9BREEsRUFBQXZELEVBQUEsU0FBQTc3QixLQUFBby9CLElBQ0EsRUFBQXJELEVBQUEsU0FBQS83QixNQUFBby9CLEVBQUE3K0IsV0FBQTVILE9BQUEySCxlQUFBOCtCLElBQUFyL0IsTUFBQUMsS0FBQUgsWUFnREEsT0FwREEsRUFBQW04QixFQUFBLFNBQUFvRCxFQUFBLzlCLElBT0EsRUFBQXk2QixFQUFBLFNBQUFzRCxJQUNBM2xDLElBQUEsb0JBQ0FYLE1BQUEsV0FDQSxJQUFBOGYsRUFBQTVZLEtBUUFBLEtBQUFxL0IsUUFBQUMsV0FBQSxXQUNBckIsRUFBQXJsQixHQUFBLElBQ08sTUFHUG5mLElBQUEscUJBQ0FYLE1BQUEsV0FDQW1sQyxFQUFBaitCLFNBR0F2RyxJQUFBLHVCQUNBWCxNQUFBLFdBQ0F5bUMsYUFBQXYvQixLQUFBcS9CLFlBR0E1bEMsSUFBQSxTQUNBWCxNQUFBLFdBQ0EsSUFBQXNGLEVBRUE0UCxFQUFBaE8sS0FBQTVFLE1BQ0FtSCxFQUFBeUwsRUFBQXpMLFVBQ0E4N0IsRUFBQXJ3QixFQUFBcXdCLE9BQ0FwQixFQUFBanZCLEVBQUFpdkIsZUFFQXo2QixFQUFBRCxFQUFBLFdBQ0FrNkIsR0FBQSxFQUFBUCxFQUFBLFVBQUE5OUIsTUFBa0UsRUFBQXJGLEVBQUEsU0FBQXFGLEVBQUFvRSxHQUFBLE1BQUF6SixFQUFBLFNBQUFxRixFQUFBNitCLEVBQUF6NkIsRUFBQSxZQUFBQSxFQUFBLG1CQUFBcEUsSUFDbEUsT0FBQXRDLEVBQUEsUUFBQWtILGNBQUEsT0FDQWxKLE1BQUF1a0MsRUFBQW5CLE9BQ0ExNkIsVUFBQWk2QixFQUNBaGpDLElBQUEsU0FDQTBKLElBQUFuRCxLQUFBNUUsTUFBQTJpQyxRQUFBLGdCQUlBcUIsRUFyREEsQ0FzREN0akMsRUFBQSxRQUFBMkgsV0FFRDVLLEVBQUEsUUFBQXVtQyxFQUdBQSxFQUFBcnlCLFdBQ0F4SyxVQUFBMDVCLEVBQUEsUUFBQWp5QixPQUNBcTBCLE9BQUFwQyxFQUFBLFFBQUF2M0IsT0FDQXU0QixlQUFBaEIsRUFBQSxRQUFBNXhCLEtBQ0EwekIsUUFBQTlCLEVBQUEsUUFBQWh0QixNQUdBbXdCLEVBQUFoN0IsY0FDQTdCLFVBQUEsR0FDQTA2QixnQkFBQSxFQUNBb0IsVUFDQU4sUUFBQSxjQUVBcGdDLEVBQUE5RSxVQUFBLDJDQzFMQUYsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBR0EsSUFFQThpQyxFQUFBNWlDLEVBRmdCQyxFQUFRLElBTXhCRixFQUFBQyxFQUZ1QkMsRUFBUSxLQU0vQjRpQyxFQUFBN2lDLEVBRnVCQyxFQUFRLEtBTS9CNmlDLEVBQUE5aUMsRUFGb0JDLEVBQVEsS0FNNUI4aUMsRUFBQS9pQyxFQUZrQ0MsRUFBUSxLQU0xQytpQyxFQUFBaGpDLEVBRmlCQyxFQUFRLEtBTXpCNkMsRUFBQTlDLEVBRmFDLEVBQVEsSUFNckJ1bUMsRUFBQXhtQyxFQUZlQyxFQUFRLEtBTXZCZ2pDLEVBQUFqakMsRUFGaUJDLEVBQVEsSUFJekJrakMsRUFBYWxqQyxFQUFRLE1BRXJCLFNBQUFELEVBQUErQyxHQUFzQyxPQUFBQSxLQUFBQyxXQUFBRCxHQUF1Q0UsUUFBQUYsR0FFN0UsSUFBQTBqQyxFQUFBLFNBQUFwK0IsR0FHQSxTQUFBbytCLElBRUEsT0FEQSxFQUFBNUQsRUFBQSxTQUFBNzdCLEtBQUF5L0IsSUFDQSxFQUFBMUQsRUFBQSxTQUFBLzdCLE1BQUF5L0IsRUFBQWwvQixXQUFBNUgsT0FBQTJILGVBQUFtL0IsSUFBQTEvQixNQUFBQyxLQUFBSCxZQXVFQSxPQTNFQSxFQUFBbThCLEVBQUEsU0FBQXlELEVBQUFwK0IsSUFPQSxFQUFBeTZCLEVBQUEsU0FBQTJELElBQ0FobUMsSUFBQSxTQUNBWCxNQUFBLFdBQ0EsSUFBQThmLEVBQUE1WSxLQUVBZ08sRUFBQWhPLEtBQUE1RSxNQUNBaEMsRUFBQTRVLEVBQUFzd0IsT0FDQWpsQyxFQUFBMlUsRUFBQTNVLFVBQ0FrSixFQUFBeUwsRUFBQXpMLFVBQ0FtOUIsRUFBQTF4QixFQUFBMHhCLGFBQ0EzQixFQUFBL3ZCLEVBQUErdkIsUUFDQW5qQyxFQUFBb1QsRUFBQXBULGVBQ0FrakMsRUFBQTl2QixFQUFBOHZCLGlCQUVBNkIsS0ErQ0EsT0E3Q0E3akMsRUFBQSxRQUFBSSxTQUFBQyxRQUFBL0MsRUFBQSxTQUFBZ0QsRUFBQXpDLEdBQ0EsR0FBQXlDLEVBQUEsQ0FHQSxJQUFBM0MsRUFBQTJDLEVBQUEzQyxJQUNBa1MsRUFBQXRTLElBQUFJLEVBQUE4SSxFQUFBLGlCQUNBb0osR0FBQSxJQUFBcEosRUFBQSxPQUNBLElBQUFxOUIsS0FDQXhqQyxFQUFBaEIsTUFBQXlILFNBQ0E4SSxHQUFBLElBQUFwSixFQUFBLGdCQUVBcTlCLEdBQ0F6eEIsUUFBQXlLLEVBQUF4ZCxNQUFBeWtDLFdBQUFDLEtBQUFsbkIsRUFBQW5mLElBR0EsSUFBQTBKLEtBQ0E5SixJQUFBSSxJQUNBMEosTUFBQTQ2QixFQUFBLGNBR0EsSUFBQXRGLEVBQUFpSCxHQUFBL2xDLElBQUFQLEVBQUFJLE9BQUEsSUFBQWttQyxFQUNBNWxDLEdBQUEsRUFBQWYsRUFBQSxhQUF1RCxFQUFBb2pDLEVBQUF6aEMsWUFBQUUsR0FBQSw2QkFBQTY5QixJQUN2RCxFQUFBK0csRUFBQSxpQkFBQXBqQyxFQUFBaEIsTUFBQSxxREFFQSxJQUFBbUMsRUFBQXpCLEVBQUEsUUFBQWtILGNBQ0EsT0FDQSxFQUFBNDRCLEVBQUEsVUFDQTlMLEtBQUEsTUFDQWlRLGdCQUFBM2pDLEVBQUFoQixNQUFBeUgsU0FBQSxlQUNBbTlCLGdCQUFBM21DLElBQUFJLEVBQUEsZ0JBQ1dtbUMsR0FDWHA5QixVQUFBbUosRUFDQWxTLE1BQ0FLLFNBQ1dxSixHQUNYL0csRUFBQWhCLE1BQUEyOUIsS0FHQStFLElBQ0F2Z0MsRUFBQXVnQyxFQUFBdmdDLElBR0FvaUMsRUFBQXRqQyxLQUFBa0IsTUFHQXpCLEVBQUEsUUFBQWtILGNBQ0EsT0FDU0csSUFBQTQ2QixFQUFBLHFCQUNUNEIsT0FJQUYsRUE1RUEsQ0E2RUMzakMsRUFBQSxRQUFBMkgsV0FFRDVLLEVBQUEsUUFBQTRtQyxFQUdBQSxFQUFBMXlCLFdBQ0ExVCxVQUFBNGlDLEVBQUEsUUFBQWp5QixPQUNBczBCLE9BQUFyQyxFQUFBLFFBQUExK0IsS0FDQWdGLFVBQUEwNUIsRUFBQSxRQUFBanlCLE9BQ0EwMUIsYUFBQXpELEVBQUEsUUFBQWp0QixPQUNBNndCLFdBQUE1RCxFQUFBLFFBQUFodEIsS0FDQTh1QixRQUFBOUIsRUFBQSxRQUFBaHRCLEtBQ0E2dUIsaUJBQUE3QixFQUFBLFFBQUFodEIsS0FDQXJVLGVBQUFxaEMsRUFBQSxRQUFBanlCLFFBR0F5MUIsRUFBQXI3QixjQUNBazZCLFVBQ0EvN0IsYUFDQW05QixhQUFBLEtBQ0FHLFdBQUEsYUFDQTlCLFFBQUEsY0FFQXBnQyxFQUFBOUUsVUFBQSwyQ0NoSkFGLE9BQUFDLGVBQUFDLEVBQUEsY0FDQUMsT0FBQSxJQUdBLElBRUE4aUMsRUFBQTVpQyxFQUZnQkMsRUFBUSxJQU14QkYsRUFBQUMsRUFGdUJDLEVBQVEsS0FNL0Jza0MsRUFBQXZrQyxFQUZnQ0MsRUFBUSxLQU14QzRpQyxFQUFBN2lDLEVBRnVCQyxFQUFRLEtBTS9CNmlDLEVBQUE5aUMsRUFGb0JDLEVBQVEsS0FNNUI4aUMsRUFBQS9pQyxFQUZrQ0MsRUFBUSxLQU0xQytpQyxFQUFBaGpDLEVBRmlCQyxFQUFRLEtBSXpCZ25DLEVBQWFobkMsRUFBUSxHQUVyQjZDLEVBQUE5QyxFQUFBaW5DLEdBSUFoRSxFQUFBampDLEVBRmlCQyxFQUFRLElBTXpCaWpDLEVBQUFsakMsRUFGbUJDLEVBQVEsS0FJM0JrakMsRUFBYWxqQyxFQUFRLE1BRXJCLFNBQUFELEVBQUErQyxHQUFzQyxPQUFBQSxLQUFBQyxXQUFBRCxHQUF1Q0UsUUFBQUYsR0FFN0UsSUFBQW1rQyxFQUFBLFNBQUE3K0IsR0FHQSxTQUFBNitCLElBRUEsT0FEQSxFQUFBckUsRUFBQSxTQUFBNzdCLEtBQUFrZ0MsSUFDQSxFQUFBbkUsRUFBQSxTQUFBLzdCLE1BQUFrZ0MsRUFBQTMvQixXQUFBNUgsT0FBQTJILGVBQUE0L0IsSUFBQW5nQyxNQUFBQyxLQUFBSCxZQTBDQSxPQTlDQSxFQUFBbThCLEVBQUEsU0FBQWtFLEVBQUE3K0IsSUFPQSxFQUFBeTZCLEVBQUEsU0FBQW9FLElBQ0F6bUMsSUFBQSxTQUNBWCxNQUFBLFdBQ0EsSUFBQWtWLEVBQUFoTyxLQUFBNUUsTUFDQW1ILEVBQUF5TCxFQUFBekwsVUFDQWd0QixFQUFBdmhCLEVBQUF1aEIsVUFDQS9zQixFQUFBd0wsRUFBQXhMLFVBQ0E4NkIsRUFBQXR2QixFQUFBc3ZCLGFBQ0F4akMsRUFBQWtVLEVBQUFsVSxNQUNBYyxFQUFBb1QsRUFBQXBULGVBQ0F4QixFQUFBNFUsRUFBQTVVLFNBQ0FxSixHQUFBLEVBQUE4NkIsRUFBQSxTQUFBdnZCLEdBQUEseUZBRUFyQyxHQUFBLEVBQUF1d0IsRUFBQSxTQUFBMzVCLEVBQUEsVUFBQXhKLEVBQUEsWUFBb0d5SixRQUNwRzI5QixFQUFBLFFBQUF2bEMsR0FBQSxXQUFBQSxFQUNBd2xDLEVBQUFELEdBQW1ERSxNQUFBLFlBQ25EQyxFQUFBaEQsS0FBQWxpQyxNQUFBa2lDLEVBQUFsaUMsTUFBQXRCLFNBQ0F1aUMsRUFBQWpqQyxFQVFBLE9BUEFra0MsSUFDQWpCLElBQUEsRUFBQTRELEVBQUEvekIsY0FBQW94QixHQUNBN2pDLElBQUEsUUFDQUssT0FBQSxFQUFBOGhDLEVBQUEsWUFBNkN3RSxFQUFBRSxNQUNwQyxFQUFBTCxFQUFBL3pCLGNBQUE5UyxHQUF1Q0ssSUFBQSxhQUNoRDRpQyxFQUFBOEQsRUFBQTlELElBQUFrRSxXQUVBemtDLEVBQUEsUUFBQWtILGNBQ0EsT0FDQSxFQUFBNDRCLEVBQUEsVUFDQTlMLEtBQUEsVUFDQXR0QixVQUFBbUosRUFDQXVDLFNBQUEsSUFDQS9LLElBQUFuRCxLQUFBNUUsTUFBQTJpQyxRQUFBLFFBQ0F4TyxZQUNBejFCLFVBQ1MsRUFBQXFpQyxFQUFBaGhDLGFBQUFzSCxJQUNUNDVCLE9BSUE2RCxFQS9DQSxDQWdEQ3BrQyxFQUFBLFFBQUEySCxXQUVENUssRUFBQSxRQUFBcW5DLEVBR0FBLEVBQUFuekIsV0FDQXhLLFVBQUEwNUIsRUFBQSxRQUFBanlCLE9BQ0F4SCxVQUFBeTVCLEVBQUEsUUFBQWp5QixPQUNBbFEsTUFBQW1pQyxFQUFBLFFBQUF2M0IsT0FDQTlKLGVBQUFxaEMsRUFBQSxRQUFBL3hCLE9BQUEsZ0NBQ0E5USxTQUFBNmlDLEVBQUEsUUFBQTErQixLQUNBKy9CLGFBQUFyQixFQUFBLFFBQUExK0IsS0FDQWd5QixVQUFBME0sRUFBQSxRQUFBaHRCLEtBQ0E4dUIsUUFBQTlCLEVBQUEsUUFBQWh0QixNQUdBaXhCLEVBQUE5N0IsY0FDQTdCLFVBQUEsR0FDQUMsVUFBQSxHQUNBMUksU0FDQWMsZUFBQSxNQUNBMGlDLGFBQUEsS0FDQWxrQyxTQUFBLEtBQ0FtMkIsVUFBQSxhQUNBd08sUUFBQSxjQUVBcGdDLEVBQUE5RSxVQUFBLDJDQzFIQUYsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBR0EsSUFFQUMsRUFBQUMsRUFGdUJDLEVBQVEsS0FNL0I0aUMsRUFBQTdpQyxFQUZ1QkMsRUFBUSxLQU0vQjZpQyxFQUFBOWlDLEVBRm9CQyxFQUFRLEtBTTVCOGlDLEVBQUEvaUMsRUFGa0NDLEVBQVEsS0FNMUMraUMsRUFBQWhqQyxFQUZpQkMsRUFBUSxLQU16QjZDLEVBQUE5QyxFQUZhQyxFQUFRLElBTXJCZ2pDLEVBQUFqakMsRUFGaUJDLEVBQVEsSUFNekJ1bkMsRUFBQXhuQyxFQUZtQkMsRUFBUSxLQU0zQnduQyxFQUFBem5DLEVBRmdCQyxFQUFRLE1BTXhCeW5DLEVBQUExbkMsRUFGOEJDLEVBQVEsTUFJdENrakMsRUFBYWxqQyxFQUFRLE1BRXJCLFNBQUFELEVBQUErQyxHQUFzQyxPQUFBQSxLQUFBQyxXQUFBRCxHQUF1Q0UsUUFBQUYsR0FFN0UsSUFBQTRrQyxFQUFBLFNBQUF0L0IsR0FHQSxTQUFBcy9CLEVBQUF2bEMsSUFDQSxFQUFBeWdDLEVBQUEsU0FBQTc3QixLQUFBMmdDLEdBRUEsSUFBQXIvQixHQUFBLEVBQUF5NkIsRUFBQSxTQUFBLzdCLE1BQUEyZ0MsRUFBQXBnQyxXQUFBNUgsT0FBQTJILGVBQUFxZ0MsSUFBQXJqQyxLQUFBMEMsS0FBQTVFLElBa0VBLE9BaEVBa0csRUFBQXMvQixrQkFBQSxTQUFBNy9CLEdBQ0EsZUFBQUEsRUFBQTgvQixhQUFBLENBR0EsSUFBQUMsRUFBQXgvQixFQUFBbEcsTUFBQTRpQyxPQUFBLGFBQ0ExOEIsRUFBQXkvQixtQkFDQW5oQyxPQUFBa2hDLEVBQ0FFLGNBQUFGLE1BSUF4L0IsRUFBQXkvQixrQkFBQSxTQUFBaGdDLEdBQ0EsSUFBQTA5QixFQUFBbjlCLEVBQUFsRyxNQUFBNGlDLE9BQUEsYUFDQWlELEVBQUEzL0IsRUFBQWxHLE1BQUE0aUMsT0FBQSxXQUNBLEtBQUFqOUIsS0FBQW5CLFNBQUFtQixFQUFBaWdDLGdCQUFBdkMsRUFBQSxDQUtBLElBQUF5QyxFQUFBNS9CLEVBQUE2L0IsbUJBQUE3L0IsRUFBQTgvQixrQkFFQSxHQURBOS9CLEVBQUE4L0Isa0JBQUE5L0IsRUFBQTYvQixrQkFDQUQsRUFBQSxDQUlBLElBQUFHLEVBQUEvL0IsRUFBQWdnQyxZQUFBN0MsR0FDQThDLEVBQUFqZ0MsRUFBQWtnQyxZQUFBUCxHQUNBUSxFQUFBbmdDLEVBQUFtZ0MsT0FFQUMsRUFBQXBnQyxFQUFBcWdDLFlBQUFWLEdBQ0FXLEVBQUF0Z0MsRUFBQXFnQyxZQUFBbEQsR0FDQWlELEVBQUFFLEdBQ0FILEdBQUFDLEVBQUFFLEVBQ0F0Z0MsRUFBQXVnQyxVQUFBSixJQUNPQyxFQUFBSCxFQUFBSyxFQUFBUCxJQUNQSSxHQUFBRyxFQUFBUCxHQUFBSyxFQUFBSCxHQUNBamdDLEVBQUF1Z0MsVUFBQUosT0FJQW5nQyxFQUFBL0YsS0FBQSxTQUFBd0YsR0FDQU8sRUFBQWxHLE1BQUEwbUMsWUFBQS9nQyxHQUNBLElBQUFnaEMsRUFBQXpnQyxFQUFBbEcsTUFBQTRpQyxPQUFBLFdBQ0F1RCxFQUFBamdDLEVBQUFrZ0MsWUFBQU8sR0FDQU4sRUFBQW5nQyxFQUFBbWdDLE9BRUFuZ0MsRUFBQXVnQyxVQUFBSixFQUFBRixJQUdBamdDLEVBQUEwZ0MsS0FBQSxTQUFBamhDLEdBQ0FPLEVBQUFsRyxNQUFBNm1DLFlBQUFsaEMsR0FDQSxJQUFBZ2hDLEVBQUF6Z0MsRUFBQWxHLE1BQUE0aUMsT0FBQSxXQUNBdUQsRUFBQWpnQyxFQUFBa2dDLFlBQUFPLEdBQ0FOLEVBQUFuZ0MsRUFBQW1nQyxPQUVBbmdDLEVBQUF1Z0MsVUFBQUosRUFBQUYsSUFHQWpnQyxFQUFBbWdDLE9BQUEsRUFFQW5nQyxFQUFBMEMsT0FDQWcrQixNQUFBLEVBQ0F6bUMsTUFBQSxHQUVBK0YsRUErUEEsT0F0VUEsRUFBQTA2QixFQUFBLFNBQUEyRSxFQUFBdC9CLElBMEVBLEVBQUF5NkIsRUFBQSxTQUFBNkUsSUFDQWxuQyxJQUFBLG9CQUNBWCxNQUFBLFdBQ0EsSUFBQThmLEVBQUE1WSxLQUVBQSxLQUFBa2lDLHFCQUNBbGlDLEtBQUFtaUMsaUJBQUEsRUFBQTFCLEVBQUEsb0JBQ0E3bkIsRUFBQXdwQixjQUNBeHBCLEVBQUFtb0IscUJBQ08sS0FDUC9nQyxLQUFBcWlDLGVBQUEsSUFBQTNCLEVBQUEsUUFBQTFnQyxLQUFBbWlDLGlCQUNBbmlDLEtBQUFxaUMsZUFBQUMsUUFBQXRpQyxLQUFBNUUsTUFBQTRpQyxPQUFBLGlCQUdBdmtDLElBQUEscUJBQ0FYLE1BQUEsU0FBQTZ1QixHQUNBLElBQUF2c0IsRUFBQTRFLEtBQUE1RSxNQUNBLEdBQUF1c0IsS0FBQS9zQixpQkFBQVEsRUFBQVIsZUFDQW9GLEtBQUE2aEMsVUFBQSxPQURBLENBSUEsSUFBQVUsRUFBQXZpQyxLQUFBb2lDLGNBR0FwaUMsS0FBQW1oQyxnQkFBQW5oQyxLQUFBZ0UsU0FBQWhFLEtBQUFtaEMsZ0JBQUFvQixHQUNBdmlDLEtBQUFxTixZQUF3QnJOLEtBQUErZ0MsbUJBQ2pCcFosR0FBQXZzQixFQUFBL0IsWUFBQXN1QixFQUFBdHVCLFdBRVAyRyxLQUFBK2dDLHdCQUlBdG5DLElBQUEsdUJBQ0FYLE1BQUEsV0FDQWtILEtBQUFxaUMsZ0JBQ0FyaUMsS0FBQXFpQyxlQUFBRyxhQUVBeGlDLEtBQUFtaUMsaUJBQUFuaUMsS0FBQW1pQyxnQkFBQU0sUUFDQXppQyxLQUFBbWlDLGdCQUFBTSxZQUlBaHBDLElBQUEsY0FDQVgsTUFBQSxXQUNBLElBQUE0cEMsRUFBQTFpQyxLQUFBNUUsTUFBQTRpQyxPQUFBLE9BQ0EyRSxFQUFBM2lDLEtBQUE1RSxNQUFBNGlDLE9BQUEsb0JBQ0E0RSxFQUFBNWlDLEtBQUFzaEMsWUFBQXFCLEdBQUFELEdBR0FHLEVBQUE3aUMsS0FBQXdoQyxZQUFBeGhDLEtBQUE1RSxNQUFBNGlDLE9BQUEsZ0JBQ0F1RCxFQUFBdmhDLEtBQUF3aEMsWUFBQXhoQyxLQUFBNUUsTUFBQTRpQyxPQUFBLFlBQ0F5RCxFQUFBemhDLEtBQUF5aEMsT0FFQXFCLEVBQUFELEVBQUFELEVBQ0FHLEVBQUEvaUMsS0FBQWdFLE1BQ0FnK0IsRUFBQWUsRUFBQWYsS0FDQXptQyxFQUFBd25DLEVBQUF4bkMsS0FFQSxHQUFBdW5DLEdBQUEsRUFDQWQsR0FBQSxFQUNBaGlDLEtBQUE2aEMsVUFBQSxNQUNBSixFQUFBLE9BQ08sR0FBQXFCLEVBQUFyQixFQUNQTyxHQUFBLE1BQ08sQ0FDUEEsR0FBQSxFQUlBLElBQUFnQixFQUFBekIsRUFBQXFCLEVBQ0E1aUMsS0FBQTZoQyxVQUFBbUIsR0FBQSxHQUNBdkIsRUFBQXVCLEVBV0EsT0FQQXpuQyxFQURBa21DLEVBQUEsRUFNQXpoQyxLQUFBaWpDLFFBQUFqQixHQUNBaGlDLEtBQUFrakMsUUFBQTNuQyxJQUVBeW1DLE9BQ0F6bUMsV0FJQTlCLElBQUEsY0FDQVgsTUFBQSxTQUFBeUUsR0FDQSxJQUFBM0MsRUFBQW9GLEtBQUE1RSxNQUFBUixlQUNBdW9DLEVBQUEsY0FJQSxNQUhBLFNBQUF2b0MsR0FBQSxVQUFBQSxJQUNBdW9DLEVBQUEsZ0JBRUE1bEMsRUFBQTRsQyxNQUdBMXBDLElBQUEsY0FDQVgsTUFBQSxTQUFBeUUsR0FDQSxJQUFBM0MsRUFBQW9GLEtBQUE1RSxNQUFBUixlQUNBdW9DLEVBQUEsY0FJQSxNQUhBLFNBQUF2b0MsR0FBQSxVQUFBQSxJQUNBdW9DLEVBQUEsZ0JBRUE1bEMsRUFBQTRsQyxNQUdBMXBDLElBQUEsY0FDQVgsTUFBQSxTQUFBeUUsR0FDQSxJQUFBM0MsRUFBQW9GLEtBQUE1RSxNQUFBUixlQUNBdW9DLEVBQUEsT0FJQSxNQUhBLFNBQUF2b0MsR0FBQSxVQUFBQSxJQUNBdW9DLEVBQUEsT0FFQTVsQyxFQUFBNmxDLHdCQUFBRCxNQUdBMXBDLElBQUEsWUFDQVgsTUFBQSxTQUFBMm9DLEdBQ0EsSUFBQTRCLElBQUF4akMsVUFBQXJHLE9BQUEsUUFBQTRKLElBQUF2RCxVQUFBLEtBQUFBLFVBQUEsR0FFQUQsRUFBQXlULEtBQUFpd0IsSUFBQSxFQUFBN0IsR0FDQSxHQUFBemhDLEtBQUF5aEMsU0FBQTdoQyxFQUFBLENBQ0FJLEtBQUF5aEMsT0FBQTdoQyxFQUNBLElBQUEyakMsS0FDQTNvQyxFQUFBb0YsS0FBQTVFLE1BQUFSLGVBQ0E0b0MsRUFBQXhqQyxLQUFBNUUsTUFBQTRpQyxPQUFBLE9BQUFsa0MsTUFDQTZrQyxHQUFBLEVBQUF4QyxFQUFBdGlDLHdCQUFBMnBDLEdBR0FELEVBRkEsU0FBQTNvQyxHQUFBLFVBQUFBLEVBQ0ErakMsR0FFQTdsQyxNQUFBLGlCQUFBOEcsRUFBQSxVQUlBK0MsS0FBQSxNQUNBN0osTUFBQThHLEVBQUEsTUFHUysrQixHQUVUN2xDLE1BQUEsZUFBQThHLEVBQUEsWUFJQStDLEtBQUEsT0FDQTdKLE1BQUE4RyxFQUFBLE1BR0ErK0IsR0FDQSxFQUFBeEMsRUFBQXZpQyxjQUFBNHBDLEVBQUFELEVBQUF6cUMsT0FFQTBxQyxFQUFBRCxFQUFBNWdDLE1BQUE0Z0MsRUFBQXpxQyxNQUVBdXFDLEdBQ0FyakMsS0FBQW9pQyxrQkFLQTNvQyxJQUFBLFVBQ0FYLE1BQUEsU0FBQW9CLEdBQ0E4RixLQUFBZ0UsTUFBQXpJLE9BQUFyQixHQUNBOEYsS0FBQXFOLFVBQ0E5UixLQUFBckIsT0FLQVQsSUFBQSxVQUNBWCxNQUFBLFNBQUFvQixHQUNBOEYsS0FBQWdFLE1BQUFnK0IsT0FBQTluQyxHQUNBOEYsS0FBQXFOLFVBQ0EyMEIsS0FBQTluQyxPQUtBVCxJQUFBLGtCQUNBWCxNQUFBLFNBQUFrTCxHQUNBLE9BQUFBLEVBQ0FBLEVBQUFnK0IsTUFBQWgrQixFQUFBekksS0FFQXlFLEtBQUFnRSxNQUFBZytCLE1BQUFoaUMsS0FBQWdFLE1BQUF6SSxRQUdBOUIsSUFBQSxTQUNBWCxNQUFBLFdBQ0EsSUFBQXNGLEVBQUF5dkIsRUFBQXFPLEVBQUF1SCxFQUVBQyxFQUFBMWpDLEtBQUFnRSxNQUNBZytCLEVBQUEwQixFQUFBMUIsS0FDQXptQyxFQUFBbW9DLEVBQUFub0MsS0FDQXlTLEVBQUFoTyxLQUFBNUUsTUFDQW1ILEVBQUF5TCxFQUFBekwsVUFDQW9oQyxFQUFBMzFCLEVBQUEyMUIsZUFDQUMsRUFBQTUxQixFQUFBNDFCLFdBQ0F4VixFQUFBcGdCLEVBQUFvZ0IsU0FDQUMsRUFBQXJnQixFQUFBcWdCLFNBRUF3VixFQUFBdG9DLEdBQUF5bUMsRUFFQThCLEVBQUFob0MsRUFBQSxRQUFBa0gsY0FDQSxRQUVBbUwsUUFBQTVTLEVBQUF5RSxLQUFBekUsS0FBQSxLQUNBd29DLGFBQUEsZUFDQXZoQyxXQUFBLEVBQUFnK0IsRUFBQSxVQUFBcGlDLE1BQW1FLEVBQUFyRixFQUFBLFNBQUFxRixFQUFBbUUsRUFBQSxrQkFBQXhKLEVBQUEsU0FBQXFGLEVBQUFtRSxFQUFBLHFCQUFBaEgsSUFBQSxFQUFBeEMsRUFBQSxTQUFBcUYsRUFBQW1FLEVBQUEsa0JBQUFzaEMsR0FBQXpsQyxJQUNuRTRsQyxnQkFBQWhrQyxLQUFBNGdDLG1CQUVBeFMsR0FBQXR5QixFQUFBLFFBQUFrSCxjQUFBLFFBQThEUixVQUFBRCxFQUFBLG9CQUc5RDBoQyxFQUFBbm9DLEVBQUEsUUFBQWtILGNBQ0EsUUFFQW1MLFFBQUE2ekIsRUFBQWhpQyxLQUFBZ2lDLEtBQUEsS0FDQStCLGFBQUEsZUFDQXZoQyxXQUFBLEVBQUFnK0IsRUFBQSxVQUFBM1MsTUFBb0UsRUFBQTkwQixFQUFBLFNBQUE4MEIsRUFBQXRyQixFQUFBLGtCQUFBeEosRUFBQSxTQUFBODBCLEVBQUF0ckIsRUFBQSxxQkFBQXkvQixJQUFBLEVBQUFqcEMsRUFBQSxTQUFBODBCLEVBQUF0ckIsRUFBQSxrQkFBQXNoQyxHQUFBaFcsS0FFcEVRLEdBQUF2eUIsRUFBQSxRQUFBa0gsY0FBQSxRQUE4RFIsVUFBQUQsRUFBQSxvQkFHOUQyaEMsRUFBQTNoQyxFQUFBLE9BQ0E0aEMsR0FBQSxFQUFBM0QsRUFBQSxVQUFBdEUsTUFBc0UsRUFBQW5qQyxFQUFBLFNBQUFtakMsRUFBQWdJLEdBQUEsTUFBQW5yQyxFQUFBLFNBQUFtakMsRUFBQXlILEVBQUFPLEVBQUEsWUFBQUEsRUFBQSxtQkFBQWhJLElBRXRFLE9BQUFwZ0MsRUFBQSxRQUFBa0gsY0FDQSxPQUVBUixXQUFBLEVBQUFnK0IsRUFBQSxVQUFBaUQsTUFBb0UsRUFBQTFxQyxFQUFBLFNBQUEwcUMsRUFBQWxoQyxFQUFBLHVCQUFBeEosRUFBQSxTQUFBMHFDLEVBQUFsaEMsRUFBQSwyQkFBQXNoQyxHQUFBSixJQUNwRWhxQyxJQUFBLFlBQ0EwSixJQUFBbkQsS0FBQTVFLE1BQUEyaUMsUUFBQSxjQUVBK0YsRUFDQUcsRUFDQW5vQyxFQUFBLFFBQUFrSCxjQUNBLE9BQ1dSLFVBQUFELEVBQUEsWUFBQVksSUFBQW5ELEtBQUE1RSxNQUFBMmlDLFFBQUEsWUFDWGppQyxFQUFBLFFBQUFrSCxjQUNBLE9BQ2FSLFVBQUFELEVBQUEsZUFDYnpHLEVBQUEsUUFBQWtILGNBQ0EsT0FDZVIsVUFBQTJoQyxFQUFBaGhDLElBQUFuRCxLQUFBNUUsTUFBQTJpQyxRQUFBLFFBQ2Y2RixFQUFBNWpDLEtBQUE1RSxNQUFBaEMsa0JBT0F1bkMsRUF2VUEsQ0F3VUM3a0MsRUFBQSxRQUFBMkgsV0FFRDVLLEVBQUEsUUFBQThuQyxFQUdBQSxFQUFBNXpCLFdBQ0ExVCxVQUFBNGlDLEVBQUEsUUFBQWp5QixPQUNBZzBCLE9BQUEvQixFQUFBLFFBQUFodEIsS0FBQWdjLFdBQ0E4UyxRQUFBOUIsRUFBQSxRQUFBaHRCLEtBQUFnYyxXQUNBcndCLGVBQUFxaEMsRUFBQSxRQUFBL3hCLE9BQUEsZ0NBQ0EzSCxVQUFBMDVCLEVBQUEsUUFBQWp5QixPQUNBMjVCLGVBQUExSCxFQUFBLFFBQUE1eEIsS0FDQXkzQixZQUFBN0YsRUFBQSxRQUFBaHRCLEtBQ0FnekIsWUFBQWhHLEVBQUEsUUFBQWh0QixLQUNBMjBCLFdBQUEzSCxFQUFBLFFBQUFodEIsS0FDQTdWLFNBQUE2aUMsRUFBQSxRQUFBMStCLEtBQ0E2d0IsU0FBQTZOLEVBQUEsUUFBQTErQixLQUNBOHdCLFNBQUE0TixFQUFBLFFBQUExK0IsTUFHQW9qQyxFQUFBdjhCLGNBQ0F4SixlQUFBLE9BQ0EySCxVQUFBLEdBQ0FvaEMsZ0JBQUEsRUFDQTdCLFlBQUEsYUFDQUcsWUFBQSxhQUNBMkIsV0FBQSxTQUFBUSxHQUNBLE9BQUFBLElBR0F6bUMsRUFBQTlFLFVBQUEsMkNDdFpBRixPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFHQSxJQUVBK2lDLEVBQUE3aUMsRUFGdUJDLEVBQVEsS0FNL0I2aUMsRUFBQTlpQyxFQUZvQkMsRUFBUSxLQU01QjhpQyxFQUFBL2lDLEVBRmtDQyxFQUFRLEtBTTFDK2lDLEVBQUFoakMsRUFGaUJDLEVBQVEsS0FNekI2QyxFQUFBOUMsRUFGYUMsRUFBUSxJQU1yQmdqQyxFQUFBampDLEVBRmlCQyxFQUFRLElBSXpCLFNBQUFELEVBQUErQyxHQUFzQyxPQUFBQSxLQUFBQyxXQUFBRCxHQUF1Q0UsUUFBQUYsR0FFN0UsSUFBQXNvQyxFQUFBLFNBQUFoakMsR0FHQSxTQUFBZ2pDLElBQ0EsSUFBQW5pQyxFQUVBb2lDLEVBQUFoakMsRUFBQWlqQyxHQUVBLEVBQUExSSxFQUFBLFNBQUE3N0IsS0FBQXFrQyxHQUVBLFFBQUE1dkIsRUFBQTVVLFVBQUFyRyxPQUFBeXJCLEVBQUE5bkIsTUFBQXNYLEdBQUFFLEVBQUEsRUFBbUVBLEVBQUFGLEVBQWFFLElBQ2hGc1EsRUFBQXRRLEdBQUE5VSxVQUFBOFUsR0FHQSxPQUFBMnZCLEVBQUFoakMsR0FBQSxFQUFBeTZCLEVBQUEsU0FBQS83QixNQUFBa0MsRUFBQW1pQyxFQUFBOWpDLFdBQUE1SCxPQUFBMkgsZUFBQStqQyxJQUFBL21DLEtBQUF5QyxNQUFBbUMsR0FBQWxDLE1BQUErQyxPQUFBa2lCLEtBQUEzakIsRUFBQTA4QixPQUFBLFNBQUFyN0IsR0FDQSxPQUFBckIsRUFBQXFCLElBQ0tyQixFQUFBeThCLFFBQUEsU0FBQXA3QixHQUNMLGdCQUFBcEYsR0FDQUEsSUFDQStELEVBQUFxQixHQUFBcEYsS0FMQWduQyxFQVFLRCxHQUFBLEVBQUF2SSxFQUFBLFNBQUF6NkIsRUFBQWlqQyxHQVNMLE9BOUJBLEVBQUF2SSxFQUFBLFNBQUFxSSxFQUFBaGpDLElBd0JBLEVBQUF5NkIsRUFBQSxTQUFBdUksSUFDQTVxQyxJQUFBLFNBQ0FYLE1BQUEsV0FDQSxPQUFBa0gsS0FBQTVFLE1BQUFoQyxTQUFBNEcsS0FBQSs5QixRQUFBLzlCLEtBQUFnK0IsWUFHQXFHLEVBL0JBLENBZ0NDdm9DLEVBQUEsUUFBQTJILFdBRUQ1SyxFQUFBLFFBQUF3ckMsRUFHQUEsRUFBQXQzQixXQUNBM1QsU0FBQTZpQyxFQUFBLFFBQUFodEIsTUFHQW8xQixFQUFBamdDLGNBQ0FoTCxTQUFBLFdBQ0EsY0FHQXVFLEVBQUE5RSxVQUFBLDJDQzVFQUYsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsUUFBQUEsRUFBQThpQyxxQkFBQSxFQUVBLElBQUE2SSxFQUFBLFNBQUFDLEdBQ0EsdUJBQUExcUMsZUFBQTJ2QixVQUFBM3ZCLE9BQUEydkIsU0FBQWdiLGdCQUFBLENBQ0EsSUFBQUMsRUFBQXhuQyxNQUFBb0wsUUFBQWs4QixTQUNBQyxFQUFBM3FDLE9BQUEydkIsU0FBQWdiLGdCQUNBLE9BQUFDLEVBQUF0bkMsS0FBQSxTQUFBc0YsR0FDQSxPQUFBQSxLQUFBK2hDLEVBQUE1cUMsUUFJQSxVQUdBNmhDLEVBQUE2SSxHQUFBLHNDQUNBM3JDLEVBQUE4aUMsa0JBQ0EsSUFBQTU5QixFQUFBeW1DLEVBQ0EzckMsRUFBQSxRQUFBa0YscUNDcEJBcEYsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsZUFFQSxJQUFBbUYsRUFvQkEsU0FBQWpDLEdBQXVDLEdBQUFBLEtBQUFDLFdBQTZCLE9BQUFELEVBQWMsSUFBQTBDLEVBQUFGLElBQXdDLEdBQUFFLEtBQUFDLElBQUEzQyxHQUErQixPQUFBMEMsRUFBQUUsSUFBQTVDLEdBQXlCLElBQUE2QyxLQUFpQixTQUFBN0MsRUFBQSxDQUFtQixJQUFBOEMsRUFBQWxHLE9BQUFDLGdCQUFBRCxPQUFBbUcseUJBQXNGLFFBQUFyRixLQUFBc0MsRUFBdUIsR0FBQXBELE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF2QixFQUFBdEMsR0FBQSxDQUFzRCxJQUFBdUYsRUFBQUgsRUFBQWxHLE9BQUFtRyx5QkFBQS9DLEVBQUF0QyxHQUFBLEtBQXFGdUYsTUFBQUwsS0FBQUssRUFBQUMsS0FBc0N0RyxPQUFBQyxlQUFBZ0csRUFBQW5GLEVBQUF1RixHQUFtREosRUFBQW5GLEdBQUFzQyxFQUFBdEMsSUFBZ0NtRixFQUFBLFFBQUE3QyxFQUF5QjBDLEdBQWFBLEVBQUFRLElBQUFsRCxFQUFBNkMsR0FBMEIsT0FBQUEsRUFwQnZvQlgsQ0FBb0NoRixFQUFRLElBRTVDNk0sRUFBNkI3TSxFQUFRLEtBRXJDMnJDLEVBQUE1ckMsRUFBc0NDLEVBQVEsT0FFOUMyUSxFQUFBNVEsRUFBbUNDLEVBQVEsS0FFM0M0ckMsRUFBQTdyQyxFQUFxQ0MsRUFBUSxNQUU3Q2lYLEVBQUFsWCxFQUE2Q0MsRUFBUSxNQUVyRDZyQyxFQUFBOXJDLEVBQXVDQyxFQUFRLE1BRS9DcUYsRUFBc0JyRixFQUFRLElBRTlCLFNBQUFELEVBQUErQyxHQUFzQyxPQUFBQSxLQUFBQyxXQUFBRCxHQUF1Q0UsUUFBQUYsR0FFN0UsU0FBQXdDLElBQXFDLHNCQUFBQyxRQUFBLFlBQWdELElBQUFDLEVBQUEsSUFBQUQsUUFBNkcsT0FBbEZELEVBQUEsV0FBaUUsT0FBQUUsR0FBaUJBLEVBSWxNLFNBQUFTLEVBQUFuRCxHQUF3VSxPQUF0T21ELEVBQTNFLG1CQUFBQyxRQUFBLGlCQUFBQSxPQUFBQyxTQUEyRSxTQUFBckQsR0FBa0MsY0FBQUEsR0FBK0IsU0FBQUEsR0FBa0MsT0FBQUEsR0FBQSxtQkFBQW9ELFFBQUFwRCxFQUFBc0QsY0FBQUYsUUFBQXBELElBQUFvRCxPQUFBL0IsVUFBQSxnQkFBQXJCLElBQW1JQSxHQUV4VSxTQUFBMkQsSUFBbVIsT0FBOVBBLEVBQUEvRyxPQUFBZ0gsUUFBQSxTQUFBQyxHQUFnRCxRQUFBckcsRUFBQSxFQUFnQkEsRUFBQXNHLFVBQUFyRyxPQUFzQkQsSUFBQSxDQUFPLElBQUF1RyxFQUFBRCxVQUFBdEcsR0FBMkIsUUFBQUUsS0FBQXFHLEVBQTBCbkgsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXdDLEVBQUFyRyxLQUF5RG1HLEVBQUFuRyxHQUFBcUcsRUFBQXJHLElBQWlDLE9BQUFtRyxJQUFrQkcsTUFBQUMsS0FBQUgsV0FJblIsU0FBQUksRUFBQUwsRUFBQXhFLEdBQTJDLFFBQUE3QixFQUFBLEVBQWdCQSxFQUFBNkIsRUFBQTVCLE9BQWtCRCxJQUFBLENBQU8sSUFBQTJHLEVBQUE5RSxFQUFBN0IsR0FBMkIyRyxFQUFBWCxXQUFBVyxFQUFBWCxhQUFBLEVBQXdEVyxFQUFBVixjQUFBLEVBQWdDLFVBQUFVLE1BQUFULFVBQUEsR0FBdUQ5RyxPQUFBQyxlQUFBZ0gsRUFBQU0sRUFBQXpHLElBQUF5RyxJQU05UCxTQUFBQyxFQUFBQyxHQUFnTCxPQUFuSkQsRUFBQXhILE9BQUEwSCxlQUFBMUgsT0FBQTJILGVBQUEsU0FBQUYsR0FBZ0csT0FBQUEsRUFBQUcsV0FBQTVILE9BQUEySCxlQUFBRixLQUFtREEsR0FFaEwsU0FBQUksRUFBQUMsR0FBdUMsWUFBQUEsRUFBdUIsVUFBQUMsZUFBQSw2REFBeUYsT0FBQUQsRUFJdkosU0FBQUUsRUFBQVAsRUFBQVEsR0FBMEksT0FBMUdELEVBQUFoSSxPQUFBMEgsZ0JBQUEsU0FBQUQsRUFBQVEsR0FBNkYsT0FBakJSLEVBQUFHLFVBQUFLLEVBQWlCUixJQUFhQSxFQUFBUSxHQUUxSSxJQUFBQyxFQUFBLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsS0FFQSxRQUFBSixLQUFBRSxFQUNBbkksT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXdELEVBQUFGLElBQUFHLEVBQUFFLFFBQUFMLEdBQUEsSUFBQUksRUFBQUosR0FBQUUsRUFBQUYsSUFHQSxTQUFBRSxHQUFBLG1CQUFBbkksT0FBQXVJLHNCQUFBLEtBQUEzSCxFQUFBLE1BQUFxSCxFQUFBakksT0FBQXVJLHNCQUFBSixHQUEySHZILEVBQUFxSCxFQUFBcEgsT0FBY0QsSUFDekl3SCxFQUFBRSxRQUFBTCxFQUFBckgsSUFBQSxHQUFBWixPQUFBeUUsVUFBQStELHFCQUFBN0QsS0FBQXdELEVBQUFGLEVBQUFySCxNQUFBeUgsRUFBQUosRUFBQXJILElBQUF1SCxFQUFBRixFQUFBckgsS0FFQSxPQUFBeUgsR0FHQStqQyxFQUVBLFNBQUExakMsR0FHQSxTQUFBMGpDLEVBQUEzcEMsR0FDQSxJQUFBa0csRUErRkEsT0FsSUEsU0FBQUMsRUFBQUMsR0FBaUQsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQUMsVUFBQSxxQ0FxQzNGQyxDQUFBMUIsS0FBQStrQyxJQUVBempDLEVBakNBLFNBQUFiLEVBQUFuRCxHQUFpRCxPQUFBQSxHQUFBLFdBQUE0QixFQUFBNUIsSUFBQSxtQkFBQUEsRUFBeUZrRCxFQUFBQyxHQUFmbkQsRUFpQzNIcUUsQ0FBQTNCLEtBQUFHLEVBQUE0a0MsR0FBQXpuQyxLQUFBMEMsS0FBQTVFLEtBRUE0cEMsVUFBQSxTQUFBamtDLEdBQ0FPLEVBQUFzbEIsWUFBQSxFQUFBN2xCLEdBRUEsSUFBQWlrQyxFQUFBMWpDLEVBQUFsRyxNQUFBNHBDLFVBRUFBLEdBQ0FBLEVBQUExbkMsS0FBQWtELEVBQUFjLEdBQUFQLElBSUFPLEVBQUEyakMsU0FBQSxTQUFBbGtDLEdBQ0FPLEVBQUFzbEIsWUFBQSxFQUFBN2xCLEdBRUEsSUFBQWtrQyxFQUFBM2pDLEVBQUFsRyxNQUFBNnBDLFNBRUFBLEdBQ0FBLEVBQUEzbkMsS0FBQWtELEVBQUFjLEdBQUFQLElBSUFPLEVBQUF1bEIsZ0JBQUEsU0FBQUMsR0FDQXhsQixFQUFBbEcsTUFBQXlILFVBTUF2QixFQUFBc2xCLFdBQUFFLElBR0F4bEIsRUFBQTRqQyxZQUFBLFNBQUEzbkMsR0FDQStELEVBQUE2akMsUUFBQTVuQyxHQUdBK0QsRUFBQThqQyxjQUFBLFNBQUE3aUMsRUFBQThpQyxHQUNBLElBQUEzNEIsRUFBQXBMLEVBQUFsRyxNQUNBa3FDLEVBQUE1NEIsRUFBQTQ0QixjQUNBQyxFQUFBNzRCLEVBQUE2NEIsa0JBQ0F6b0IsRUFBQXBRLEVBQUFvUSxNQUNBMG9CLEVBQUE5NEIsRUFBQTg0QixXQUNBQyxFQUFBLzRCLEVBQUErNEIsT0FDQUMsRUFBQWg1QixFQUFBZzVCLE9BQ0FDLEVBQUFqNUIsRUFBQWk1QixLQUNBLE9BQUEzbkMsRUFBQWdGLGNBQUEsV0FBQWhGLEVBQUFnRixjQUFBLE9BQ0FSLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxtQkFDT3ZFLEVBQUFnRixjQUFBLE9BQ1BSLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxhQUNPb2pDLEVBQUEzbkMsRUFBQWdGLGNBQUEsT0FDUFIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLG1CQUNPdWEsSUFBQTllLEVBQUFnRixjQUFBLE9BQ1BSLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxhQUNPdkUsRUFBQWdGLGNBQUE2aEMsRUFBQSxRQUFBbmxDLEdBQ1B5TyxRQUFBN00sRUFBQTJqQyxTQUNBaDdCLEtBQUEsU0FDT3M3QixHQUFBQyxHQUFBSCxFQUFBRyxZQUFBeG5DLEVBQUFnRixjQUFBNmhDLEVBQUEsUUFBQW5sQyxHQUNQeU8sUUFBQTdNLEVBQUEwakMsVUFDQTNnQyxLQUFBcWhDLEVBQ0F6N0IsS0FBQSxTQUNPcTdCLEdBQUFHLEdBQUFKLEVBQUFJLFlBR1Bua0MsRUFBQXNrQyxjQUFBLFNBQUExakMsR0FDQSxJQUFBRSxFQUFBRixFQUFBRSxhQUVBNkksRUFBQTNKLEVBQUFsRyxNQUNBa0gsRUFBQTJJLEVBQUExSSxVQUNBNm1CLEVBQUFuZSxFQUFBbWUsVUFDQTNtQixFQUFBNUIsRUFBQW9LLEdBQUEsMEJBRUExSSxFQUFBSCxFQUFBLFVBQUFFLEdBQ0ErbUIsRUFBQXJyQixFQUFBZ0YsY0FBQWtOLEVBQUEsU0FDQWtGLGNBQUEsYUFDQUMsY0FBQXl2QixFQUFBLFFBQUFDLFlBQ08sU0FBQU0sR0FDUCxPQUFBL2pDLEVBQUE4akMsY0FBQTdpQyxFQUFBOGlDLEtBRUEsT0FBQXJuQyxFQUFBZ0YsY0FBQTRoQyxFQUFBLFFBQUFsbEMsS0FBaUUrQyxHQUNqRUYsWUFDQTZtQixZQUNBdkMsZ0JBQUF2bEIsRUFBQXVsQixnQkFDQUMsUUFBQXhsQixFQUFBMEMsTUFBQThpQixRQUNBdUMsVUFDQWxtQixJQUFBN0IsRUFBQTRqQyxnQkFJQTVqQyxFQUFBMEMsT0FDQThpQixRQUFBMXJCLEVBQUEwckIsU0FFQXhsQixFQWlEQSxPQXZLQSxTQUFBK0IsRUFBQUMsR0FBMEMsc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQTdCLFVBQUEsc0RBQTZFNEIsRUFBQWpHLFVBQUF6RSxPQUFBNEssT0FBQUQsS0FBQWxHLFdBQXlFaUMsYUFBZXZHLE1BQUF1SyxFQUFBNUQsVUFBQSxFQUFBRCxjQUFBLEtBQTBEOEQsR0FBQTNDLEVBQUEwQyxFQUFBQyxHQW9CeFVFLENBQUF1aEMsRUFvSkMvbUMsRUFBQXlGLFdBaExELFNBQUFqQyxFQUFBa0MsRUFBQUMsR0FBNkRELEdBQUF6RCxFQUFBdUIsRUFBQXBFLFVBQUFzRyxHQUFzRUMsR0FBQTFELEVBQUF1QixFQUFBbUMsR0FpSW5JQyxDQUFBbWhDLElBQ0F0ckMsSUFBQSxrQkFDQVgsTUFBQSxXQUNBLE9BQUFrSCxLQUFBbWxDLFFBQUFVLHFCQUdBcHNDLElBQUEsYUFDQVgsTUFBQSxTQUFBZ3VCLEVBQUEvbEIsR0FDQSxJQUFBM0YsRUFBQTRFLEtBQUE1RSxNQUVBLFlBQUFBLEdBQ0E0RSxLQUFBcU4sVUFDQXlaLFlBSUEsSUFBQUQsRUFBQXpyQixFQUFBeXJCLGdCQUVBQSxHQUNBQSxFQUFBQyxFQUFBL2xCLE1BSUF0SCxJQUFBLFNBQ0FYLE1BQUEsV0FDQSxPQUFBa0YsRUFBQWdGLGNBQUExRSxFQUFBNkYsZUFBQSxLQUFBbkUsS0FBQTRsQyxvQkFHQW5zQyxJQUFBLDJCQUNBWCxNQUFBLFNBQUErSyxHQUNBLGtCQUFBQSxHQUVBaWpCLFFBQUFqakIsRUFBQWlqQixTQUlBLG1CQUFBampCLEdBRUFpakIsUUFBQWpqQixFQUFBaWlDLGdCQUlBLFNBSUFmLEVBcEpBLEdBdUpBQSxFQUFBM2dDLGNBQ0FtRyxlQUFBLFdBQ0E2ZSxVQUFBLE1BQ0FELFFBQUEsUUFDQXVjLE9BQUEsVUFDQUMsS0FBQTNuQyxFQUFBZ0YsY0FBQTRHLEVBQUEsU0FDQXZGLEtBQUEscUJBQ0ErSCxNQUFBLFdBRUF2SixVQUFBLElBRUEsRUFBQWlELEVBQUFtQixVQUFBODlCLEdBQ0EsSUFBQWhuQyxFQUFBZ25DLEVBQ0Fsc0MsRUFBQSxRQUFBa0YscUNDbE9BcEYsT0FBQUMsZUFBQUMsRUFBQSxjQUNBQyxPQUFBLElBRUFELEVBQUEsZUFFQSxJQUFBbUYsRUFVQSxTQUFBakMsR0FBdUMsR0FBQUEsS0FBQUMsV0FBNkIsT0FBQUQsRUFBYyxJQUFBMEMsRUFBQUYsSUFBd0MsR0FBQUUsS0FBQUMsSUFBQTNDLEdBQStCLE9BQUEwQyxFQUFBRSxJQUFBNUMsR0FBeUIsSUFBQTZDLEtBQWlCLFNBQUE3QyxFQUFBLENBQW1CLElBQUE4QyxFQUFBbEcsT0FBQUMsZ0JBQUFELE9BQUFtRyx5QkFBc0YsUUFBQXJGLEtBQUFzQyxFQUF1QixHQUFBcEQsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXZCLEVBQUF0QyxHQUFBLENBQXNELElBQUF1RixFQUFBSCxFQUFBbEcsT0FBQW1HLHlCQUFBL0MsRUFBQXRDLEdBQUEsS0FBcUZ1RixNQUFBTCxLQUFBSyxFQUFBQyxLQUFzQ3RHLE9BQUFDLGVBQUFnRyxFQUFBbkYsRUFBQXVGLEdBQW1ESixFQUFBbkYsR0FBQXNDLEVBQUF0QyxJQUFnQ21GLEVBQUEsUUFBQTdDLEVBQXlCMEMsR0FBYUEsRUFBQVEsSUFBQWxELEVBQUE2QyxHQUEwQixPQUFBQSxFQVZ2b0JYLENBQW9DaEYsRUFBUSxJQUU1Q21GLEVBSUEsU0FBQXJDLEdBQXNDLE9BQUFBLEtBQUFDLFdBQUFELEdBQXVDRSxRQUFBRixHQUo3RS9DLENBQXlDQyxFQUFRLEtBRWpEcUYsRUFBc0JyRixFQUFRLElBSTlCLFNBQUFzRixJQUFxQyxzQkFBQUMsUUFBQSxZQUFnRCxJQUFBQyxFQUFBLElBQUFELFFBQTZHLE9BQWxGRCxFQUFBLFdBQWlFLE9BQUFFLEdBQWlCQSxFQUlsTSxTQUFBaUIsSUFBbVIsT0FBOVBBLEVBQUEvRyxPQUFBZ0gsUUFBQSxTQUFBQyxHQUFnRCxRQUFBckcsRUFBQSxFQUFnQkEsRUFBQXNHLFVBQUFyRyxPQUFzQkQsSUFBQSxDQUFPLElBQUF1RyxFQUFBRCxVQUFBdEcsR0FBMkIsUUFBQUUsS0FBQXFHLEVBQTBCbkgsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXdDLEVBQUFyRyxLQUF5RG1HLEVBQUFuRyxHQUFBcUcsRUFBQXJHLElBQWlDLE9BQUFtRyxJQUFrQkcsTUFBQUMsS0FBQUgsV0FFblIsU0FBQVAsRUFBQXZELEVBQUF0QyxFQUFBWCxHQUFtTSxPQUF4SlcsS0FBQXNDLEVBQWtCcEQsT0FBQUMsZUFBQW1ELEVBQUF0QyxHQUFrQ1gsUUFBQXlHLFlBQUEsRUFBQUMsY0FBQSxFQUFBQyxVQUFBLElBQWdGMUQsRUFBQXRDLEdBQUFYLEVBQW9CaUQsRUFFbk0sSUFBQThFLEVBQUEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBQyxLQUVBLFFBQUFKLEtBQUFFLEVBQ0FuSSxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0QsRUFBQUYsSUFBQUcsRUFBQUUsUUFBQUwsR0FBQSxJQUFBSSxFQUFBSixHQUFBRSxFQUFBRixJQUdBLFNBQUFFLEdBQUEsbUJBQUFuSSxPQUFBdUksc0JBQUEsS0FBQTNILEVBQUEsTUFBQXFILEVBQUFqSSxPQUFBdUksc0JBQUFKLEdBQTJIdkgsRUFBQXFILEVBQUFwSCxPQUFjRCxJQUN6SXdILEVBQUFFLFFBQUFMLEVBQUFySCxJQUFBLEdBQUFaLE9BQUF5RSxVQUFBK0QscUJBQUE3RCxLQUFBd0QsRUFBQUYsRUFBQXJILE1BQUF5SCxFQUFBSixFQUFBckgsSUFBQXVILEVBQUFGLEVBQUFySCxLQUVBLE9BQUF5SCxHQWdDQWpELEVBN0JBLFNBQUEzQyxHQUNBLE9BQUE0QyxFQUFBZ0YsY0FBQTFFLEVBQUE2RixlQUFBLGNBQUFqQyxHQUNBLElBQUFDLEVBRUFDLEVBQUFGLEVBQUFFLGFBRUFFLEVBQUFsSCxFQUFBbUgsVUFDQXdqQyxFQUFBM3FDLEVBQUFpSixLQUNBQSxPQUFBLElBQUEwaEMsRUFBQSxhQUFBQSxFQUNBQyxFQUFBNXFDLEVBQUE2cUMsWUFDQUEsT0FBQSxJQUFBRCxFQUFBLFNBQUFBLEVBQ0F4akMsRUFBQXBILEVBQUFvSCxVQUNBcEosRUFBQWdDLEVBQUFoQyxTQUNBOHNDLEVBQUE5cUMsRUFBQThxQyxPQUNBempDLEVBQUE1QixFQUFBekYsR0FBQSxtRUFFQW1ILEVBQUFILEVBQUEsVUFBQUUsR0FDQTZqQyxFQUFBRixFQUFBenNDLE9BQUEsTUFBQXVKLE9BQUFrakMsS0FDQTEvQixHQUFBLEVBQUFuSSxFQUFBLFNBQUFvRSxFQUFBRCxFQUFBLEdBQUFRLE9BQUFSLEVBQUEsS0FBQVEsT0FBQXNCLElBQWlJL0UsRUFBakk2QyxLQUFpSSxHQUFBWSxPQUFBUixFQUFBLGNBQUFRLE9BQUFvakMsR0FBQS9zQyxHQUFBa0csRUFBQTZDLEVBQUEsR0FBQVksT0FBQVIsRUFBQSxhQUFBMmpDLEdBQUEvakMsSUFDakksT0FBQW5FLEVBQUFnRixjQUFBLE1BQUF0RCxHQUNBOEMsVUFBQStELEdBQ0s5RCxHQUNMcXRCLEtBQUEsY0FDSzEyQixHQUFBNEUsRUFBQWdGLGNBQUEsUUFDTFIsVUFBQSxHQUFBTyxPQUFBUixFQUFBLGdCQUNLbkosT0FLTFAsRUFBQSxRQUFBa0YscUNDaEVBOUUsRUFBUSxJQUVSQSxFQUFRLE1BRVJBLEVBQVEsTUFFUkEsRUFBUSxNQUVSQSxFQUFRLE1BRVJBLEVBQVEsTUFFUkEsRUFBUSxLQUVSQSxFQUFRLHlDQ2RSQSxFQUFRLElBRVJBLEVBQVEseUNDRlJBLEVBQVEsSUFFUkEsRUFBUSx5Q0NGUkEsRUFBUSxJQUVSQSxFQUFRLE1BRVJBLEVBQVEseUNDSlJBLEVBQVEsSUFFUkEsRUFBUSxNQUVSQSxFQUFRLHlDQ0pSQSxFQUFRLElBRVJBLEVBQVEsTUFFUkEsRUFBUSxNQUVSQSxFQUFRLE1BRVJBLEVBQVEseUNDUlJBLEVBQVEsSUFFUkEsRUFBUSx5Q0NGUkEsRUFBUSxJQUVSQSxFQUFRLE1BRVJBLEVBQVEsd0NDSlJBLEVBQVEsSUFFUkEsRUFBUSx5Q0NGUkEsRUFBUSxJQUVSQSxFQUFRLGdSQ0ZSbXRDLE9BQUEsRUFDQUMsT0FBQSxFQUdBQyxHQUNBaHFCLFNBQUEsV0FDQXdpQixJQUFBLFVBQ0FsaUIsTUFBQSxPQUNBZ2lCLE9BQUEsUUFJTzVoQixFQUFBLCtCQUVBLFNBQUF1cEIsRUFBQXJrQyxHQUNQLElBQUFza0MsRUFBQXRrQyxFQUFBa1IsVUFDQUEsT0FBQWhRLElBQUFvakMsRUFBQSxXQUFBQSxFQUNBamtDLEVBQUFMLEVBQUFLLFVBRUEsdUJBQUFtbkIsVUFBQSxvQkFBQTN2QixPQUNBLFNBRUEsSUFBQVcsRUFBQSxhQUFBMFksRUFDQSxHQUFBMVksR0FBQTByQyxFQUNBLE9BQUFBLEVBQ0csSUFBQTFyQyxHQUFBMnJDLEVBQ0gsT0FBQUEsRUFFQSxJQUFBSSxFQUFBL2MsU0FBQTFtQixjQUFBLE9BQ0FySyxPQUFBMEMsS0FBQWlyQyxHQUFBbnFDLFFBQUEsU0FBQXVxQyxHQUNBRCxFQUFBM3NDLE1BQUE0c0MsR0FBQUosRUFBQUksS0FHQUQsRUFBQWprQyxVQUFBRCxFQUFBLDRDQUVBN0gsRUFDQStyQyxFQUFBM3NDLE1BQUE2c0MsVUFBQSxTQUVBRixFQUFBM3NDLE1BQUE4c0MsVUFBQSxTQUVBbGQsU0FBQTFOLEtBQUE2cUIsWUFBQUosR0FDQSxJQUFBeDhCLEVBQUEsRUFVQSxPQVRBdlAsR0FDQXVQLEVBQUF3OEIsRUFBQXhILFlBQUF3SCxFQUFBSyxZQUNBVixFQUFBbjhCLElBRUFBLEVBQUF3OEIsRUFBQXRILGFBQUFzSCxFQUFBTSxhQUNBVixFQUFBcDhCLEdBR0F5ZixTQUFBMU4sS0FBQWdyQixZQUFBUCxHQUNBeDhCLEVBcUNBLElBQUFnOUIsS0FDTyxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBbmlCLEdBQ1BnaUIsRUFBQUcsS0FDSUMsSUFBT0YsRUFBQUMsRUFBQW5pQixHQUNYZ2lCLEVBQUFHLElBQUFELHlCQzRHZUcsRUFwTUUsV0FDakIsU0FBQUMsRUFBQXIrQixFQUFBRCxHQUNJaUUsSUFBZWxOLEtBQUF1bkMsR0FFbkJ2bkMsS0FBQXduQyxXQUVBeG5DLEtBQUFrSixXQUFBbEosS0FBQXluQyxVQUFBeCtCLEdBMkxBLE9BeExFeStCLElBQVlILElBQ2Q5dEMsSUFBQSxvQkFDQVgsTUFBQSxXQUNBLElBQUF3SSxFQUFBdEIsS0FFQSxPQUFBQSxLQUFBMm5DLE9BQUEsK0JBQ0EsT0FBQXJtQyxFQUFBNEgsUUFBQTdMLEtBQUEsU0FBQWdNLEdBQ0EsUUFBQUEsRUFBQXVPLGFBS0FuZSxJQUFBLHdCQUNBWCxNQUFBLFdBQ0EsSUFBQThmLEVBQUE1WSxLQUVBLE9BQUFBLEtBQUEybkMsT0FBQSxtQ0FDQSxPQUFBL3VCLEVBQUExUCxRQUFBN0wsS0FBQSxTQUFBZ00sR0FDQSxlQUFBQSxFQUFBdU8sUUFBQSxJQUFBdk8sRUFBQXVPLGFBS0FuZSxJQUFBLHlCQUNBWCxNQUFBLFdBQ0EsSUFBQW1oQixFQUFBamEsS0FFQSxPQUFBQSxLQUFBMm5DLE9BQUEsb0NBQ0EsT0FBQTF0QixFQUFBL1EsUUFBQTdMLEtBQUEsU0FBQWdNLEdBQ0EsZ0JBQUFBLEVBQUF1TyxhQUtBbmUsSUFBQSxjQUNBWCxNQUFBLFdBQ0EsSUFBQTRoQixFQUFBMWEsS0FFQSxPQUFBQSxLQUFBMm5DLE9BQUEseUJBQ0EsT0FBQWp0QixFQUFBa3RCLGlCQUFBaDBCLE9BQUEsU0FBQXZLLEdBQ0EsZUFBQUEsRUFBQXVPLFFBQUEsSUFBQXZPLEVBQUF1TyxhQUtBbmUsSUFBQSxlQUNBWCxNQUFBLFdBQ0EsSUFBQTBpQixFQUFBeGIsS0FFQSxPQUFBQSxLQUFBMm5DLE9BQUEsMEJBQ0EsT0FBQW5zQixFQUFBb3NCLGlCQUFBaDBCLE9BQUEsU0FBQXZLLEdBQ0EsZ0JBQUFBLEVBQUF1TyxhQUtBbmUsSUFBQSxjQUNBWCxNQUFBLFdBQ0EsSUFBQW9qQixFQUFBbGMsS0FFQSxPQUFBQSxLQUFBMm5DLE9BQUEseUJBQ0EsT0FBQXpyQixFQUFBMnJCLGFBQUEzckIsRUFBQWhULGNBSUF6UCxJQUFBLGtCQUNBWCxNQUFBLFdBQ0EsSUFBQTBqQixFQUFBeGMsS0FFQSxPQUFBQSxLQUFBMm5DLE9BQUEsNkJBQ0EsT0FBQW5yQixFQUFBcXJCLGFBQUFyckIsRUFBQXNyQixvQkFJQXJ1QyxJQUFBLG1CQUNBWCxNQUFBLFdBQ0EsSUFBQXVrQixFQUFBcmQsS0FFQSxPQUFBQSxLQUFBMm5DLE9BQUEsOEJBQ0EsT0FBQXRxQixFQUFBd3FCLGFBQUF4cUIsRUFBQTBxQixxQkFPQXR1QyxJQUFBLGlCQUNBWCxNQUFBLFdBQ0EsSUFBQWt2QyxFQUFBaG9DLEtBRUEsT0FBQUEsS0FBQTJuQyxPQUFBLDRCQXNDQSxPQXJDQSxTQUFBTSxFQUFBLytCLEdBQ0EsSUFBQWcvQixFQUFBcm9DLFVBQUFyRyxPQUFBLFFBQUE0SixJQUFBdkQsVUFBQSxHQUFBQSxVQUFBLEtBQ0Fzb0MsRUFBQXRvQyxVQUFBckcsT0FBQSxRQUFBNEosSUFBQXZELFVBQUEsR0FBQUEsVUFBQSxNQUNBK1MsRUFBQS9TLFVBQUFyRyxPQUFBLFFBQUE0SixJQUFBdkQsVUFBQSxHQUFBQSxVQUFBLE1BR0ErUyxFQUFBczFCLEdBQUF0MUIsRUFBQXMxQixPQUNBLElBQUFFLEtBQ0FDLEVBQUEsU0FBQWgvQixHQUNBLElBQUFpL0IsRUFBQTExQixFQUFBcFosT0FBQTB1QyxFQUNBNytCLE1BQUFqUSxVQUNBa3ZDLEVBQUEsS0FBQWovQixFQUFBaS9CLFNBQUFqL0IsRUFBQWkvQixhQUNBai9CLEVBQUFpL0IsWUF1QkEsT0FwQkFwL0IsRUFBQS9NLFFBQUEsU0FBQWtOLEVBQUExUCxHQUNBLElBQUFvZCxFQUE0QnpKLE9BQVdqRSxHQUN2Q3VKLEVBQUFzMUIsR0FBQTdyQyxLQUFBMGEsR0FDQW94QixFQUFBSSxRQUFBSixFQUFBSSxTQUFBLEVBQ0F4eEIsRUFBQTNkLFVBQUEyZCxFQUFBM2QsU0FBQUksT0FBQSxHQUNBdWQsRUFBQTNkLFNBQUE2dUMsRUFBQWx4QixFQUFBM2QsU0FBQTh1QyxFQUFBLEVBQUFueEIsRUFBQW5FLEdBQ0F1MUIsRUFBQUksU0FBQXh4QixFQUFBd3hCLFNBRUFKLEVBQUFJLFVBR0EsUUFBQWh2QyxFQUFBLEVBQTJCQSxFQUFBcVosRUFBQXMxQixHQUFBMXVDLE9BQUEsSUFBaUNELEVBQzVEOHVDLEVBQUF6MUIsRUFBQXMxQixHQUFBM3VDLElBR0FJLEVBQUEsSUFBQXVQLEVBQUExUCxRQUNBNnVDLEVBQUF0eEIsR0FFQXF4QixFQUFBL3JDLEtBQUEwYSxLQUVBcXhCLEVBRUFILENBQUFELEVBQUE5K0IsY0FJQXpQLElBQUEsWUFDQVgsTUFBQSxTQUFBbVEsR0FDQSxJQUFBdS9CLEVBQUF4b0MsS0FFQWtKLEtBY0EsT0FiTXlGLEVBQUFDLEVBQUsxUyxTQUFBQyxRQUFBOE0sRUFBQSxTQUFBRSxHQUNYLEdBQWF3RixFQUFBQyxFQUFLeEYsZUFBQUQsR0FBbEIsQ0FHQSxJQUFBRSxFQUFxQmlFLE9BQVduRSxFQUFBL04sT0FDaEMrTixFQUFBMVAsTUFDQTRQLEVBQUE1UCxJQUFBMFAsRUFBQTFQLEtBRUEwUCxFQUFBOUUsS0FBQW9rQyxxQkFDQXAvQixFQUFBalEsU0FBQW92QyxFQUFBZixVQUFBcCtCLEVBQUFqUSxXQUVBOFAsRUFBQTdNLEtBQUFnTixNQUVBSCxLQUdBelAsSUFBQSxRQUNBWCxNQUFBLFNBQUFvUSxFQUFBRCxHQUNBakosS0FBQWtKLFdBQUFsSixLQUFBeW5DLFVBQUF4K0IsR0FDQWpKLEtBQUF3bkMsY0FHQS90QyxJQUFBLFNBQ0FYLE1BQUEsU0FBQTZKLEVBQUErbEMsR0FDQSxPQUFBL2xDLEtBQUEzQyxLQUFBd25DLFFBQ0F4bkMsS0FBQXduQyxRQUFBN2tDLElBRUEzQyxLQUFBd25DLFFBQUE3a0MsR0FBQStsQyxJQUNBMW9DLEtBQUF3bkMsUUFBQTdrQyxPQUdBbEosSUFBQSxlQUNBWCxNQUFBLFNBQUFvUSxHQUNBLElBQUF5L0IsRUFBQTNvQyxLQUVBNG9DLEtBUUEsT0FQQTEvQixFQUFBL00sUUFBQSxTQUFBa04sR0FDQUEsRUFBQWpRLFNBR0F3dkMsRUFBQXZzQyxLQUFBMEQsTUFBQTZvQyxFQUE4Q0MsSUFBa0JGLEVBQUFkLGFBQUF4K0IsRUFBQWpRLFlBRmhFd3ZDLEVBQUF2c0MsS0FBQWdOLEtBS0F1L0IsTUFJQXJCLEVBak1pQixxQ0NERixTQUFBdUIsRUFBQTF0QyxFQUFBOEcsR0FDZixJQUFBb1YsRUFBQXBWLEVBQUFvVixNQUNBeXhCLEVBQUF6eEIsRUFBQWxjLE1BQ0FtSCxFQUFBd21DLEVBQUF4bUMsVUFDQWdVLEVBQUF3eUIsRUFBQXh5QixpQkFDQXFCLEVBQUF4YyxFQUFBd2MsTUFHQW94QixLQUVBenlCLEdBQUEsVUFBQXFCLEdBQ0FveEIsRUFBQTNzQyxLQUFjc1MsRUFBQUMsRUFBSzVMLGNBQUEsT0FBdUJSLFVBQUFELEVBQUEsbUJBQUE5SSxJQUFBLDhCQUcxQyxJQUFBbXZDLE9BQUEsRUFtQkEsT0FoQkFBLEVBREEsU0FBQWh4QixFQUNBTixFQUFBMnhCLGNBQUFDLGtCQUNHLFVBQUF0eEIsRUFDSE4sRUFBQTJ4QixjQUFBRSxtQkFFQTd4QixFQUFBMnhCLGNBQUFMLGNBRUFJLElBQUFqbUMsT0FBQTZsQyxFQUFBM2dDLElBQUEsU0FBQThOLEdBQ0EsSUFBQXRjLEVBQUFzYyxFQUFBdGMsSUFDQStXLEVBQUF1RixFQUFBdkYsVUFDQW9NLEVBQUE3RyxFQUFBNkcsTUFDQXdzQixFQUFBcnpCLEVBQWdDaUgsR0FFaENxc0IsT0FBQWptQyxJQUFBM0osSUFBQStXLEVBQ0EsT0FBVzdCLEVBQUFDLEVBQUs1TCxjQUFBLE1BQXNCc0ssS0FBVTdULElBQUE0dkMsRUFBQXZ2QyxPQUF5QjhpQixRQUFBMHNCLFNBQUExc0IsSUFBa0N3c0IsT0FHbEd6NkIsRUFBQUMsRUFBSzVMLGNBQ2QsV0FDQSxLQUNBZ21DLEdBSUFGLEVBQUEvN0IsV0FDQTZLLE1BQVM5SSxFQUFBRixFQUFTNUUsUUFHbEI4K0IsRUFBQXhrQyxjQUNBZ1QsTUFBU3hJLEVBQUFGLEVBQVNySywwQkMxQ2xCLFNBQUFnbEMsRUFBQXJuQyxHQUNBLElBQUErUSxFQUFBL1EsRUFBQStRLElBQ0F0WixFQUFBdUksRUFBQXZJLE1BQ0FpbEMsRUFBQTE4QixFQUFBMDhCLE9BQ0ExbkIsRUFBQWhWLEVBQUFnVixXQUNBc3lCLEVBQUF0bkMsRUFBQXNuQyxZQUNBam5DLEVBQUFMLEVBQUFLLFVBRUFrbkMsRUFBQXZ5QixFQUFBd3lCLE9BQUF6MkIsSUFDQTAyQixFQUFBenlCLEVBQUF3eUIsT0FBQUUsS0FDQWhjLEVBQUE0YixFQUFBdjJCLEVBQUFoTCxJQUFBLFNBQUEyaEMsR0FDQSxPQUFBQSxFQUFBdmdDLFNBQ0cxUCxHQUNIa3dDLEVBQUFqYyxJQUFBOXpCLFNBQ0FBLEVBQWN3VCxLQUFVc3hCLFVBQWlCaUwsR0FFekMsT0FBU2w3QixFQUFBQyxFQUFLNUwsY0FDZHltQyxFQUNJbjhCLE9BQVdzZ0IsR0FBYTl6QixVQUM1Qm1aLEVBQUFoTCxJQUFBLFNBQUEyaEMsRUFBQXJ3QyxHQUNBLElBQUE4UCxFQUFBdWdDLEVBQUF2Z0MsT0FDQXlnQyxFQUFzQnQ3QixJQUF3Qm83QixHQUFBLFdBRTlDRyxFQUFBMWdDLEVBQUFxVSxhQUFBclUsRUFBQXFVLGFBQUFyVSxNQUtBLE9BSkFBLEVBQUEyZ0MsUUFDQUQsRUFBQWp3QyxNQUE0QndULE9BQVd5OEIsRUFBQWp3QyxPQUFzQm13QyxVQUFBNWdDLEVBQUEyZ0MsUUFDN0RELEVBQUF2bkMsVUFBZ0NrTSxJQUFVcTdCLEVBQUF2bkMsVUFBQTZHLEVBQUE3RyxVQUEwQzBuQyxPQUFrQjNuQyxFQUFBLFVBQUE4RyxFQUFBMmdDLFFBQUEzZ0MsRUFBQTJnQyxTQUV6RnI3QixFQUFBQyxFQUFLNUwsY0FBQTJtQyxFQUEyQnI4QixPQUFXdzhCLEVBQUFDLEdBQTJCdHdDLElBQUE0UCxFQUFBNVAsS0FBQTRQLEVBQUFtSCxXQUFBalgsUUFLbkZnd0MsRUFBQXg4QixXQUNBa0csSUFBT25FLEVBQUFGLEVBQVNqSCxNQUNoQmhPLE1BQVNtVixFQUFBRixFQUFTSSxPQUNsQjR2QixPQUFVOXZCLEVBQUFGLEVBQVNHLFdBQVlELEVBQUFGLEVBQVM1RSxPQUFTOEUsRUFBQUYsRUFBU0ksU0FDMURrSSxXQUFjcEksRUFBQUYsRUFBU3JLLElBQ3ZCaWxDLFlBQWUxNkIsRUFBQUYsRUFBU0ssS0FDeEIxTSxVQUFhdU0sRUFBQUYsRUFBUzVFLFFBd0JQLElBQUFtZ0MsRUFBQXh4QyxPQUFBeXhDLEVBQUEsUUFBQXp4QyxDQUFPLFNBQUFxTCxFQUFBNUksR0FDdEIsT0FDQXdqQyxPQXZCQSxTQUFBNTZCLEVBQUE1SSxHQUNBLElBQUFpdkMsRUFBQXJtQyxFQUFBcW1DLDJCQUNBbmhDLEVBQUE5TixFQUFBOE4sUUFDQTBKLEVBQUF4WCxFQUFBd1gsS0FDQWdGLEVBQUF4YyxFQUFBd2MsTUFFQTB5QixFQUFBRCxFQUFBLEdBRUEsT0FBQXp5QixHQUlBMHlCLEdBQUFwaEMsRUFDQSxTQUFBb2hDLEVBQ0EsT0FFQUEsRUFBQTEzQixFQUFBcFosT0FQQSxLQWNBK3dDLENBQUF2bUMsRUFBQTVJLEtBRmUsQ0FJZG11QyxHQ2xDYyxTQUFBaUIsRUFBQXB2QyxFQUFBOEcsR0FDZixJQUFBb1YsRUFBQXBWLEVBQUFvVixNQUNBSixFQUFBSSxFQUFBSixXQUNBNnhCLEVBQUF6eEIsRUFBQWxjLE1BQ0FtSCxFQUFBd21DLEVBQUF4bUMsVUFDQTZULEVBQUEyeUIsRUFBQTN5QixXQUNBb3pCLEVBQUFULEVBQUFTLFlBQ0FpQixFQUFBcnZDLEVBQUFxdkMsU0FDQXZoQyxFQUFBOU4sRUFBQThOLFFBQ0EwTyxFQUFBeGMsRUFBQXdjLE1BR0EsSUFBQXhCLEVBQ0EsWUFHQSxJQUFBeEQsRUFyREEsU0FBQTgzQixFQUFBeGhDLEdBQ0EsSUFBQWcvQixFQUFBcm9DLFVBQUFyRyxPQUFBLFFBQUE0SixJQUFBdkQsVUFBQSxHQUFBQSxVQUFBLEtBQ0ErUyxFQUFBL1MsVUFBQSxHQThCQSxPQTVCQStTLFNBQ0FzMUIsR0FBQXQxQixFQUFBczFCLE9BRUFoL0IsRUFBQS9NLFFBQUEsU0FBQWtOLEdBQ0EsR0FBQUEsRUFBQWkvQixTQUFBMTFCLEVBQUFwWixPQUFBNlAsRUFBQWkvQixRQUNBLEtBQUExMUIsRUFBQXBaLE9BQUE2UCxFQUFBaS9CLFNBQ0ExMUIsRUFBQXZXLFNBR0EsSUFBQXV0QyxHQUNBbndDLElBQUE0UCxFQUFBNVAsSUFDQStJLFVBQUE2RyxFQUFBN0csV0FBQSxHQUNBcEosU0FBQWlRLEVBQUF5VCxNQUNBelQsVUFFQUEsRUFBQWpRLFVBQ0FzeEMsRUFBQXJoQyxFQUFBalEsU0FBQTh1QyxFQUFBLEVBQUF0MUIsR0FFQSxZQUFBdkosSUFDQXVnQyxFQUFBckIsUUFBQWwvQixFQUFBay9CLFNBRUEsWUFBQWwvQixJQUNBdWdDLEVBQUF0QixRQUFBai9CLEVBQUFpL0IsU0FFQSxJQUFBc0IsRUFBQXJCLFNBQ0EzMUIsRUFBQXMxQixHQUFBN3JDLEtBQUF1dEMsS0FHQWgzQixFQUFBZ0IsT0FBQSxTQUFBWCxHQUNBLE9BQUFBLEVBQUF6WixPQUFBLElBb0JBa3hDLENBQUF4aEMsR0FFQXVoQyxFQUFBRSx1QkFBQS8zQixFQUFBZ0YsR0FFQSxJQUFBZ3pCLEVBQUExekIsRUFBQXd5QixPQUFBbUIsUUFFQSxPQUFTbDhCLEVBQUFDLEVBQUs1TCxjQUNkNG5DLEdBQ0twb0MsVUFBQUQsRUFBQSxVQUNMcVEsRUFBQTNLLElBQUEsU0FBQWdMLEVBQUF0WixHQUNBLE9BQWFnVixFQUFBQyxFQUFLNUwsY0FBZW1uQyxHQUNqQzVuQyxZQUNBOUksSUFBQUUsRUFDQUEsUUFDQWllLFFBQ0ExTyxVQUNBMEosT0FDQUssTUFDQWlFLGFBQ0FzeUIsbUJBTUFnQixFQUFBejlCLFdBQ0E2SyxNQUFTOUksRUFBQUYsRUFBUzVFLE9BQ2xCZCxRQUFXNEYsRUFBQUYsRUFBU2pILE1BQUFzakIsV0FDcEJ3ZixTQUFZMzdCLEVBQUFGLEVBQVNsSyxPQUFBdW1CLFdBQ3JCdWUsWUFBZTE2QixFQUFBRixFQUFTSyxNQUd4QnU3QixFQUFBbG1DLGNBQ0FnVCxNQUFTeEksRUFBQUYsRUFBU3JLLDRDQ2pGbEIsU0FBQXVtQyxFQUFBNWlCLEdBQ0EsT0FBQUEsSUFBa0J2WixFQUFBQyxFQUFLeEYsZUFBQThlLElBQUEsb0JBQUF2dkIsT0FBQXlFLFVBQUF1TCxTQUFBckwsS0FBQTRxQixHQUd2QixJQUFJNmlCLEVBQVMsU0FBQTFwQyxHQUdiLFNBQUEycEMsSUFDQSxJQUFBOW9DLEVBRUFvaUMsRUFBQWhqQyxFQUFBaWpDLEVBRUlyM0IsSUFBZWxOLEtBQUFnckMsR0FFbkIsUUFBQXYyQixFQUFBNVUsVUFBQXJHLE9BQUF5ckIsRUFBQTluQixNQUFBc1gsR0FBQUUsRUFBQSxFQUFtRUEsRUFBQUYsRUFBYUUsSUFDaEZzUSxFQUFBdFEsR0FBQTlVLFVBQUE4VSxHQUdBLE9BQUEydkIsRUFBQWhqQyxFQUFvQzZMLElBQTBCbk4sTUFBQWtDLEVBQUE4b0MsRUFBQXpxQyxXQUFBNUgsT0FBQTJILGVBQUEwcUMsSUFBQTF0QyxLQUFBeUMsTUFBQW1DLEdBQUFsQyxNQUFBK0MsT0FBQWtpQixLQUFBM2pCLEVBQUEycEMsWUFBQSxTQUFBbHFDLEdBQzlELElBQUEyTCxFQUFBcEwsRUFBQWxHLE1BQ0E2VixFQUFBdkUsRUFBQXVFLE9BQ0FpNkIsRUFBQXgrQixFQUFBckQsT0FBQTZoQyxZQUVBQSxHQUNBQSxFQUFBajZCLEVBQUFsUSxJQU5Bd2pDLEVBUUtELEVBQVVuM0IsSUFBMEI3TCxFQUFBaWpDLEdBNkV6QyxPQWxHRTEyQixJQUFTbTlCLEVBQUEzcEMsR0F3QlRxbUMsSUFBWXNELElBQ2R2eEMsSUFBQSxTQUNBWCxNQUFBLFdBQ0EsSUFBQWtWLEVBQUFoTyxLQUFBNUUsTUFDQTZWLEVBQUFqRCxFQUFBaUQsT0FDQTROLEVBQUE3USxFQUFBNlEsV0FDQXRjLEVBQUF5TCxFQUFBekwsVUFDQTRvQyxFQUFBbjlCLEVBQUFtOUIsT0FDQXh4QyxFQUFBcVUsRUFBQXJVLE1BQ0FzZCxFQUFBakosRUFBQWlKLFdBQ0E1TixFQUFBMkUsRUFBQTNFLE9BQ0EraEMsRUFBQXA5QixFQUFBa3dCLFVBQ0ExdEIsRUFBQW5ILEVBQUFtSCxVQUNBekMsRUFBQTFFLEVBQUEwRSxPQUNBczlCLEVBQUFoaUMsRUFBQTdHLFVBQ0FBLE9BQUFZLElBQUFpb0MsRUFBQSxHQUFBQSxFQUtBbmpCLE9BQUEsRUFFQUEsRUFEQSxpQkFBQTFYLEVBQ2U4NkIsSUFBR3I2QixFQUFBVCxHQUNYQSxHQUFBLElBQUFBLEVBQUFoWCxPQUdROHhDLElBQUdyNkIsRUFBQVQsR0FGbEJTLEVBSUEsSUFBQXM2QixLQUNBaEQsT0FBQSxFQUNBRCxPQUFBLEVBRUF2NkIsR0FFQSs4QixFQURBNWlCLEVBQUFuYSxFQUFBbWEsRUFBQWpYLEVBQUF0WCxNQUdBNHVDLEdBREFnRCxFQUFBcmpCLEVBQUE5c0IsT0FBQW13QyxHQUNBaEQsUUFDQUQsRUFBQWlELEVBQUFqRCxRQUNBcGdCLElBQUE5dUIsVUFJQWlRLEVBQUFtaUMsU0FDQUQsRUFBa0JqK0IsT0FBV2krQixFQUFBbGlDLEVBQUFtaUMsT0FBQXY2QixFQUFBdFgsS0FJN0JteEMsRUFBQTVpQixLQUNBQSxFQUFBLE1BR0EsSUFBQXVqQixFQUFBeDBCLEVBQW9DdEksRUFBQUMsRUFBSzVMLGNBQUEsUUFDekNsSixPQUFnQjR4QyxZQUFBN3NCLEVBQUFzc0IsRUFBQSxNQUNoQjNvQyxVQUFBRCxFQUFBLHdCQUFBNG9DLElBQ08sS0FFUCxXQUFBN0MsR0FBQSxJQUFBQyxFQUNBLE1BR0FsL0IsRUFBQTJnQyxRQUNBdUIsRUFBQXp4QyxNQUF3QndULE9BQVdpK0IsRUFBQXp4QyxPQUFrQm13QyxVQUFBNWdDLEVBQUEyZ0MsU0FHeENyN0IsRUFBQUMsRUFBSzVMLGNBQ2xCb29DLEVBQ1E5OUIsS0FBVTlLLFlBQUEyTCxRQUFBbk8sS0FBQWlyQyxhQUFrRE0sR0FDcEVFLEVBQ0F4MEIsRUFDQWlSLFFBS0E4aUIsRUFuR2EsQ0FvR1hyOEIsRUFBQUMsRUFBS25MLFdBRVBzbkMsRUFBU2grQixXQUNUa0UsT0FBVW5DLEVBQUFGLEVBQVNsSyxPQUNuQm5DLFVBQWF1TSxFQUFBRixFQUFTNUUsT0FDdEJyUSxNQUFTbVYsRUFBQUYsRUFBU0ksT0FDbEJtOEIsT0FBVXI4QixFQUFBRixFQUFTSSxPQUNuQjZQLFdBQWMvUCxFQUFBRixFQUFTSSxPQUN2QjNGLE9BQVV5RixFQUFBRixFQUFTbEssT0FDbkJ1UyxXQUFjbkksRUFBQUYsRUFBU3JSLEtBQ3ZCMmdDLFVBQWFwdkIsRUFBQUYsRUFBU3JLLEtBRVAsSUFBQW9uQyxHQUFBLEVDN0dYQyxHQUFRLFNBQUF2cUMsR0FHWixTQUFBd3FDLEVBQUF6d0MsR0FDSThSLElBQWVsTixLQUFBNnJDLEdBRW5CLElBQUF2cUMsRUFBZ0I2TCxJQUEwQm5OLE1BQUE2ckMsRUFBQXRyQyxXQUFBNUgsT0FBQTJILGVBQUF1ckMsSUFBQXZ1QyxLQUFBMEMsS0FBQTVFLElBbUQxQyxPQWpEQWtHLEVBQUF3cUMsZUFBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQUF2L0IsRUFBQXBMLEVBQUFsRyxNQUNBNlYsRUFBQXZFLEVBQUF1RSxPQUNBdFgsRUFBQStTLEVBQUEvUyxNQUdBLGtCQUNBLFFBQUE4YSxFQUFBNVUsVUFBQXJHLE9BQUF5ckIsRUFBQTluQixNQUFBc1gsR0FBQUUsRUFBQSxFQUF1RUEsRUFBQUYsRUFBYUUsSUFDcEZzUSxFQUFBdFEsR0FBQTlVLFVBQUE4VSxHQUlBczNCLEdBQ0FBLElBSUEsSUFBQTEyQixFQUFBMFAsRUFBQSxHQUVBK21CLEdBQ0FBLEVBQUEvNkIsRUFBQXRYLEVBQUE0YixHQUlBdzJCLEdBQ0FBLEVBQUFoc0MsV0FBQXFELEVBQUE2aEIsS0FLQTNqQixFQUFBMkIsYUFBQSxXQUNBLElBQUE2a0IsRUFBQXhtQixFQUFBbEcsT0FJQTh3QyxFQUhBcGtCLEVBQUFva0IsVUFHQSxFQUZBcGtCLEVBQUE1VyxTQUtBNVAsRUFBQTRCLGFBQUEsV0FDQSxJQUFBdWxCLEVBQUFubkIsRUFBQWxHLE9BSUE4d0MsRUFIQXpqQixFQUFBeWpCLFVBR0EsRUFGQXpqQixFQUFBdlgsU0FLQTVQLEVBQUE2cUMsYUFBQS93QyxFQUFBMHJCLFFBRUF4bEIsRUFBQTBDLFNBQ0ExQyxFQXdNQSxPQWhRRXVNLElBQVNnK0IsRUFBQXhxQyxHQTJEVHFtQyxJQUFZbUUsSUFDZHB5QyxJQUFBLG9CQUNBWCxNQUFBLFdBQ0FrSCxLQUFBZ0UsTUFBQW1vQyxjQUNBbnNDLEtBQUFvc0MsZ0JBSUEzeUMsSUFBQSx3QkFDQVgsTUFBQSxTQUFBK0ssR0FDQSxTQUFBN0QsS0FBQTVFLE1BQUEwckIsVUFBQWpqQixFQUFBaWpCLFlBR0FydEIsSUFBQSxxQkFDQVgsTUFBQSxXQUNBa0gsS0FBQWdFLE1BQUFtb0MsZUFBQW5zQyxLQUFBcXNDLFFBQ0Fyc0MsS0FBQW9zQyxnQkFJQTN5QyxJQUFBLHVCQUNBWCxNQUFBLFdBQ0EsSUFBQWtWLEVBQUFoTyxLQUFBNUUsTUFDQWlXLEVBQUFyRCxFQUFBcUQsTUFDQUgsRUFBQWxELEVBQUFrRCxPQUdBbzdCLEVBREFqN0IsRUFBQW1CLFdBQ0E4NUIsbUJBRUExTixFQUFBNStCLEtBQUFxc0MsT0FBQWpKLHdCQUFBeEUsT0FDQTBOLEVBQTJCaC9CLE9BQVdnL0IsRUFBc0JwQyxPQUFrQmg1QixFQUFBMHRCLElBQzlFdnRCLEVBQUFoRSxVQUFzQmkvQiwwQkFHdEI3eUMsSUFBQSxlQUNBWCxNQUFBLFdBQ0EsSUFBQXl6QyxFQUFBdnNDLEtBQUE1RSxNQUNBaVcsRUFBQWs3QixFQUFBbDdCLE1BQ0FILEVBQUFxN0IsRUFBQXI3QixPQUdBczdCLEVBREFuN0IsRUFBQW1CLFdBQ0FnNkIsMkJBRUE1TixFQUFBNStCLEtBQUFxc0MsT0FBQWpKLHdCQUFBeEUsT0FDQXZ0QixFQUFBaEUsVUFDQW0vQiwyQkFBb0NsL0IsT0FBV2svQixFQUE4QnRDLE9BQWtCaDVCLEVBQUEwdEIsU0FJL0ZubEMsSUFBQSxXQUNBWCxNQUFBLFdBQ0EsSUFBQTJ6QyxFQUFBenNDLEtBQUE1RSxNQUNBd2pDLEVBQUE2TixFQUFBN04sT0FDQTlYLEVBQUEybEIsRUFBQTNsQixRQVdBLE9BUkE4WCxPQUFBNStCLEtBQUFsRyxNQUFBOGtDLFNBQ0E1K0IsS0FBQWxHLE1BQXFCd1QsT0FBV3ROLEtBQUFsRyxPQUFlOGtDLFlBRy9DOVgsR0FBQTltQixLQUFBbEcsTUFBQXUxQixVQUNBcnZCLEtBQUFsRyxNQUFxQndULE9BQVd0TixLQUFBbEcsT0FBZXUxQixRQUFBLFVBRy9DcnZCLEtBQUFsRyxTQUdBTCxJQUFBLGFBQ0FYLE1BQUEsV0FDQWtILEtBQUFxc0MsT0FBb0JLLEVBQUE5OUIsRUFBUTRDLFlBQUF4UixNQUU1QixJQUFBMnNDLEVBQUEzc0MsS0FBQTVFLE1BQ0F3eEMsRUFBQUQsRUFBQUMsa0JBQ0FoMUIsRUFBQSswQixFQUFBLzBCLE1BQ0FpMUIsRUFBQUYsRUFBQUUsWUFDQUMsRUFBQUgsRUFBQUcsYUFHQUYsS0FJQWgxQixHQUFBaTFCLEdBQ0E3c0MsS0FBQStzQyx3QkFHQW4xQixHQUFBazFCLEVBQUF0ekMsUUFBQSxHQUNBd0csS0FBQWd0QyxtQkFJQXZ6QyxJQUFBLFNBQ0FYLE1BQUEsV0FDQSxJQUFBa0gsS0FBQWdFLE1BQUFtb0MsYUFDQSxZQUdBLElBQUFjLEVBQUFqdEMsS0FBQTVFLE1BQ0FtSCxFQUFBMHFDLEVBQUExcUMsVUFDQTJHLEVBQUErakMsRUFBQS9qQyxRQUNBK0gsRUFBQWc4QixFQUFBaDhCLE9BQ0FDLEVBQUErN0IsRUFBQS83QixPQUNBdlgsRUFBQXN6QyxFQUFBdHpDLE1BQ0F5WCxFQUFBNjdCLEVBQUE3N0IsTUFDQSs1QixFQUFBOEIsRUFBQTlCLE9BQ0F0c0IsRUFBQW91QixFQUFBcHVCLFdBQ0FxdUIsRUFBQUQsRUFBQUMsUUFDQXRPLEVBQUFxTyxFQUFBck8sT0FDQTlYLEVBQUFtbUIsRUFBQW5tQixRQUNBNVAsRUFBQSsxQixFQUFBLzFCLFdBQ0FpMkIsRUFBQUYsRUFBQUUsY0FDQXA0QixFQUFBazRCLEVBQUFsNEIsaUJBQ0FxNEIsRUFBQUgsRUFBQUcscUJBQ0FDLEVBQUFKLEVBQUFJLFdBQ0FDLEVBQUFMLEVBQUFLLGlCQUNBQyxFQUFBTixFQUFBTSxnQkFDQUMsRUFBQVAsRUFBQU8sZ0JBQ0FDLEVBQUFSLEVBQUFRLGlCQUdBamdCLEVBQUF0VyxFQUFBOEUsS0FBQS9JLElBQ0FtNEIsRUFBQWwwQixFQUFBOEUsS0FBQTR0QixLQUVBcG5DLEVBQUF4QyxLQUFBNUUsTUFBQW9ILFVBR0EwcUMsSUFDQTFxQyxHQUFBLElBQUFELEVBQUEsVUFHQSxJQUFBbXJDLEtBRUFOLEVBQUFNLEdBRUEsUUFBQW4wQyxFQUFBLEVBQXFCQSxFQUFBMlAsRUFBQTFQLE9BQW9CRCxJQUFBLENBQ3pDLElBQUE4UCxFQUFBSCxFQUFBM1AsR0FFUTJ0QyxPQUFXOWpDLElBQUFpRyxFQUFBNmhDLFlBQUEseUVBRW5Cd0MsRUFBQXJ4QyxLQUFtQnNTLEVBQUFDLEVBQUs1TCxjQUFlMm9DLElBQ3ZDcHBDLFlBQ0EwTyxTQUNBNE4sYUFDQXNzQixTQUNBeHhDLFFBQ0EwUCxTQUNBNVAsSUFBQTRQLEVBQUE1UCxLQUFBNFAsRUFBQW1ILFVBQ0F5RyxXQUFBazJCLEVBQUE1ekMsSUFBQXdiLElBQ0FtcEIsVUFBQWtOLEtBSUEsSUFBQWxwQyxFQUFBa1AsRUFBQUgsRUFBQXRYLE9BQ0FnMEMsRUFBQXpyQyxFQUFBTSxVQUNBcW5DLEVBQUEzbkMsRUFBQXBJLE1BQ0E4ekIsRUFBcUJwZixJQUF3QnRNLEdBQUEsc0JBRTdDcEksR0FBbUI4a0MsVUFFbkI5WCxJQUNBaHRCLEVBQUF1MUIsUUFBQSxRQUdBdjFCLEVBQWN3VCxPQUFXeFQsRUFBQSt2QyxHQUV6QixJQUFBK0QsRUFBeUJsL0IsSUFBVW5NLEVBQUFDLEVBQUFELEVBQUEsVUFBQTRvQyxFQUFBd0MsR0FFbkMsT0FBYWgvQixFQUFBQyxFQUFLNUwsY0FDbEJ3cUIsRUFDUWxnQixPQUFXc2dCLEdBQ25CemYsUUFBQW5PLEtBQUE4ckMsZUFBQWxlLEVBQUF6ZixRQUFBay9CLEdBQ0FRLGNBQUE3dEMsS0FBQThyQyxlQUFBbGUsRUFBQWlnQixjQUFBUCxHQUNBcnFDLGFBQUFqRCxLQUFBOHJDLGVBQUFsZSxFQUFBM3FCLGFBQUFzcUMsRUFBQXZ0QyxLQUFBaUQsY0FDQUMsYUFBQWxELEtBQUE4ckMsZUFBQWxlLEVBQUExcUIsYUFBQXNxQyxFQUFBeHRDLEtBQUFrRCxjQUNBNHFDLGNBQUE5dEMsS0FBQThyQyxlQUFBbGUsRUFBQWtnQixjQUFBTCxHQUNBanJDLFVBQUFvckMsRUFDQTl6QyxRQUNBaTBDLGVBQUE3OEIsSUFFQXc4QixRQUlBajBDLElBQUEsMkJBQ0FYLE1BQUEsU0FBQStLLEVBQUEwbEIsR0FDQSxPQUFBQSxFQUFBekMsVUFBQXlDLEVBQUF6QyxTQUFBampCLEVBQUFpakIsU0FFQXFsQixjQUFBLEVBQ0FybEIsUUFBQWpqQixFQUFBaWpCLFVBSUFBLFFBQUFqakIsRUFBQWlqQixhQUtBK2tCLEVBalFZLENBa1FWbDlCLEVBQUFDLEVBQUtuTCxXQUVQbW9DLEdBQVE3K0IsV0FDUnFFLE1BQVN0QyxFQUFBRixFQUFTSyxLQUNsQm8rQixXQUFjditCLEVBQUFGLEVBQVNLLEtBQ3ZCcStCLGlCQUFvQngrQixFQUFBRixFQUFTSyxLQUM3QncrQixpQkFBb0IzK0IsRUFBQUYsRUFBU0ssS0FDN0JzK0IsZ0JBQW1CeitCLEVBQUFGLEVBQVNLLEtBQzVCdStCLGdCQUFtQjErQixFQUFBRixFQUFTSyxLQUM1QmdDLE9BQVVuQyxFQUFBRixFQUFTbEssT0FDbkJuQyxVQUFhdU0sRUFBQUYsRUFBUzVFLE9BQ3RCa2lDLFFBQVdwOUIsRUFBQUYsRUFBU0ssS0FDcEIvRixRQUFXNEYsRUFBQUYsRUFBU2pILE1BQ3BCaTNCLE9BQVU5dkIsRUFBQUYsRUFBU0csV0FBWUQsRUFBQUYsRUFBUzVFLE9BQVM4RSxFQUFBRixFQUFTSSxTQUMxRHJWLE1BQVNtVixFQUFBRixFQUFTSSxPQUNsQmtDLE9BQVVwQyxFQUFBRixFQUFTRyxXQUFZRCxFQUFBRixFQUFTNUUsT0FBUzhFLEVBQUFGLEVBQVNJLFNBQUFpYyxXQUMxRHpvQixVQUFhc00sRUFBQUYsRUFBUzVFLE9BQ3RCbWhDLE9BQVVyOEIsRUFBQUYsRUFBU0ksT0FDbkI2UCxXQUFjL1AsRUFBQUYsRUFBU0ksT0FDdkJtK0IsY0FBaUJyK0IsRUFBQUYsRUFBU0ssS0FDMUJpK0IsUUFBV3ArQixFQUFBRixFQUFTdkUsS0FBQTRnQixXQUNwQm5FLFFBQVdoWSxFQUFBRixFQUFTdkUsS0FBQTRnQixXQUNwQjVaLE1BQVN2QyxFQUFBRixFQUFTbEssT0FBQXVtQixXQUNsQnJULE1BQVM5SSxFQUFBRixFQUFTRyxXQUFZRCxFQUFBRixFQUFTNUUsT0FBUzhFLEVBQUFGLEVBQVN2RSxPQUN6RDBLLGlCQUFvQmpHLEVBQUFGLEVBQVNLLEtBQzdCbStCLHFCQUF3QnQrQixFQUFBRixFQUFTSyxLQUNqQ2lJLFdBQWNwSSxFQUFBRixFQUFTckssSUFDdkJzb0MsWUFBZS85QixFQUFBRixFQUFTdkUsS0FDeEJ1aUMsa0JBQXFCOTlCLEVBQUFGLEVBQVN2RSxLQUM5QnlpQyxhQUFnQmgrQixFQUFBRixFQUFTakgsTUFBQXNqQixZQUV6QjJnQixHQUFReG5DLGNBQ1JnTixNQUFBLGFBQ0E4NkIsUUFBQSxhQUNBaUIsY0FBQSxhQUNBcDRCLGlCQUFBLGFBQ0FxNEIscUJBQUEsY0EwQkF6MEMsT0FBQXVXLEVBQUEsU0FBQXZXLENBQVNpekMsSUFFTSxJQUFBb0MsR0FBQXIxQyxPQUFBeXhDLEVBQUEsUUFBQXp4QyxDQUFPLFNBQUFxTCxFQUFBNUksR0FDdEIsSUFBQTZ5QyxFQUFBanFDLEVBQUFpcUMsZ0JBQ0FDLEVBQUFscUMsRUFBQWtxQyxnQkFDQWg5QixFQUFBOVYsRUFBQThWLE9BQ0E0N0IsRUFBQTF4QyxFQUFBMHhDLGFBTUEsT0FDQWhtQixRQUxBLElBQUFnbUIsRUFBQXR6QyxRQUFBc3pDLEVBQUE1dkIsTUFBQSxTQUFBaXhCLEdBQ0EsT0FBQUQsRUFBQWp0QyxRQUFBa3RDLEtBS0FqQixRQUFBZSxJQUFBLzhCLEVBQ0EwdEIsT0FyQ0EsU0FBcUI1NkIsRUFBQTVJLEdBQ3JCLElBQUFreEMsRUFBQXRvQyxFQUFBc29DLG1CQUNBRSxFQUFBeG9DLEVBQUF3b0MsMkJBQ0E1MEIsRUFBQXhjLEVBQUF3YyxNQUNBMUcsRUFBQTlWLEVBQUE4VixPQUdBLE9BQUEwRyxFQUlBMDBCLEVBQUFwN0IsR0FDQW83QixFQUFBcDdCLEdBR0FzN0IsRUFBQXQ3QixHQUNBczdCLEVBQUF0N0IsR0FHQSxLQVhBLEtBNkJZazlCLENBQVlwcUMsRUFBQTVJLEtBYlQsQ0FlWnd3QyxJQ3pWQ3lDLEdBQVUsU0FBQWh0QyxHQUdkLFNBQUFpdEMsSUFHQSxPQUZJcGhDLElBQWVsTixLQUFBc3VDLEdBRVJuaEMsSUFBMEJuTixNQUFBc3VDLEVBQUEvdEMsV0FBQTVILE9BQUEySCxlQUFBZ3VDLElBQUF2dUMsTUFBQUMsS0FBQUgsWUFrQ3JDLE9BdkNFZ08sSUFBU3lnQyxFQUFBanRDLEdBUVRxbUMsSUFBWTRHLElBQ2Q3MEMsSUFBQSx3QkFDQVgsTUFBQSxTQUFBK0ssR0FDQSxPQUFjMHFDLElBQVkxcUMsRUFBQTdELEtBQUE1RSxVQUcxQjNCLElBQUEsU0FDQVgsTUFBQSxXQUNBLElBQUFrVixFQUFBaE8sS0FBQTVFLE1BQ0E0WixFQUFBaEgsRUFBQWdILFdBQ0F6UyxFQUFBeUwsRUFBQXpMLFVBQ0E0UyxFQUFBbkgsRUFBQW1ILFNBQ0FELEVBQUFsSCxFQUFBa0gsaUJBQ0FELEVBQUFqSCxFQUFBaUgsU0FDQWhFLEVBQUFqRCxFQUFBaUQsT0FFQSxHQUFBK0QsRUFBQSxDQUNBLElBQUF3NUIsRUFBQXY1QixFQUFBLHVCQUNBLE9BQWV0RyxFQUFBQyxFQUFLNUwsY0FBQSxRQUNwQlIsVUFBQUQsRUFBQSxnQkFBQUEsRUFBQSxJQUFBaXNDLEVBQ0FyZ0MsUUFBQSxTQUFBcE4sR0FDQSxPQUFBb1UsRUFBQWxFLEVBQUFsUSxNQUdPLE9BQUFtVSxFQUNRdkcsRUFBQUMsRUFBSzVMLGNBQUEsUUFBd0JSLFVBQUFELEVBQUEsZ0JBQUFBLEVBQUEsWUFFNUMsU0FJQStyQyxFQXhDYyxDQXlDWjMvQixFQUFBQyxFQUFLbkwsV0FFUDRxQyxHQUFVdGhDLFdBQ1ZrRSxPQUFVbkMsRUFBQUYsRUFBU2xLLE9BQ25CbkMsVUFBYXVNLEVBQUFGLEVBQVM1RSxPQUN0QmdMLFdBQWNsRyxFQUFBRixFQUFTckssSUFDdkIwUSxTQUFZbkcsRUFBQUYsRUFBU3ZFLEtBQ3JCNkssaUJBQW9CcEcsRUFBQUYsRUFBU3ZFLEtBQzdCOEssU0FBWXJHLEVBQUFGLEVBQVNLLE1BRU4sSUFBQXcvQixHQUFBLEdDbERYQyxHQUFhLFNBQUFydEMsR0FHakIsU0FBQXN0QyxJQUNBLElBQUF6c0MsRUFFQW9pQyxFQUFBaGpDLEVBQUFpakMsRUFFSXIzQixJQUFlbE4sS0FBQTJ1QyxHQUVuQixRQUFBbDZCLEVBQUE1VSxVQUFBckcsT0FBQXlyQixFQUFBOW5CLE1BQUFzWCxHQUFBRSxFQUFBLEVBQW1FQSxFQUFBRixFQUFhRSxJQUNoRnNRLEVBQUF0USxHQUFBOVUsVUFBQThVLEdBR0EsT0FBQTJ2QixFQUFBaGpDLEVBQW9DNkwsSUFBMEJuTixNQUFBa0MsRUFBQXlzQyxFQUFBcHVDLFdBQUE1SCxPQUFBMkgsZUFBQXF1QyxJQUFBcnhDLEtBQUF5QyxNQUFBbUMsR0FBQWxDLE1BQUErQyxPQUFBa2lCLEtBQUEzakIsRUFBQTZyQyxjQUFBLFNBQUF5QixHQUM5RCxJQUFBbGlDLEVBQUFwTCxFQUFBbEcsTUFDQXl6QyxFQUFBbmlDLEVBQUFtaUMsaUJBQ0E1M0IsRUFBQXZLLEVBQUF1SyxXQUdBLE9BQUEzVixFQUFBaVYsa0JBQUFxNEIsSUFBQXR0QyxFQUFBMFYsMEJBSUFDLElBQUE0M0IsSUFDS3Z0QyxFQUFBd3RDLG1CQUFBLFNBQUE3OUIsRUFBQXNFLEdBQ0wsSUFBQXVTLEVBQUF4bUIsRUFBQWxHLE1BQ0EyekMsRUFBQWpuQixFQUFBaW5CLGlCQUNBOTVCLEVBQUE2UyxFQUFBN1MsU0FDQS9ELEVBQUE0VyxFQUFBNVcsT0FFQTVQLEVBQUEwVCxZQUNBKzVCLEdBQUE5NUIsRUFBQWhFLEVBQUFzRSxFQUFBckUsSUFFSzVQLEVBQUEwdEMsZUFBQSxTQUFBLzlCLEVBQUF0WCxFQUFBNGIsR0FDTCxJQUFBa1QsRUFBQW5uQixFQUFBbEcsTUFDQXl6QyxFQUFBcG1CLEVBQUFvbUIsaUJBQ0F4QixFQUFBNWtCLEVBQUE0a0IsV0FFQXdCLEdBQ0F2dEMsRUFBQXd0QyxtQkFBQTc5QixFQUFBc0UsR0FFQTgzQixHQUNBQSxFQUFBcDhCLEVBQUF0WCxFQUFBNGIsSUFFS2pVLEVBQUF5VCxpQkFBQSxXQUNMLElBQUFrNkIsRUFBQTN0QyxFQUFBbEcsTUFDQW1ILEVBQUEwc0MsRUFBQTFzQyxVQUNBMFMsRUFBQWc2QixFQUFBaDZCLFNBQ0FoRSxFQUFBZytCLEVBQUFoK0IsT0FDQWlFLEVBQUErNUIsRUFBQS81QixpQkFDQStCLEVBQUFnNEIsRUFBQWg0QixXQUdBLE9BQUFBLEVBQ0FBLEdBQ0ExVSxZQUNBMFMsV0FDQWhFLFNBQ0FpRSxtQkFDQUYsV0FBQTFULEVBQUEwVCxXQUNBRyxTQUFBN1QsRUFBQXd0QyxxQkFJYW5nQyxFQUFBQyxFQUFLNUwsY0FBZXlyQyxJQUNqQ3o1QixXQUFBMVQsRUFBQTBULFdBQ0F6UyxZQUNBNFMsU0FBQTdULEVBQUF3dEMsbUJBQ0E1NUIsbUJBQ0FELFdBQ0FoRSxZQUVLM1AsRUFBQThyQyxxQkFBQSxTQUFBTSxHQUNMLEdBQUFwc0MsRUFBQWlWLGlCQUFBLENBR0EsSUFBQWhVLEVBQUFqQixFQUFBbEcsTUFBQW1ILFVBR0FtckMsRUFBQXJ4QyxLQUFpQnNTLEVBQUFDLEVBQUs1TCxjQUN0QixNQUNTUixVQUFBRCxFQUFBLG9CQUFBOUksSUFBQSw2QkFDVDZILEVBQUF5VCx1QkFyRUF3dkIsRUF1RUtELEVBQVVuM0IsSUFBMEI3TCxFQUFBaWpDLEdBcUR6QyxPQXpJRTEyQixJQUFTOGdDLEVBQUF0dEMsR0F1RlRxbUMsSUFBWWlILElBQ2RsMUMsSUFBQSx1QkFDQVgsTUFBQSxXQUNBa0gsS0FBQWt2QyxtQkFNQXoxQyxJQUFBLGdCQUNBWCxNQUFBLFdBQ0EsSUFBQWtWLEVBQUFoTyxLQUFBNUUsTUFDQTJ6QyxFQUFBL2dDLEVBQUErZ0MsaUJBQ0E3OUIsRUFBQWxELEVBQUFrRCxPQUNBRCxFQUFBakQsRUFBQWlELE9BRUFqUixLQUFBZ1YsWUFDQSs1QixHQUFBLEVBQUE5OUIsRUFBQSxLQUFBQyxHQUFBLE1BSUF6WCxJQUFBLFNBQ0FYLE1BQUEsV0FDQSxJQUFBeXpDLEVBQUF2c0MsS0FBQTVFLE1BQ0E0ZSxFQUFBdXlCLEVBQUF2eUIsbUJBQ0FqSCxFQUFBdzVCLEVBQUF4NUIsa0JBQ0E4TCxFQUFBMHRCLEVBQUExdEIsV0FDQTVOLEVBQUFzN0IsRUFBQXQ3QixPQUNBMkcsRUFBQTIwQixFQUFBMzBCLE1BQ0EzQyxFQUFBczNCLEVBQUF0M0IsU0FHQWpWLEtBQUF1VyxpQkFBQSxVQUFBcUIsR0FBQTVYLEtBQUE1RSxNQUFBbWIsaUJBQ0F2VyxLQUFBZ1gsc0JBQUEsVUFBQVksRUFBQTVYLEtBQUE1RSxNQUFBNGIsdUJBQUEsRUFDQSxJQUFBbTRCLEVBQUFsK0IsRUFBQStJLEdBQ0FoYSxLQUFBZ1YsY0FBQW02QixJQUFBcDhCLEdBRUEsSUFBQXE4QixHQUNBdndCLGFBQ0E1SixXQUNBbzRCLFdBQUFydEMsS0FBQWd2QyxlQUNBN0IsY0FBQW50QyxLQUFBbXRDLGNBQ0FwNEIsaUJBQUEvVSxLQUFBK1UsaUJBQ0FxNEIscUJBQUFwdEMsS0FBQW90QyxzQkFHQSxPQUFBcHRDLEtBQUE1RSxNQUFBaEMsU0FBQWcyQyxPQUlBVCxFQTFJaUIsQ0EySWZoZ0MsRUFBQUMsRUFBS25MLFdBRVBpckMsR0FBYTNoQyxXQUNieEssVUFBYXVNLEVBQUFGLEVBQVM1RSxPQUFBaWhCLFdBQ3RCL1osT0FBVXBDLEVBQUFGLEVBQVNHLFdBQVlELEVBQUFGLEVBQVM1RSxPQUFTOEUsRUFBQUYsRUFBU0ksU0FBQWljLFdBQzFEclQsTUFBUzlJLEVBQUFGLEVBQVNHLFdBQVlELEVBQUFGLEVBQVM1RSxPQUFTOEUsRUFBQUYsRUFBU3ZFLE9BQ3pENEcsT0FBVW5DLEVBQUFGLEVBQVNHLFdBQVlELEVBQUFGLEVBQVNsSyxPQUFTb0ssRUFBQUYsRUFBU2pILFFBQUFzakIsV0FDMURwTSxXQUFjL1AsRUFBQUYsRUFBU0ksT0FDdkJrRyxpQkFBb0JwRyxFQUFBRixFQUFTdkUsS0FBQTRnQixXQUM3QjRqQixpQkFBb0IvL0IsRUFBQUYsRUFBU3ZFLEtBQzdCNEssU0FBWW5HLEVBQUFGLEVBQVN2RSxLQUFBNGdCLFdBQ3JCMVUsaUJBQW9CekgsRUFBQUYsRUFBU3ZFLEtBQzdCMk0sc0JBQXlCbEksRUFBQUYsRUFBU0ksT0FDbENnTCxtQkFBc0JsTCxFQUFBRixFQUFTNUUsT0FDL0IrSSxrQkFBcUJqRSxFQUFBRixFQUFTSyxLQUM5QmdJLFdBQWNuSSxFQUFBRixFQUFTSyxLQUN2QjgvQixpQkFBb0JqZ0MsRUFBQUYsRUFBU0ssS0FBQWdjLFdBQzdCb2lCLFdBQWN2K0IsRUFBQUYsRUFBU0ssS0FDdkI3VixTQUFZMFYsRUFBQUYsRUFBU0ssS0FBQWdjLFlBSU4sSUFBQW9rQixHQUFBMTJDLE9BQUF5eEMsRUFBQSxRQUFBenhDLENBQU8sU0FBQW9kLEVBQUFwUCxHQUN0QixJQUFBdW5DLEVBQUFuNEIsRUFBQW00QixnQkFDQWg5QixFQUFBdkssRUFBQXVLLE9BQ0EsT0FDQStELFlBQUFpNUIsRUFBQWp0QyxRQUFBaVEsS0FKZSxDQU1adzlCLElDbEtDWSxHQUFTLFNBQUFqdUMsR0FHYixTQUFBa3VDLElBQ0EsSUFBQXJ0QyxFQUVBb2lDLEVBQUFoakMsRUFBQWlqQyxFQUVJcjNCLElBQWVsTixLQUFBdXZDLEdBRW5CLFFBQUE5NkIsRUFBQTVVLFVBQUFyRyxPQUFBeXJCLEVBQUE5bkIsTUFBQXNYLEdBQUFFLEVBQUEsRUFBbUVBLEVBQUFGLEVBQWFFLElBQ2hGc1EsRUFBQXRRLEdBQUE5VSxVQUFBOFUsR0FHQSxPQUFBMnZCLEVBQUFoakMsRUFBb0M2TCxJQUEwQm5OLE1BQUFrQyxFQUFBcXRDLEVBQUFodkMsV0FBQTVILE9BQUEySCxlQUFBaXZDLElBQUFqeUMsS0FBQXlDLE1BQUFtQyxHQUFBbEMsTUFBQStDLE9BQUFraUIsS0FBQTNqQixFQUFBa3VDLGVBQUEsU0FBQUMsRUFBQWgyQyxHQUM5RDZILEVBQUFsRyxNQUFBaVcsTUFBQWhFLFVBQ0E0Z0MsZ0JBQUF3QixFQUFBaDJDLEVBQUEsUUFFSzZILEVBQUFvdUMsV0FBQSxTQUFBQyxFQUFBeEUsR0EyRkwsSUExRkEsSUFBQTJCLEVBQUFqdEMsVUFBQXJHLE9BQUEsUUFBQTRKLElBQUF2RCxVQUFBLEdBQUFBLFVBQUEsTUFDQXlYLEVBQUFoVyxFQUFBUyxRQUFBdVYsTUFDQTJ4QixFQUFBM3hCLEVBQUEyeEIsY0FDQS94QixFQUFBSSxFQUFBSixXQUNBNnhCLEVBQUF6eEIsRUFBQWxjLE1BQ0FtSCxFQUFBd21DLEVBQUF4bUMsVUFDQXlYLEVBQUErdUIsRUFBQS91QixtQkFDQTR6QixFQUFBN0UsRUFBQTZFLGFBQ0F2QixFQUFBdEQsRUFBQXNELE9BQ0FnQixFQUFBdEUsRUFBQXNFLFdBQ0FDLEVBQUF2RSxFQUFBdUUsaUJBQ0FHLEVBQUExRSxFQUFBMEUsaUJBQ0FGLEVBQUF4RSxFQUFBd0UsZ0JBQ0FDLEVBQUF6RSxFQUFBeUUsZ0JBQ0FwOEIsRUFBQTIzQixFQUFBMzNCLE1BQ0ExRSxFQUFBcEwsRUFBQWxHLE1BQ0F3MEMsRUFBQWxqQyxFQUFBa2pDLFVBQ0FoNEIsRUFBQWxMLEVBQUFrTCxNQUNBNnlCLEVBQUEvOUIsRUFBQSs5QixTQUNBbUMsRUFBQWxnQyxFQUFBa2dDLGtCQUdBaDZCLEtBRUFjLEVBQUEsU0FBQW5hLEdBQ0EsSUFBQTBYLEVBQUEwK0IsRUFBQXAyQyxHQUNBRSxFQUFBbTJDLEVBQUEzK0IsRUFBQTFYLEdBQ0FpSixFQUFBLGlCQUFBb3JDLE1BQUEzOEIsRUFBQTFYLEVBQUE0eEMsR0FFQTBFLEtBQ0E1RyxFQUFBMkQsc0JBQ0FpRCxFQUFBM0QsUUFBQTVxQyxFQUFBa3VDLGdCQUdBLElBQUE1RyxPQUFBLEVBRUFBLEVBREEsU0FBQWh4QixFQUNBcXhCLEVBQUFDLGtCQUNTLFVBQUF0eEIsRUFDVHF4QixFQUFBRSxtQkFFQTduQyxFQUFBd3VDLFdBQUE3RyxFQUFBTCxlQUdBLElBQUFtSCxFQUFBeHRDLEVBQUEsT0FFQTBRLEVBQWtCdEUsRUFBQUMsRUFBSzVMLGNBQ2Jxc0MsR0FDQS9oQyxPQUFXbTlCLEVBQUFydkMsT0FDckJ3YyxRQUNBamUsTUFBQUosRUFDQWdKLFVBQUF3dEMsRUFDQTkrQixTQUNBeFgsTUFDQXlYLE9BQUF6WCxFQUNBNHpDLGFBQ0FuNEIsaUJBQUF1MUIsRUFBQXYxQixpQkFDQTY1QixpQkFBQXRFLEVBQUFxRSxxQkFFQSxTQUFBa0IsR0FDQSxPQUNjcmhDLEVBQUFDLEVBQUs1TCxjQUFlZ3JDLEdBQVUxZ0MsS0FDNUNzSyxRQUNBdXpCLFNBQ0Ezb0MsWUFDQXlPLFNBQ0F0WCxNQUFBSixFQUNBZ0osVUFBQXd0QyxFQUNBLzFCLHFCQUNBOVEsUUFBQTAvQixFQUNBeDNCLFFBQ0FrOEIsbUJBQ0FHLG1CQUNBRixrQkFDQUMsbUJBQ2VxQyxHQUNmMytCLE9BQUF6WCxFQUNBcXpDLGVBQ0EzcEMsSUFBQWtwQyxFQUFBcDdCLEVBQUExWCxFQUFBNHhDLEdBQ0FqMEIsYUFDQTAxQixxQkFDZW9ELE1BS2ZwOUIsRUFBQXZXLEtBQUE0VyxHQUVBdzNCLEVBQUFpRixXQUFBcHVDLEVBQUFvdUMsV0FBQTk4QixFQUFBM0IsRUFBQTFYLEVBQUE0eEMsRUFBQXZ6QixFQUFBbmUsRUFBQXF6QyxJQUdBdnpDLEVBQUEsRUFBcUJBLEVBQUFvMkMsRUFBQW4yQyxPQUF1QkQsSUFDNUNtYSxFQUFBbmEsR0FFQSxPQUFBcVosR0FsR0EyeEIsRUFtR0tELEVBQVVuM0IsSUFBMEI3TCxFQUFBaWpDLEdBMEV6QyxPQTFMRTEyQixJQUFTMGhDLEVBQUFsdUMsR0FtSFRxbUMsSUFBWTZILElBQ2Q5MUMsSUFBQSxhQUNBWCxNQUFBLFNBQUFrd0MsR0FDQSxJQUFBaDdCLEVBQUFoTyxLQUFBNUUsTUFDQXNjLEVBQUExSixFQUFBOUUsUUFDQUEsT0FBQTlGLElBQUFzVSxPQUNBRSxFQUFBNUosRUFBQTRKLE1BRUFyVixFQURBdkMsS0FBQStCLFFBQUF1VixNQUNBbGMsTUFBQW1ILFVBRUEsT0FBQXltQyxHQUFBOS9CLEdBQUFqQixJQUFBLFNBQUFvQixHQUNBLE9BQWVpRSxPQUFXakUsR0FDMUI3RyxVQUFBNkcsRUFBQXVPLFVBQWdEbEosSUFBVW5NLEVBQUEseUJBQUE4RyxFQUFBN0csV0FBQTZHLEVBQUE3RyxpQkFLMUQvSSxJQUFBLFNBQ0FYLE1BQUEsV0FDQSxJQUFBd2UsRUFBQXRYLEtBQUErQixRQUFBdVYsTUFDQUosRUFBQUksRUFBQUosV0FDQSs0QixFQUFBMzRCLEVBQUFsYyxNQUNBbUgsRUFBQTB0QyxFQUFBMXRDLFVBQ0FnUCxFQUFBMCtCLEVBQUExK0IsT0FDQWhLLEVBQUEwb0MsRUFBQTFvQyxLQUNBMm9DLEVBQUFELEVBQUFDLGVBQ0EzRCxFQUFBdnNDLEtBQUE1RSxNQUNBcXZDLEVBQUE4QixFQUFBOUIsU0FDQTBGLEVBQUE1RCxFQUFBNEQsZUFDQUMsRUFBQTdELEVBQUE2RCxRQUNBQyxFQUFBOUQsRUFBQThELFFBQ0F6NEIsRUFBQTIwQixFQUFBMzBCLE1BRUEwNEIsTUFFQTE0QixHQUFBckcsRUFBQWcvQixLQUVBLElBQUFoL0IsRUFBQWcvQixFQUNBRCxFQUFBRSxZQUFBLFFBRUFGLEVBQUExekIsTUFBQXJMLEVBQUFnL0IsR0FJQSxJQUFBMy9CLEVBQUF5L0IsRUFBQW41QixFQUFBSSxNQUFBLFFBQ0FtNUIsRUFBQXY1QixFQUFBOEUsS0FBQTZ1QixRQUVBN3VCLE9BQUEsRUFDQXEwQixJQUNBcjBCLEVBQWVyTixFQUFBQyxFQUFLNUwsY0FDcEJ5dEMsR0FDV2p1QyxVQUFBRCxFQUFBLFVBQ1h2QyxLQUFBMHZDLFdBQUFub0MsRUFBQSxJQUVBMm9DLElBQ0FsMEIsRUFBQWswQixFQUFBbDBCLEtBSUEsSUFBQTlTLEVBQUFsSixLQUFBOHZDLGFBRUEsT0FBYW5oQyxFQUFBQyxFQUFLNUwsY0FDbEI0TixHQUNTcE8sVUFBQTJ0QyxFQUFBcjJDLE1BQUF3MkMsRUFBQTcyQyxJQUFBLFNBQ0RrVixFQUFBQyxFQUFLNUwsY0FBZThsQyxHQUFXNS9CLFVBQUEwTyxVQUN2Q3c0QixHQUFtQnpoQyxFQUFBQyxFQUFLNUwsY0FBZXduQyxHQUFjQyxXQUFBdmhDLFVBQUEwTyxVQUNyRG9FLE9BS0F1ekIsRUEzTGEsQ0E0TFg1Z0MsRUFBQUMsRUFBS25MLFdBRVA2ckMsR0FBU3ZpQyxXQUNUNkssTUFBUzlJLEVBQUFGLEVBQVNHLFdBQVlELEVBQUFGLEVBQVM1RSxPQUFTOEUsRUFBQUYsRUFBU3ZFLE9BQ3pEbkIsUUFBVzRGLEVBQUFGLEVBQVNqSCxNQUFBc2pCLFdBQ3BCa2xCLGVBQWtCcmhDLEVBQUFGLEVBQVM1RSxPQUFBaWhCLFdBQzNCbWxCLFFBQVd0aEMsRUFBQUYsRUFBU3ZFLEtBQUE0Z0IsV0FDcEJvbEIsUUFBV3ZoQyxFQUFBRixFQUFTdkUsS0FBQTRnQixXQUNwQjVaLE1BQVN2QyxFQUFBRixFQUFTbEssT0FBQXVtQixXQUNsQndmLFNBQVkzN0IsRUFBQUYsRUFBU2xLLE9BQUF1bUIsV0FDckIya0IsVUFBYTlnQyxFQUFBRixFQUFTSyxLQUN0QjI5QixrQkFBcUI5OUIsRUFBQUYsRUFBU3ZFLE1BRTlCaWxDLEdBQVNockMsY0FDVGdULE1BQVN4SSxFQUFBRixFQUFTckssS0FJSCxJQUFBbXNDLEdBQUEvM0MsT0FBQXl4QyxFQUFBLFFBQUF6eEMsRUFBQSxDQUFVMjJDLElDck5WLFNBQUFxQixHQUFBdjFDLEVBQUE4RyxHQUNmLElBQUFvVixFQUFBcFYsRUFBQW9WLE1BQ0F5eEIsRUFBQXp4QixFQUFBbGMsTUFDQW1ILEVBQUF3bUMsRUFBQXhtQyxVQUNBZ1AsRUFBQXczQixFQUFBeDNCLE9BQ0E2RSxFQUFBMnlCLEVBQUEzeUIsV0FDQWxOLEVBQUE5TixFQUFBOE4sUUFDQTBPLEVBQUF4YyxFQUFBd2MsTUFDQXU0QixFQUFBLzBDLEVBQUErMEMsZUFDQVMsRUFBQXgxQyxFQUFBdzFDLHFCQUNBbkcsRUFBQXJ2QyxFQUFBcXZDLFNBQ0ExTSxFQUFBem1CLEVBQUF5bUIsUUFDQW5mLEVBQUF0SCxFQUFBbGMsTUFBQXdqQixlQUVBOFksS0FDQW1aLEVBQXVCdEssR0FBa0JuekIsVUFBQSxhQUV6QyxHQUFBN0IsRUFBQXUvQixFQUFBLENBQ0FseUIsR0FBQSxFQUVBLElBQUFteUIsRUFBaUN4SyxHQUFrQm56QixVQUFBLGFBQUE3USxjQUVuRHd1QyxFQUFBLElBQUFuNUIsSUFDQThmLEVBQUFzWixhQUFBLElBQUFELEVBQUEsS0FDQXJaLEVBQUF1WixjQUFBLE1BRUF2WixFQUFBa1AsVUFBQSxTQUNBbFAsRUFBQWlQLFVBQUEsSUFBQWtLLEVBQUEsbUJBSUEsT0FBQWp5QixHQUFBeEksRUFJU3pILEVBQUFDLEVBQUs1TCxjQUNkLE9BRUF2SixJQUFBLFlBQ0EwSixJQUFBeVUsRUFBQSxLQUFBbW1CLEVBQUEsYUFDQXY3QixVQUFpQmtNLElBQVVuTSxFQUFBLFVBQXdCMm5DLE9BQWtCM25DLEVBQUEsa0JBQUFzdUMsRUFBQSxJQUNyRS8yQyxNQUFBNDlCLEVBQ0F3WixTQUFBTixHQUVJamlDLEVBQUFDLEVBQUs1TCxjQUFlMHRDLElBQ3hCUCxpQkFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0F6NEIsUUFDQTFPLFVBQ0F1aEMsY0FsQkEsS0NqQ2UsU0FBQTBHLEdBQUEvMUMsRUFBQThHLEdBQ2YsSUFBQW9WLEVBQUFwVixFQUFBb1YsTUFDQXl4QixFQUFBenhCLEVBQUFsYyxNQUNBbUgsRUFBQXdtQyxFQUFBeG1DLFVBQ0FnUCxFQUFBdzNCLEVBQUF4M0IsT0FDQXJJLEVBQUE5TixFQUFBOE4sUUFDQTBPLEVBQUF4YyxFQUFBd2MsTUFDQXU0QixFQUFBLzBDLEVBQUErMEMsZUFDQVAsRUFBQXgwQyxFQUFBdzBDLFVBQ0F3QixFQUFBaDJDLEVBQUFnMkMsaUJBQ0FDLEVBQUFqMkMsRUFBQWkyQyxZQUNBNUcsRUFBQXJ2QyxFQUFBcXZDLFNBQ0FtQyxFQUFBeHhDLEVBQUF3eEMsa0JBQ0E3TyxFQUFBem1CLEVBQUF5bUIsUUFDQW5mLEVBQUF0SCxFQUFBbGMsTUFBQXdqQixlQUVBZ1osRUFBa0J0cUIsT0FBV2dLLEVBQUFsYyxNQUFBdzhCLFdBQzdCMFosS0FTQSxJQVBBLy9CLEVBQUFnL0IsR0FBQTM0QixLQUNBZ2dCLEVBQUFnUCxVQUFBaFAsRUFBQWdQLFdBQUEsU0FHQWhQLEVBQUFwOUIsZ0JBQUEseUJBR0ErVyxFQUFBdS9CLEVBQUEsQ0FHQWw1QixHQUNBMDVCLEVBQUFDLFVBQUEzWixFQUFBMlosV0FBQWhnQyxFQUFBdS9CLEVBQ0FRLEVBQUEzSyxVQUFBL08sRUFBQStPLFdBQUEsVUFFQS9PLEVBQUEyWixVQUFBM1osRUFBQTJaLFdBQUFoZ0MsRUFBQXUvQixFQUVBbFosRUFBQStPLFVBQUEvTyxFQUFBK08sV0FBQSxTQUNBL25CLEdBQUEsRUFHQSxJQUFBaXlCLEVBQXlCdEssR0FBa0JuekIsVUFBQSxhQUMzQ3k5QixFQUFBLEdBQUFqNUIsSUFDQWdnQixFQUFBb1osYUFBQSxJQUFBSCxFQUFBLEtBQ0FqWixFQUFBcVosY0FBQSxPQUlBLElBQUFPLEVBQWtCN2lDLEVBQUFDLEVBQUs1TCxjQUFlMHRDLElBQ3RDUCxpQkFDQUMsU0FBQXh4QixFQUNBeXhCLFNBQUEsRUFDQXo0QixRQUNBMU8sVUFDQXVoQyxXQUNBbUYsWUFDQWhELHNCQUdBLEdBQUFoMUIsR0FBQTFPLEVBQUExUCxPQUFBLENBQ0EsSUFBQWk0QyxPQUFBLEVBUUEsTUFQQSxTQUFBdm9DLEVBQUEsR0FBQTBPLFFBQUEsSUFBQTFPLEVBQUEsR0FBQTBPLE1BQ0E2NUIsRUFBQSx1QkFDSyxVQUFBdm9DLEVBQUEsR0FBQTBPLFFBQ0w2NUIsRUFBQSxnQ0FFQTdaLEVBQUFnUCxpQkFDQWhQLEVBQUErTyxVQUNXaDRCLEVBQUFDLEVBQUs1TCxjQUNoQixPQUNPdkosSUFBQSxZQUFBK0ksVUFBQUQsRUFBQSxjQUFBekksTUFBZ0V3VCxPQUFXc3FCLElBQzVFanBCLEVBQUFDLEVBQUs1TCxjQUNYLE9BRUFSLFVBQUFELEVBQUEsY0FDQXpJLE1BQUF3M0MsRUFDQW51QyxJQUFBNDZCLEVBQUEwVCxHQUNBQyxRQUFBTCxFQUNBSCxTQUFBRSxHQUVBSSxJQU1BLElBQUFHLEVBQUFwZ0MsTUFBQWcvQixHQUFBaC9CLEVBQUF1L0IsR0FFQSxPQUFTbmlDLEVBQUFDLEVBQUs1TCxjQUNkLE9BRUFrTCxTQUFBeWpDLEdBQUEsT0FBQXZ1QyxFQUNBM0osSUFBQSxZQUNBK0ksVUFBQUQsRUFBQSxRQUNBekksTUFBQTg5QixFQUNBejBCLElBQUE0NkIsRUFBQSxhQUNBMlQsUUFBQUwsRUFDQUgsU0FBQUUsR0FFQUksR0R6Q0FiLEdBQUE1akMsV0FDQTZLLE1BQVM5SSxFQUFBRixFQUFTRyxXQUFZRCxFQUFBRixFQUFTNUUsT0FBUzhFLEVBQUFGLEVBQVN2RSxPQUN6RG5CLFFBQVc0RixFQUFBRixFQUFTakgsTUFBQXNqQixXQUNwQmtsQixlQUFrQnJoQyxFQUFBRixFQUFTNUUsT0FBQWloQixXQUMzQjJsQixxQkFBd0I5aEMsRUFBQUYsRUFBU0ssS0FBQWdjLFdBQ2pDd2YsU0FBWTM3QixFQUFBRixFQUFTbEssT0FBQXVtQixZQUdyQjBsQixHQUFBcnNDLGNBQ0FnVCxNQUFTeEksRUFBQUYsRUFBU3JLLEtDb0NsQjRzQyxHQUFBcGtDLFdBQ0E2SyxNQUFTOUksRUFBQUYsRUFBU0csV0FBWUQsRUFBQUYsRUFBUzVFLE9BQVM4RSxFQUFBRixFQUFTdkUsT0FDekRuQixRQUFXNEYsRUFBQUYsRUFBU2pILE1BQUFzakIsV0FDcEJrbEIsZUFBa0JyaEMsRUFBQUYsRUFBUzVFLE9BQUFpaEIsV0FDM0JvbUIsWUFBZXZpQyxFQUFBRixFQUFTSyxLQUFBZ2MsV0FDeEJtbUIsaUJBQW9CdGlDLEVBQUFGLEVBQVNLLEtBQUFnYyxXQUM3QjJrQixVQUFhOWdDLEVBQUFGLEVBQVNLLEtBQUFnYyxXQUN0QndmLFNBQVkzN0IsRUFBQUYsRUFBU2xLLE9BQUF1bUIsV0FDckIyaEIsa0JBQXFCOTlCLEVBQUFGLEVBQVN2RSxNQUc5QjhtQyxHQUFBN3NDLGNBQ0FnVCxNQUFTeEksRUFBQUYsRUFBU3JLLEtDekdsQixJQUFJcXRDLEdBQWUsU0FBQXZ3QyxHQUduQixTQUFBd3dDLEVBQUF6MkMsR0FDSThSLElBQWVsTixLQUFBNnhDLEdBRW5CLElBQUF2d0MsRUFBZ0I2TCxJQUEwQm5OLE1BQUE2eEMsRUFBQXR4QyxXQUFBNUgsT0FBQTJILGVBQUF1eEMsSUFBQXYwQyxLQUFBMEMsS0FBQTVFLElBRXRDMDJDLEdBQWdCeDBDLEtBQUFnRSxHQUVwQixJQUFBaUcsRUFBQW5NLEVBQUFtTSxLQUNBeVMsRUFBQTVlLEVBQUE0ZSxtQkFDQSszQixFQUFBMzJDLEVBQUEyMkMscUJBQ0E3RCxFQUFBOXlDLEVBQUE4eUMsZ0JBQ0E4RCxFQUFBNTJDLEVBQUE0MkMsdUJBQ0FwQyxFQUFBeDBDLEVBQUF3MEMsVUFHQXFDLEtBQ0FyL0IsS0FBQTdQLE9BQXlCOGxDLElBQWtCdGhDLElBRTNDLEdBQUF3cUMsRUFDQSxRQUFBeDRDLEVBQUEsRUFBcUJBLEVBQUFxWixFQUFBcFosT0FBaUJELElBQUEsQ0FDdEMsSUFBQTBaLEVBQUFMLEVBQUFyWixHQUNBMDRDLEVBQUE1MUMsS0FBQXV6QyxFQUFBMzhCLEVBQUExWixJQUNBcVosSUFBQTdQLE9BQUFrUSxFQUFBK0csYUFHQWk0QixFQUFBL0QsR0FBQThELEVBVUEsT0FQQTF3QyxFQUFBMm5DLGNBQUE3dEMsRUFBQTZ0QyxjQUNBM25DLEVBQUErUCxNQUFBalcsRUFBQWlXLE1BRUEvUCxFQUFBK1AsTUFBQWhFLFVBQ0FpL0Isc0JBQ0E0QixnQkFBQStELElBRUEzd0MsRUE4R0EsT0FuSkV1TSxJQUFTZ2tDLEVBQUF4d0MsR0F3Q1RxbUMsSUFBWW1LLElBQ2RwNEMsSUFBQSxvQkFDQVgsTUFBQSxXQUNBa0gsS0FBQWt5QyxtQkFHQXo0QyxJQUFBLHFCQUNBWCxNQUFBLFdBQ0Esb0JBQUFrSCxLQUFBNUUsT0FDQTRFLEtBQUFxUixNQUFBaEUsVUFDQTZnQyxnQkFBQWx1QyxLQUFBNUUsTUFBQTh5QyxrQkFHQWx1QyxLQUFBa3lDLG1CQUdBejRDLElBQUEsZ0JBQ0FYLE1BQUEsV0FFQWtILEtBQUFteUMsbUJBQUEsUUFHQTE0QyxJQUFBLG9CQUNBWCxNQUFBLFNBQUFtWSxFQUFBdFgsRUFBQXk0QyxFQUFBNXZDLEVBQUFzcUMsRUFBQTNCLEVBQUF2ekIsR0FDQSxJQUFBZ0IsRUFBQTVZLEtBRUFnTyxFQUFBaE8sS0FBQTVFLE1BQ0FtSCxFQUFBeUwsRUFBQXpMLFVBQ0FnVSxFQUFBdkksRUFBQXVJLGlCQUNBc0ksRUFBQTdRLEVBQUE2USxXQUVBd3pCLEVBQUF2RixJQUFBdHpDLE9BQUEsR0FDQTBYLEVBQUFtaEMsRUFBQSxhQU9BQyxPQUFBLEVBRUFBLEVBREEsU0FBQTE2QixFQUNBNVgsS0FBQWlwQyxjQUFBQyxrQkFBQTF2QyxPQUNPLFVBQUFvZSxFQUNQNVgsS0FBQWlwQyxjQUFBRSxtQkFBQTN2QyxPQUVBd0csS0FBQWlwQyxjQUFBTCxjQUFBcHZDLE9BRUEsSUFBQTBQLElBQ0F6UCxJQUFBLFlBQ0FzVSxPQUFBLFdBQ0EsSUFHQWtILEtBSEEyRCxFQUFBdkgsTUFBQW1CLFdBQ0EwN0IsZ0JBRUFqdEMsUUFBQW94QyxHQUNBLE9BQ0FqM0MsT0FDQW10QyxRQUFBK0osR0FFQWw1QyxTQUFBLFVBQUF3ZSxFQUFBdzZCLEVBQUFuaEMsRUFBQXRYLEVBQUF3eEMsRUFBQWwyQixHQUFBLGFBYUEsT0FUQXNCLEdBQUEsVUFBQXFCLEdBQ0ExTyxFQUFBaVUsU0FDQTFqQixJQUFBLDBCQUNBc1UsT0FBQSxXQUNBLGVBS2FZLEVBQUFDLEVBQUs1TCxjQUFlZ3JDLElBQ2pDdjBDLElBQUF5WCxFQUNBaEksVUFDQTFHLFlBQ0EwTyxTQUNBNDdCLGVBQ0F2cUMsWUFBQSxnQkFDQXNjLGFBQ0Fzc0IsU0FDQXZ6QixRQUNBVixZQS9DQThFLE1BQ0EvSSxJQUFBLEtBQ0EyMkIsS0FBQSxPQThDQWlELGFBQUEsT0FJQXB6QyxJQUFBLFNBQ0FYLE1BQUEsV0FDQSxJQUFBeXpDLEVBQUF2c0MsS0FBQTVFLE1BQ0FtTSxFQUFBZ2xDLEVBQUFobEMsS0FDQXlTLEVBQUF1eUIsRUFBQXZ5QixtQkFDQTVnQixFQUFBbXpDLEVBQUFuekMsU0FFQThiLEVBQUEzTixFQUFBbEssS0FBQSxTQUFBNFQsR0FDQSxPQUFBQSxFQUFBK0ksS0FHQSxPQUFBNWdCLEdBQ0FnQyxNQUFBNEUsS0FBQTVFLE1BQ0E4WixtQkFDQXc2QixXQUFBMXZDLEtBQUEwdkMsV0FDQVosbUJBQUE5dUMsS0FBQTh1QyxtQkFDQW5FLHVCQUFBM3FDLEtBQUEycUMsNkJBS0FrSCxFQXBKbUIsQ0FxSmpCbGpDLEVBQUFDLEVBQUtuTCxXQUVQbXVDLEdBQWU3a0MsV0FDZndKLGlCQUFvQnpILEVBQUFGLEVBQVN2RSxLQUM3QjZqQyxnQkFBbUJwL0IsRUFBQUYsRUFBU2pILE1BQzVCNHFDLHFCQUF3QnpqQyxFQUFBRixFQUFTSyxLQUNqQzhpQyxxQkFBd0JqakMsRUFBQUYsRUFBU3ZFLEtBQ2pDMm5DLHVCQUEwQmxqQyxFQUFBRixFQUFTakgsTUFDbkNxUCxzQkFBeUJsSSxFQUFBRixFQUFTSSxPQUNsQytELGtCQUFxQmpFLEVBQUFGLEVBQVNLLEtBQzlCZ0ksV0FBY25JLEVBQUFGLEVBQVNLLEtBQ3ZCK0ssbUJBQXNCbEwsRUFBQUYsRUFBUzVFLE9BQy9CNlUsV0FBYy9QLEVBQUFGLEVBQVNJLE9BQ3ZCbUcsU0FBWXJHLEVBQUFGLEVBQVNLLEtBQ3JCdWpDLHFCQUF3QjFqQyxFQUFBRixFQUFTSyxLQUNqQ2c2QixjQUFpQm42QixFQUFBRixFQUFTbEssT0FBQXVtQixXQUMxQjVaLE1BQVN2QyxFQUFBRixFQUFTbEssT0FBQXVtQixXQUNsQjFvQixVQUFhdU0sRUFBQUYsRUFBUzVFLE9BQUFpaEIsV0FDdEIxakIsS0FBUXVILEVBQUFGLEVBQVNqSCxNQUNqQnZPLFNBQVkwVixFQUFBRixFQUFTSyxLQUFBZ2MsV0FDckIya0IsVUFBYTlnQyxFQUFBRixFQUFTSyxLQUFBZ2MsWUFFdEIybUIsR0FBZXh0QyxjQUNmbVMsa0JBQUEsRUFDQWc4QixxQkFBQSxXQUNBLFVBRUF2N0Isc0JBQUEsRUFDQSs2QixzQkFBQSxFQUNBQywwQkFDQWg0QixtQkFBQSxXQUNBNkUsV0FBQSxHQUNBMUosU0FBQSxhQUNBcTlCLHFCQUFBLGNBR0EsSUFBSVYsR0FBZ0IsV0FDcEIsSUFBQTczQixFQUFBamEsS0FFQUEsS0FBQTh1QyxtQkFBQSxTQUFBNzVCLEVBQUFoRSxFQUFBc0UsRUFBQXJFLEdBQ0EsSUFBQXVoQyxFQUFBNXlDLFVBQUFyRyxPQUFBLFFBQUE0SixJQUFBdkQsVUFBQSxJQUFBQSxVQUFBLEdBRUEwVixHQUNBQSxFQUFBaEksa0JBR0EsSUFBQWsvQixFQUFBeHlCLEVBQUE3ZSxNQUNBbzNDLEVBQUEvRixFQUFBK0YscUJBQ0FyOUIsRUFBQXMzQixFQUFBdDNCLFNBR0ErNEIsRUFEQWowQixFQUFBNUksTUFBQW1CLFdBQ0EwN0IsZ0JBRUFqNUIsRUFFQWk1QixLQUFBbnJDLE9BQWtDOGxDLElBQWtCcUYsSUFBQWg5QixLQUlwRCxJQURBZzlCLEVBQUFqdEMsUUFBQWlRLEtBRUFnOUIsRVo3SE8sU0FBQXZtQyxFQUFBQyxHQUNQLElBQUFqTyxFQUFBZ08sRUFBQTFHLFFBQUEyRyxHQUNBOHFDLEVBQUEvcUMsRUFBQW9TLE1BQUEsRUFBQXBnQixHQUNBZzVDLEVBQUFockMsRUFBQW9TLE1BQUFwZ0IsRUFBQSxFQUFBZ08sRUFBQW5PLFFBQ0EsT0FBQWs1QyxFQUFBM3ZDLE9BQUE0dkMsR1l5SDBCQyxDQUFNMUUsRUFBQWg5QixJQUloQytJLEVBQUE3ZSxNQUFBOHlDLGlCQUNBajBCLEVBQUE1SSxNQUFBaEUsVUFBNkI2Z0Msb0JBSTdCajBCLEVBQUFrNEIsb0JBQXVDNUQsSUFBWXQwQixFQUFBazRCLG1CQUFBakUsS0FDbkRqMEIsRUFBQWs0QixtQkFBQWpFLEVBQ0FzRSxFQUFBdEUsSUFFQXVFLEdBQ0F0OUIsRUFBQUYsRUFBQWhFLElBSUFqUixLQUFBMnFDLHVCQUFBLFNBQUEvM0IsRUFBQWdGLEdBQ0EsSUFBQSswQixFQUFBMXlCLEVBQUE3ZSxNQUNBbUgsRUFBQW9xQyxFQUFBcHFDLFVBR0EsR0FGQW9xQyxFQUFBcDJCLGtCQUVBLFVBQUFxQixHQUFBaEYsRUFBQXBaLE9BQUEsQ0FJQSxJQUFBcTVDLEdBQ0FwNUMsSUFBQSw0QkFDQStJLFVBQUFELEVBQUEsa0JBQ0F1YSxNQUFBLEdBQ0F3ckIsUUFBQTExQixFQUFBcFosUUFHQW9aLEVBQUEsR0FBQXVLLFFBQW9CN1AsT0FBV3VsQyxHQUFleHBDLE9BQUF3cEMsT0FHOUM3eUMsS0FBQTB2QyxXQUFBLFNBQUFBLEVBQUE5OEIsRUFBQTNCLEVBQUF0WCxFQUFBd3hDLEVBQUF2ekIsRUFBQXk2QixFQUFBdkYsR0FDQSxJQUFBRyxFQUFBaHpCLEVBQUE3ZSxNQUNBbTNDLEVBQUF0RixFQUFBc0YscUJBQ0F4L0IsRUFBQWs2QixFQUFBbDZCLGtCQUdBbzhCLEVBQUFsK0IsRUFGQWc4QixFQUFBanpCLG9CQUdBODRCLEtBQUEvdkMsT0FBcUM4bEMsSUFBa0JpRSxJQUFBdUYsSUFDdkRVLEVBQUE1SCxFQUFBLEVBRUFwNEIsR0FDQUgsRUFBQXZXLEtBQUE0ZCxFQUFBKzRCLGtCQUFBL2hDLEVBQUF0WCxFQUFBb1osRUFBQXcvQixFQUFBdGhDLEVBQUF0WCxFQUFBd3hDLEdBQUEySCxFQUFBQyxFQUFBbjdCLElBR0F1M0IsR0FDQXY4QixFQUFBdlcsS0FBQTBELE1BQUE2UyxFQUE0QmkyQixJQUFrQjZHLEVBQUFQLEVBQUE0RCxFQUFBRCxPQUs5Q242QyxPQUFBdVcsRUFBQSxTQUFBdlcsQ0FBU2k1QyxJQUVNLElBQUFxQixHQUFBdDZDLE9BQUF5eEMsRUFBQSxRQUFBenhDLEVBQUEsQ0FBVWk1QyxJQ3ZRckJzQixHQUFLLFNBQUE3eEMsR0FHVCxTQUFBdVAsRUFBQXhWLEdBQ0k4UixJQUFlbE4sS0FBQTRRLEdBRW5CLElBQUF0UCxFQUFnQjZMLElBQTBCbk4sTUFBQTRRLEVBQUFyUSxXQUFBNUgsT0FBQTJILGVBQUFzUSxJQUFBdFQsS0FBQTBDLEtBQUE1RSxJQStKMUMsT0E3SkFrRyxFQUFBMEMsU0FFQTFDLEVBQUFzdUMsVUFBQSxTQUFBMytCLEVBQUF0WCxHQUNBLElBQUF1WCxFQUFBNVAsRUFBQWxHLE1BQUE4VixPQUNBelgsRUFBQSxtQkFBQXlYLElBQUFELEVBQUF0WCxHQUFBc1gsRUFBQUMsR0FFQSxPQURNZzJCLE9BQVc5akMsSUFBQTNKLEVBQUEsdUdBQ2pCMkosSUFBQTNKLEVBQUFFLEVBQUFGLEdBR0E2SCxFQUFBNnhDLG1CQUFBLFdBQ0E3eEMsRUFBQTh4QywwQkFDQTl4QyxFQUFBK3hDLDhCQUdBL3hDLEVBQUE4eEMsd0JBQUEsV0FDQSxJQUFBRSxFQUFBaHlDLEVBQUFpeUMsVUFBQW5RLHdCQUdBLFVBQUFoZ0MsSUFBQWt3QyxFQUFBMVUsUUFBQTBVLEVBQUExVSxRQUFBLElBR0EsSUFBQXI4QixFQUFBakIsRUFBQWxHLE1BQUFtSCxVQUVBaXhDLEVBQUFseUMsRUFBQW15QyxVQUFBbnlDLEVBQUFteUMsVUFBQXJwQixpQkFBQSxTQUFBOW9CLEVBQUFveUMsVUFBQXRwQixpQkFBQSxTQUNBdXBCLEVBQUFyeUMsRUFBQW95QyxVQUFBdHBCLGlCQUFBLElBQUE3bkIsRUFBQSxZQUNBOG5DLEtBQUFwaUMsSUFBQTNLLEtBQUFrMkMsRUFBQSxTQUFBdmdDLEdBQ0EsT0FBQUEsRUFBQW13Qix3QkFBQXhFLFFBQUEsU0FFQTU2QixFQUFBMUMsRUFBQStQLE1BQUFtQixXQUNBZzZCLEtBQUFseEMsT0FBQWdDLEtBQUFxMkMsRUFBQSxTQUFBdHJDLEVBQUE0SyxHQUNBLElBQUEvQixFQUFBK0IsRUFBQTJnQyxhQUFBLGdCQUNBaFYsRUFBQTNyQixFQUFBbXdCLHdCQUFBeEUsUUFBQTU2QixFQUFBd29DLDJCQUFBdDdCLElBQUEsT0FFQSxPQURBN0ksRUFBQTZJLEdBQUEwdEIsRUFDQXYyQixPQUVVa21DLElBQVl2cUMsRUFBQXFtQywrQkFBa0VrRSxJQUFZdnFDLEVBQUF3b0MsK0JBSXBHbHJDLEVBQUErUCxNQUFBaEUsVUFDQWc5Qiw2QkFDQW1DLGlDQUlBbHJDLEVBQUFzdkMscUJBQUEsU0FBQTd2QyxHQUVBLEdBQUFBLEVBQUFpZ0MsZ0JBQUFqZ0MsRUFBQW5CLE9BQUEsQ0FHQSxJQUFBQSxFQUFBbUIsRUFBQW5CLE9BQ0FpMEMsRUFBQXZ5QyxFQUFBbEcsTUFBQW1XLE9BQ0FBLE9BQUFuTyxJQUFBeXdDLEtBQXdEQSxFQUN4REosRUFBQW55QyxFQUFBbXlDLFVBQ0FDLEVBQUFweUMsRUFBQW95QyxVQUVBOXpDLEVBQUFrMEMsYUFBQXh5QyxFQUFBeXlDLGdCQUFBeGlDLEVBQUFnL0IsSUFDQTN3QyxJQUFBOHpDLEdBQUFELEVBQ0FBLEVBQUFLLFdBQUFsMEMsRUFBQWswQyxXQUNTbDBDLElBQUE2ekMsR0FBQUMsSUFDVEEsRUFBQUksV0FBQWwwQyxFQUFBazBDLFlBRUF4eUMsRUFBQSt4Qyw4QkFHQS94QyxFQUFBeXlDLGVBQUFuMEMsRUFBQWswQyxhQUdBeHlDLEVBQUEweUMsb0JBQUEsU0FBQWp6QyxHQUNBLElBQUFuQixFQUFBbUIsRUFBQW5CLE9BRUEsR0FBQW1CLEVBQUFpZ0MsZ0JBQUFwaEMsRUFBQSxDQUdBLElBQUFxMEMsRUFBQTN5QyxFQUFBbEcsTUFBQW1XLE9BQ0FBLE9BQUFuTyxJQUFBNndDLEtBQXlEQSxFQUN6RFIsRUFBQW55QyxFQUFBbXlDLFVBQ0FDLEVBQUFweUMsRUFBQW95QyxVQUNBUSxFQUFBNXlDLEVBQUE0eUMscUJBQ0FDLEVBQUE3eUMsRUFBQTZ5QyxzQkFFQSxHQUFBdjBDLEVBQUF3MEMsWUFBQTl5QyxFQUFBK3lDLGVBQUE5aUMsRUFBQXUvQixHQUFBbHhDLElBQUE2ekMsRUFBQSxDQUNBLElBQUFXLEVBQUF4MEMsRUFBQXcwQyxVQUNBRixHQUFBdDBDLElBQUFzMEMsSUFDQUEsRUFBQUUsYUFFQUQsR0FBQXYwQyxJQUFBdTBDLElBQ0FBLEVBQUFDLGFBRUFWLEdBQUE5ekMsSUFBQTh6QyxJQUNBQSxFQUFBVSxhQUlBOXlDLEVBQUEreUMsY0FBQXowQyxFQUFBdzBDLFlBR0E5eUMsRUFBQTh2QyxpQkFBQSxTQUFBcndDLEdBQ0FPLEVBQUFzdkMscUJBQUE3dkMsR0FDQU8sRUFBQTB5QyxvQkFBQWp6QyxJQUdBTyxFQUFBK3ZDLFlBQUEsU0FBQTk3QixHQUNBLElBQUErK0IsRUFBQWh6QyxFQUFBbEcsTUFBQW1XLE9BQ0FBLE9BQUFuTyxJQUFBa3hDLEtBQXlEQSxFQUV6RCxHQUFBdjZDLE9BQUF3NkMsVUFBQXpkLFVBQUEwZCxNQUFBLGlCQUFBampDLEVBQUF1L0IsRUFBQSxDQUNBdjdCLEVBQUEvSCxpQkFDQSxJQUFBaW5DLEVBQUFsL0IsRUFBQW0vQixPQUNBOTBDLEVBQUEyVixFQUFBM1YsT0FDQTh6QyxFQUFBcHlDLEVBQUFveUMsVUFDQVEsRUFBQTV5QyxFQUFBNHlDLHFCQUNBQyxFQUFBN3lDLEVBQUE2eUMsc0JBRUFDLEVBQUEsRUFHQUEsRUFEQTl5QyxFQUFBK3lDLGNBQ0EveUMsRUFBQSt5QyxjQUFBSSxFQUVBQSxFQUdBUCxHQUFBdDBDLElBQUFzMEMsSUFDQUEsRUFBQUUsYUFFQUQsR0FBQXYwQyxJQUFBdTBDLElBQ0FBLEVBQUFDLGFBRUFWLEdBQUE5ekMsSUFBQTh6QyxJQUNBQSxFQUFBVSxlQUtBOXlDLEVBQUF5OEIsUUFBQSxTQUFBcDdCLEdBQ0EsZ0JBQUFwRixHQUNBK0QsRUFBQXFCLEdBQUFwRixLQUlBLHdGQUFBcEIsUUFBQSxTQUFBd0csR0FDTXVrQyxPQUFXOWpDLElBQUFoSSxFQUFBdUgsS0FBQSwrQ0FHYnVrQyxPQUFXOWpDLElBQUFoSSxFQUFBODBDLGVBQUEsdUVBRWY1dUMsRUFBQTJuQyxjQUFBLElBQThCM0IsRUFBYWxzQyxFQUFBOE4sUUFBQTlOLEVBQUFoQyxVQUUzQ2tJLEVBQUErUCxNQUFrQjFZLE9BQUF5eEMsRUFBQSxPQUFBenhDLEVBQ2xCczFDLGdCQUFBLEtBQ0E1RCw4QkFDQW1DLGdDQUdBbHJDLEVBQUFxekMsa0JBQUEsUUFFQXJ6QyxFQUFBc3pDLHNCYi9ITyxTQUFBM2xDLEVBQUE0bEMsRUFBQUMsR0FDUCxJQUFBelYsT0FBQSxFQUNBLFNBQUEwVixJQUNBLFFBQUF0Z0MsRUFBQTVVLFVBQUFyRyxPQUFBeXJCLEVBQUE5bkIsTUFBQXNYLEdBQUFFLEVBQUEsRUFBbUVBLEVBQUFGLEVBQWFFLElBQ2hGc1EsRUFBQXRRLEdBQUE5VSxVQUFBOFUsR0FHQSxJQUFBNVMsRUFBQS9CLEtBRUFpbEIsRUFBQSxJQUFBQSxFQUFBLEdBQUErdkIsU0FDQS92QixFQUFBLEdBQUErdkIsVUFFQSxJQU1BQyxFQUFBSCxJQUFBelYsRUFDQUUsYUFBQUYsR0FDQUEsRUFBQUMsV0FSQSxXQUNBRCxFQUFBLEtBQ0F5VixHQUNBN2xDLEVBQUFsUCxNQUFBZ0MsRUFBQWtqQixJQUtBNHZCLEdBQ0FJLEdBQ0FobUMsRUFBQWxQLE1BQUFnQyxFQUFBa2pCLEdBU0EsT0FOQTh2QixFQUFBdFMsT0FBQSxXQUNBcEQsSUFDQUUsYUFBQUYsR0FDQUEsRUFBQSxPQUdBMFYsRWFnR2tDRyxDQUFRNXpDLEVBQUE2eEMsbUJBQUEsS0FDMUM3eEMsRUFtVUEsT0F2ZUV1TSxJQUFTK0MsRUFBQXZQLEdBdUtUcW1DLElBQVk5MkIsSUFDZG5YLElBQUEsa0JBQ0FYLE1BQUEsV0FDQSxPQUNBd2UsT0FDQWxjLE1BQUE0RSxLQUFBNUUsTUFDQTZ0QyxjQUFBanBDLEtBQUFpcEMsY0FDQWxMLFFBQUEvOUIsS0FBQSs5QixRQUNBN21CLFdBQXNCaStCLEtBQ3RCNzlCLE1BQUEsUUFDQW95QixRQUNBbUIsUUFBQSxRQUNBNTNCLElBQUEsS0FDQTIyQixLQUFBLE1BRUE1dEIsTUFDQTZ1QixRQUFBLFFBQ0E1M0IsSUFBQSxLQUNBMjJCLEtBQUEsT0FFVzVwQyxLQUFBNUUsTUFBQThiLGlCQUtYemQsSUFBQSxvQkFDQVgsTUFBQSxXQUNBa0gsS0FBQWlwQyxjQUFBMkQsc0JBQ0E1c0MsS0FBQW16QyxxQkFDQW56QyxLQUFBbzFDLFlBQTJCejhDLE9BQUEwOEMsRUFBQSxFQUFBMThDLENBQWdCb0IsT0FBQSxTQUFBaUcsS0FBQTQwQyx3QkFJM0M1MEMsS0FBQXl6QyxZQUNBenpDLEtBQUF5ekMsVUFBQUssV0FBQSxHQUVBOXpDLEtBQUEwekMsWUFDQTF6QyxLQUFBMHpDLFVBQUFJLFdBQUEsTUFJQXI2QyxJQUFBLHFCQUNBWCxNQUFBLFNBQUE2dUIsR0FDQTNuQixLQUFBaXBDLGNBQUEyRCxzQkFDQTVzQyxLQUFBbXpDLHFCQUNBbnpDLEtBQUFvMUMsY0FDQXAxQyxLQUFBbzFDLFlBQTZCejhDLE9BQUEwOEMsRUFBQSxFQUFBMThDLENBQWdCb0IsT0FBQSxTQUFBaUcsS0FBQTQwQyx5QkFJN0NqdEIsRUFBQXBnQixLQUFBL04sT0FBQSxPQUFBd0csS0FBQTVFLE1BQUFtTSxLQUFBL04sUUFBQXdHLEtBQUFzMUMsY0FDQXQxQyxLQUFBdTFDLGtCQUlBOTdDLElBQUEsdUJBQ0FYLE1BQUEsV0FDQWtILEtBQUFvMUMsYUFDQXAxQyxLQUFBbzFDLFlBQUF4QyxTQUVBNXlDLEtBQUE0MEMsdUJBQ0E1MEMsS0FBQTQwQyxzQkFBQW5TLFlBSUFocEMsSUFBQSxvQkFDQVgsTUFBQSxTQUFBd2pCLEdBRUEsR0FEQXRjLEtBQUF3MUMsZUFBQWw1QixFQUNBdGMsS0FBQXV6QyxVQUFBLENBQ0EsSUFBQWh4QyxFQUFBdkMsS0FBQTVFLE1BQUFtSCxVQUVBLFNBQUErWixFQUNVbTVCLElBQU96MUMsS0FBQXV6QyxXQUFBWCxPQUFBLElBQUE4QyxPQUFBLElBQUFuekMsRUFBQSx5QkFBQW96QyxJQUFBcHpDLEVBQUEseUJBQUFvekMsSUFBQXB6QyxFQUFBLDBCQUVQa3pDLElBQU96MUMsS0FBQXV6QyxXQUFBWCxPQUFBLElBQUE4QyxPQUFBLElBQUFuekMsRUFBQSx5QkFBQW96QyxJQUFBcHpDLEVBQUEsb0JBQUErWixPQUtqQjdpQixJQUFBLDZCQUNBWCxNQUFBLFdBQ0EsSUFBQXlFLEVBQUF5QyxLQUFBMHpDLFVBQ0FrQyxFQUFBLElBQUFyNEMsRUFBQXUyQyxXQUNBK0IsRUFBQXQ0QyxFQUFBdTJDLFdBQUEsR0FBQXYyQyxFQUFBbkUsU0FBQSxHQUFBZ3FDLHdCQUFBeG1CLE1BQUFyZixFQUFBNmxDLHdCQUFBeG1CLE1BQ0FnNUIsR0FBQUMsRUFDQTcxQyxLQUFBMjBDLGtCQUFBLFFBQ09pQixFQUNQNTFDLEtBQUEyMEMsa0JBQUEsUUFDT2tCLEVBQ1A3MUMsS0FBQTIwQyxrQkFBQSxTQUNPLFdBQUEzMEMsS0FBQXcxQyxnQkFDUHgxQyxLQUFBMjBDLGtCQUFBLGFBSUFsN0MsSUFBQSxlQUNBWCxNQUFBLFdBQ0FrSCxLQUFBeXpDLFlBQ0F6ekMsS0FBQXl6QyxVQUFBSyxXQUFBLEdBRUE5ekMsS0FBQTB6QyxZQUNBMXpDLEtBQUEwekMsVUFBQUksV0FBQSxNQUlBcjZDLElBQUEsYUFDQVgsTUFBQSxXQUNBLElBQUFnOUMsRUFBQTkxQyxLQUFBNUUsTUFBQW1XLE9BR0EsaUJBRkFuTyxJQUFBMHlDLEtBQW1EQSxNQUtuRHI4QyxJQUFBLGtCQUNBWCxNQUFBLFdBQ0EsSUFBQWtWLEVBQUFoTyxLQUFBNUUsTUFDQW1XLEVBQUF2RCxFQUFBdUQsT0FDQWhQLEVBQUF5TCxFQUFBekwsVUFFQXFxQyxFQUFBNXNDLEtBQUFpcEMsY0FBQTJELG9CQUNBbUosRUFBQW5KLEdBQUFyN0IsRUFBQWcvQixHQUFBaC9CLEVBQUF1L0IsRUFFQXg1QixHQUFBdFgsS0FBQThWLGFBQ0E1TSxRQUFBbEosS0FBQWlwQyxjQUFBckIsaUJBQ0FnRixzQkFDTzVzQyxLQUFBZzJDLGtCQUFBaDJDLEtBQUFpMkMsZ0JBRVAsT0FBQUYsRUFBMEJwbkMsRUFBQUMsRUFBSzVMLGNBQy9CLE9BQ1NSLFVBQUFELEVBQUEsV0FDVCtVLEdBQ0FBLEtBR0E3ZCxJQUFBLHVCQUNBWCxNQUFBLFdBQ0EsSUFBQXlKLEVBQUF2QyxLQUFBNUUsTUFBQW1ILFVBR0EsT0FBYW9NLEVBQUFDLEVBQUs1TCxjQUNsQixPQUNTUixVQUFBRCxFQUFBLGVBQ1R2QyxLQUFBOFYsYUFDQTVNLFFBQUFsSixLQUFBaXBDLGNBQUFuQixjQUNBbHdCLE1BQUEsYUFLQW5lLElBQUEsd0JBQ0FYLE1BQUEsV0FDQSxJQUFBeUosRUFBQXZDLEtBQUE1RSxNQUFBbUgsVUFHQSxPQUFhb00sRUFBQUMsRUFBSzVMLGNBQ2xCLE9BQ1NSLFVBQUFELEVBQUEsZ0JBQ1R2QyxLQUFBOFYsYUFDQTVNLFFBQUFsSixLQUFBaXBDLGNBQUFsQixlQUNBbndCLE1BQUEsY0FLQW5lLElBQUEsY0FDQVgsTUFBQSxTQUFBNHhCLEdBQ0EsSUFBQXhoQixFQUFBd2hCLEVBQUF4aEIsUUFDQTBPLEVBQUE4UyxFQUFBOVMsTUFDQWcxQixFQUFBbGlCLEVBQUFraUIsa0JBQ0FMLEVBQUF2c0MsS0FBQTVFLE1BQ0FtSCxFQUFBZ3FDLEVBQUFocUMsVUFDQTJ6QyxFQUFBM0osRUFBQWg3QixPQUdBNCtCLFFBRkEvc0MsSUFBQTh5QyxLQUFvREEsR0FFcEQzRixHQUFBMzRCLEVBQUFyVixFQUFBLFlBdUJBLE9BckJzQm9NLEVBQUFDLEVBQUs1TCxjQUFlMnRDLElBQzFDbDNDLElBQUEsT0FDQXlQLFVBQ0EwTyxRQUNBdTRCLGlCQUNBUyxxQkFBQTV3QyxLQUFBNHdDLHFCQUNBbkcsU0FBQXpxQyxLQUFBeXFDLFdBR3NCOTdCLEVBQUFDLEVBQUs1TCxjQUFlbXVDLElBQzFDMTNDLElBQUEsT0FDQXlQLFVBQ0EwTyxRQUNBdTRCLGlCQUNBUCxVQUFBNXZDLEtBQUE0dkMsVUFDQXlCLFlBQUFyeEMsS0FBQXF4QyxZQUNBRCxpQkFBQXB4QyxLQUFBb3hDLGlCQUNBM0csU0FBQXpxQyxLQUFBeXFDLFNBQ0FtQywwQkFNQW56QyxJQUFBLGNBQ0FYLE1BQUEsV0FDQSxJQUFBMnpDLEVBQUF6c0MsS0FBQTVFLE1BQ0EwaEIsRUFBQTJ2QixFQUFBM3ZCLE1BQ0F2YSxFQUFBa3FDLEVBQUFscUMsVUFFQSxPQUFBdWEsRUFBcUJuTyxFQUFBQyxFQUFLNUwsY0FDMUIsT0FDU1IsVUFBQUQsRUFBQSxTQUFBOUksSUFBQSxTQUNUcWpCLEVBQUE5YyxLQUFBNUUsTUFBQW1NLE9BQ0EsUUFHQTlOLElBQUEsZUFDQVgsTUFBQSxXQUNBLElBQUE2ekMsRUFBQTNzQyxLQUFBNUUsTUFDQSs2QyxFQUFBeEosRUFBQXdKLE9BQ0E1ekMsRUFBQW9xQyxFQUFBcHFDLFVBRUEsT0FBQTR6QyxFQUFzQnhuQyxFQUFBQyxFQUFLNUwsY0FDM0IsT0FDU1IsVUFBQUQsRUFBQSxVQUFBOUksSUFBQSxVQUNUMDhDLEVBQUFuMkMsS0FBQTVFLE1BQUFtTSxPQUNBLFFBR0E5TixJQUFBLGtCQUNBWCxNQUFBLFdBQ0EsSUFBQW0wQyxFQUFBanRDLEtBQUE1RSxNQUNBc2IsRUFBQXUyQixFQUFBdjJCLFVBQ0FuVSxFQUFBMHFDLEVBQUExcUMsVUFHQSxHQUZBMHFDLEVBQUExbEMsS0FFQS9OLE9BQ0EsWUFFQSxJQUFBNDhDLEVBQUE3ekMsRUFBQSxlQUNBLE9BQWFvTSxFQUFBQyxFQUFLNUwsY0FDbEIsT0FDU1IsVUFBQTR6QyxFQUFBMzhDLElBQUEsYUFDVCxtQkFBQWlkLFlBSUFqZCxJQUFBLFNBQ0FYLE1BQUEsV0FDQSxJQUFBOGYsRUFBQTVZLEtBRUE1RSxFQUFBNEUsS0FBQTVFLE1BQ0FtSCxFQUFBbkgsRUFBQW1ILFVBRUF2QyxLQUFBZ0UsTUFBQWtGLFFBQ0FsSixLQUFBaXBDLGNBQUFvTixNQUFBajdDLEVBQUE4TixTQUNPbEosS0FBQWdFLE1BQUE1SyxVQUNQNEcsS0FBQWlwQyxjQUFBb04sTUFBQSxLQUFBajdDLEVBQUFoQyxVQUdBLElBQUFvSixFQUFBcEgsRUFBQW1ILFVBQ0FuSCxFQUFBb0gsWUFDQUEsR0FBQSxJQUFBcEgsRUFBQW9ILFlBRUFwSCxFQUFBd2pCLGdCQUFBeGpCLEVBQUFtVyxRQUFBblcsRUFBQW1XLE9BQUF1L0IsS0FDQXR1QyxHQUFBLElBQUFELEVBQUEsaUJBRUEsU0FBQXZDLEtBQUF3MUMsZUFDQWh6QyxHQUFBLElBQUFELEVBQUEseUJBQUFBLEVBQUEseUJBRUFDLEdBQUEsSUFBQUQsRUFBQSxvQkFBQXZDLEtBQUF3MUMsZUFFQSxJQUFBYyxFQUFBdDJDLEtBQUFpcEMsY0FBQXNOLHdCQUNBQyxFQUFBeDJDLEtBQUFpcEMsY0FBQXdOLHlCQUNBQyxFYjdWTyxTQUFBdDdDLEdBQ1AsT0FBQXpDLE9BQUEwQyxLQUFBRCxHQUFBRSxPQUFBLFNBQUFxN0MsRUFBQWw5QyxHQUlBLE1BSEEsVUFBQUEsRUFBQStCLE9BQUEsZ0JBQUEvQixFQUFBK0IsT0FBQSxPQUNBbTdDLEVBQUFsOUMsR0FBQTJCLEVBQUEzQixJQUVBazlDLE9hd1Y2QkMsQ0FBbUJ4N0MsR0FFaEQsT0FBYXVULEVBQUFDLEVBQUs1TCxjQUNWb25DLEVBQUEsVUFDQy80QixNQUFBclIsS0FBQXFSLE9BQ0QxQyxFQUFBQyxFQUFLNUwsY0FDSGl3QyxHQUNBM2xDLE9BQVdsUyxHQUFVNnRDLGNBQUFqcEMsS0FBQWlwQyxjQUFBMkcsVUFBQTV2QyxLQUFBNHZDLFlBQy9CLFNBQUFuRixHQUVBLE9BREE3eEIsRUFBQTZ4QixXQUNtQjk3QixFQUFBQyxFQUFLNUwsY0FDeEIsTUFDY3NLLEtBQ2RuSyxJQUFBeVYsRUFBQW1sQixRQUFBLGFBQ0F2N0IsWUFDQTFJLE1BQUFzQixFQUFBdEIsTUFDQTJRLEdBQUFyUCxFQUFBcVAsSUFDZWlzQyxHQUNmOTlCLEVBQUFpK0IsY0FDY2xvQyxFQUFBQyxFQUFLNUwsY0FDbkIsT0FDaUJSLFVBQUFELEVBQUEsWUFDakJxVyxFQUFBaytCLGtCQUNBUixHQUFBMTlCLEVBQUFtK0IsdUJBQ0FQLEdBQUE1OUIsRUFBQW8rQixrQ0FRQXY5QyxJQUFBLDJCQUNBWCxNQUFBLFNBQUErSyxFQUFBMGxCLEdBQ0EsT0FBQTFsQixFQUFBcUYsU0FBQXJGLEVBQUFxRixVQUFBcWdCLEVBQUFyZ0IsU0FFQUEsUUFBQXJGLEVBQUFxRixRQUNBOVAsU0FBQSxNQUVPeUssRUFBQXpLLFdBQUFtd0IsRUFBQW53QixVQUVQOFAsUUFBQSxLQUNBOVAsU0FBQXlLLEVBQUF6SyxVQUdBLFNBSUF3WCxFQXhlUyxDQXllUGpDLEVBQUFDLEVBQUtuTCxXQUVQeXZDLEdBQUtubUMsVUFBYU8sS0FDbEIvRixLQUFRdUgsRUFBQUYsRUFBU2pILE1BQ2pCaVgsZUFBa0I5UCxFQUFBRixFQUFTdkUsS0FDM0JuQixRQUFXNEYsRUFBQUYsRUFBU2pILE1BQ3BCcEYsVUFBYXVNLEVBQUFGLEVBQVM1RSxPQUN0QjR0QixVQUFhOW9CLEVBQUFGLEVBQVNsSyxPQUN0QjVLLE1BQVNnVixFQUFBRixFQUFTbEssT0FDbEJ3TSxPQUFVcEMsRUFBQUYsRUFBU0csV0FBWUQsRUFBQUYsRUFBUzVFLE9BQVM4RSxFQUFBRixFQUFTSyxPQUMxRDIrQixhQUFnQjkrQixFQUFBRixFQUFTRyxXQUFZRCxFQUFBRixFQUFTNUUsT0FBUzhFLEVBQUFGLEVBQVNLLE9BQ2hFbUMsTUFBU3RDLEVBQUFGLEVBQVNLLEtBQ2xCdTZCLFlBQWUxNkIsRUFBQUYsRUFBU0ssS0FDeEJvK0IsV0FBY3YrQixFQUFBRixFQUFTSyxLQUN2QnErQixpQkFBb0J4K0IsRUFBQUYsRUFBU0ssS0FDN0J3K0IsaUJBQW9CMytCLEVBQUFGLEVBQVNLLEtBQzdCcytCLGdCQUFtQnorQixFQUFBRixFQUFTSyxLQUM1QnUrQixnQkFBbUIxK0IsRUFBQUYsRUFBU0ssS0FDNUJtSCxXQUFjdEgsRUFBQUYsRUFBU3ZFLEtBQ3ZCeVMsTUFBU2hPLEVBQUFGLEVBQVNLLEtBQ2xCeEUsR0FBTXFFLEVBQUFGLEVBQVM1RSxPQUNmbXNDLE9BQVVybkMsRUFBQUYsRUFBU0ssS0FDbkJ5SCxVQUFhNUgsRUFBQUYsRUFBU0csV0FBWUQsRUFBQUYsRUFBU3JSLEtBQU91UixFQUFBRixFQUFTSyxPQUMzRHNDLE9BQVV6QyxFQUFBRixFQUFTbEssT0FDbkIybkMsT0FBVXY5QixFQUFBRixFQUFTSyxLQUNuQmloQyxlQUFrQnBoQyxFQUFBRixFQUFTSyxLQUMzQjdWLFNBQVkwVixFQUFBRixFQUFTclIsS0FDckIyWixXQUFjcEksRUFBQUYsRUFBU3FvQyxPQUN2QjMvQixNQUFXeEksRUFBQUYsRUFBU3JLLElBQ3BCbWxDLE9BQVk1NkIsRUFBQUYsRUFBU3FvQyxPQUNyQnBNLFFBQWUvN0IsRUFBQUYsRUFBU3JLLElBQ3hCME8sSUFBV25FLEVBQUFGLEVBQVNySyxJQUNwQnFsQyxLQUFZOTZCLEVBQUFGLEVBQVNySyxNQUVyQnlYLEtBQVVsTixFQUFBRixFQUFTcW9DLE9BQ25CcE0sUUFBZS83QixFQUFBRixFQUFTckssSUFDeEIwTyxJQUFXbkUsRUFBQUYsRUFBU3JLLElBQ3BCcWxDLEtBQVk5NkIsRUFBQUYsRUFBU3JLLFNBR2xCMHVDLEdBQWUvMEMsV0FDbEJnMUMsR0FBS2hvQixtQkFDTDVULE1BQVN4SSxFQUFBRixFQUFTckssSUFDbEIyUyxXQUFjcEksRUFBQUYsRUFBU3JLLEtBRXZCMnVDLEdBQUs5dUMsY0FDTG1ELFFBQ0FxWCxnQkFBQSxFQUNBMU4sT0FBQSxNQUNBMDhCLGFBQUEsV0FDQSxVQUVBeDhCLE1BQUEsYUFDQW80QixZQUFBLGFBRUFqbkMsVUFBQSxXQUNBcTFCLGFBQ0E5OUIsU0FDQXNjLFlBQUEsRUFDQTdFLFVBQ0E4NkIsT0FBQSxXQUNBLGFBRUEzMUIsVUFBQSxXQUNBLGtCQUtBL2QsT0FBQXVXLEVBQUEsU0FBQXZXLENBQVN1NkMsSUFFTSxJQUFBZ0UsR0FBQSxHQ2prQmYsU0FBQXg0QixNQUVBQSxHQUFBM1IsV0FDQXZLLFVBQWFzTSxFQUFBRixFQUFTNUUsT0FDdEJ1K0IsUUFBV3o1QixFQUFBRixFQUFTSSxPQUNwQjhOLE1BQVNoTyxFQUFBRixFQUFTclIsS0FDbEJpVCxVQUFhMUIsRUFBQUYsRUFBUzVFLE9BQ3RCNFMsTUFBUzlOLEVBQUFGLEVBQVNHLFdBQVlELEVBQUFGLEVBQVNJLE9BQVNGLEVBQUFGLEVBQVM1RSxTQUN6RDROLE1BQVM5SSxFQUFBRixFQUFTMUUsUUFBQSxtQkFDbEI2RCxPQUFVZSxFQUFBRixFQUFTSyxLQUNuQmk4QixZQUFlcDhCLEVBQUFGLEVBQVNLLEtBQ3hCdThCLE9BQVUxOEIsRUFBQUYsRUFBU0ssS0FDbkJ5TyxhQUFnQjVPLEVBQUFGLEVBQVNLLE1BR1YsSUFBQWtvQyxHQUFBLEdDWFhDLEdBQVcsU0FBQW5xQyxHQUdmLFNBQUEwUixJQUdBLE9BRkl6UixJQUFlbE4sS0FBQTJlLEdBRVJ4UixJQUEwQm5OLE1BQUEyZSxFQUFBcGUsV0FBQTVILE9BQUEySCxlQUFBcWUsSUFBQTVlLE1BQUFDLEtBQUFILFlBR3JDLE9BUkVnTyxJQUFTOFEsRUFBQTFSLEdBUVgwUixFQVRlLENBVWI5UCxFQUFBLFdBRUZ1b0MsR0FBVzNPLG9CQUFBLEVBQ1gyTyxHQUFXcnFDLFdBQ1grUCxNQUFTaE8sRUFBQUYsRUFBU3JSLE1BRUgsSUFBQTg1QyxHQUFBLEdDdEJmcCtDLEVBQUFxK0MsRUFBQWxvQyxFQUFBLDJCQUFBK25DLEtBQUFsK0MsRUFBQXErQyxFQUFBbG9DLEVBQUEsZ0NBQUFpb0MsS0FBQXArQyxFQUFBcStDLEVBQUFsb0MsRUFBQSx3Q0FBQTROLElBS0FrNkIsR0FBS3g0QixPQUFVeTRCLEdBQ2ZELEdBQUt2NEIsWUFBZTA0QixHQUVMam9DLEVBQUEseUVDTmYsU0FBQXpOLEVBQUFsQixFQUFBbkQsR0FBaUQsT0FBQUEsR0FBQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFFakQsU0FBQW1ELEdBQXVDLFlBQUFBLEVBQXVCLFVBQUFDLGVBQUEsNkRBQXlGLE9BQUFELEVBRmZELENBQUFDLEdBQWZuRCxFQUl6SCxTQUFBNkMsRUFBQUMsR0FBZ0wsT0FBbkpELEVBQUF4SCxPQUFBMEgsZUFBQTFILE9BQUEySCxlQUFBLFNBQUFGLEdBQWdHLE9BQUFBLEVBQUFHLFdBQUE1SCxPQUFBMkgsZUFBQUYsS0FBbURBLEdBSWhMLFNBQUFPLEVBQUFQLEVBQUFRLEdBQTBJLE9BQTFHRCxFQUFBaEksT0FBQTBILGdCQUFBLFNBQUFELEVBQUFRLEdBQTZGLE9BQWpCUixFQUFBRyxVQUFBSyxFQUFpQlIsSUFBYUEsRUFBQVEsR0FJMUksSUFBQWtNLEVBRUEsU0FBQUcsR0FHQSxTQUFBSCxJQUdBLE9BdEJBLFNBQUF2TCxFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQW9CM0ZDLENBQUExQixLQUFBOE0sR0FFQW5MLEVBQUEzQixLQUFBRyxFQUFBMk0sR0FBQS9NLE1BQUFDLEtBQUFILFlBR0EsT0FqQkEsU0FBQXdELEVBQUFDLEdBQTBDLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUE3QixVQUFBLHNEQUE2RTRCLEVBQUFqRyxVQUFBekUsT0FBQTRLLE9BQUFELEtBQUFsRyxXQUF5RWlDLGFBQWV2RyxNQUFBdUssRUFBQTVELFVBQUEsRUFBQUQsY0FBQSxLQUEwRDhELEdBQUEzQyxFQUFBMEMsRUFBQUMsR0FTeFVFLENBQUFzSixFQVNFK0IsRUFBQSxjQURGL0IsRUFUQSxHQWFBQSxFQUFBeXFDLGtCQUFBLGFDM0JBLFNBQVNDLEVBQTBCLzJDLEVBQUFuRCxHQUFjLE9BQUFBLEdBQUEsaUJBQUFBLEdBQUEsbUJBQUFBLEVBRWpELFNBQStCbUQsR0FBUSxZQUFBQSxFQUF1QixVQUFBQyxlQUFBLDZEQUF5RixPQUFBRCxFQUZQZzNDLENBQXNCaDNDLEdBQTdDbkQsRUFJekgsU0FBU282QyxFQUFldDNDLEdBQXdKLE9BQWxKczNDLEVBQWUvK0MsT0FBQTBILGVBQUExSCxPQUFBMkgsZUFBQSxTQUFBRixHQUFnRixPQUFBQSxFQUFBRyxXQUFBNUgsT0FBQTJILGVBQUFGLEtBQTBFQSxHQUl2TSxTQUFTdTNDLEVBQWV2M0MsRUFBQVEsR0FBa0gsT0FBekcrMkMsRUFBZWgvQyxPQUFBMEgsZ0JBQUEsU0FBQUQsRUFBQVEsR0FBNkUsT0FBakJSLEVBQUFHLFVBQUFLLEVBQWlCUixJQUFvQ0EsRUFBQVEsR0FLakssSUFBQWlNLEVBRUEsU0FBQUksR0FHQSxTQUFBSixJQUdBLE9BdkJBLFNBQXdCdEwsRUFBQUMsR0FBeUIsS0FBQUQsYUFBQUMsR0FBMEMsVUFBQUMsVUFBQSxxQ0FxQnZGbTJDLENBQWU1M0MsS0FBQTZNLEdBRVIycUMsRUFBMEJ4M0MsS0FBTzAzQyxFQUFlN3FDLEdBQUE5TSxNQUFBQyxLQUFBSCxZQUczRCxPQWxCQSxTQUFrQndELEVBQUFDLEdBQXdCLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUE3QixVQUFBLHNEQUE2RTRCLEVBQUFqRyxVQUFBekUsT0FBQTRLLE9BQUFELEtBQUFsRyxXQUF5RWlDLGFBQWV2RyxNQUFBdUssRUFBQTVELFVBQUEsRUFBQUQsY0FBQSxLQUEwRDhELEdBQWlCcTBDLEVBQWV0MEMsRUFBQUMsR0FVdFd1MEMsQ0FBU2hyQyxFQVNUZ0MsRUFBQSxjQURGaEMsRUFUQSxHQ2pCQSxTQUFBOUQsRUFBQVQsR0FBa0MsT0FNbEMsU0FBQUEsR0FBa0MsR0FBQW5MLE1BQUFvTCxRQUFBRCxHQUFBLENBQTBCLFFBQUEvTyxFQUFBLEVBQUFpUCxFQUFBLElBQUFyTCxNQUFBbUwsRUFBQTlPLFFBQThDRCxFQUFBK08sRUFBQTlPLE9BQWdCRCxJQUFPaVAsRUFBQWpQLEdBQUErTyxFQUFBL08sR0FBb0IsT0FBQWlQLEdBTm5IQyxDQUFBSCxJQUlsQyxTQUFBSSxHQUFpQyxHQUFBdkosT0FBQUMsWUFBQXpHLE9BQUErUCxJQUFBLHVCQUFBL1AsT0FBQXlFLFVBQUF1TCxTQUFBckwsS0FBQW9MLEdBQUEsT0FBQXZMLE1BQUF5TCxLQUFBRixHQUpDRyxDQUFBUCxJQUVsQyxXQUErQixVQUFBN0csVUFBQSxtREFGR3FILEdBVWxDLFNBQUFndkMsSUFDQSxRQUFBcmpDLEVBQUE1VSxVQUFBckcsT0FBQXlyQixFQUFBLElBQUE5bkIsTUFBQXNYLEdBQUFFLEVBQUEsRUFBcUVBLEVBQUFGLEVBQWFFLElBQ2xGc1EsRUFBQXRRLEdBQUE5VSxVQUFBOFUsR0FHQSxJQUFBdlosRUFBQTZwQixFQUFBLEdBQ0E4eUIsRUFBQTl5QixFQUFBLEdBQ0E3UCxFQUFBNlAsRUFBQSxHQUNBdlosRUFBQXVaLEVBQUFsTCxNQUFBLEdBQ0FpK0IsRUFBa0JDLEVBQUEsV0FBcUJBLEVBQUEsT0FBa0JBLEVBQUEsU0FDekRDLEVBQTBCRCxFQUFBLE9BQzFCeCtDLElBQUF1K0MsRUFBQS9zQixXQUNBM2tCLE1BQVcyeEMsRUFBQSxPQUdYLEtBQUE3OEMsRUFBQSs4QyxhQU9HLG9CQUFBLzhDLEVBQUErUCxNQUFBLFNBQUEvUCxFQUFBK1AsTUFBQS9QLEVBQUEwUSxVQUFBMVEsRUFBQTJRLE9BQUEsS0FBQTNRLEVBQUEyOEMsR0FDSCxJQUFBSyxNQUFBLGlCQUFBcjFDLE9BQUFnMUMsRUFBQSxvQ0FBQWgxQyxPQUFBcVMsRUFBQSxnRUFFb0I2aUMsRUFBQSxXQUFxQkEsRUFBQSxRQUFpQkQsT0FFMURqNEMsV0FBQSxHQUFBM0UsRUFBQTI4QyxFQUFBM2lDLEdBQUFyUyxPQUFBZ0csRUFBQTJDLEtBUkEsR0FIbUJ1c0MsRUFBQSxXQUFxQkEsRUFBQSxRQUFpQkMsT0FDekRuNEMsV0FBQSxHQUFBM0UsRUFBQTI4QyxFQUFBM2lDLEdBQUFyUyxPQUFBZ0csRUFBQTJDLEtBR0EsV0FBQTBzQyxNQUFBLGlCQUFBcjFDLE9BQUFnMUMsRUFBQSxtQkFBQWgxQyxPQUFBcVMsRUFBQSxrREFBQXJTLE9BQUFnMUMsRUFBQSwyRUFVQSxZRFZBbHJDLEVBQUFFLFdBQ0FqVSxNQUFTbS9DLEVBQUEsV0FBcUJBLEVBQUEsT0FBa0JBLEVBQUEsVUFFaERwckMsRUFBQXdyQyxnQkFBQSxFQ1VBLElBZ0RlbjZDLEdBL0NmdU0sR0FBTXd0QyxFQUFBLE9BQ05LLHlCQUE0QkwsRUFBQSxLQUM1Qm5zQyxTQUFZbXNDLEVBQUEsS0FDWk0sYUFBZ0JOLEVBQUEsSUFDaEI3K0MsU0FBWTYrQyxFQUFBLElBQ1o3dEMsV0FBYzZ0QyxFQUFBLEtBQ2RwMUMsU0FBWW8xQyxFQUFBLEtBQ1pPLFdBQWNQLEVBQUEsS0FDZDFzQyxVQUFhMHNDLEVBQUEsS0FDYmxzQyxLQUFRa3NDLEVBQUEsS0FDUjExQyxVQUFhMDFDLEVBQUEsT0FDYnoxQyxVQUFheTFDLEVBQUEsT0FDYjF0QyxlQUFrQjB0QyxFQUFBLE9BQ2xCM3RDLGdCQUFtQjJ0QyxFQUFBLE9BQ25CUSxpQkFBb0JSLEVBQUEsT0FDcEJTLFVBQWFULEVBQUEsT0FDYnp0QyxxQkFBd0J5dEMsRUFBQSxPQUN4QlUsS0FBUVYsRUFBQSxLQUNSVyxZQUFlWCxFQUFBLEtBQ2ZuMkMsU0FBWW0yQyxFQUFBLEtBQ1o1cEMsT0FBVTRwQyxFQUFBLEtBQ1Y3cEMsUUFBVzZwQyxFQUFBLEtBQ1hyOUIsU0FBWXE5QixFQUFBLEtBQ1pZLFNBQVlaLEVBQUEsS0FDWmEsY0FBaUJiLEVBQUEsS0FDakJoMUMsYUFBZ0JnMUMsRUFBQSxLQUNoQi8wQyxhQUFnQiswQyxFQUFBLEtBQ2hCYyxlQUFrQmQsRUFBQSxLQUNsQmUsWUFBZWYsRUFBQSxJQUNmbHZCLFdBQWNrdkIsRUFBQSxLQUNkRSxhQUFnQkYsRUFBQSxLQUNoQnRyQyxRQUFXc3JDLEVBQUEsS0FDWG4vQyxNQUFBZy9DLEVBQ0E5c0IsYUFBQThzQixFQUNBbUIsY0FBaUJoQixFQUFBLE9BQ2pCaUIsaUJBQW9CakIsRUFBQSxPQUNwQmtCLFlBQWVsQixFQUFBLE9BQ2ZtQixrQkFBcUJuQixFQUFBLFdBQXFCQSxFQUFBLEtBQWdCQSxFQUFBLE9BQzFEb0IsZ0JBQW1CcEIsRUFBQSxRQUFrQkEsRUFBQSxRQUNyQ3FCLGdCQUFtQnJCLEVBQUEsS0FDbkJzQixXQUFjdEIsRUFBQSxRQUFrQkEsRUFBQSxRQUNoQzVzQyxVQUFhNHNDLEVBQUEsS0FDYjNyQyxVQUFhMnJDLEVBQUEsS0FDYjdzQyxXQUFjNnNDLEVBQUEsS0FDZDNzQyxxQkFBd0Iyc0MsRUFBQSxXQUFxQkEsRUFBQSxLQUFnQkEsRUFBQSxPQUM3RHVCLGVBQWtCdkIsRUFBQSw0REN4RkgsU0FBQS8rQyxFQUFBRSxHQUNmLElBQUFxZ0QsS0FJQSxPQUhFOXFDLEVBQUFDLEVBQUsxUyxTQUFBQyxRQUFBL0MsRUFBQSxTQUFBRSxHQUNQbWdELEVBQUFwOUMsS0FBQS9DLEtBRUFtZ0QsZ0dDTE8sU0FBQUMsRUFBQTU4QixHQUNQLHVCQUFBQSxFQUNBQSxFQUdBLEdBRU8sU0FBQTY4QixFQUFBdjlDLEdBQ1AsSUFBQUEsRUFDQSxZQUdBLElBQUFoQixFQUFBZ0IsRUFBQWhCLE1BRUEsYUFBQUEsRUFDQSxPQUFBQSxFQUFBdEMsTUFHQSxHQUFBc0QsRUFBQTNDLElBQ0EsT0FBQTJDLEVBQUEzQyxJQUdBLEdBQUEyQyxFQUFBaUksTUFBQWpJLEVBQUFpSSxLQUFBa3pDLGtCQUFBbjhDLEVBQUFrTCxNQUNBLE9BQUFsTCxFQUFBa0wsTUFHQSxVQUFBOHhDLE1BQUEscUVBQUFyMUMsT0FBQTNHLElBRU8sU0FBQXc5QyxFQUFBeDlDLEVBQUErbUMsR0FDUCxnQkFBQUEsRUFDQXdXLEVBQUF2OUMsR0FHQUEsRUFBQWhCLE1BQUErbkMsR0FLTyxTQUFBdjNCLEVBQUF4USxHQUNQLE9BQUFBLEVBQUE0USxTQUVPLFNBQUE2dEMsRUFBQXorQyxHQUNQLE9BQUFBLEVBQUEwUSxVQUFBMVEsRUFBQTJRLEtBRU8sU0FBQSt0QyxFQUFBMStDLEdBQ1AsT0FBQXkrQyxFQUFBeitDLElBQUF3USxFQUFBeFEsR0FFTyxTQUFBMitDLEVBQUEzK0MsR0FDUCxPQUFBMCtDLEVBQUExK0MsR0FFTyxTQUFTNCtDLEVBQU9saEQsR0FDdkIsSUFBQTJnRCxFQUFBM2dELEVBUUEsWUFOQXNLLElBQUF0SyxFQUNBMmdELEtBQ0d0OEMsTUFBQW9MLFFBQUF6UCxLQUNIMmdELEdBQUEzZ0QsSUFHQTJnRCxFQUVPLFNBQUFRLEVBQUFuaEQsR0FDUCxTQUFBaUssY0FBQWpLLEVBQUEsS0FBQWlLLE9BQUFqSyxHQUVPLFNBQUFvaEQsRUFBQW41QyxHQUNQQSxFQUFBeU0saUJBRU8sU0FBQTJzQyxFQUFBcmhELEVBQUFzaEQsR0FDUCxJQUFBemdELEdBQUEsRUFFQSxHQUFBYixFQUNBLFFBQUFTLEVBQUEsRUFBbUJBLEVBQUFULEVBQUFVLE9BQWtCRCxJQUNyQyxHQUFBVCxFQUFBUyxLQUFBNmdELEVBQUEsQ0FDQXpnRCxFQUFBSixFQUNBLE1BS0EsT0FBQUksRUFFTyxTQUFBMGdELEVBQUF2aEQsRUFBQVcsR0FDUCxJQUFBNk0sRUFHQSxHQUZBeE4sRUFBVWtoRCxFQUFPbGhELEdBSWpCLFFBQUFTLEVBQUEsRUFBbUJBLEVBQUFULEVBQUFVLE9BQWtCRCxJQUNyQyxHQUFBVCxFQUFBUyxHQUFBRSxRQUFBLENBQ0E2TSxFQUFBeE4sRUFBQVMsR0FBQStNLE1BQ0EsTUFLQSxPQUFBQSxFQXdCTyxJQUFBZzBDLEdBQ1BDLFdBQUEsT0FDQUMsaUJBQUEsUUFFT0MsR0FDUDFXLGFBQUEsTUFvQ08sU0FBQTJXLEVBQUEvc0MsRUFBQXZSLEdBQ1AsT0FBQUEsRUFBQWhCLE1BQUF5SCxVQUljbTNDLEVBQU9KLEVBQUF4OUMsRUFBQTRELEtBQUE1RSxNQUFBcTlDLG1CQUFBa0MsS0FBQSxJQUNyQkMsY0FBQTM1QyxRQUFBME0sRUFBQWl0QyxnQkFBQSxFQVdPLFNBQUE3YyxFQUFBeDhCLEVBQUFvQixHQUNQLGdCQUFBcEYsR0FDQWdFLEVBQUFvQixHQUFBcEYsR0NwTEEsU0FBQW1DLElBQW1SLE9BQTlQQSxFQUFBL0csT0FBQWdILFFBQUEsU0FBQUMsR0FBZ0QsUUFBQXJHLEVBQUEsRUFBZ0JBLEVBQUFzRyxVQUFBckcsT0FBc0JELElBQUEsQ0FBTyxJQUFBdUcsRUFBQUQsVUFBQXRHLEdBQTJCLFFBQUFFLEtBQUFxRyxFQUEwQm5ILE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF3QyxFQUFBckcsS0FBeURtRyxFQUFBbkcsR0FBQXFHLEVBQUFyRyxJQUFpQyxPQUFBbUcsSUFBa0JHLE1BQUFDLEtBQUFILFdBSW5SLFNBQUFJLEVBQUFMLEVBQUF4RSxHQUEyQyxRQUFBN0IsRUFBQSxFQUFnQkEsRUFBQTZCLEVBQUE1QixPQUFrQkQsSUFBQSxDQUFPLElBQUEyRyxFQUFBOUUsRUFBQTdCLEdBQTJCMkcsRUFBQVgsV0FBQVcsRUFBQVgsYUFBQSxFQUF3RFcsRUFBQVYsY0FBQSxFQUFnQyxVQUFBVSxNQUFBVCxVQUFBLEdBQXVEOUcsT0FBQUMsZUFBQWdILEVBQUFNLEVBQUF6RyxJQUFBeUcsSUFNOVAsU0FBUzI2QyxFQUFlejZDLEdBQXdKLE9BQWxKeTZDLEVBQWVsaUQsT0FBQTBILGVBQUExSCxPQUFBMkgsZUFBQSxTQUFBRixHQUFnRixPQUFBQSxFQUFBRyxXQUFBNUgsT0FBQTJILGVBQUFGLEtBQTBFQSxHQUV2TSxTQUFTMDZDLEVBQXNCcjZDLEdBQVEsWUFBQUEsRUFBdUIsVUFBQUMsZUFBQSw2REFBeUYsT0FBQUQsRUFJdkosU0FBU3M2QyxHQUFlMzZDLEVBQUFRLEdBQWtILE9BQXpHbTZDLEdBQWVwaUQsT0FBQTBILGdCQUFBLFNBQUFELEVBQUFRLEdBQTZFLE9BQWpCUixFQUFBRyxVQUFBSyxFQUFpQlIsSUFBb0NBLEVBQUFRLEdBV2pLLElBQUlvNkMsR0FFSixTQUFBMzVDLEdBR0EsU0FBQTQ1QyxFQUFBNy9DLEdBQ0EsSUFBQWtHLEVBd0lBLE9BdktBLFNBQXdCQyxFQUFBQyxHQUF5QixLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQWlDdkZ5NUMsQ0FBZWw3QyxLQUFBaTdDLElBRW5CMzVDLEVBN0JBLFNBQW1DYixFQUFBbkQsR0FBYyxPQUFBQSxHQUFBLGlCQUFBQSxHQUFBLG1CQUFBQSxFQUErRnc5QyxFQUFzQnI2QyxHQUE3Q25ELEVBNkI3RzY5QyxDQUEwQm43QyxLQUFPNjZDLEVBQWVJLEdBQUEzOUMsS0FBQTBDLEtBQUE1RSxLQUM1RGdnRCxZQUFBLEtBQ0E5NUMsRUFBQSs1QyxhQUFBLEVBRUEvNUMsRUFBQWc2Qyx1QkFBQSxXQUVBLElBQUFDLEVBQTBCNWlELE9BQUE2aUQsRUFBQSxZQUFBN2lELENBQVcySSxFQUFBbTZDLGlCQUNyQy91QyxFQUFBcEwsRUFBQWxHLE1BQ0EwckIsRUFBQXBhLEVBQUFvYSxRQUNBNDBCLEVBQUFodkMsRUFBQWd2QyxpQkFDQTVpRCxFQUFBd0ksRUFBQWxHLE1BQUF0QyxNQUVBLEdBQUF5aUQsR0FBQXowQixFQUFBLENBSUEsSUFBQTYwQixHQUNBQyxvQkFBQSxHQUdBOWlELEdBQUEsSUFBQUEsRUFBQVUsU0FBQWtpRCxJQUNBQyxFQUFBRSxjQUFBLEdBS0F2NkMsRUFBQTg1QyxZQUEwQlUsSUFBRyxXQUNyQkMsSUFBY1IsRUFBZ0I1aUQsT0FBQTZpRCxFQUFBLFlBQUE3aUQsQ0FBVzJJLEVBQUEwNkMsU0FBQUwsT0FJakRyNkMsRUFBQTI2QyxXQUFBLFdBQ0EsSUFBQW4wQixFQUFBeG1CLEVBQUFsRyxNQUNBOGdELEVBQUFwMEIsRUFBQW8wQixVQUNBNXdDLEVBQUF3YyxFQUFBeGMscUJBQ0FndEMsRUFBQXh3QixFQUFBd3dCLHlCQUNBLzFDLEVBQUF1bEIsRUFBQXZsQixVQUNBdUosRUFBQWdjLEVBQUFoYyxTQUNBcXdDLEVBQUFyMEIsRUFBQXEwQixhQUNBM3dDLEVBQUFzYyxFQUFBdGMsV0FDQTR3QyxFQUFBdDBCLEVBQUFzMEIsY0FDQUMsRUFBQXYwQixFQUFBdTBCLGVBQ0F2MUIsRUFBQWdCLEVBQUFoQixRQUNBNDBCLEVBQUFwNkMsRUFBQWxHLE1BQUFzZ0QsaUJBRUEsR0FBQVEsS0FBQTFpRCxPQUFBLENBQ0EsSUFBQThpRCxLQUVBeHdDLEdBQ0F3d0MsRUFBQXZ6QixXQUFBc3pCLEVBQ0FDLEVBQUExaEMsU0FBQXVoQyxHQUVBRyxFQUFBbnVDLFFBQUFndUMsRUFHQSxJQUFBcmpELEVBQUF3SSxFQUFBbEcsTUFBQXRDLE1BQ0Era0IsRURLTyxTQUFBMCtCLEVBQUFMLEVBQUFwakQsR0FDUCxVQUFBQSxRQUFBc0ssSUFBQXRLLEVBQ0EsU0FHQSxJQUFBK2tCLEtBZUEsT0FkRWxQLEVBQUFDLEVBQUsxUyxTQUFBQyxRQUFBKy9DLEVBQUEsU0FBQXQwQyxHQUdQLEdBRkFBLEVBQUF2RCxLQUVBbTRDLGdCQUNBMytCLElBQUE5YSxPQUFBdzVDLEVBQUEzMEMsRUFBQXhNLE1BQUFoQyxTQUFBTixRQUNLLENBQ0wsSUFBQTJqRCxFQUFBOUMsRUFBQS94QyxHQUNBODBDLEVBQUE5MEMsRUFBQW5PLEtBRUEsSUFBQTBnRCxFQUFBcmhELEVBQUEyakQsSUFBQUMsR0FDQTcrQixFQUFBeGhCLEtBQUFxZ0QsTUFJQTcrQixFQ3pCMkIwK0IsQ0FBYUwsRUFBQXBqRCxHQUN4QzZqRCxLQUNBQyxFQUFBdEUsRUFDQXVFLEVBQUFYLEVBRUEsR0FBQXIrQixFQUFBcmtCLFFBQUFraUQsRUFBQSxDQUNBNTBCLElBQUF4bEIsRUFBQSs1QyxZQUNBc0IsRUFBQXRqRCxVQUFBd2tCLEVBQUEsSUFBQTY5QixFQUNXNTBCLElBRVhqSixFQUFBLEtBQ0ErK0IsR0FBQSxHQUdBRCxFQUFBdGpELGVBQUErSixHQUdBLElBQUEwNUMsR0FBQSxFQUdBQyxFQUFBLFNBQUFuMUMsR0FDQSxJQUFBbk8sRUFBQW1PLEVBQUFuTyxJQUVBLE9BQUFxakQsSUFBQSxJQUFBai9CLEVBQUE1YyxRQUFBeEgsS0FBQXFqRCxJQUFBai9CLEVBQUFya0IsU0FBQSxJQUFBa2lELEVBQUF6NkMsUUFBQTJHLEVBQUFuTyxNQUNBcWpELEdBQUEsRUFDcUJqdUMsRUFBQSxhQUFrQmpILEdBQ3ZDekUsSUFBQSxTQUFBakIsR0FDQVosRUFBQW02QyxnQkFBQXY1QyxNQUtBMEYsR0FHQWkxQyxFQUFBWCxFQUFBajBDLElBQUEsU0FBQUwsR0FDQSxHQUFBQSxFQUFBdkQsS0FBQW00QyxnQkFBQSxDQUNBLElBQUFwakQsRUFBNkJGLEVBQU8wTyxFQUFBeE0sTUFBQWhDLFVBQUE2TyxJQUFBODBDLEdBQ3BDLE9BQXFCbHVDLEVBQUEsYUFBa0JqSCxLQUFTeE8sR0FHaEQsT0FBQTJqRCxFQUFBbjFDLFVBTUF0RyxFQUFBbTZDLGdCQUFBLEtBSUEsSUFBQWh3QixFQUFBM3lCLE9BQUFVLE9BQUEsR0FNQSxPQUpBZ1MsSUFBQWxLLEVBQUEwN0MsZ0JBQUF2eEIsT0FBQTJ3QixJQUNBTyxFQUFBdGpELFVBQUEsSUFHZXdWLEVBQUEsY0FBb0JvdUMsRUFBQSxRQUFJdjlDLEdBQ3ZDeUQsSUFBQTdCLEVBQUE0N0MsWUFDQXBqRCxNQUFBd0gsRUFBQWxHLE1BQUEraEQsa0JBQ0FQLHFCQUNBOXNCLEtBQUEsVUFDQXN0QixTQUFBdHhDLEVBQUFSLEVBQUEsTUFDU3F4QyxHQUNUN3dDLFlBQ1N3d0MsR0FDVHorQixlQUNBdGIsVUFBQSxHQUFBUSxPQUFBUixFQUFBLFdBQ1NzNkMsR0FHVCxhQUdBdjdDLEVBQUEwN0MsZUFBQTVoRCxFQUFBb1EsV0FDQWxLLEVBQUE0N0MsWUFBd0JuZixFQUFRK2MsRUFBc0J4NUMsR0FBQSxXQUN0REEsRUF1REEsT0FsTkEsU0FBa0IrQixFQUFBQyxHQUF3QixzQkFBQUEsR0FBQSxPQUFBQSxFQUErRCxVQUFBN0IsVUFBQSxzREFBNkU0QixFQUFBakcsVUFBQXpFLE9BQUE0SyxPQUFBRCxLQUFBbEcsV0FBeUVpQyxhQUFldkcsTUFBQXVLLEVBQUE1RCxVQUFBLEVBQUFELGNBQUEsS0FBMEQ4RCxHQUFpQnkzQyxHQUFlMTNDLEVBQUFDLEdBZ0J0Vys1QyxDQUFTcEMsRUFtTVRwc0MsRUFBQSxjQTNORixTQUFBck4sRUFBQWtDLEVBQUFDLEdBQTZERCxHQUFBekQsRUFBQXVCLEVBQUFwRSxVQUFBc0csR0FBc0VDLEdBQUExRCxFQUFBdUIsRUFBQW1DLEdBc0tuSUMsQ0FBQXEzQyxJQUNBeGhELElBQUEsb0JBQ0FYLE1BQUEsV0FDQWtILEtBQUFzN0MseUJBQ0F0N0MsS0FBQXE3QyxZQUFBcjdDLEtBQUE1RSxNQUFBMHJCLFdBR0FydEIsSUFBQSx3QkFDQVgsTUFBQSxTQUFBK0ssR0FNQSxPQUxBQSxFQUFBaWpCLFVBQ0E5bUIsS0FBQXE3QyxhQUFBLEdBSUFyN0MsS0FBQTVFLE1BQUEwckIsVUFBQWpqQixFQUFBaWpCLFNBQUFqakIsRUFBQWlqQixTQUFBampCLEVBQUEySCxhQUFBeEwsS0FBQTVFLE1BQUFvUSxjQUdBL1IsSUFBQSxxQkFDQVgsTUFBQSxTQUFBNnVCLEdBQ0EsSUFBQXZzQixFQUFBNEUsS0FBQTVFLE9BRUF1c0IsRUFBQWIsU0FBQTFyQixFQUFBMHJCLFNBQ0E5bUIsS0FBQXM3Qyx5QkFHQXQ3QyxLQUFBcTdDLFlBQUFqZ0QsRUFBQTByQixRQUNBOW1CLEtBQUFnOUMsZUFBQTVoRCxFQUFBb1EsY0FHQS9SLElBQUEsdUJBQ0FYLE1BQUEsV0FDQWtILEtBQUFvN0MsYUFDUVUsRUFBQWx0QyxFQUFHNnpCLE9BQUF6aUMsS0FBQW83QyxnQkFJWDNoRCxJQUFBLFNBQ0FYLE1BQUEsV0FDQSxJQUFBbWpELEVBQUFqOEMsS0FBQWk4QyxhQUNBLE9BQUFBLEVBQTBCcHRDLEVBQUEsY0FBbUIsT0FDN0MvVSxPQUNBd2pELFNBQUEsT0FDQS9pRCxVQUFBLGlCQUVBa1EsR0FBQXpLLEtBQUE1RSxNQUFBbWlELE9BQ0FudkMsUUFBQXBPLEtBQUE1RSxNQUFBb2lELGFBQ0FDLFlBQXFCdkQsRUFDckJoSixTQUFBbHhDLEtBQUE1RSxNQUFBMDlDLGVBQ09tRCxHQUFBLFNBSVBoQixFQW5NQSxHQzdCQSxTQUFBMzdDLEdBQUF2RCxFQUFBdEMsRUFBQVgsR0FBbU0sT0FBeEpXLEtBQUFzQyxFQUFrQnBELE9BQUFDLGVBQUFtRCxFQUFBdEMsR0FBa0NYLFFBQUF5RyxZQUFBLEVBQUFDLGNBQUEsRUFBQUMsVUFBQSxJQUFnRjFELEVBQUF0QyxHQUFBWCxFQUFvQmlELEVBRW5NLFNBQVMyaEQsS0FBMFEsT0FBN1BBLEdBQVEva0QsT0FBQWdILFFBQUEsU0FBQUMsR0FBdUMsUUFBQXJHLEVBQUEsRUFBZ0JBLEVBQUFzRyxVQUFBckcsT0FBc0JELElBQUEsQ0FBTyxJQUFBdUcsRUFBQUQsVUFBQXRHLEdBQTJCLFFBQUFFLEtBQUFxRyxFQUEwQm5ILE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUF3QyxFQUFBckcsS0FBeURtRyxFQUFBbkcsR0FBQXFHLEVBQUFyRyxJQUFpQyxPQUFBbUcsSUFBa0NHLE1BQUFDLEtBQUFILFdBSW5TLFNBQVM4OUMsR0FBaUIvOUMsRUFBQXhFLEdBQWlCLFFBQUE3QixFQUFBLEVBQWdCQSxFQUFBNkIsRUFBQTVCLE9BQWtCRCxJQUFBLENBQU8sSUFBQTJHLEVBQUE5RSxFQUFBN0IsR0FBMkIyRyxFQUFBWCxXQUFBVyxFQUFBWCxhQUFBLEVBQXdEVyxFQUFBVixjQUFBLEVBQWdDLFVBQUFVLE1BQUFULFVBQUEsR0FBdUQ5RyxPQUFBQyxlQUFBZ0gsRUFBQU0sRUFBQXpHLElBQUF5RyxJQU05UCxTQUFTMDlDLEdBQWV4OUMsR0FBd0osT0FBbEp3OUMsR0FBZWpsRCxPQUFBMEgsZUFBQTFILE9BQUEySCxlQUFBLFNBQUFGLEdBQWdGLE9BQUFBLEVBQUFHLFdBQUE1SCxPQUFBMkgsZUFBQUYsS0FBMEVBLEdBRXZNLFNBQVN5OUMsR0FBc0JwOUMsR0FBUSxZQUFBQSxFQUF1QixVQUFBQyxlQUFBLDZEQUF5RixPQUFBRCxFQUl2SixTQUFTcTlDLEdBQWUxOUMsRUFBQVEsR0FBa0gsT0FBekdrOUMsR0FBZW5sRCxPQUFBMEgsZ0JBQUEsU0FBQUQsRUFBQVEsR0FBNkUsT0FBakJSLEVBQUFHLFVBQUFLLEVBQWlCUixJQUFvQ0EsRUFBQVEsR0RrTmpLbzZDLEdBQVkrQyxZQUFBLGVBQ1ovQyxHQUFZanVDLFdBQ1p3d0MsT0FBVXRGLEVBQUEsT0FDVksseUJBQTRCTCxFQUFBLEtBQzVCbi9DLE1BQVNtL0MsRUFBQSxJQUNUa0Ysa0JBQXFCbEYsRUFBQSxPQUNyQm5zQyxTQUFZbXNDLEVBQUEsS0FDWnVGLGFBQWdCdkYsRUFBQSxLQUNoQmEsY0FBaUJiLEVBQUEsS0FDakIrRixlQUFrQi9GLEVBQUEsS0FDbEJrRSxhQUFnQmxFLEVBQUEsS0FDaEIxMUMsVUFBYTAxQyxFQUFBLE9BQ2JpRSxVQUFhakUsRUFBQSxJQUNienNDLFdBQWN5c0MsRUFBQSxPQUNkbnhCLFFBQVdteEIsRUFBQSxLQUNYeUQsaUJBQW9CekQsRUFBQSxPQUNwQjNzQyxxQkFBd0Iyc0MsRUFBQSxXQUFxQkEsRUFBQSxLQUFnQkEsRUFBQSxRQ2hPN0QsSUFBQXAzQyxHQUF5QixTQUFBQyxFQUFBQyxHQUN6QixJQUFBQyxLQUVBLFFBQUFKLEtBQUFFLEVBQ0FuSSxPQUFBeUUsVUFBQTJCLGVBQUF6QixLQUFBd0QsRUFBQUYsSUFBQUcsRUFBQUUsUUFBQUwsR0FBQSxJQUFBSSxFQUFBSixHQUFBRSxFQUFBRixJQUdBLFNBQUFFLEdBQUEsbUJBQUFuSSxPQUFBdUksc0JBQUEsS0FBQTNILEVBQUEsTUFBQXFILEVBQUFqSSxPQUFBdUksc0JBQUFKLEdBQTJIdkgsRUFBQXFILEVBQUFwSCxPQUFjRCxJQUN6SXdILEVBQUFFLFFBQUFMLEVBQUFySCxJQUFBLEdBQUFaLE9BQUF5RSxVQUFBK0QscUJBQUE3RCxLQUFBd0QsRUFBQUYsRUFBQXJILE1BQUF5SCxFQUFBSixFQUFBckgsSUFBQXVILEVBQUFGLEVBQUFySCxLQUVBLE9BQUF5SCxHQVdBaTlDLEVBQUEsRUFBT0YsWUFBQSxVQUNQLElBQUFHLElBQ0FDLFlBQ0FDLFFBQUEsV0FDQTNjLFFBQUEsS0FDQTZiLFVBQ0FlLFFBQUEsRUFDQUMsUUFBQSxJQUdBQyxTQUNBSCxRQUFBLFdBQ0EzYyxRQUFBLE1BQ0E2YixVQUNBZSxRQUFBLEVBQ0FDLFFBQUEsS0FLSUUsR0FFSixTQUFBbjlDLEdBR0EsU0FBQW85QyxFQUFBcmpELEdBQ0EsSUFBQWtHLEVBb0ZBLE9BbkpBLFNBQXdCQyxFQUFBQyxHQUF5QixLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQWlFdkZpOUMsQ0FBZTErQyxLQUFBeStDLElBRW5CbjlDLEVBN0RBLFNBQW1DYixFQUFBbkQsR0FBYyxPQUFBQSxHQUFBLGlCQUFBQSxHQUFBLG1CQUFBQSxFQUErRnVnRCxHQUFzQnA5QyxHQUE3Q25ELEVBNkQ3R3FoRCxDQUEwQjMrQyxLQUFPNDlDLEdBQWVhLEdBQUFuaEQsS0FBQTBDLEtBQUE1RSxLQUM1RHdqRCxnQkFBQSxLQUNBdDlDLEVBQUE4NUMsWUFBQSxLQUVBOTVDLEVBQUF1OUMsaUJBQUEsV0FDQXY5QyxFQUFBdzlDLG9CQUVBeDlDLEVBQUE4NUMsWUFBMEJVLElBQUcsV0FDN0IsSUFDQWwvQixFQURrQjQrQixFQUFBLFlBQXFCcUMsR0FBc0J2OEMsSUFDN0QyOUIsWUFFQXJpQixJQUFBdGIsRUFBQTBDLE1BQUErNkMsZUFDQXo5QyxFQUFBK0wsVUFDQTB4QyxjQUFBbmlDLE9BTUF0YixFQUFBdzlDLGtCQUFBLFdBQ0F4OUMsRUFBQTg1QyxhQUNRVSxFQUFBbHRDLEVBQUc2ekIsT0FBQW5oQyxFQUFBODVDLGNBSVg5NUMsRUFBQTA5QyxhQUFBLFdBQ0EsT0FBQTE5QyxFQUFBczlDLGlCQUFBdDlDLEVBQUFzOUMsZ0JBQUE1QyxTQUdBMTZDLEVBQUEyOUMsZ0JBQUEsV0FDQSxPQUFBMzlDLEVBQUE0OUMsV0FBQXJaLG1CQUdBdmtDLEVBQUE2OUMsbUJBQUEsU0FBQUMsR0FDQSxJQUFBaGtELEVBQUFrRyxFQUFBbEcsTUFDQW8rQyxFQUFBcCtDLEVBQUFvK0MsZUFDQStELEVBQUFuaUQsRUFBQW1pRCxPQUNBOEIsRUFBcUJ4d0MsRUFBQSxjQUFvQm1zQyxHQUFjMEMsSUFDdkR2NkMsSUFBQTdCLEVBQUFnK0MscUJBQ09GLEdBQ1A3QixTQUNBaDdDLFVBQUFqQixFQUFBaStDLHVCQUNBcEQsYUFBQS9nRCxFQUFBK2dELGFBQ0FFLGVBQUFqaEQsRUFBQWloRCxlQUNBdkQsY0FBQTE5QyxFQUFBMDlDLGNBQ0FoZ0QsTUFBQXNDLEVBQUF0QyxNQUNBc2pELGNBQUFoaEQsRUFBQWdoRCxjQUNBVixpQkFBQXRnRCxFQUFBc2dELGlCQUNBcEQseUJBQUFsOUMsRUFBQWs5Qyx5QkFDQTZFLGtCQUFBL2hELEVBQUEraEQsa0JBQ0E3eEMscUJBQUFsUSxFQUFBa1Esd0JBR0EsT0FBQWt1QyxFQUNBQSxFQUFBNkYsRUFBQWprRCxHQUdBLE1BR0FrRyxFQUFBaytDLDBCQUFBLFdBQ0EsSUFBQXBrRCxFQUFBa0csRUFBQWxHLE1BQ0FtUCxFQUFBblAsRUFBQW1QLGVBTUEsT0FKQUEsR0FBQW5QLEVBQUFzOUMsWUFDQW51QyxFQUFBLEdBQUF4SCxPQUFBekIsRUFBQWkrQyx1QkFBQSxLQUFBeDhDLE9BQUEzSCxFQUFBczlDLFlBR0FudUMsR0FHQWpKLEVBQUFpK0MscUJBQUEsV0FDQSxTQUFBeDhDLE9BQUF6QixFQUFBbEcsTUFBQW1ILFVBQUEsY0FHQWpCLEVBQUFnK0Msb0JBQWdDdmhCLEVBQVE4ZixHQUFzQnY4QyxHQUFBLG1CQUM5REEsRUFBQW0rQyxlQUEyQjFoQixFQUFROGYsR0FBc0J2OEMsR0FBQSxjQUN6REEsRUFBQTBDLE9BQ0ErNkMsY0FBQSxHQUVBejlDLEVBbUZBLE9BMU5BLFNBQWtCK0IsRUFBQUMsR0FBd0Isc0JBQUFBLEdBQUEsT0FBQUEsRUFBK0QsVUFBQTdCLFVBQUEsc0RBQTZFNEIsRUFBQWpHLFVBQUF6RSxPQUFBNEssT0FBQUQsS0FBQWxHLFdBQXlFaUMsYUFBZXZHLE1BQUF1SyxFQUFBNUQsVUFBQSxFQUFBRCxjQUFBLEtBQTBEOEQsR0FBaUJ3NkMsR0FBZXo2QyxFQUFBQyxHQWdEdFdvOEMsQ0FBU2pCLEVBMktUNXZDLEVBQUEsY0FuT0YsU0FBcUJyTixFQUFBa0MsRUFBQUMsR0FBd0NELEdBQWlCaTZDLEdBQWlCbjhDLEVBQUFwRSxVQUFBc0csR0FBb0NDLEdBQWtCZzZDLEdBQWlCbjhDLEVBQUFtQyxHQWtKcEtnOEMsQ0FBWWxCLElBQ2RobEQsSUFBQSxvQkFDQVgsTUFBQSxXQUNBa0gsS0FBQTYrQyxzQkFHQXBsRCxJQUFBLHFCQUNBWCxNQUFBLFdBQ0FrSCxLQUFBNitDLHNCQUdBcGxELElBQUEsdUJBQ0FYLE1BQUEsV0FDQWtILEtBQUE4K0MsdUJBR0FybEQsSUFBQSxTQUNBWCxNQUFBLFdBQ0EsSUFBQThtRCxFQXlCQUMsRUF2QkE1MEMsRUFBQWpMLEtBQUE1RSxNQUNBb2lELEVBQUF2eUMsRUFBQXV5QyxhQUNBc0MsRUFBQTcwQyxFQUFBNjBDLE1BQ0Exa0QsRUFBQXlGLEdBQUFvSyxHQUFBLHlCQUVBYSxFQUFBMVEsRUFBQTBRLFNBQ0FnYixFQUFBMXJCLEVBQUEwckIsUUFDQXRiLEVBQUFwUSxFQUFBb1EsV0FDQXUwQyxFQUFBM2tELEVBQUEya0QsY0FDQWw5QyxFQUFBekgsRUFBQXlILFNBQ0F1SCxFQUFBaFAsRUFBQWdQLFdBQ0E0MUMsRUFBQTVrRCxFQUFBNGtELGtCQUNBL0csRUFBQTc5QyxFQUFBNjlDLGNBQ0FnSCxFQUFBN2tELEVBQUE2a0QseUJBQ0FocUMsRUFBQWpXLEtBQUF1L0MsdUJBQ0FXLEdBQWdENWdELEdBQWhEc2dELEtBQWdESSxPQUFBMWdELEdBQUFzZ0QsRUFBQSxHQUFBNzhDLE9BQUFrVCxFQUFBLE1BQUFsVCxPQUFBK0ksRUFBQSx3QkFBQXhNLEdBQUFzZ0QsRUFBQSxHQUFBNzhDLE9BQUFrVCxFQUFBLFdBQUE2cEMsR0FBQUYsR0FDaERPLEVBQUFuZ0QsS0FBQW0vQyxvQkFDQWpELFVBQUE5Z0QsRUFBQXN2QixRQUNBOHlCLGVBQ0ExeEMsV0FDQU4sYUFDQXNiLFlBS0ErNEIsRUFEQWg5QyxLQUVpQmszQyxFQUFZMytDLEtBQUFnUCxHQUM3QixVQUVBLFFBR0EsSUFBQWcyQyxFQUF1QjFDLE1BQVd6RSxHQUVsQ29ILEVBQUFKLEVBQUEsbUJBTUEsT0FKQWpnRCxLQUFBZ0UsTUFBQSs2QyxnQkFDQXFCLEVBQUFDLEdBQUEsR0FBQXQ5QyxPQUFBL0MsS0FBQWdFLE1BQUErNkMsY0FBQSxPQUdhbHdDLEVBQUEsY0FBb0JvdkMsRUFBQSxFQUFTUCxNQUFXdGlELEdBQ3JEbStDLFdBQUExMkMsS0FBQTdDLEtBQUE1RSxNQUFBbStDLFdBQ0FzRyxhQUNBMThDLElBQUFuRCxLQUFBeS9DLGVBQ0FhLGVBQUEsYUFDQUMsa0JBQUFyQyxHQUNBMzdDLFVBQUEwVCxFQUNBdXFDLG9CQUFBeGdELEtBQUF3L0MsNEJBQ0FpQixxQkFBQXJsRCxFQUFBc2xELHdCQUNBQyxNQUFBUixFQUNBUyxXQUFBYixFQUNBYyxhQUFBLzVCLEVBQ0EvYixrQkFBQTNQLEVBQUEyUCxrQkFDQW0xQyxlQUF3Qnh4QyxJQUFVd3hDLEdBQ2xDRSxlQUNPaGxELEVBQUFoQyxjQUlQcWxELEVBM0tBLEdDL0RBLFNBQVNxQyxHQUFlL2tELEVBQUF0QyxFQUFBWCxHQUEySyxPQUF4SlcsS0FBQXNDLEVBQWtCcEQsT0FBQUMsZUFBQW1ELEVBQUF0QyxHQUFrQ1gsUUFBQXlHLFlBQUEsRUFBQUMsY0FBQSxFQUFBQyxVQUFBLElBQWdGMUQsRUFBQXRDLEdBQUFYLEVBQW9CaUQsRUFFbk0sU0FBU2dsRCxLQUEwUSxPQUE3UEEsR0FBUXBvRCxPQUFBZ0gsUUFBQSxTQUFBQyxHQUF1QyxRQUFBckcsRUFBQSxFQUFnQkEsRUFBQXNHLFVBQUFyRyxPQUFzQkQsSUFBQSxDQUFPLElBQUF1RyxFQUFBRCxVQUFBdEcsR0FBMkIsUUFBQUUsS0FBQXFHLEVBQTBCbkgsT0FBQXlFLFVBQUEyQixlQUFBekIsS0FBQXdDLEVBQUFyRyxLQUF5RG1HLEVBQUFuRyxHQUFBcUcsRUFBQXJHLElBQWlDLE9BQUFtRyxJQUFrQ0csTUFBQUMsS0FBQUgsV0FJblMsU0FBU21oRCxHQUFpQnBoRCxFQUFBeEUsR0FBaUIsUUFBQTdCLEVBQUEsRUFBZ0JBLEVBQUE2QixFQUFBNUIsT0FBa0JELElBQUEsQ0FBTyxJQUFBMkcsRUFBQTlFLEVBQUE3QixHQUEyQjJHLEVBQUFYLFdBQUFXLEVBQUFYLGFBQUEsRUFBd0RXLEVBQUFWLGNBQUEsRUFBZ0MsVUFBQVUsTUFBQVQsVUFBQSxHQUF1RDlHLE9BQUFDLGVBQUFnSCxFQUFBTSxFQUFBekcsSUFBQXlHLElBTTlQLFNBQVMrZ0QsR0FBZTdnRCxHQUF3SixPQUFsSjZnRCxHQUFldG9ELE9BQUEwSCxlQUFBMUgsT0FBQTJILGVBQUEsU0FBQUYsR0FBZ0YsT0FBQUEsRUFBQUcsV0FBQTVILE9BQUEySCxlQUFBRixLQUEwRUEsR0FFdk0sU0FBUzhnRCxHQUFzQnpnRCxHQUFRLFlBQUFBLEVBQXVCLFVBQUFDLGVBQUEsNkRBQXlGLE9BQUFELEVBSXZKLFNBQVMwZ0QsR0FBZS9nRCxFQUFBUSxHQUFrSCxPQUF6R3VnRCxHQUFleG9ELE9BQUEwSCxnQkFBQSxTQUFBRCxFQUFBUSxHQUE2RSxPQUFqQlIsRUFBQUcsVUFBQUssRUFBaUJSLElBQW9DQSxFQUFBUSxHRDROaks0OUMsR0FBYXA2QyxjQUNibzFDLGVBQUEsU0FBQWpzQixHQUNBLE9BQUFBLElBR0FpeEIsR0FBYXp4QyxXQUNieXdDLGFBQWdCdkYsRUFBQSxLQUNoQmEsY0FBaUJiLEVBQUEsS0FDakJnSSx5QkFBNEJoSSxFQUFBLEtBQzVCOEgsY0FBaUI5SCxFQUFBLE9BQ2pCbnhCLFFBQVdteEIsRUFBQSxLQUNYcDFDLFNBQVlvMUMsRUFBQSxLQUNaN3RDLFdBQWM2dEMsRUFBQSxLQUNkK0gsa0JBQXFCL0gsRUFBQSxPQUNyQm5zQyxTQUFZbXNDLEVBQUEsS0FDWnpzQyxXQUFjeXNDLEVBQUEsT0FDZE0sYUFBZ0JOLEVBQUEsSUFDaEJ2dEIsUUFBV3V0QixFQUFBLElBQ1gxMUMsVUFBYTAxQyxFQUFBLE9BQ2JpSSxlQUFrQmpJLEVBQUEsT0FDbEI3K0MsU0FBWTYrQyxFQUFBLElBQ1pzQixXQUFjdEIsRUFBQSxRQUFrQkEsRUFBQSxRQUNoQzNzQyxxQkFBd0Iyc0MsRUFBQSxXQUFxQkEsRUFBQSxLQUFnQkEsRUFBQSxPQUM3RHVCLGVBQWtCdkIsRUFBQSxLQUNsQnNGLE9BQVV0RixFQUFBLFFBRVZ1RyxHQUFhVCxZQUFBLGdCQ3RPYixJQUFBcUQsR0FBQSw0QkFFQWp4QyxHQUFBLFdBQ0EsYUFHQSxTQUFBa3hDLEtBQ0EsUUFBQTVzQyxFQUFBNVUsVUFBQXJHLE9BQUE4bkQsRUFBQSxJQUFBbmtELE1BQUFzWCxHQUFBRSxFQUFBLEVBQW9FQSxFQUFBRixFQUFhRSxJQUNqRjJzQyxFQUFBM3NDLEdBQUE5VSxVQUFBOFUsR0FHQSxrQkFDQSxRQUFBNHNDLEVBQUExaEQsVUFBQXJHLE9BQUF5ckIsRUFBQSxJQUFBOW5CLE1BQUFva0QsR0FBQUMsRUFBQSxFQUEwRUEsRUFBQUQsRUFBZUMsSUFDekZ2OEIsRUFBQXU4QixHQUFBM2hELFVBQUEyaEQsR0FJQSxRQUFBam9ELEVBQUEsRUFBbUJBLEVBQUErbkQsRUFBQTluRCxPQUFnQkQsSUFDbkMrbkQsRUFBQS9uRCxJQUFBLG1CQUFBK25ELEVBQUEvbkQsSUFDQStuRCxFQUFBL25ELEdBQUF3RyxNQUFBc2hELEdBQUFwOEIsSUFNQSxJQUFJdzhCLEdBRUosU0FBQXBnRCxHQUdBLFNBQUFxSixFQUFBdFAsR0FDQSxJQUFBa0csR0E3REEsU0FBd0JDLEVBQUFDLEdBQXlCLEtBQUFELGFBQUFDLEdBQTBDLFVBQUFDLFVBQUEscUNBK0R2RmlnRCxDQUFlMWhELEtBQUEwSyxJQUVuQnBKLEVBM0RBLFNBQW1DYixFQUFBbkQsR0FBYyxPQUFBQSxHQUFBLGlCQUFBQSxHQUFBLG1CQUFBQSxFQUErRjRqRCxHQUFzQnpnRCxHQUE3Q25ELEVBMkQ3R3FrRCxDQUEwQjNoRCxLQUFPaWhELEdBQWV2MkMsR0FBQXBOLEtBQUEwQyxLQUFBNUUsS0FDNUR3bUQsU0FBQSxLQUNBdGdELEVBQUF1Z0QsZUFBQSxLQUNBdmdELEVBQUF3Z0QsV0FBQSxLQUNBeGdELEVBQUF5Z0QsaUJBQUEsS0FDQXpnRCxFQUFBMGdELFFBQUEsS0FDQTFnRCxFQUFBMmdELGFBQUEsS0FDQTNnRCxFQUFBNGdELGtCQUFBLEtBQ0E1Z0QsRUFBQTZnRCxVQUFBLEtBQ0E3Z0QsRUFBQThnRCxXQUFBLEtBQ0E5Z0QsRUFBQStnRCxjQUFBLEtBRUEvZ0QsRUFBQWdoRCxVQUFBLEVBRUFoaEQsRUFBQWloRCxZQUFBLEVBRUFqaEQsRUFBQWtoRCxZQUVBbGhELEVBQUFtaEQsUUFBQSxFQUVBbmhELEVBQUFvaEQsY0FBQSxTQUFBbnRDLEdBQ0EsSUFBQThqQyxFQUFBLzNDLEVBQUFsRyxNQUFBaStDLGdCQUNBcndCLEVBQUF6VCxFQUFBM1YsT0FBQTlHLE1BRUEsR0FBVStnRCxFQUFnQnY0QyxFQUFBbEcsUUFBQWkrQyxFQUFBNy9DLFFIb0RuQixTQUFBbXBELEVBQUFDLEdBRVAsUUFBQXJwRCxFQUFBLEVBQWlCQSxFQUFBcXBELEVBQUFwcEQsU0FBdUJELEVBQ3hDLEdBQUFvcEQsRUFBQUUsWUFBQUQsRUFBQXJwRCxJQUFBLEVBQ0EsU0FJQSxTRzVEcUV1cEQsQ0FBa0I5NUIsRUFBQXF3QixHQUFBLENBQ3ZGLElBQUEwSixFQUFBemhELEVBQUEwaEQsZ0JBQUFoNkIsR0FZQSxZQVZBNWxCLElBQUEyL0MsR0FDQXpoRCxFQUFBMmhELFdBQUFGLEdBR0F6aEQsRUFBQTRoRCxjQUFBLEdBQ0FDLFdBQUEsU0FHQTdoRCxFQUFBOGhELGNBQUEsT0FLQTloRCxFQUFBOGhELGNBQUFwNkIsR0FFQTFuQixFQUFBK0wsVUFDQXNyQyxNQUFBLElBR1Uvc0MsRUFBVXRLLEVBQUFsRyxRQUNwQmtHLEVBQUEyaEQsWUFBQWo2QixLQUlBMW5CLEVBQUFvL0Msd0JBQUEsU0FBQS9ILEdBQ0FBLElBQUFyM0MsRUFBQWdoRCxXQUNBaGhELEVBQUEraEQsZ0JBRUEvaEQsRUFBQWdpRCxlQUVBaGlELEVBQUFnaEQsVUFBQSxFQUVBaGhELEVBQUFpaUQsd0JBR0FqaUQsRUFBQTRoRCxhQUFBdkssSUFJQXIzQyxFQUFBaXVCLFVBQUEsU0FBQWhhLEdBQ0EsSUFBQW9qQyxFQUFBcjNDLEVBQUEwQyxNQUFBMjBDLEtBR0EsSUFGQXIzQyxFQUFBbEcsTUFBQXlILFNBRUEsQ0FJQSxJQUFBMnNCLEVBQUFqYSxFQUFBaWEsUUFFQW1wQixJQUFBcjNDLEVBQUFraUQsa0JBQ0FsaUQsRUFBQXkzQyxlQUFBeGpDLEdBQ09pYSxJQUFzQk8sRUFBQSxFQUFPTixPQUFBRCxJQUFzQk8sRUFBQSxFQUFPbUIsTUFDakV5bkIsR0FDQXIzQyxFQUFBNGhELGNBQUEsR0FHQTN0QyxFQUFBL0gsa0JBQ09naUIsSUFBc0JPLEVBQUEsRUFBT1csUUFFcENpb0IsSUFDQXIzQyxFQUFBNGhELGNBQUEsR0FFQTN0QyxFQUFBL0gscUJBS0FsTSxFQUFBeTNDLGVBQUEsU0FBQXhqQyxHQUNBLElBQUE3SSxFQUFBcEwsRUFBQWxHLE1BQ0F5SCxFQUFBNkosRUFBQTdKLFNBQ0FtSixFQUFBVSxFQUFBVixTQUNBc3NDLEVBQUE1ckMsRUFBQTRyQyx5QkFFQSxJQUFBejFDLEVBQUEsQ0FJQSxJQUFBbUIsRUFBQTFDLEVBQUEwQyxNQUVBeS9DLEVBQUFuaUQsRUFBQW9pRCxpQkFBQTEvQyxHQUdBd3JCLEVBQUFqYSxFQUFBaWEsUUFFQSxJQUFVcXFCLEVBQWdCdjRDLEVBQUFsRyxRQUFBbWEsRUFBQTNWLE9BQUE5RyxPQUFBMDJCLElBQW9ETyxFQUFBLEVBQU9FLFVBQXJGLENBV0EsR0FBQVQsSUFBc0JPLEVBQUEsRUFBT21CLE1BQzdCLElBQUFsdEIsRUFBQTIwQyxLQUtBLE9BSkFyM0MsRUFBQXFpRCxvQkFFQXB1QyxFQUFBL0gsc0JBQ0ErSCxFQUFBaEksdUJBR08sR0FBQWlpQixJQUFzQk8sRUFBQSxFQUFPTixPQUFBenJCLEVBQUEyMEMsTUFJcEM4SyxHQUFBejNDLEdBQ0F1SixFQUFBL0gsaUJBSUFpMkMsR0FBQXozQyxJQUFBLElBQUFzc0MsSUFDQWgzQyxFQUFBK2dELGNBQUEvaUIsV0FBQSxXQUNBaCtCLEVBQUE0aEQsY0FBQSxXQUdPLEdBQUExekIsSUFBc0JPLEVBQUEsRUFBT1UsSUFRcEMsWUFQQXpzQixFQUFBMjBDLE9BQ0FyM0MsRUFBQTRoRCxjQUFBLEdBRUEzdEMsRUFBQS9ILGlCQUNBK0gsRUFBQWhJLG9CQU1BLEdBQUFrMkMsR0FBQW5pRCxFQUFBeWdELGlCQUFBLENBQ0EsSUFBQXgwQixFQUFBanNCLEVBQUF5Z0QsaUJBQUEvQyxlQUVBenhCLEtBQUFnQyxVQUFBaGEsRUFBQWpVLEVBQUFzaUQsa0JBQ0FydUMsRUFBQS9ILGlCQUNBK0gsRUFBQWhJLHdCQWpEQSxDQUNBZ0ksRUFBQS9ILGlCQUNBLElBQUExVSxFQUFBa0wsRUFBQWxMLE1BRUFBLEVBQUFVLFFBQ0E4SCxFQUFBdWlELGVBQUEvcUQsSUFBQVUsT0FBQSxPQWlEQThILEVBQUE2NkMsYUFBQSxTQUFBajZDLEdBQ0EsSUFBQTBGLEVBQUExRixFQUFBMEYsS0FFQSxHQUFBQSxFQUFBLENBSUEsSUFBQTlPLEVBQUF3SSxFQUFBMEMsTUFBQWxMLE1BQ0FzQyxFQUFBa0csRUFBQWxHLE1BQ0Ewb0QsRUFBMEJuSyxFQUFpQi94QyxHQUMzQzZqQixFQUFBM3lCLElBQUFVLE9BQUEsR0FDQXVxRCxHQUFBLEVBZ0NBLEdBOUJVbEssRUFBZ0J6K0MsSUFDZSxJQUE3QisrQyxFQUE2QnJoRCxFQUFBZ3JELEdBQ3pDQyxHQUFBLEVBRUFqckQsSUFBQWlLLFFBQUErZ0QsSUFHYWw0QyxFQUFVeFEsU0FBQWdJLElBQUFxb0IsT0FBQXE0QixPQUFBeGlELEVBQUEwQyxNQUFBbzRDLGVBUXZCdGpELEdBQUFnckQsR0FFQXhpRCxFQUFBNGhELGNBQUEsR0FDQUMsV0FBQSxFQUNBYSxZQUFBLE1BWEExaUQsRUFBQTRoRCxjQUFBLEdBQ0FDLFdBQUEsRUFDQWEsWUFBQSxJQUdBRCxHQUFBLEdBV0FBLEdBQ0F6aUQsRUFBQTJoRCxXQUFBbnFELEdBR0F3SSxFQUFBMmlELFdBQUFILElBRUFDLEVBQUEsQ0FDQSxJQUFBdjRDLEVBQXlCSSxFQUFVeFEsR0FBVXcrQyxFQUFZaHlDLEVBQUF4TSxFQUFBa1AsaUJBQUEsR0FFekRsUCxFQUFBOG9ELHNCQUNBNWlELEVBQUE4aEQsY0FBQTUzQyxHQUFBLE1BS0FsSyxFQUFBKzZDLGVBQUEsU0FBQXRtQyxHQUNBLElBQUFuTyxFQUFBbU8sRUFBQW5PLEtBQ0F1OEMsRUFBQXB1QyxFQUFBb3VDLFNBRUEsWUFBQUEsRUFBQTkvQyxNQUFBOC9DLEVBQUEzMEIsVUFBOERPLEVBQUEsRUFBT04sT0FNckUsVUFBQTAwQixFQUFBOS9DLE1BQ0EvQyxFQUFBdWlELGVBQTZCbEssRUFBaUIveEMsSUFHOUN0RyxFQUFBbEcsTUFFQThvRCxzQkFDQTVpRCxFQUFBOGhELGNBQUEsS0FaQTloRCxFQUFBdWlELGVBQTZCbEssRUFBaUIveEMsS0FnQjlDdEcsRUFBQThpRCxhQUFBLFNBQUFyakQsR0FDQUEsRUFBQXdNLGtCQUNBeE0sRUFBQXlNLGlCQUVBbE0sRUFBQWxHLE1BQUF5SCxVQUNBdkIsRUFBQTRoRCxjQUFBNWhELEVBQUEwQyxNQUFBMjBDLE1BQ0F3SyxXQUFBN2hELEVBQUEwQyxNQUFBMjBDLFFBS0FyM0MsRUFBQStpRCxtQkFBQSxXQUNBL2lELEVBQUFraUQsaUJBQUFsaUQsRUFBQWtpRCxtQkFDQWxpRCxFQUFBa2lELGtCQUFBdi9DLFNBSUEzQyxFQUFBZ2pELGFBQUEsU0FBQXZqRCxHQUNBLEdBQUFPLEVBQUFsRyxNQUFBeUgsU0FDQTlCLEVBQUF5TSxxQkFEQSxDQUtBbE0sRUFBQStoRCxnQkFRQSxJQUFBa0IsRUFBQWpqRCxFQUFBa2lELGtCQUVBZSxHQUFBeGpELEVBQUFuQixTQUFBMEIsRUFBQTBnRCxVQUlXbEksRUFBMEJ4NEMsRUFBQWxHLFFBQUEyRixFQUFBbkIsU0FBQTJrRCxLQUlyQ2pqRCxFQUFBZ2hELFdBSUFoaEQsRUFBQWdoRCxVQUFBLEVBRUFoaEQsRUFBQWlpRCx1QkFHVzFKLEVBQWdCdjRDLEVBQUFsRyxRQUFBa0csRUFBQWloRCxZQUMzQmpoRCxFQUFBZ2lELG1CQUlBaGlELEVBQUFrOEMsYUFBQSxXQUVBbDhDLEVBQUFrakQsWUFBQSxPQUdBbGpELEVBQUFtakQsWUFBQSxTQUFBMWpELEdBQ0FPLEVBQUFsRyxNQUFBeUgsU0FDQTlCLEVBQUF5TSxpQkFJQWxNLEVBQUE2Z0QsVUFBQXBvRCxPQUFBdWxDLFdBQUEsV0FDQWgrQixFQUFBZ2hELFVBQUEsRUFFQWhoRCxFQUFBaWlELHVCQUVBLElBQUFub0QsRUFBQWtHLEVBQUFsRyxNQUNBdEMsRUFBQXdJLEVBQUEwQyxNQUFBbEwsTUFDQTBTLEVBQUFsSyxFQUFBMEMsTUFBQXdILFdBRUEsR0FBWXV1QyxFQUFZMytDLE1BQUFnUCxZQUFBb0IsR0FBQXBRLEVBQUFrOUMseUJBQUEsQ0FDeEIsSUFBQTV0QixFQUFBcHBCLEVBQUFraEQsYUFFQSxHQUFBOTNCLEVBQUFseEIsT0FBQSxDQUNBLElBQUFrckQsRUhuUU8sU0FBQUMsRUFBQXZyRCxHQUVQLFFBQUFHLEVBQUEsRUFBaUJBLEVBQUFILEVBQUFJLE9BQXFCRCxJQUFBLENBQ3RDLElBQUE2QyxFQUFBaEQsRUFBQUcsR0FFQSxHQUFBNkMsRUFBQWlJLEtBQUFtNEMsZ0JBQUEsQ0FDQSxJQUFBb0ksRUFBQUQsRUFBQXZvRCxFQUFBaEIsTUFBQWhDLFVBRUEsR0FBQXdyRCxFQUNBLE9BQUFBLE9BRUssSUFBQXhvRCxFQUFBaEIsTUFBQXlILFNBQ0wsT0FBQXpHLEVBSUEsWUdtUDhCdW9ELENBQWlCajZCLEdBRS9DZzZCLElBQ0E1ckQsR0FBdUI2Z0QsRUFBaUIrSyxJQUV4Q3BqRCxFQUFBMmhELFdBQUFucUQsVUFHUyxHQUFVK2dELEVBQWdCeitDLElBQUFvUSxFQUFBLENBQ25DbEssRUFBQWloRCxXQUVBamhELEVBQUE4aEQsY0FBQSxLQUlBOWhELEVBQUEwQyxNQUFBd0gsV0FBQSxHQUVBbEssRUFBQWtpRCxpQkFBQWxpRCxFQUFBa2lELG9CQUNBbGlELEVBQUFraUQsa0JBQUExcUQsTUFBQSxLQUlBLElBQUErckQsRUFBQXZqRCxFQUFBMGhELGdCQUFBeDNDLFFBRUFwSSxJQUFBeWhELElBQ0EvckQsRUFBQStyRCxFQUVBdmpELEVBQUEyaEQsV0FBQW5xRCxJQUtBLEdBQVkrZ0QsRUFBZ0J6K0MsSUFBQWtHLEVBQUFpaEQsV0FJNUIsT0FIQWpoRCxFQUFBa2pELFlBQUEsV0FFQWxqRCxFQUFBaWhELFlBQUEsR0FJQWpoRCxFQUFBNGhELGNBQUEsR0FFQTluRCxFQUFBaVQsUUFDQWpULEVBQUFpVCxPQUFBL00sRUFBQXdqRCxpQkFBQWhzRCxLQUVPLEtBR1B3SSxFQUFBeWpELGlCQUFBLFNBQUF4dkMsR0FDQSxJQUFBbmEsRUFBQWtHLEVBQUFsRyxNQUNBNEksRUFBQTFDLEVBQUEwQyxNQUVBLElBQUE1SSxFQUFBeUgsU0FBQSxDQUlBLElBQUEySSxFQUFBeEgsRUFBQXdILFdBQ0ExUyxFQUFBa0wsRUFBQWxMLE1BQ0F5YyxFQUFBaEksbUJBRUEvQixHQUFBMVMsRUFBQVUsVUFDQVYsRUFBQVUsUUFDQThILEVBQUEyaEQsZUFHQTNoRCxFQUFBNGhELGNBQUEsR0FDQUMsV0FBQSxJQUdBMzNDLEdBQ0FsSyxFQUFBOGhELGNBQUEsT0FLQTloRCxFQUFBMGpELHVCQUFBLFdBQ0ExakQsRUFBQTJqRCxtQkFHQTNqRCxFQUFBNGpELDJCQUFBLFNBQUFwc0QsRUFBQXFzRCxHQUNBLElBQUFuK0IsRUFPQSxJQU5BbStCLEtBQUE3akQsRUFBQTBDLE1BQUFtaEQsYUFFc0JsTCxFQUFTbmhELE1BQy9Ca3VCLEVBQUFtK0IsRUFBMkJsTCxFQUFTbmhELEtBR3BDa3VCLEVBQ0EsT0FBQUEsRUFHQSxJQUFBbytCLEVBQUF0c0QsRUFFQSxHQUFBd0ksRUFBQWxHLE1BQUErOEMsYUFBQSxDQUNBLElBQUFrTixFQUF5QmhMLEVBQXNCLzRDLEVBQUFsRyxNQUFBdEMsU0FDL0N3c0QsRUFBZ0NqTCxFQUFzQi80QyxFQUFBbEcsTUFBQTR2QixhQUFBbHlCLFFBRXREc0ssSUFBQWlpRCxFQUNBRCxFQUFBQyxPQUNTamlELElBQUFraUQsSUFDVEYsRUFBQUUsR0FZQSxPQVBBOTZCLE9BQWdCM2IsRUFBQSxjQUFvQmhDLEdBQ3BDL1QsUUFDQVcsSUFBQVgsR0FDU0EsR0FDVEEsUUFDQXdOLE1BQUE4K0MsSUFLQTlqRCxFQUFBaWtELHVCQUFBLFNBQUF6c0QsR0FJQSxPQUhBd0ksRUFBQTRqRCwyQkFBQXBzRCxHQUNBMHhCLFFBS0FscEIsRUFBQWtrRCx3QkFBQSxTQUFBanJDLEdBQ0EsT0FBQUEsRUFBQXRTLElBQUEsU0FBQW5QLEdBQ0EsT0FBQXdJLEVBQUFpa0QsdUJBQUF6c0QsTUFJQXdJLEVBQUFta0QsZ0JBQUEsU0FBQW4vQyxHQUNBLFFBQUFsRCxJQUFBa0QsRUFDQSxZQUdBLElBQUF4TixFQUFBLEtBZUEsT0FkQUgsT0FBQTBDLEtBQUFpRyxFQUFBMEMsTUFBQW1oRCxhQUFBaHBELFFBQUEsU0FBQTFDLEdBQ0EsSUFBQXV0QixFQUFBMWxCLEVBQUEwQyxNQUFBbWhELFlBQUExckQsR0FHQSxJQUZBdXRCLEVBQUFua0IsU0FFQSxDQUlBLElBQUE2aUQsRUFBdUIxTCxFQUFPaHpCLEVBQUExZ0IsT0FFOUJvL0MsS0FBQS9LLEtBQUEsTUFBQXIwQyxJQUNBeE4sRUFBQWt1QixFQUFBbHVCLFVBR0FBLEdBR0F3SSxFQUFBcWtELG1CQUFBLFNBQUE3c0QsR0FDQSxPQUFBd0ksRUFBQWxHLE1BQUErOEMsY0FFQTErQyxJQUFBWCxFQUNBd04sTUFBQWhGLEVBQUFza0Qsc0JBQUE5c0QsSUFJQUEsR0FHQXdJLEVBQUF3akQsaUJBQUEsU0FBQWUsR0FDQSxJQUFBQyxFQUFBRCxFQUVBLFlBQUF6aUQsSUFBQTBpRCxHQU1BQSxFQUxBeGtELEVBQUFsRyxNQUFBKzhDLGFBS0EyTixFQUFBNzlDLElBQUEsU0FBQTg5QyxHQUNBLE9BQ0F0c0QsSUFBQXNzRCxFQUNBei9DLE1BQUFoRixFQUFBc2tELHNCQUFBRyxNQVBBRCxFQUFBNzlDLElBQUEsU0FBQS9OLEdBQ0EsT0FBQUEsSUFXZTIvQyxFQUFnQnY0QyxFQUFBbEcsT0FBQTBxRCxJQUFBLElBRy9CQSxHQUdBeGtELEVBQUFza0Qsc0JBQUEsU0FBQTlzRCxFQUFBcXNELEdBSUEsT0FIQTdqRCxFQUFBNGpELDJCQUFBcHNELEVBQUFxc0QsR0FDQTcrQyxPQUtBaEYsRUFBQTBrRCxxQkFBQSxXQU1BLE9BTEExa0QsRUFBQTRnRCxvQkFDQTVnRCxFQUFBNGdELGtCQUFBeDRCLFNBQUExbUIsY0FBQSxPQUNBMG1CLFNBQUExTixLQUFBNnFCLFlBQUF2bEMsRUFBQTRnRCxvQkFHQTVnRCxFQUFBNGdELG1CQUdBNWdELEVBQUEya0Qsc0JBQUEsV0FDQSxJQUFBN3FELEVBQUFrRyxFQUFBbEcsTUFDQTRJLEVBQUExQyxFQUFBMEMsTUFDQWtpRCxHQUFBLEVBRUFsaUQsRUFBQXdILGFBQ0EwNkMsR0FBQSxHQUdBLElBQUFwdEQsRUFBQWtMLEVBQUFsTCxNQUVBQSxFQUFBVSxTQUNBMHNELEdBQUEsR0FHVXQ2QyxFQUFVeFEsSUFBQSxJQUFBdEMsRUFBQVUsUUFBQXdLLEVBQUFsTCxRQUFBa0wsRUFBQWxMLE1BQUEsS0FDcEJvdEQsR0FBQSxHQUdBLElBQUFsTixFQUFBNTlDLEVBQUE0OUMsWUFFQSxPQUFBQSxFQUNlbnFDLEVBQUEsY0FBbUIsTUFBUWt5QyxJQUMxQ3RELFlBQXVCdkQsRUFDdkJwZ0QsTUFBaUJpbkQsSUFDakIxeEIsUUFBQTYyQixFQUFBLGdCQUNhNUwsSUFDRkcsR0FDWHRzQyxRQUFBN00sRUFBQStpRCxtQkFDQTdoRCxVQUFBLEdBQUFPLE9BQUEzSCxFQUFBbUgsVUFBQSw2QkFDU3kyQyxHQUdULE1BR0ExM0MsRUFBQWc0QyxnQkFBQSxXQUNBLElBQUFsK0MsRUFBQWtHLEVBQUFsRyxNQUNBK3FELEVBQXlCdDNDLEVBQUEsY0FBbUIsU0FDNUNwRSxHQUFBclAsRUFBQXFQLEdBQ0EyN0MsYUFBQSxRQUdBQyxFQUFBanJELEVBQUFrK0MsZ0JBQUFsK0MsRUFBQWsrQyxrQkFBQTZNLEVBQ0FHLEVBQXFCNTNDLElBQVUyM0MsRUFBQWpyRCxNQUFBb0gsVUFBK0JzK0MsTUFBa0IsR0FBQS85QyxPQUFBM0gsRUFBQW1ILFVBQUEsdUJBR2hGLE9BQWFzTSxFQUFBLGNBQW1CLE9BQ2hDck0sVUFBQSxHQUFBTyxPQUFBM0gsRUFBQW1ILFVBQUEseUJBQ1NzTSxFQUFBLGFBQWtCdzNDLEdBQzNCbGpELElBQUE3QixFQUFBaWxELGFBQ0F6a0QsU0FBQVIsRUFBQW9oRCxjQUNBbnpCLFVBQUE4eEIsR0FBQS8vQyxFQUFBeTNDLGVBQUFzTixFQUFBanJELE1BQUFtMEIsVUFBQWp1QixFQUFBbEcsTUFBQTI5QyxnQkFDQWpnRCxNQUFBd0ksRUFBQTBDLE1BQUF3SCxXQUNBM0ksU0FBQXpILEVBQUF5SCxTQUNBTCxVQUFBOGpELElBQ1V6M0MsRUFBQSxjQUFtQixRQUM3QjFMLElBQUE3QixFQUFBa2xELG1CQUNBaGtELFVBQUEsR0FBQU8sT0FBQTNILEVBQUFtSCxVQUFBLDJCQUNPakIsRUFBQTBDLE1BQUF3SCxXQUFBLE9BR1BsSyxFQUFBa2lELGdCQUFBLFdBQ0EsT0FBQWxpRCxFQUFBd2dELFdBQUF4Z0QsRUFBQXdnRCxXQUFBMkUsY0FBQSx1Q0FBQW5sRCxFQUFBc2dELFVBR0F0Z0QsRUFBQW9sRCxzQkFBQSxXQUNBLE9BQUFwbEQsRUFBQXVnRCxnQkFHQXZnRCxFQUFBMjlDLGdCQUFBLFdBQ0EsR0FBQTM5QyxFQUFBeWdELGlCQUNBLE9BQUF6Z0QsRUFBQXlnRCxpQkFBQTlDLG1CQUlBMzlDLEVBQUFxbEQsc0JBQUEsV0FDQSxHQUFBcmxELEVBQUF5Z0QsaUJBQ0EsT0FBQXpnRCxFQUFBeWdELGlCQUFBL0MsZ0JBSUExOUMsRUFBQTRoRCxhQUFBLFNBQUF2SyxHQUNBLElBQUFpTyxFQUFBL21ELFVBQUFyRyxPQUFBLFFBQUE0SixJQUFBdkQsVUFBQSxHQUFBQSxVQUFBLE1BQ0FzakQsRUFBQXlELEVBQUF6RCxVQUNBYSxFQUFBNEMsRUFBQTVDLFdBQ0E1b0QsRUFBQWtHLEVBQUFsRyxNQUdBLEdBRkFrRyxFQUFBMEMsTUFFQTIwQyxTQUFBLENBTUFyM0MsRUFBQWxHLE1BQUFzbEQseUJBQ0FwL0MsRUFBQWxHLE1BQUFzbEQsd0JBQUEvSCxHQUdBLElBQUE3MEMsR0FDQTYwQyxPQUNBeUQsY0FBQSxLQUlBekQsR0FBbUJvQixFQUFZMytDLE1BQUFnUCxZQUMvQjlJLEVBQUE4aEQsY0FBQSxHQUFBWSxHQUdBckwsR0FDQXIzQyxFQUFBa2pELFdBQUE3TCxJQUFBd0ssR0FHQTdoRCxFQUFBK0wsU0FBcUIwekMsSUFDckJwSSxRQUNPNzBDLEdBQUEsV0FDUDYwQyxHQUNBcjNDLEVBQUFrakQsV0FBQTdMLElBQUF3SyxVQTNCQTdoRCxFQUFBa2pELFdBQUE3TCxJQUFBd0ssSUFnQ0E3aEQsRUFBQThoRCxjQUFBLFNBQUE1M0MsR0FDQSxJQUFBdzRDLElBQUFua0QsVUFBQXJHLE9BQUEsUUFBQTRKLElBQUF2RCxVQUFBLEtBQUFBLFVBQUEsR0FDQWc1QyxFQUFBdjNDLEVBQUFsRyxNQUFBeTlDLFNBRUFydEMsSUFBQWxLLEVBQUEwQyxNQUFBd0gsWUFDQWxLLEVBQUErTCxTQUFBLFNBQUFrYyxHQU1BLE9BSkF5NkIsR0FBQXg0QyxJQUFBK2QsRUFBQS9kLFlBQUFxdEMsR0FDQUEsRUFBQXJ0QyxJQUlBQSxlQUVTbEssRUFBQTJqRCxrQkFJVDNqRCxFQUFBMGhELGdCQUFBLFNBQUFMLEdBQ0EsSUFBQTc2QixFQUFBeG1CLEVBQUFsRyxNQUNBMFEsRUFBQWdjLEVBQUFoYyxTQUNBdXRDLEVBQUF2eEIsRUFBQXV4QixnQkFDQTBKLEVBQUF6aEQsRUFBQTBDLE1BQUFsTCxNQUNBK3RELEdBQUEsRUFvQkEsT0hwbEJPLFNBQUFsRSxFQUFBQyxHQUNQLElBQUFrRSxFQUFBLElBQUFwUixPQUFBLElBQUEzeUMsT0FBQTYvQyxFQUFBakksT0FBQSxNQUNBLE9BQUFnSSxFQUFBb0UsTUFBQUQsR0FBQWx6QyxPQUFBLFNBQUFvekMsR0FDQSxPQUFBQSxJRzhqQk1DLENBQWlCdEUsRUFBQXRKLEdBQUFsOUMsUUFBQSxTQUFBbUssR0FDdkIsSUFBQXc5QyxHQUFBeDlDLEdBRUEsR0FBQXdGLEVBQUEsQ0FDQSxJQUFBaFQsRUFBQXdJLEVBQUFta0QsZ0JBQUFuL0MsR0FFQXhOLElBQW9ELElBQTdCcWhELEVBQTZCNEksRUFBQWpxRCxLQUNwRGlxRCxJQUFBaGdELE9BQUFqSyxHQUNBK3RELEdBQUEsRUFFQXZsRCxFQUFBMmlELFdBQUFuckQsU0FFZ0QsSUFBN0JxaEQsRUFBNkI0SSxFQUFBejhDLEtBQ2hEeThDLElBQUFoZ0QsT0FBQStnRCxHQUNBK0MsR0FBQSxFQUVBdmxELEVBQUEyaUQsV0FBQTM5QyxNQUdBdWdELEVBQUE5RCxPQUFBMy9DLEdBR0E5QixFQUFBb2lELGlCQUFBLFNBQUExL0MsR0FFQSxJQUFBa2pELEVBQUE1bEQsRUFBQWxHLE1BQUF1OUMsS0FFQSxxQkFBQXVPLEVBQ0EsT0FBQUEsRUFHQSxJQUFBdk8sR0FBQTMwQyxHQUFBMUMsRUFBQTBDLE9BQUEyMEMsS0FDQWp1QixFQUFBcHBCLEVBQUFraEQsYUFRQSxPQU5VMUksRUFBMEJ4NEMsRUFBQWxHLFFBQUFrRyxFQUFBbEcsTUFBQWdQLFlBQ3BDdXVDLElBQUFqdUIsRUFBQWx4QixTQUNBbS9DLEdBQUEsR0FJQUEsR0FHQXIzQyxFQUFBNmxELGNBQUEsV0FDQTdsRCxFQUFBaWhELFlBQUEsR0FHQWpoRCxFQUFBOGxELGVBQUEsV0FDQTlsRCxFQUFBaWhELFlBQUEsR0FHQWpoRCxFQUFBc2lELGVBQUEsU0FBQWg4QyxHQUNBLEdBQUF0RyxFQUFBbEcsTUFBQWlzRCxXQUFxQ3ROLEVBQVl6NEMsRUFBQWxHLFFBQWlCd1EsRUFBVXRLLEVBQUFsRyxRQUE1RSxDQUlBLElBQUEzQixFQUFnQmtnRCxFQUFpQi94QyxHQUV2QmdFLEVBQVV0SyxFQUFBbEcsUUFDcEJrRyxFQUFBOGhELGNBQUEzcEQsR0FBQSxHQUdBNkgsRUFBQStMLFVBQ0F2VSxPQUFBVyxHQUNBMmlELGNBQUEzaUQsTUFJQTZILEVBQUFpM0MsYUFBQSxTQUFBNXFDLEVBQUF2UixHQUNBLElBQUFrckQsRUFBQXpuRCxVQUFBckcsT0FBQSxRQUFBNEosSUFBQXZELFVBQUEsR0FBQUEsVUFBQSxHQUE4RjY2QyxFQUM5RjVoRCxFQUFBd0ksRUFBQTBDLE1BQUFsTCxNQUNBMnlCLEVBQUEzeUIsSUFBQVUsT0FBQSxHQUVBLElBQUFtVSxHQUFBOGQsT0FBQW5xQixFQUFBMEMsTUFBQW80QyxjQUNBLFNBR0EsSUFBQW1MLEVBQUFqbUQsRUFBQWxHLE1BQUFtOUMsYUFVQSxNQVJBLGlCQUFBajNDLEVBQUFsRyxPQUNBLElBQUFtc0QsSUFDQUEsRUFBQUQsRUFBQXhuQixLQUF3Q29oQixHQUFzQjUvQyxLQUc5RGltRCxFQUFBRCxFQUFBeG5CLEtBQXNDb2hCLEdBQXNCNS9DLEtBRzVEaW1ELElBRU8sbUJBQUFBLEVBQ1BBLEVBQUFqcUQsS0FBNkI0akQsR0FBc0I1L0MsR0FBQXFNLEVBQUF2UixJQUM1Q0EsRUFBQWhCLE1BQUF5SCxXQU9QdkIsRUFBQWdpRCxhQUFBLFdBQ0EsSUFBQWwxQyxFQUFBOU0sRUFBQWxHLE1BQUFnVCxRQUVBOU0sRUFBQThnRCxZQUNBOWdELEVBQUFrbUQsaUJBR0FsbUQsRUFBQThnRCxXQUFBcm9ELE9BQUF1bEMsV0FBQSxXQUNBbHhCLEdBQ0FBLEtBRU8sS0FHUDlNLEVBQUFrbUQsZUFBQSxXQUNBbG1ELEVBQUE4Z0QsYUFDQTdpQixhQUFBaitCLEVBQUE4Z0QsWUFDQTlnRCxFQUFBOGdELFdBQUEsT0FJQTlnRCxFQUFBK2hELGNBQUEsV0FDQS9oRCxFQUFBNmdELFlBQ0E1aUIsYUFBQWorQixFQUFBNmdELFdBQ0E3Z0QsRUFBQTZnRCxVQUFBLE9BSUE3Z0QsRUFBQW1tRCxrQkFBQSxXQUNBbm1ELEVBQUErZ0QsZ0JBQ0E5aUIsYUFBQWorQixFQUFBK2dELGVBQ0EvZ0QsRUFBQStnRCxjQUFBLE9BSUEvZ0QsRUFBQWlpRCxxQkFBQSxXQUNBLElBQUF2QixFQUFBMWdELEVBQUEwZ0QsUUFDQTVtRCxFQUFBa0csRUFBQWxHLE1BRUFrRyxFQUFBZ2hELFNBQ1E3TSxJQUFPdU0sR0FBQXJNLElBQUEsR0FBQTV5QyxPQUFBM0gsRUFBQW1ILFVBQUEsYUFFUGt6QyxJQUFPdU0sR0FBQXBQLE9BQUEsR0FBQTd2QyxPQUFBM0gsRUFBQW1ILFVBQUEsY0FJZmpCLEVBQUFrakQsV0FBQSxTQUFBN0wsRUFBQXdLLEdBQ0EsR0FBQUEsR0FBQXhLLEVBQUEsQ0FDQSxJQUFBaHJDLEVBQUFyTSxFQUFBa2lELGtCQUdBa0UsRUFEQWgrQixTQUNBZytCLGNBRUEvNUMsSUFBQWdyQyxHQUE4Qm1CLEVBQTBCeDRDLEVBQUFsRyxRQUN4RHNzRCxJQUFBLzVDLElBQ0FBLEVBQUExSixRQUNBM0MsRUFBQWdoRCxVQUFBLEdBRVNvRixJQUFBcG1ELEVBQUEyZ0QsY0FBQTNnRCxFQUFBMmdELGVBQ1QzZ0QsRUFBQTJnRCxhQUFBaCtDLFFBRUEzQyxFQUFBZ2hELFVBQUEsS0FLQWhoRCxFQUFBdWlELGVBQUEsU0FBQThELEVBQUE1bUQsR0FDQSxJQUFBM0YsRUFBQWtHLEVBQUFsRyxNQUVBLElBQUFBLEVBQUF5SCxXQUFBdkIsRUFBQXNtRCxnQkFBQUQsR0FBQSxDQUtBNW1ELEtBQUF3TSxpQkFDQXhNLEVBQUF3TSxrQkFHQSxJQUNBelUsRUFEQXdJLEVBQUEwQyxNQUFBbEwsTUFDQThhLE9BQUEsU0FBQXdtQyxHQUNBLE9BQUFBLElBQUF1TixJQUlBLEdBRndCOU4sRUFBZ0J6K0MsR0FFeEMsQ0FDQSxJQUFBbWEsRUFBQW95QyxFQUVBdnNELEVBQUErOEMsZUFDQTVpQyxHQUNBOWIsSUFBQWt1RCxFQUNBcmhELE1BQUFoRixFQUFBc2tELHNCQUFBK0IsS0FJQXZzRCxFQUFBMnRCLFlBQ0EzdEIsRUFBQTJ0QixXQUFBeFQsRUFBQWpVLEVBQUFpa0QsdUJBQUFvQyxJQUlBcm1ELEVBQUEyaEQsV0FBQW5xRCxLQUdBd0ksRUFBQXFpRCxrQkFBQSxXQUNBLElBQUF2b0QsRUFBQWtHLEVBQUFsRyxPQUVVeVQsRUFBQSxTQUFjK1csTUFBQXhxQixFQUFBaEMsV0FBMEIyZ0QsRUFBWTMrQyxLQUM5RGtHLEVBQUE0aEQsY0FBQSxJQUlBNWhELEVBQUEyaUQsV0FBQSxTQUFBbnJELEdBQ0F3SSxFQUFBbEcsTUFBQXdmLFVBQ0F0WixFQUFBbEcsTUFBQXdmLFNBQUF0WixFQUFBcWtELG1CQUFBN3NELEdBQUF3SSxFQUFBaWtELHVCQUFBenNELEtBSUF3SSxFQUFBMmhELFdBQUEsU0FBQW5xRCxHQUNBLElBQUFzQyxFQUFBa0csRUFBQWxHLE1BRUEsVUFBQUEsR0FDQWtHLEVBQUErTCxVQUNBdlUsU0FDU3dJLEVBQUEyakQsaUJBR1QsSUFBQWEsRUFBQXhrRCxFQUFBd2pELGlCQUFBaHNELEdBRUE0eEIsRUFBQXBwQixFQUFBa2tELHdCQUFBMXNELEdBRUFzQyxFQUFBMEcsVUFDQTFHLEVBQUEwRyxTQUFBZ2tELEVBQTRCak0sRUFBZ0J2NEMsRUFBQWxHLE9BQUFzdkIsSUFBQSxLQUk1Q3BwQixFQUFBc21ELGdCQUFBLFNBQUFudUQsR0FDQSxPQUFhUCxFQUFlb0ksRUFBQWxHLE1BQUFoQyxVQUFBaUUsS0FBQSxTQUFBakIsR0FFNUIsT0FEeUJ1OUMsRUFBaUJ2OUMsS0FDMUMzQyxHQUFBMkMsRUFBQWhCLE9BQUFnQixFQUFBaEIsTUFBQXlILFlBSUF2QixFQUFBMmpELGdCQUFBLFdBQ0EzakQsRUFBQTBDLE1BQUEyMEMsTUFJQXIzQyxFQUFBeWdELGtCQUFBemdELEVBQUF5Z0QsaUJBQUE3QyxZQUNBNTlDLEVBQUF5Z0QsaUJBQUE3QyxXQUFBK0YsbUJBSUEzakQsRUFBQXVtRCxvQkFBQSxXQUNBLElBQUFyOEMsRUFBQWxLLEVBQUEwQyxNQUFBd0gsV0FDQWlkLEVBQUFubkIsRUFBQWxHLE1BQ0FoQyxFQUFBcXZCLEVBQUFydkIsU0FDQTJTLEVBQUEwYyxFQUFBMWMsS0FDQTVCLEVBQUFzZSxFQUFBdGUsZ0JBQ0EreEMsS0FDQTRMLEtBQ0FoSSxHQUFBLEVBRUFwMUIsRUFBQXBwQixFQUFBeW1ELGdDQUFBM3VELEVBQUEwdUQsRUFBQTVMLEdBRUEsR0FBQW53QyxFQUFBLENBRUEsSUFBQWpULEVBQUF3SSxFQUFBMEMsTUFBQWxMLE9BQ0FBLElBQUE4YSxPQUFBLFNBQUF3bUMsR0FDQSxXQUFBME4sRUFBQTdtRCxRQUFBbTVDLE1BQUE1dUMsR0FBQTJZLE9BQUFpMkIsR0FBQW41QyxRQUFBa2pCLE9BQUEzWSxLQUFBLE1BR0E0USxLQUFBLFNBQUE0ckMsRUFBQUMsR0FDQSxPQUFBRCxFQUFBeHVELE9BQUF5dUQsRUFBQXp1RCxTQUVBVixFQUFBcUQsUUFBQSxTQUFBaStDLEdBQ0EsSUFBQTNnRCxFQUFBMmdELEVBQ0E4TixFQUF5QnI1QyxFQUFBLGNBQW9Cb3VDLEVBQUEsTUFDN0NuakQsTUFBbUJ3Z0QsRUFDbkJ4cUIsS0FBQSxTQUNBcTRCLFVBQXVCMU4sRUFDdkIzaEQsTUFBQVcsRUFDQUEsT0FDV0EsR0FDWGl4QixFQUFBcnVCLEtBQUE2ckQsR0FDQWhNLEVBQUE3L0MsS0FBQTZyRCxLQUdBMThDLEdBQUEwd0MsRUFBQWgvQixNQUFBLFNBQUFzTixHQUNBLE9BQWlCbXZCLEVBQWlCbnZCLEtBQUFoZixLQUVsQ2tmLEVBQUF2TixRQUEwQnRPLEVBQUEsY0FBb0JvdUMsRUFBQSxNQUM5Q25qRCxNQUFtQndnRCxFQUNuQnhxQixLQUFBLFNBQ0FxNEIsVUFBdUIxTixFQUN2QjNoRCxNQUFBMFMsRUFDQS9SLElBQUErUixHQUNXQSxJQWdCWCxPQVpBa2YsRUFBQWx4QixRQUFBMlEsSUFDQTIxQyxHQUFBLEVBQ0FwMUIsR0FBbUI3YixFQUFBLGNBQW9Cb3VDLEVBQUEsTUFDdkNuakQsTUFBaUJ3Z0QsRUFDakI2TixVQUFxQjFOLEVBQ3JCNTNDLFVBQUEsRUFDQWl0QixLQUFBLFNBQ0FoM0IsTUFBQSxZQUNBVyxJQUFBLGFBQ1MwUSxNQUlUMjFDLFFBQ0FwMUIsWUFJQXBwQixFQUFBeW1ELGdDQUFBLFNBQUEzdUQsRUFBQTB1RCxFQUFBNUwsR0FDQSxJQUFBa00sS0FDQWh0RCxFQUFBa0csRUFBQWxHLE1BQ0FvUSxFQUFBbEssRUFBQTBDLE1BQUF3SCxXQUNBTyxFQUFBM1EsRUFBQTJRLEtBaUVBLE9BaEVNOEMsRUFBQSxTQUFjMVMsUUFBQS9DLEVBQUEsU0FBQWdELEdBQ3BCLEdBQUFBLEVBQUEsQ0FJQSxJQUFBaUksRUFBQWpJLEVBQUFpSSxLQUVBLEdBQUFBLEVBQUFrekMsaUJBQUEsQ0FDQSxJQUFBanhDLEVBQUFsSyxFQUFBaEIsTUFBQWtMLE1BQ0E3TSxFQUFBMkMsRUFBQTNDLElBU0EsR0FQQUEsR0FBQSxpQkFBQTZNLEdBRVdBLEdBQUE3TSxJQUNYNk0sRUFBQTdNLEdBRkFBLEVBQUE2TSxFQU1Ba0YsR0FBQWxLLEVBQUFpM0MsYUFBQS9zQyxFQUFBcFAsR0FBQSxDQUNBLElBQUFpc0QsRUFBNkJudkQsRUFBZWtELEVBQUFoQixNQUFBaEMsVUFBQTZPLElBQUEsU0FBQXFnRCxHQUM1QyxJQUFBQyxFQUFrQzVPLEVBQWlCMk8sTUFBQTd1RCxJQUNuRCxPQUFxQm9WLEVBQUEsY0FBb0JvdUMsRUFBQSxLQUFVOEQsSUFDbkR0bkQsSUFBQTh1RCxFQUNBenZELE1BQUF5dkQsR0FDZUQsRUFBQWx0RCxVQUVmZ3RELEVBQUEvckQsS0FBcUJ3UyxFQUFBLGNBQW9Cb3VDLEVBQUEsV0FDekN4akQsTUFDQXFqQixNQUFBeFcsR0FDYStoRCxRQUNGLENBQ1gsSUFBQUcsRUFBQWxuRCxFQUFBeW1ELGdDQUFBM3JELEVBQUFoQixNQUFBaEMsU0FBQTB1RCxFQUFBNUwsR0FFQXNNLEVBQUFodkQsUUFDQTR1RCxFQUFBL3JELEtBQXVCd1MsRUFBQSxjQUFvQm91QyxFQUFBLFdBQzNDeGpELE1BQ0FxakIsTUFBQXhXLEdBQ2VraUQsU0E5QmYsQ0FxQ1FDLElBQU9wa0QsRUFBQWcwQyxlQUFBLDJGQUFBdDFDLE9BQUFzQixFQUFBMUIsTUFBQTBCLEVBQUEwNUMsYUFBQTNoRCxFQUFBaUksS0FBQSxPQUNmLElBQUFxa0QsRUFBeUIvTyxFQUFpQnY5QyxHQUcxQyxHSGw2Qk8sU0FBQXRELEVBQUFzQyxHQUNQLElBQUEyK0MsRUFBQTMrQyxLQXRJTyxTQUFBQSxHQUNQLE9BQUFBLEVBQUEwUSxTQXFJQTY4QyxDQUFBdnRELElBSUEsaUJBQUF0QyxFQUNBLFVBQUFzL0MsTUFBQSw0QkFBQXIxQyxjQUFBakssRUFBQSwrRUcwNUJROHZELENBQW1CRixFQUFBcG5ELEVBQUFsRyxPQUUzQmtHLEVBQUFpM0MsYUFBQS9zQyxFQUFBcFAsR0FBQSxDQUNBLElBQUE4ckQsRUFBeUJyNUMsRUFBQSxjQUFvQm91QyxFQUFBLEtBQVU4RCxJQUN2RGpuRCxNQUFtQndnRCxFQUNuQjZOLFVBQXVCMU4sRUFDdkIzaEQsTUFBQTR2RCxFQUNBanZELElBQUFpdkQsRUFDQTU0QixLQUFBLFVBQ1cxekIsRUFBQWhCLFFBQ1hndEQsRUFBQS9yRCxLQUFBNnJELEdBQ0FoTSxFQUFBNy9DLEtBQUE2ckQsR0FHQW44QyxHQUNBKzdDLEVBQUF6ckQsS0FBQXFzRCxPQUdBTixHQUdBOW1ELEVBQUF1bkQscUJBQUEsV0FDQSxJQUFBenRDLEVBQUE5WixFQUFBMEMsTUFDQTIwQyxFQUFBdjlCLEVBQUF1OUIsS0FDQW50QyxFQUFBNFAsRUFBQTVQLFdBQ0ExUyxFQUFBd0ksRUFBQTBDLE1BQUFsTCxNQUNBc0MsRUFBQWtHLEVBQUFsRyxNQUNBb1AsRUFBQXBQLEVBQUFvUCxxQkFDQWpJLEVBQUFuSCxFQUFBbUgsVUFDQTIyQyxFQUFBOTlDLEVBQUE4OUMsaUJBQ0FDLEVBQUEvOUMsRUFBQSs5QyxZQUNBL3VDLEVBQUFoUCxFQUFBZ1AsV0FDQWdCLEVBQUFoUSxFQUFBZ1EsV0FDQWd1QyxFQUFBaCtDLEVBQUFnK0Msa0JBQ0E1MkMsRUFBQSxHQUFBTyxPQUFBUixFQUFBLHdCQUVBdW1ELEVBQUEsS0FFQSxHQUFVL08sRUFBWTMrQyxHQUFBLENBQ3RCLElBQUEwb0QsRUFBQSxLQUVBLEdBQUFockQsRUFBQVUsT0FBQSxDQUNBLElBQUF1dkQsR0FBQSxFQUNBQyxFQUFBLEVBRUE1K0MsR0FFV3V1QyxHQUNYb1EsR0FBQXY5QyxLQUdBdzlDLEVBQUEsSUFMQUQsR0FBQSxFQVdBLElBQUEzTyxFQUFBdGhELEVBQUEsR0FFQW13RCxFQUFBM25ELEVBQUE0akQsMkJBQUE5SyxHQUNBOXpDLEVBQUEyaUQsRUFBQTNpRCxNQUNBd1csRUFBQW1zQyxFQUFBbnNDLE1BRUFnbkMsRUFBMEJqMUMsRUFBQSxjQUFtQixPQUM3Q3BWLElBQUEsUUFDQStJLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSw2QkFDQXVhLE1BQW1CNDhCLEVBQU81OEIsR0FBQXhXLEdBQzFCeE0sT0FDQXUxQixRQUFBMDVCLEVBQUEsZUFDQUMsWUFFVzFpRCxHQU1Yd2lELEVBSEExK0MsR0FHQTA1QyxFQUFzQ2oxQyxFQUFBLGNBQW1CLE9BQ3pEck0sVUFBQSxHQUFBTyxPQUFBUixFQUFBLFlBQUFRLE9BQUFSLEVBQUEsbUJBQ0E5SSxJQUFBLFFBQ0FLLE9BQ0F1MUIsUUFBQXNwQixFQUFBLGlCQUVXcjNDLEVBQUFnNEMscUJBUlh3SyxPQVVPLENBQ1AsSUFFQW9GLEVBRkFDLEtBQ0FDLEVBQUF0d0QsRUFHQSxRQUFBc0ssSUFBQSsxQyxHQUFBcmdELEVBQUFVLE9BQUEyL0MsRUFBQSxDQUNBaVEsSUFBQXJ2QyxNQUFBLEVBQUFvL0IsR0FFQSxJQUFBa1EsRUFBQS9uRCxFQUFBd2pELGlCQUFBaHNELEVBQUFpaEIsTUFBQW8vQixFQUFBcmdELEVBQUFVLFNBRUE4dkQsRUFBQSxLQUFBdm1ELE9BQUFqSyxFQUFBVSxPQUFBMi9DLEVBQUEsUUFFQUMsSUFDQWtRLEVBQUEsbUJBQUFsUSxJQUFBaVEsR0FBQWpRLEdBR0E4UCxFQUFnQ3I2QyxFQUFBLGNBQW1CLEtBQU9reUMsSUFDMURqbkQsTUFBbUJ3Z0QsR0FDTkcsR0FDYjNxQixLQUFBLGVBQ0EydEIsWUFBeUJ2RCxFQUN6QjEzQyxVQUFBLEdBQUFPLE9BQUFSLEVBQUEsdUJBQUFRLE9BQUFSLEVBQUEsZ0NBQ0E5SSxJQUFBLG9CQUNBcWpCLE1BQW1CNDhCLEVBQU80UCxLQUNaejZDLEVBQUEsY0FBbUIsT0FDakNyTSxVQUFBLEdBQUFPLE9BQUFSLEVBQUEsZ0NBQ1crbUQsSUFHQ3pQLEVBQWdCeitDLEtBQzVCK3RELEVBQUFDLEVBQUFuaEQsSUFBQSxTQUFBbXlDLEdBQ0EsSUFBQXB6QixFQUFBMWxCLEVBQUE0akQsMkJBQUE5SyxHQUVBa1AsRUFBQXRpQyxFQUFBMWdCLE1BQ0F3VyxFQUFBa0ssRUFBQWxLLE9BQUF3c0MsRUFFQXBRLEdBQUEsaUJBQUFvUSxLQUFBOXZELE9BQUEwL0MsSUFDQW9RLEVBQUEsR0FBQXZtRCxPQUFBdW1ELEVBQUF2dkMsTUFBQSxFQUFBbS9CLEdBQUEsUUFHQSxJQUFBcjJDLEVBQUF2QixFQUFBc21ELGdCQUFBeE4sR0FFQW1QLEVBQUExbUQsRUFBQSxHQUFBRSxPQUFBUixFQUFBLHVCQUFBUSxPQUFBUixFQUFBLG1DQUFBUSxPQUFBUixFQUFBLHNCQUNBLE9BQW1Cc00sRUFBQSxjQUFtQixLQUFPa3lDLElBQzdDam5ELE1BQXFCd2dELEdBQ05HLEdBQ2ZnRCxZQUEyQnZELEVBQzNCMTNDLFVBQUErbUQsRUFDQXo1QixLQUFBLGVBQ0FyMkIsSUFBQTJnRCxHQUFBZ0gsR0FDQXRrQyxNQUFxQjQ4QixFQUFPNThCLEtBQ1pqTyxFQUFBLGNBQW1CLE9BQ25Dck0sVUFBQSxHQUFBTyxPQUFBUixFQUFBLGdDQUNhK21ELEdBQUF6bUQsRUFBQSxLQUE4QmdNLEVBQUEsY0FBbUIsUUFDOURWLFFBQUEsU0FBQW9ILEdBQ0FqVSxFQUFBdWlELGVBQUF6SixFQUFBN2tDLElBRUEvUyxVQUFBLEdBQUFPLE9BQUFSLEVBQUEsK0JBQ2E2SSxHQUFnQnlELEVBQUEsY0FBbUIsS0FDaERyTSxVQUFBLEdBQUFPLE9BQUFSLEVBQUEsb0NBQ2EsVUFJYjJtRCxHQUNBQyxFQUFBOXNELEtBQUE2c0QsR0FHQUMsRUFBQTlzRCxLQUFnQ3dTLEVBQUEsY0FBbUIsTUFDbkRyTSxVQUFBLEdBQUFPLE9BQUFSLEVBQUEsWUFBQVEsT0FBQVIsRUFBQSxtQkFDQTlJLElBQUEsV0FDUzZILEVBQUFnNEMsb0JBR1R3UCxFQURZalAsRUFBZ0J6K0MsSUFBQW9QLEVBQ05xRSxFQUFBLGNBQW9CMjZDLEVBQUEsU0FDMUNDLFFBQUFub0QsRUFBQTBqRCx1QkFDQTltQixVQUFBLEtBQ0EzekIsZUFBQUMsR0FDVzIrQyxHQUVXdDZDLEVBQUEsY0FBbUIsVUFBQXM2QyxHQUl6QyxPQUFhdDZDLEVBQUEsY0FBbUIsT0FDaENyTSxZQUNBVyxJQUFBN0IsRUFBQW9vRCxnQkFDT3BvRCxFQUFBMmtELHdCQUFBNkMsSUFHUCxJQUFBM0QsRUFBQXo2QyxFQUFBaS9DLHdCQUFBdnVELEdBRUEsR0FBQUEsRUFBQTJRLE1BQUEsbUJBQUEzUSxFQUFBbTlDLGFBQUEsQ0FDQSxJQUFBcVIsRUFBQWp4RCxPQUFBMEMsS0FBQThwRCxHQUFBOW5ELEtBQUEsU0FBQTVELEdBQ0EsT0FBQTByRCxFQUFBMXJELEdBQUFvSixXQUVNNGxELEtBQU9tQixFQUFBLGdHQW1CYixPQWhCQXRvRCxFQUFBMEMsT0FDQWxMLE1BQUE0UixFQUFBbS9DLGtCQUFBenVELEdBQUEsR0FDQW9RLFdBQUFwUSxFQUFBNFEsU0FBQXRCLEVBQUFvL0MseUJBQUExdUQsRUFBQStwRCxHQUFBLE1BQ0F4TSxLQUFBdjlDLEVBQUF3OUMsWUFDQXVNLGNBQ0EvSSxjQUFBLEdBRUEyTixzQkFBQSxFQUNBeE0sT0FBQSxJQUVBajhDLEVBQUFpbEQsYUFBeUJ4b0IsRUFBUW1qQixHQUFzQjUvQyxHQUFBLFlBQ3ZEQSxFQUFBa2xELG1CQUErQnpvQixFQUFRbWpCLEdBQXNCNS9DLEdBQUEsa0JBQzdEQSxFQUFBb29ELGVBQTJCM3JCLEVBQVFtakIsR0FBc0I1L0MsR0FBQSxjQUN6REEsRUFBQTBvRCxxQkFBaUNqc0IsRUFBUW1qQixHQUFzQjUvQyxHQUFBLG9CQUMvREEsRUFBQTJvRCxZQUF3QmxzQixFQUFRbWpCLEdBQXNCNS9DLEdBQUEsV0FDdERBLEVBQUE0b0QsaUJBQTZCbnNCLEVBQVFtakIsR0FBc0I1L0MsR0FBQSxnQkFDM0RBLEVBaVBBLE9BbC9DQSxTQUFrQitCLEVBQUFDLEdBQXdCLHNCQUFBQSxHQUFBLE9BQUFBLEVBQStELFVBQUE3QixVQUFBLHNEQUE2RTRCLEVBQUFqRyxVQUFBekUsT0FBQTRLLE9BQUFELEtBQUFsRyxXQUF5RWlDLGFBQWV2RyxNQUFBdUssRUFBQTVELFVBQUEsRUFBQUQsY0FBQSxLQUEwRDhELEdBQWlCNjlDLEdBQWU5OUMsRUFBQUMsR0E4Q3RXNm1ELENBQVN6L0MsRUFxOENUbUUsRUFBQSxjQTMvQ0YsU0FBcUJyTixFQUFBa0MsRUFBQUMsR0FBd0NELEdBQWlCczlDLEdBQWlCeC9DLEVBQUFwRSxVQUFBc0csR0FBb0NDLEdBQWtCcTlDLEdBQWlCeC9DLEVBQUFtQyxHQTR3Q3BLeW1ELENBQVkxL0MsSUFDZGpSLElBQUEsb0JBQ0FYLE1BQUEsWUFHQWtILEtBQUE1RSxNQUFBa1QsV0FBQXRPLEtBQUFnRSxNQUFBMjBDLE9BQ0EzNEMsS0FBQWlFLFFBR0FqRSxLQUFBcU4sVUFDQWt3QyxPSHZtQ08sV0FLUCxJQUFBakcsR0FBQSxJQUFBNXhCLE1BQUEya0MsVUFRQSxNQVBBLHVDQUFBMXRELFFBQUEsaUJBQUFyRCxHQUVBLElBQUFneEQsR0FBQWhULEVBQUEsR0FBQWprQyxLQUFBazNDLFVBQUEsS0FHQSxPQUZBalQsRUFBQWprQyxLQUFBa0csTUFBQSs5QixFQUFBLEtBRUEsTUFBQWgrQyxFQUFBZ3hELEVBQUEsRUFBQUEsRUFBQSxHQUFBM2hELFNBQUEsTUc0bENnQjZoRCxRQUloQi93RCxJQUFBLHFCQUNBWCxNQUFBLFdBQ0EsR0FBVStnRCxFQUFnQjc1QyxLQUFBNUUsT0FBQSxDQUMxQixJQUFBbXBELEVBQUF2a0QsS0FBQXdqRCxrQkFDQWlILEVBQUF6cUQsS0FBQTBtRCx3QkFFQW5DLEtBQUF6ckQsT0FBQTJ4RCxHQUNBbEcsRUFBQXpxRCxNQUFBOGlCLE1BQUEsR0FDQTJuQyxFQUFBenFELE1BQUE4aUIsTUFBQSxHQUFBN1osT0FBQTBuRCxFQUFBM2pCLFlBQUEsT0FDU3lkLElBQ1RBLEVBQUF6cUQsTUFBQThpQixNQUFBLElBSUE1YyxLQUFBaWxELHFCQUdBeHJELElBQUEsdUJBQ0FYLE1BQUEsV0FDQWtILEtBQUF3bkQsaUJBQ0F4bkQsS0FBQXFqRCxnQkFDQXJqRCxLQUFBeW5ELG9CQUVBem5ELEtBQUFraUQsb0JBQ1ExRyxFQUFBLHVCQUErQng3QyxLQUFBa2lELG1CQUN2Q3g0QixTQUFBMU4sS0FBQWdyQixZQUFBaG5DLEtBQUFraUQsbUJBQ0FsaUQsS0FBQWtpRCxrQkFBQSxTQUlBem9ELElBQUEsUUFDQVgsTUFBQSxXQUNVaWhELEVBQVkvNUMsS0FBQTVFLFFBQUE0RSxLQUFBaWlELGFBQ3RCamlELEtBQUFpaUQsYUFBQWgrQyxRQUNPakUsS0FBQXdqRCxtQkFDUHhqRCxLQUFBd2pELGtCQUFBdi9DLFdBSUF4SyxJQUFBLE9BQ0FYLE1BQUEsV0FDVWloRCxFQUFZLzVDLEtBQUE1RSxRQUFBNEUsS0FBQWlpRCxhQUN0QmppRCxLQUFBaWlELGFBQUEvOUMsT0FDT2xFLEtBQUF3akQsbUJBQ1B4akQsS0FBQXdqRCxrQkFBQXQvQyxVQUlBekssSUFBQSxjQUNBWCxNQUFBLFNBQUFnVCxHQUVBLElBQUFtakMsRUFBQWp2QyxLQUFBNUUsTUFDQXN2RCxFQUFBemIsRUFBQTFqQyxVQUNBQSxPQUFBLElBQUFtL0MsR0FBQTUrQyxFQUFBNCtDLEVBQ0EvOUMsRUFBQXNpQyxFQUFBdGlDLFFBQ0FMLEVBQUEyaUMsRUFBQTNpQyxVQUNBL0osRUFBQTBzQyxFQUFBMXNDLFVBRUEsSUFBQWdKLElBQUFvQixFQUNBLFlBSUEsSUFBQWcrQyxFQUFBaCtDLEVBQWtDa0MsRUFBQSxjQUFtQixLQUNyRHJNLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxvQkFDV3NNLEVBQUEsY0FBbUIsS0FDOUJyTSxVQUFBLEdBQUFPLE9BQUFSLEVBQUEsaUJBRUEsT0FBYXNNLEVBQUEsY0FBbUIsT0FBU2t5QyxJQUN6Q3RuRCxJQUFBLFFBQ0ErSSxVQUFBLEdBQUFPLE9BQUFSLEVBQUEsVUFDQXpJLE1BQWV3Z0QsR0FDTkcsR0FDVHRzQyxRQUFBbk8sS0FBQW9rRCxlQUNPOTNDLEdBQUFxK0MsTUFHUGx4RCxJQUFBLGNBQ0FYLE1BQUEsV0FDQSxJQUFBOHhELEVBQUE1cUQsS0FBQTVFLE1BQ0FtSCxFQUFBcW9ELEVBQUFyb0QsVUFDQWkyQyxFQUFBb1MsRUFBQXBTLFdBQ0FudEMsRUFBQXUvQyxFQUFBdi9DLFVBQ0FHLEVBQUF4TCxLQUFBZ0UsTUFBQXdILFdBQ0ExUyxFQUFBa0gsS0FBQWdFLE1BQUFsTCxNQUNBdW5CLEVBQWtCeFIsRUFBQSxjQUFtQixPQUFTa3lDLElBQzlDdG5ELElBQUEsUUFDQStJLFVBQUEsR0FBQU8sT0FBQVIsRUFBQSxxQkFDQWs3QyxZQUFxQnZELEVBQ3JCcGdELE1BQWV3Z0QsR0FDTkcsR0FDVHRzQyxRQUFBbk8sS0FBQStrRCxtQkFDTzE1QyxHQUFnQndELEVBQUEsY0FBbUIsS0FDMUNyTSxVQUFBLEdBQUFPLE9BQUFSLEVBQUEsMkJBQ08sTUFFUCxPQUFBaTJDLEVBSVU1c0MsRUFBVTVMLEtBQUE1RSxPQUNwQm9RLEVBQ0E2VSxFQUdBLEtBR0E3VSxHQUFBMVMsRUFBQVUsT0FDQTZtQixFQUdBLEtBZkEsUUFrQkE1bUIsSUFBQSxTQUNBWCxNQUFBLFdBQ0EsSUFBQSt4RCxFQUVBenZELEVBQUE0RSxLQUFBNUUsTUFDQTBRLEVBQXFCK3RDLEVBQWdCeitDLEdBRXJDMHZELEVBQUExdkQsRUFBQW1RLFVBQ0FBLE9BQUEsSUFBQXUvQyxLQUNBOW1ELEVBQUFoRSxLQUFBZ0UsTUFDQXhCLEVBQUFwSCxFQUFBb0gsVUFDQUssRUFBQXpILEVBQUF5SCxTQUNBTixFQUFBbkgsRUFBQW1ILFVBQ0FvSyxFQUFBdlIsRUFBQXVSLFFBQ0FvK0MsRUFBQS9xRCxLQUFBNm9ELHVCQUNBdnJDLEVBQUF0ZCxLQUFBZ0UsTUFDQTIwQyxFQUFBcjdCLEVBQUFxN0IsS0FDQTRFLEVBQUFqZ0MsRUFBQWlnQyxPQUVBLEdBQUE1RSxFQUFBLENBQ0EsSUFBQXFTLEVBQUFockQsS0FBQTZuRCxzQkFDQTduRCxLQUFBeWlELE9BQUF1SSxFQUFBbEwsTUFDQTkvQyxLQUFBd2lELFNBQUF3SSxFQUFBdGdDLFFBR0EsSUFBQXVnQyxFQUFBanJELEtBQUEwakQsbUJBQ0E1RCxFQUFBOS9DLEtBQUF5aUQsT0FDQS8zQixFQUFBMXFCLEtBQUF3aUQsYUFDQTBJLEtBQ0F2eUQsT0FBQTBDLEtBQUFELEdBQUFlLFFBQUEsU0FBQTFDLElBQ0FkLE9BQUF5RSxVQUFBMkIsZUFBQXpCLEtBQUFsQyxFQUFBM0IsSUFBQSxVQUFBQSxFQUFBK0IsT0FBQSxnQkFBQS9CLEVBQUErQixPQUFBLGVBQUEvQixJQUNBeXhELEVBQUF6eEQsR0FBQTJCLEVBQUEzQixNQVdBLElBQUEweEQsRUFBZ0NwSyxNQUFXbUssR0FFaENwUixFQUEwQjErQyxLQUNyQyt2RCxFQUE4QnBLLE1BQVdvSyxHQUN6QzU3QixVQUFBdnZCLEtBQUF1dkIsVUFDQXJoQixTQUFBOVMsRUFBQXlILFVBQUEsRUFBQXpILEVBQUE4UyxZQUlBLElBQUFrOUMsR0FBb0N0SyxHQUFwQytKLEtBQW1Ecm9ELE9BQW9DcytDLEdBQWUrSixFQUFBdG9ELEVBQUEsR0FBMEJ1K0MsR0FBZStKLEVBQUEsR0FBQTluRCxPQUFBUixFQUFBLFNBQUFvMkMsR0FBaURtSSxHQUFlK0osRUFBQSxHQUFBOW5ELE9BQUFSLEVBQUEsWUFBQW8yQyxLQUFBMzRDLEtBQUFzaUQsVUFBdUV4QixHQUFlK0osRUFBQSxHQUFBOW5ELE9BQUFSLEVBQUEsYUFBOENxSixFQUFVeFEsSUFBVTBsRCxHQUFlK0osRUFBQSxHQUFBOW5ELE9BQUFSLEVBQUEsYUFBQU0sR0FBeURpK0MsR0FBZStKLEVBQUEsR0FBQTluRCxPQUFBUixFQUFBLGFBQUFNLEdBQXlEaStDLEdBQWUrSixFQUFBLEdBQUE5bkQsT0FBQVIsRUFBQSxrQkFBQW5ILEVBQUFvOUMsWUFBc0VzSSxHQUFlK0osRUFBQSxHQUFBOW5ELE9BQUFSLEVBQUEsY0FBQWdKLEdBQTJEdTFDLEdBQWUrSixFQUFBLEdBQUE5bkQsT0FBQVIsRUFBQSxjQUFBb0ssR0FBQWsrQyxHQUNycUIsT0FBYWg4QyxFQUFBLGNBQW9CMnZDLElBQ2pDaEIsYUFBQXg5QyxLQUFBdzlDLGFBQ0F2NkMsYUFBQWpELEtBQUE1RSxNQUFBNkgsYUFDQUMsYUFBQWxELEtBQUE1RSxNQUFBOEgsYUFDQTY4QyxjQUFBM2tELEVBQUEya0QsY0FDQUMsa0JBQUE1a0QsRUFBQTRrRCxrQkFDQUMseUJBQUE3a0QsRUFBQTZrRCx5QkFDQTNILHlCQUFBbDlDLEVBQUFrOUMseUJBQ0E2RSxrQkFBQS9oRCxFQUFBK2hELGtCQUNBNXlDLGVBQUFuUCxFQUFBbVAsZUFDQW11QyxVQUFBdDlDLEVBQUFzOUMsVUFDQW4yQyxVQUFBbkgsRUFBQW1ILFVBQ0EwMkMsY0FBQTc5QyxFQUFBNjlDLGNBQ0FqdEMsU0FBQTVRLEVBQUE0USxTQUNBNUIsV0FBQWhQLEVBQUFnUCxXQUNBc2dCLFVBQ0FvMUIsUUFDQWgwQyxXQUNBakosV0FDQWlrQixRQUFBbWtDLEVBQ0F6L0MsV0FBQXhILEVBQUF3SCxXQUNBMVMsTUFBQWtMLEVBQUFsTCxNQUNBc2pELGNBQUFwNEMsRUFBQW80QyxjQUNBVixpQkFBQXRnRCxFQUFBc2dELGlCQUNBZ0Ysd0JBQUExZ0QsS0FBQTBnRCx3QkFDQTMxQyxrQkFBQTNQLEVBQUEyUCxrQkFDQW94QyxhQUFBbjhDLEtBQUFtOEMsYUFDQUUsZUFBQXI4QyxLQUFBcThDLGVBQ0F2RCxjQUFBMTlDLEVBQUEwOUMsY0FDQVMsV0FBQW4rQyxFQUFBbStDLFdBQ0FwMkMsSUFBQW5ELEtBQUFncUQscUJBQ0ExK0MscUJBQUFsUSxFQUFBa1EscUJBQ0FrdUMsZUFBQXArQyxFQUFBbytDLGVBQ0ErRCxVQUNTMXVDLEVBQUEsY0FBbUIsT0FDNUJwRSxHQUFBclAsRUFBQXFQLEdBQ0EzUSxNQUFBc0IsRUFBQXRCLE1BQ0FxSixJQUFBbkQsS0FBQWlxRCxZQUNBNTdDLE9BQUFyTyxLQUFBeWtELFlBQ0FyMkMsUUFBQXBPLEtBQUFza0QsYUFDQTloRCxVQUFtQmtNLElBQVUwOEMsR0FDN0IzTixZQUFBejlDLEtBQUFtbkQsY0FDQWtFLFVBQUFyckQsS0FBQW9uRCxlQUNBa0UsV0FBQXRyRCxLQUFBb25ELGdCQUNTdjRDLEVBQUEsY0FBbUIsTUFBUWt5QyxJQUNwQzU5QyxJQUFBbkQsS0FBQWtxRCxpQkFDQXp3RCxJQUFBLFlBQ0ErSSxVQUFBLEdBQUFPLE9BQUFSLEVBQUEsNEJBQUFRLE9BQUFSLEVBQUEsZ0JBQUFRLE9BQUErSSxFQUFBLHFCQUNBZ2tCLEtBQUEsV0FDQXk3QixvQkFBQSxPQUNBQyxnQkFBQSxPQUNBQyxnQkFBQWxPLEVBQ0FtTyxnQkFBQVQsR0FDT0UsR0FBQUosRUFBQS9xRCxLQUFBMnJELGNBQUEzckQsS0FBQTRyRCxjQUFBOS9DLFVBSVBwQixFQXI4Q0EsR0F3OENBKzJDLEdBQU0xMEMsVUFBYTdPLEVBQ25CdWpELEdBQU1yOUMsY0FDTjdCLFVBQUEsWUFDQXEyQyxhQUFBLEVBQ0FULGNBQUEsRUFDQUcsMEJBQUEsRUFDQWx1QyxZQUFBLEVBQ0FvdUMsWUFBQSxFQUNBUSxZQUFBLEdBQ0FsM0MsU0FBQXFPLEdBQ0EvQixRQUFBK0IsR0FDQTlCLE9BQUE4QixHQUNBeUssU0FBQXpLLEdBQ0Ewb0MsU0FBQTFvQyxHQUNBNFksV0FBQTVZLEdBQ0E0b0MsZUFBQTVvQyxHQUNBOHZDLDBCQUFBLEVBQ0FoSCxpQkFDQWtFLHFCQUNBMUUsaUJBQUEsUUFDQW51QyxnQkFBQSxRQUNBSCxnQkFBQSxZQUNBazlDLFVBQUEsRUFDQTlOLFlBQUEsU0FDQUYsbUJBQ0E2SyxzQkFBQSxFQUNBaDJDLFNBQUEsRUFDQXNyQyxlQUFBLFNBQUFqc0IsR0FDQSxPQUFBQSxJQUlBazBCLEdBQU0zekMseUJBQUEsU0FBQWpLLEVBQUEwbEIsR0FDTixJQUFBNDdCLEVBQUE1N0IsRUFBQXdnQyxxQkFBQXhnQyxFQUFBNDdCLFlBQTZFMUQsR0FBTWtJLHdCQUFBOWxELEVBQUEwbEIsR0FDbkZ4WCxHQUNBb3pDLGNBQ0E0RSxzQkFBQSxHQU9BLEdBSkEsU0FBQWxtRCxJQUNBa08sRUFBQTRtQyxLQUFBOTBDLEVBQUE4MEMsTUFHQSxVQUFBOTBDLEVBQUEsQ0FDQSxJQUFBL0ssRUFBZ0Iyb0QsR0FBTW9JLGtCQUFBaG1ELEdBQ3RCa08sRUFBQWpaLFFBRUErSyxFQUFBbUksV0FDQStGLEVBQUF2RyxXQUE0QmkyQyxHQUFNcUkseUJBQUFqbUQsRUFBQXNoRCxJQUlsQyxPQUFBcHpDLEdBR0EwdkMsR0FBTW9LLHVCQUFBLFNBQUF6eUQsR0FDTixJQUFBc3hCLEVBQUE3cUIsVUFBQXJHLE9BQUEsUUFBQTRKLElBQUF2RCxVQUFBLEdBQUFBLFVBQUEsTUFjQSxPQWJFZ1AsRUFBQSxTQUFjMVMsUUFBQS9DLEVBQUEsU0FBQWdELEdBQ2hCQSxJQUlBQSxFQUFBaUksS0FFQWt6QyxpQkFDTWtLLEdBQU1vSyx1QkFBQXp2RCxFQUFBaEIsTUFBQWhDLFNBQUFzeEIsR0FFWkEsRUFBQXJ1QixLQUFBRCxNQUdBc3VCLEdBR0ErMkIsR0FBTXFJLHlCQUFBLFNBQUExdUQsRUFBQStwRCxFQUFBMkcsR0FDTixJQUFBaHpELEtBVUEsR0FSQSxVQUFBc0MsSUFBQTB3RCxJQUNBaHpELEVBQVlraEQsRUFBTzUrQyxFQUFBdEMsUUFHbkIsaUJBQUFzQyxHQUFBMHdELElBQ0FoekQsRUFBWWtoRCxFQUFPNStDLEVBQUE0dkIsZ0JBR25CbHlCLEVBQUFVLE9BR0EsU0FHQSxJQUFBOE0sRUFMQXhOLElBQUEsR0FpQkEsT0FWQXNDLEVBQUErOEMsYUFDQTd4QyxFQUFBeE4sRUFBQXdOLE1BQ0c2K0MsRUFBc0JsTCxFQUFTbmhELE1BQ2xDd04sRUFBQTYrQyxFQUF3QmxMLEVBQVNuaEQsSUFBQXdOLFlBR2pDbEQsSUFBQWtELElBQ0FBLEVBQUEsSUFHQUEsR0FHQW03QyxHQUFNc0ssbUJBQUEsU0FBQTN3RCxFQUFBb3ZCLEdBQ04sT0FBU292QixFQUFZcHZCLEVBQUFwdkIsRUFBQWtQLGtCQUdyQm0zQyxHQUFNa0ksd0JBQUEsU0FBQXZ1RCxFQUFBNHdELEdBQ04sSUFDQTdHLEtBWUEsR0FiZ0IxRCxHQUFNb0ssdUJBQUF6d0QsRUFBQWhDLFVBRXRCK0MsUUFBQSxTQUFBcXVCLEdBQ0EsSUFBQTR2QixFQUFzQlQsRUFBaUJudkIsR0FDdkMyNkIsRUFBZ0JsTCxFQUFTRyxLQUN6QjV2QixTQUNBMXhCLE1BQUFzaEQsRUFDQTl6QyxNQUFhbTdDLEdBQU1zSyxtQkFBQTN3RCxFQUFBb3ZCLEdBQ25CMU4sTUFBQTBOLEVBQUFwdkIsTUFBQTBoQixNQUNBamEsU0FBQTJuQixFQUFBcHZCLE1BQUF5SCxZQUlBbXBELEVBQUEsQ0FFQSxJQUFBQyxFQUFBRCxFQUFBN0csWUFDQXJzRCxFQUFBa3pELEVBQUFsekQsTUFFQUEsR0FDQUEsRUFBQXFELFFBQUEsU0FBQWpDLEdBQ0EsSUFBQVQsRUFBa0J3Z0QsRUFBUy8vQyxHQUUzQmlyRCxFQUFBMXJELFNBQUEySixJQUFBNm9ELEVBQUF4eUQsS0FDQTByRCxFQUFBMXJELEdBQUF3eUQsRUFBQXh5RCxNQU1BLE9BQUEwckQsR0FHQTFELEdBQU1vSSxrQkFBQSxTQUFBenVELEVBQUEwd0QsR0FDTixJQUFBaHpELEtBZ0JBLE1BZEEsVUFBQXNDLElBQUEwd0QsSUFDQWh6RCxFQUFZa2hELEVBQU81K0MsRUFBQXRDLFFBR25CLGlCQUFBc0MsR0FBQTB3RCxJQUNBaHpELEVBQVlraEQsRUFBTzUrQyxFQUFBNHZCLGVBR25CNXZCLEVBQUErOEMsZUFDQXIvQyxJQUFBbVAsSUFBQSxTQUFBL04sR0FDQSxPQUFBQSxFQUFBVCxPQUlBWCxHQUdBMm9ELEdBQU0xRCxZQUFBLFNBQ05wbEQsT0FBQXVXLEVBQUEsU0FBQXZXLENBQVM4b0QsSUFDTSxJQUFBeUssR0FBQSxHQ3pxRGZqekQsRUFBQXErQyxFQUFBbG9DLEVBQUEsMkJBQUF2QyxJQUFBNVQsRUFBQXErQyxFQUFBbG9DLEVBQUEsNkJBQUF0QyxJQUFBN1QsRUFBQXErQyxFQUFBbG9DLEVBQUEsb0NBQUFsUixJQUlBZ3VELEdBQU1yL0MsT0FBVUEsRUFDaEJxL0MsR0FBTXAvQyxTQUFZQSxFQUVIc0MsRUFBQSwyUENQQTJnQixFQUlmLEdBSmVBLEVBUWYsR0FSZUEsRUFZZixHQVplQSxFQWdCZixHQ2JPLFNBQUE3MkIsRUFBQUUsR0FFUCxJQUFBRSxLQU1BLE9BTEVxVixFQUFBQyxFQUFLMVMsU0FBQUMsUUFBQS9DLEVBQUEsU0FBQWdELEdBQ1BBLEdBQ0E5QyxFQUFBK0MsS0FBQUQsS0FHQTlDLEVBMENPLFNBQUFvQixFQUFBRSxHQUNQLGVBQUFBLEdBQUEsVUFBQUEsRUFzQk8sU0FBQU8sRUFBQUMsR0FDUCxPQUFBekMsT0FBQTBDLEtBQUFELEdBQUFFLE9BQUEsU0FBQUMsRUFBQTlCLEdBSUEsTUFIQSxVQUFBQSxFQUFBK0IsT0FBQSxnQkFBQS9CLEVBQUErQixPQUFBLGVBQUEvQixJQUNBOEIsRUFBQTlCLEdBQUEyQixFQUFBM0IsSUFFQThCLDhCQ3ZFQTR3RCxRQUFzQnBRLE9BQ2ZxUSxFQUFBRCxFQUFBRSxTQUNBQyxFQUFBSCxFQUFBSSxTQUVQQyxHQUFxQjV2QyxNQUFBLEVBQUFnaUIsT0FBQSxFQUFBMGUsU0FBQSxTQUFBaGhDLFNBQUEsWUFFakJtd0MsRUFBUSxTQUFBcHJELEdBR1osU0FBQXFyRCxJQUNBLElBQUF4cUQsRUFFQW9pQyxFQUFBaGpDLEVBQUFpakMsRUFFSXIzQixJQUFlbE4sS0FBQTBzRCxHQUVuQixRQUFBajRDLEVBQUE1VSxVQUFBckcsT0FBQXlyQixFQUFBOW5CLE1BQUFzWCxHQUFBRSxFQUFBLEVBQW1FQSxFQUFBRixFQUFhRSxJQUNoRnNRLEVBQUF0USxHQUFBOVUsVUFBQThVLEdBR0EsT0FBQTJ2QixFQUFBaGpDLEVBQW9DNkwsSUFBMEJuTixNQUFBa0MsRUFBQXdxRCxFQUFBbnNELFdBQUE1SCxPQUFBMkgsZUFBQW9zRCxJQUFBcHZELEtBQUF5QyxNQUFBbUMsR0FBQWxDLE1BQUErQyxPQUFBa2lCLEtBQUEzakIsRUFBQWl1QixVQUFBLFNBQUF4WixHQUM5RCxJQUFBblcsRUFBQW1XLEVBQUFuVyxPQUNBK3NELEVBQUE1MkMsRUFBQTQyQyxNQUNBejVDLEVBQUE2QyxFQUFBN0MsU0FDQXhHLEVBQUFwTCxFQUFBbEcsTUFDQXd4RCxFQUFBbGdELEVBQUFrZ0QsWUFDQUMsRUFBQW5nRCxFQUFBbWdELFlBRUFGLElBQW9CRyxFQUFBLEVBQU81OEIsS0FBQXhHLFNBQUFnK0IsZ0JBQUE5bkQsS0FHM0JzVCxHQUFBMDVDLEdBQ0FBLEVBQUEzb0QsUUFJQWlQLEdBQUEyNUMsR0FDQUEsRUFBQTVvRCxVQWpCQXNnQyxFQW1CS0QsRUFBVW4zQixJQUEwQjdMLEVBQUFpakMsR0FtQnpDLE9BbkRFMTJCLElBQVM2K0MsRUFBQXJyRCxHQW1DVHFtQyxJQUFZZ2xCLElBQ2RqekQsSUFBQSxTQUNBWCxNQUFBLFdBQ0EsSUFBQTYyQixFQUFBM3ZCLEtBQUE1RSxNQUFBdTBCLE9BR0EsT0FBYWhoQixFQUFBQyxFQUFLNUwsY0FBQSxPQUNsQmtMLFNBQUEsRUFDQS9LLElBQUF3c0IsRUFDQTcxQixNQUFBMHlELEVBQ0FqOUIsVUFBQXZ2QixLQUFBdXZCLFVBQ0FPLEtBQUEscUJBS0E0OEIsRUFwRFksQ0FxRFYvOUMsRUFBQUMsRUFBS25MLFdBRVBncEQsRUFBUTEvQyxXQUNSNGlCLE9BQVU3Z0IsRUFBQUYsRUFBU0ssS0FDbkI0OUMsWUFBZS85QyxFQUFBRixFQUFTbEssT0FDeEJrb0QsWUFBZTk5QyxFQUFBRixFQUFTbEssUUFFVCxJQUFBcW9ELEVBQUEsRUMvRFhDLEVBQU8sU0FBQTNyRCxHQUdYLFNBQUF5M0IsSUFHQSxPQUZJNXJCLElBQWVsTixLQUFBODRCLEdBRVIzckIsSUFBMEJuTixNQUFBODRCLEVBQUF2NEIsV0FBQTVILE9BQUEySCxlQUFBdzRCLElBQUEvNEIsTUFBQUMsS0FBQUgsWUFtRXJDLE9BeEVFZ08sSUFBU2lyQixFQUFBejNCLEdBUVRxbUMsSUFBWTVPLElBQ2RyL0IsSUFBQSxTQUNBWCxNQUFBLFdBQ0EsSUFBQXNGLEVBRUE0UCxFQUFBaE8sS0FBQTVFLE1BQ0FxUCxFQUFBdUQsRUFBQXZELEdBQ0FqSSxFQUFBd0wsRUFBQXhMLFVBQ0ErNUIsRUFBQXZ1QixFQUFBdXVCLHVCQUNBRCxFQUFBdHVCLEVBQUFzdUIsT0FDQWhULEVBQUF0YixFQUFBc2IsWUFDQWtULEVBQUF4dUIsRUFBQXd1QixjQUNBMWlDLEVBQUFrVSxFQUFBbFUsTUFDQVYsRUFBQTRVLEVBQUE1VSxTQUNBNC9DLEVBQUFockMsRUFBQWdyQyxZQUNBdjJDLEVBQXNCK0wsSUFBd0JSLEdBQUEsb0hBRTlDaE8sS0FBQWl0RCxXQUFBanRELEtBQUFpdEQsWUFBQTN3QixFQUNBLElBQUEvNUIsRUFBQWk2QixFQUFBLFdBQ0E3d0IsRUFBZ0IrQyxLQUFVdFEsS0FBb0I4ckMsSUFBZTlyQyxFQUFBbUUsRUFBQSxHQUE2QjJuQyxJQUFlOXJDLEVBQUFtRSxFQUFBLGFBQUErNUIsR0FBaUQ0TixJQUFlOXJDLEVBQUFtRSxFQUFBLFVBQUErNUIsR0FBOEM0TixJQUFlOXJDLEVBQUFvRSxLQUFBcEUsSUFFdE8rdEMsR0FEQTVQLEVBQUFELEVBQUF0OEIsS0FBQWl0RCxhQUNBM2pDLEVBRUEsT0FBYTNhLEVBQUFDLEVBQUs1TCxjQUNWc3BELEVBQ1IsS0FDQSxTQUFBcHFELEdBQ0EsSUFBQWdyRCxFQUFBaHJELEVBQUFnckQsY0FDQUMsRUFBQWpyRCxFQUFBaXJELFlBQ0FDLEVBQUFsckQsRUFBQWtyRCxzQkFDQUMsRUFBQW5yRCxFQUFBbXJELG9CQUdBQyxPQUFBLEVBQ0FDLE9BQUEsRUFZQSxPQVhBanhCLEdBQUE2UCxJQUNBbWhCLEVBQWlDMytDLEVBQUFDLEVBQUs1TCxjQUFlK3BELEdBQ3JEcDlCLE9BQUF5OUIsRUFDQVAsWUFBQUssSUFFQUssRUFBK0I1K0MsRUFBQUMsRUFBSzVMLGNBQWUrcEQsR0FDbkRwOUIsT0FBQTA5QixFQUNBVCxZQUFBTyxLQUlpQngrQyxFQUFBQyxFQUFLNUwsY0FDdEIsTUFDWXNLLEtBQ1p4VCxRQUNBZzJCLEtBQUEsV0FDQTA5QixjQUFBbHhCLEVBQUEsZUFDQTk1QixVQUFBbUosRUFDQWxCLE1BQ2V0UCxFQUFXc0gsSUFDMUI2cUQsRUFDQW5oQixFQUFBL3lDLEVBQUE0L0MsRUFDQXVVLFNBT0F6MEIsRUF6RVcsQ0EwRVRucUIsRUFBQUMsRUFBS25MLFdBRVFncUQsRUFBQSxFQ3RFZixTQUFBQyxFQUFBdHlELEdBQ0EsSUFBQS9CLE9BQUEsRUFNQSxPQUxFc1YsRUFBQUMsRUFBSzFTLFNBQUFDLFFBQUFmLEVBQUFoQyxTQUFBLFNBQUFnRCxJQUNQQSxHQUFBL0MsR0FBQStDLEVBQUFoQixNQUFBeUgsV0FDQXhKLEVBQUErQyxFQUFBM0MsT0FHQUosRURrRUEyekQsRUFBT2pnRCxXQUNQdkssVUFBYXNNLEVBQUFGLEVBQVM1RSxPQUN0QnN5QixPQUFVeHRCLEVBQUFGLEVBQVN2RSxLQUNuQnZRLE1BQVNnVixFQUFBRixFQUFTckssSUFDbEJnNEIsdUJBQTBCenRCLEVBQUFGLEVBQVN2RSxLQUNuQ2lmLFlBQWV4YSxFQUFBRixFQUFTdkUsS0FDeEIydUMsWUFBZWxxQyxFQUFBRixFQUFTclIsS0FDeEJpL0IsY0FBaUIxdEIsRUFBQUYsRUFBUzVFLE9BQzFCNVEsU0FBWTBWLEVBQUFGLEVBQVNyUixLQUNyQmtOLEdBQU1xRSxFQUFBRixFQUFTNUUsUUFHZmdqRCxFQUFPNW9ELGNBQ1A0MEMsWUFBQSxNQ3JFQSxJQUFJMlUsRUFBSSxTQUFBdHNELEdBR1IsU0FBQWc1QixFQUFBai9CLEdBQ0k4UixJQUFlbE4sS0FBQXE2QixHQUVuQixJQUFBLzRCLEVBQWdCNkwsSUFBMEJuTixNQUFBcTZCLEVBQUE5NUIsV0FBQTVILE9BQUEySCxlQUFBKzVCLElBQUEvOEIsS0FBQTBDLEtBQUE1RSxJQUV0Q3d5RCxFQUFnQnR3RCxLQUFBZ0UsR0FFcEIsSUFBQWpJLE9BQUEsRUFZQSxPQVZBQSxFQURBLGNBQUErQixFQUNBQSxFQUFBL0IsVUFDSyxxQkFBQStCLEVBQ0xBLEVBQUF5eUQsaUJBRUFILEVBQUF0eUQsR0FHQWtHLEVBQUEwQyxPQUNBM0ssYUFFQWlJLEVBMEhBLE9BL0lFdU0sSUFBU3dzQixFQUFBaDVCLEdBd0JUcW1DLElBQVlyTixJQUNkNWdDLElBQUEsdUJBQ0FYLE1BQUEsV0FDQWtILEtBQUF5eUMsU0FBQSxFQUNNcUosRUFBQWx0QyxFQUFHNnpCLE9BQUF6aUMsS0FBQTh0RCxlQU1UcjBELElBQUEsd0JBQ0FYLE1BQUEsV0FDQSxJQUFBOGYsRUFBQTVZLEtBRUFBLEtBQUF5eUMsVUFFTXFKLEVBQUFsdEMsRUFBRzZ6QixPQUFBemlDLEtBQUE4dEQsWUFDVDl0RCxLQUFBOHRELFdBQXdCaFMsSUFBRyxXQUMzQmxqQyxFQUFBNjVCLFNBQ0E3NUIsRUFBQW0xQyxvQkFJQXQwRCxJQUFBLFNBQ0FYLE1BQUEsV0FDQSxJQUFBc0YsRUFFQWhELEVBQUE0RSxLQUFBNUUsTUFFQW1ILEVBQUFuSCxFQUFBbUgsVUFDQXFoQyxFQUFBeG9DLEVBQUF3b0MsV0FDQWhwQyxFQUFBUSxFQUFBUixlQUNBNEgsRUFBQXBILEVBQUFvSCxVQUNBaTVCLEVBQUFyZ0MsRUFBQXFnQyxpQkFDQUQsRUFBQXBnQyxFQUFBb2dDLGFBQ0FlLEVBQUFuaEMsRUFBQW1oQyx1QkFDQTk1QixFQUFzQitMLElBQXdCcFQsR0FBQSxtSEFFOUN1USxFQUFnQitDLEtBQVV0USxLQUFvQjhyQyxJQUFlOXJDLEVBQUFtRSxFQUFBLEdBQTZCMm5DLElBQWU5ckMsRUFBQW1FLEVBQUEsSUFBQTNILEVBQUEsR0FBb0RzdkMsSUFBZTlyQyxFQUFBb0UsT0FBQXBFLElBRTVLNEIsS0FBQWd1RCxPQUFBeHlCLElBRUEsSUFBQXd5QixFQUFtQnIvQyxFQUFBQyxFQUFLMUMsYUFBQWxNLEtBQUFndUQsUUFDeEJ6ckQsWUFDQXFoQyxhQUNBbnFDLElBQUEsU0FDQTgxQixVQUFBdnZCLEtBQUFpdUQsYUFDQXJ6RCxpQkFDQWlsQyxXQUFBNy9CLEtBQUE2L0IsV0FDQXZCLE9BQUFsakMsRUFBQWhDLFNBQ0FDLFVBQUEyRyxLQUFBZ0UsTUFBQTNLLFlBR0E2MEQsRUFBdUJ2L0MsRUFBQUMsRUFBSzFDLGFBQUF1dkIsS0FDNUJsNUIsWUFDQTNILGlCQUNBdkIsVUFBQTJHLEtBQUFnRSxNQUFBM0ssVUFDQWtqQyx5QkFDQW5qQyxTQUFBZ0MsRUFBQWhDLFNBQ0EwSSxTQUFBOUIsS0FBQW11RCxhQUNBMTBELElBQUEsZUFHQXl6RCxFQUEwQnYrQyxFQUFBQyxFQUFLNUwsY0FBZStwRCxHQUM5Q3R6RCxJQUFBLGdCQUNBazJCLE9BQUEzdkIsS0FBQW91RCxpQkFDQXhCLFlBQUE1c0QsS0FBQXN0RCxxQkFFQUgsRUFBd0J4K0MsRUFBQUMsRUFBSzVMLGNBQWUrcEQsR0FDNUN0ekQsSUFBQSxjQUNBazJCLE9BQUEzdkIsS0FBQXF1RCxlQUNBeEIsWUFBQTdzRCxLQUFBdXRELG1CQUdBZSxLQU9BLE1BTkEsV0FBQTF6RCxFQUNBMHpELEVBQUFqeUQsS0FBQTZ3RCxFQUFBZ0IsRUFBQWYsRUFBQWEsR0FFQU0sRUFBQWp5RCxLQUFBMnhELEVBQUFkLEVBQUFnQixFQUFBZixHQUdheCtDLEVBQUFDLEVBQUs1TCxjQUNWb3BELEdBRVJ0ekQsT0FDQW8wRCxjQUFBbHRELEtBQUFrdEQsY0FDQUMsWUFBQW50RCxLQUFBbXRELFlBQ0FDLHNCQUFBcHRELEtBQUFvdEQsc0JBQ0FDLG9CQUFBcnRELEtBQUFxdEQsc0JBR1ExK0MsRUFBQUMsRUFBSzVMLGNBQ2IsTUFDVXNLLEtBQ1Y5SyxVQUFBbUosRUFDQTdSLE1BQUFzQixFQUFBdEIsT0FDYXFCLEVBQVdzSCxJQUN4Qnl1QyxTQUFBbHhDLEtBQUFreEMsV0FFQW9kLFNBS0E3MEQsSUFBQSwyQkFDQVgsTUFBQSxTQUFBc0MsRUFBQTRJLEdBQ0EsSUFBQStOLEtBTUEsTUFMQSxjQUFBM1csRUFDQTJXLEVBQUExWSxVQUFBK0IsRUFBQS9CLFVBNUlBLFNBQUErQixFQUFBM0IsR0FJQSxPQUhha1YsRUFBQUMsRUFBSzFTLFNBQUErTCxJQUFBN00sRUFBQWhDLFNBQUEsU0FBQWdELEdBQ2xCLE9BQUFBLEtBQUEzQyxNQUVBd0gsUUFBQXhILElBQUEsRUF5SU84MEQsQ0FBQW56RCxFQUFBNEksRUFBQTNLLGFBQ1AwWSxFQUFBMVksVUFBQXEwRCxFQUFBdHlELElBRUF6QyxPQUFBMEMsS0FBQTBXLEdBQUF2WSxPQUFBLEVBQ0F1WSxFQUVBLFNBSUFzb0IsRUFoSlEsQ0FpSk4xckIsRUFBQUMsRUFBS25MLFdBRUhtcUQsRUFBZ0IsV0FDcEIsSUFBQTN6QyxFQUFBamEsS0FFQUEsS0FBQTYvQixXQUFBLFNBQUF4bUMsRUFBQTBILEdBQ0FrWixFQUFBK3pDLE9BQUE1eUQsTUFBQXlrQyxZQUNBNWxCLEVBQUErekMsT0FBQTV5RCxNQUFBeWtDLFdBQUF4bUMsRUFBQTBILEdBRUFrWixFQUFBazBDLGFBQUE5MEQsSUFHQTJHLEtBQUFpdUQsYUFBQSxTQUFBbHRELEdBQ0EsSUFBQXl0RCxFQUFBenRELEVBQUF5dUIsUUFDQSxHQUFBZy9CLElBQXlCeitCLEdBQU95K0IsSUFBMkJ6K0IsRUFBTyxDQUNsRWh2QixFQUFBeU0saUJBQ0EsSUFBQWloRCxFQUFBeDBDLEVBQUF5MEMsa0JBQUEsR0FDQXowQyxFQUFBNGxCLFdBQUE0dUIsUUFDSyxHQUFBRCxJQUEyQnorQixHQUFPeStCLElBQTBCeitCLEVBQU8sQ0FDeEVodkIsRUFBQXlNLGlCQUNBLElBQUFtaEQsRUFBQTEwQyxFQUFBeTBDLGtCQUFBLEdBQ0F6MEMsRUFBQTRsQixXQUFBOHVCLEtBSUEzdUQsS0FBQWt4QyxTQUFBLFNBQUFodkMsR0FDQSxJQUFBdEMsRUFBQXNDLEVBQUF0QyxPQUdBQSxJQUZBc0MsRUFBQTgrQixlQUVBcGhDLEVBQUFrMEMsV0FBQSxJQUNBbDBDLEVBQUFrMEMsV0FBQSxJQUlBOXpDLEtBQUFvdUQsaUJBQUEsU0FBQTd3RCxHQUNBMGMsRUFBQWl6QyxjQUFBM3ZELEdBR0F5QyxLQUFBcXVELGVBQUEsU0FBQTl3RCxHQUNBMGMsRUFBQWt6QyxZQUFBNXZELEdBR0F5QyxLQUFBb3RELHNCQUFBLFNBQUE3dkQsR0FDQUEsSUFBQTBjLEVBQUFxekMsb0JBQ0FyekMsRUFBQTIwQyx3QkFFQTMwQyxFQUFBcXpDLG1CQUFBL3ZELEdBR0F5QyxLQUFBcXRELG9CQUFBLFNBQUE5dkQsR0FDQUEsSUFBQTBjLEVBQUFzekMsa0JBQ0F0ekMsRUFBQTIwQyx3QkFFQTMwQyxFQUFBc3pDLGlCQUFBaHdELEdBR0F5QyxLQUFBbXVELGFBQUEsU0FBQTkwRCxHQUNBNGdCLEVBQUFqVyxNQUFBM0ssZ0JBQ0EsY0FBQTRnQixFQUFBN2UsT0FDQTZlLEVBQUE1TSxVQUNBaFUsY0FHQTRnQixFQUFBN2UsTUFBQTBHLFNBQUF6SSxLQUlBMkcsS0FBQTB1RCxpQkFBQSxTQUFBMXNCLEdBQ0EsSUFBQTNvQyxFQUFBNGdCLEVBQUFqVyxNQUFBM0ssVUFDQUQsS0FDSXVWLEVBQUFDLEVBQUsxUyxTQUFBQyxRQUFBOGQsRUFBQTdlLE1BQUFoQyxTQUFBLFNBQUFFLEdBQ1RBLE1BQUE4QixNQUFBeUgsV0FDQW0vQixFQUNBNW9DLEVBQUFpRCxLQUFBL0MsR0FFQUYsRUFBQStqQixRQUFBN2pCLE1BSUEsSUFBQUUsRUFBQUosRUFBQUksT0FDQWlnRCxFQUFBamdELEdBQUFKLEVBQUEsR0FBQUssSUFVQSxPQVRBTCxFQUFBK0MsUUFBQSxTQUFBQyxFQUFBN0MsR0FDQTZDLEVBQUEzQyxNQUFBSixJQUVBb2dELEVBREFsZ0QsSUFBQUMsRUFBQSxFQUNBSixFQUFBLEdBQUFLLElBRUFMLEVBQUFHLEVBQUEsR0FBQUUsT0FJQWdnRCxJQUlBa1UsRUFBSTVnRCxXQUNKd3ZCLHVCQUEwQnp0QixFQUFBRixFQUFTdkUsS0FDbkNteEIsYUFBZ0Ixc0IsRUFBQUYsRUFBU0ssS0FBQWdjLFdBQ3pCd1EsaUJBQW9CM3NCLEVBQUFGLEVBQVNLLEtBQUFnYyxXQUM3QjJZLFdBQWM5MEIsRUFBQUYsRUFBU0ssS0FDdkJuTixTQUFZZ04sRUFBQUYsRUFBU0ssS0FDckI3VixTQUFZMFYsRUFBQUYsRUFBU3JSLEtBQ3JCZ0YsVUFBYXVNLEVBQUFGLEVBQVM1RSxPQUN0QnhILFVBQWFzTSxFQUFBRixFQUFTNUUsT0FDdEJwUCxlQUFrQmtVLEVBQUFGLEVBQVM1RSxPQUMzQmxRLE1BQVNnVixFQUFBRixFQUFTbEssT0FDbEJyTCxVQUFheVYsRUFBQUYsRUFBUzVFLE9BQ3RCNmpELGlCQUFvQi8rQyxFQUFBRixFQUFTNUUsUUFHN0IyakQsRUFBSXZwRCxjQUNKN0IsVUFBQSxVQUNBZzZCLHdCQUFBLEVBQ0F6NkIsU0FwUkEsYUFxUkE4aEMsV0FBQSxTQUFBaGhCLEdBQ0EsT0FBQUEsR0FFQWhvQixlQUFBLE1BQ0F4QixTQUFBLEtBQ0FVLFVBR0E2ekQsRUFBSTcwQixRQUFXMjBCLEVBRWY5MEQsT0FBQXVXLEVBQUEsU0FBQXZXLENBQVNnMUQsR0FFTSxJQUFBa0IsRUFBQSxFQ3ZTWEMsRUFBVSxTQUFBenRELEdBR2QsU0FBQSs2QixJQUdBLE9BRklsdkIsSUFBZWxOLEtBQUFvOEIsR0FFUmp2QixJQUEwQm5OLE1BQUFvOEIsRUFBQTc3QixXQUFBNUgsT0FBQTJILGVBQUE4N0IsSUFBQXI4QixNQUFBQyxLQUFBSCxZQWdFckMsT0FyRUVnTyxJQUFTdXVCLEVBQUEvNkIsR0FRVHFtQyxJQUFZdEwsSUFDZDNpQyxJQUFBLGNBQ0FYLE1BQUEsV0FDQSxJQUFBc0MsRUFBQTRFLEtBQUE1RSxNQUNBL0IsRUFBQStCLEVBQUEvQixVQUNBRCxFQUFBZ0MsRUFBQWhDLFNBQ0FpakMsS0FlQSxPQWJNMXRCLEVBQUFDLEVBQUsxUyxTQUFBQyxRQUFBL0MsRUFBQSxTQUFBZ0QsR0FDWCxHQUFBQSxFQUFBLENBR0EsSUFBQTNDLEVBQUEyQyxFQUFBM0MsSUFDQTZpQyxFQUFBampDLElBQUFJLEVBQ0E0aUMsRUFBQWhnQyxLQUF5QnNTLEVBQUFDLEVBQUsxQyxhQUFBOVAsR0FDOUJrZ0MsU0FDQUMsdUJBQUFuaEMsRUFBQW1oQyx1QkFDQUMsY0FBQXBoQyxFQUFBbUgsZ0JBSUE4NUIsS0FHQTVpQyxJQUFBLFNBQ0FYLE1BQUEsV0FDQSxJQUFBc0YsRUFFQWhELEVBQUE0RSxLQUFBNUUsTUFDQW1ILEVBQUFuSCxFQUFBbUgsVUFDQW5KLEVBQUFnQyxFQUFBaEMsU0FDQUMsRUFBQStCLEVBQUEvQixVQUNBbUosRUFBQXBILEVBQUFvSCxVQUNBNUgsRUFBQVEsRUFBQVIsZUFDQW1nQyxFQUFBMy9CLEVBQUEyL0IsU0FDQVcsRUFBQXRnQyxFQUFBc2dDLG1CQUNBNWhDLEVBQUFzQixFQUFBdEIsTUFFQTJpQyxFQUFvQi90QixLQUFVdFEsS0FBb0I4ckMsSUFBZTlyQyxFQUFBbUUsRUFBQSxlQUE2QzJuQyxJQUFlOXJDLEVBQUEyOEIsRUFBQXg0QixFQUFBLG9CQUFBQSxFQUFBLDJCQUFBbkUsR0FBQW9FLEdBQzdILEdBQUF1NEIsRUFBQSxDQUNBLElBQUEyQixFSjlDTyxTQUFBdGpDLEVBQUFDLEdBRVAsSUFEQSxJQUFBQyxFQUFBSixFQUFBRSxHQUNBRyxFQUFBLEVBQWlCQSxFQUFBRCxFQUFBRSxPQUFjRCxJQUMvQixHQUFBRCxFQUFBQyxHQUFBRSxNQUFBSixFQUNBLE9BQUFFLEVBR0EsU0l1QzBCSixDQUFjQyxFQUFBQyxHQUN4QyxRQUFBcWpDLEVBQUEsQ0FDQSxJQUFBQyxFQUFBakIsRUpBTyxTQUFBL2hDLEVBQUFpQixHQUNQLElBQUFFLEVBQUFKLEVBQUFFLEdBQUEseUJBQ0EsT0FBU3N2QyxPQUFrQnB2QyxFQUFBLEtBQUFuQixFQUFBLEtJRndCa0IsQ0FBYzZoQyxFQUFBOWhDLEdKakIxRCxTQUFBVixHQUNQLE9BQ0FLLFVBQUFMLEVBQ0FNLGdCQUFBTixFQUNBTyxhQUFBUCxHSWFpR0ksQ0pMMUYsU0FBQVgsRUFBQWlCLEdBRVAsT0FEQUYsRUFBQUUsR0FBQSwyQkFDQSxTQUFBakIsRUFBQSxtQklHdUhnQixDQUFtQitoQyxFQUFBOWhDLElBQzFJZCxFQUFrQndULE9BQVd4VCxFQUFBNmlDLFFBRTdCN2lDLEVBQWtCd1QsT0FBV3hULEdBQzdCdTFCLFFBQUEsU0FJQSxPQUFhMWdCLEVBQUFDLEVBQUs1TCxjQUNsQixPQUVBUixVQUFBaTZCLEVBQ0EzaUMsU0FFQWtHLEtBQUE0OEIsbUJBS0FSLEVBdEVjLENBdUVaenRCLEVBQUFDLEVBQUtuTCxXQUVRc3JELEVBQUEsRUFHZkQsRUFBVS9oRCxXQUNWZ3VCLFNBQVlqc0IsRUFBQUYsRUFBU3ZFLEtBQ3JCcXhCLG1CQUFzQjVzQixFQUFBRixFQUFTdkUsS0FDL0I5SCxVQUFhdU0sRUFBQUYsRUFBUzVFLE9BQ3RCNVEsU0FBWTBWLEVBQUFGLEVBQVNyUixLQUNyQmxFLFVBQWF5VixFQUFBRixFQUFTNUUsT0FDdEJsUSxNQUFTZ1YsRUFBQUYsRUFBU3JLLElBQ2xCM0osZUFBa0JrVSxFQUFBRixFQUFTNUUsT0FDM0J4SCxVQUFhc00sRUFBQUYsRUFBUzVFLE9BQ3RCdXlCLHVCQUEwQnp0QixFQUFBRixFQUFTdkUsTUFHbkN5a0QsRUFBVTFxRCxjQUNWMjJCLFVBQUEsR0NwR0E5aEMsRUFBQXErQyxFQUFBbG9DLEVBQUEsNEJBQUFxK0MsSUFBQXgwRCxFQUFBcStDLEVBQUFsb0MsRUFBQSwrQkFBQTIvQyxJQUllMy9DLEVBQUEsOE1DRFg0L0MsRUFBSyxTQUFBNXpELEdBQ1QsSUFBQW1ILEVBQUFuSCxFQUFBb2hDLGNBQUEsUUFDQTd3QixFQUFBcEosRUFBQSxJQUFBQSxFQUFBLElBQUFuSCxFQUFBNnpELEtBRUE3ekQsRUFBQWtoQyxTQUNBM3dCLElBQUEsSUFBQXBKLEVBQUEsV0FHQW5ILEVBQUFvSCxZQUNBbUosSUFBQSxJQUFBdlEsRUFBQW9ILFdBR0FwSCxFQUFBNnpELE9BQ0F0akQsSUFBQSxJQUFBcEosRUFBQSxhQVdBLE9BQVNvTSxFQUFBQyxFQUFLNUwsY0FDZCxNQUVBOFosTUFBQTFoQixFQUFBOHpELFVBQUE5ekQsRUFBQTZ6RCxLQUFBLEtBQ0F6c0QsVUFBQW1KLEVBQ0F3QyxRQWJBLFdBQ0EvUyxFQUFBK1MsUUFBQS9TLEVBQUE2ekQsT0FhQUUsV0FWQSxTQUFBcHVELEdBQ0EzRixFQUFBK3pELFdBQUFwdUQsRUFBQTNGLEVBQUErUyxRQUFBL1MsRUFBQTZ6RCxPQVVBL2dELFNBQUEsS0FFQTlTLEVBQUFnMEQsV0FBQWgwRCxFQUFBNnpELEtBQUEsT0FBeUN0Z0QsRUFBQUMsRUFBSzVMLGNBQzlDLElBQ0EsS0FDQTVILEVBQUE2ekQsU0FLQUQsRUFBS2ppRCxXQUNMa2lELEtBQVFuZ0QsRUFBQUYsRUFBU0ksT0FDakJzdEIsT0FBVXh0QixFQUFBRixFQUFTdkUsS0FDbkJzb0MsS0FBUTdqQyxFQUFBRixFQUFTdkUsS0FDakJpTCxPQUFVeEcsRUFBQUYsRUFBU2xLLE9BQ25CbEMsVUFBYXNNLEVBQUFGLEVBQVM1RSxPQUN0QmtsRCxVQUFhcGdELEVBQUFGLEVBQVN2RSxLQUN0Qm15QixjQUFpQjF0QixFQUFBRixFQUFTNUUsT0FDMUJtRSxRQUFXVyxFQUFBRixFQUFTSyxLQUNwQmtnRCxXQUFjcmdELEVBQUFGLEVBQVNLLEtBQ3ZCbWdELFdBQWN0Z0QsRUFBQUYsRUFBU0ssTUFHUixJQUFBb2dELEVBQUEsRUN6REF0L0IsR0FDZnVCLEtBQUEsR0FDQVMsS0FBQSxHQUVBdTlCLFlBQUEsR0FDQUMsWUFBQSxJQUVBdC9CLFVBQUEsRUFDQW9CLE9BQUEsR0FDQTVCLE1BQUEsR0FFQSsvQixTQUFBLEdBQ0FDLFdBQUEsSUNKSUMsRUFBTyxTQUFBcnVELEdBR1gsU0FBQXN1RCxJQUNBLElBQUF6dEQsRUFFQW9pQyxFQUFBaGpDLEVBQUFpakMsRUFFSXIzQixJQUFlbE4sS0FBQTJ2RCxHQUVuQixRQUFBbDdDLEVBQUE1VSxVQUFBckcsT0FBQXlyQixFQUFBOW5CLE1BQUFzWCxHQUFBRSxFQUFBLEVBQW1FQSxFQUFBRixFQUFhRSxJQUNoRnNRLEVBQUF0USxHQUFBOVUsVUFBQThVLEdBR0EsT0FBQTJ2QixFQUFBaGpDLEVBQW9DNkwsSUFBMEJuTixNQUFBa0MsRUFBQXl0RCxFQUFBcHZELFdBQUE1SCxPQUFBMkgsZUFBQXF2RCxJQUFBcnlELEtBQUF5QyxNQUFBbUMsR0FBQWxDLE1BQUErQyxPQUFBa2lCLEtBQUEzakIsRUFBQTBDLE9BQzlENHJELFlBQUEsSUFDS3R1RCxFQUFBdXVELGdCQUFBLFNBQUEvMkQsR0FDTCxPQUFBQSxFQUFBLElBQUF3SSxFQUFBbEcsTUFBQWthLE9BQUF3NkMsZ0JBQ0t4dUQsRUFBQXl1RCxXQUFBLFNBQUFqM0QsR0FDTHdJLEVBQUFsRyxNQUFBMjBELFdBQUFsMkMsT0FBQS9nQixLQUNLd0ksRUFBQThMLGFBQUEsU0FBQXJNLEdBQ0xPLEVBQUErTCxVQUNBdWlELFlBQUE3dUQsRUFBQW5CLE9BQUE5RyxTQUVLd0ksRUFBQTB1RCxXQUFBLFdBQ0wsSUFBQXRqRCxFQUFBcEwsRUFBQWxHLE1BQ0E2MEQsRUFBQXZqRCxFQUFBdWpELFNBQ0FDLEVBQUF4akQsRUFBQXdqRCxRQUVBRCxHQUdBQyxFQUFBNXVELEVBQUE2dUQsa0JBQ0s3dUQsRUFBQTh1RCxHQUFBLFNBQUFydkQsR0FHTCxLQUZBTyxFQUFBMEMsTUFBQTRyRCxjQUtBN3VELEVBQUF5dUIsVUFBd0JPLEVBQU9OLE9BQUEsVUFBQTF1QixFQUFBc0QsT0FDL0IvQyxFQUFBK0wsVUFDQXVpRCxZQUFBLEtBRUF0dUQsRUFBQWxHLE1BQUE4MEQsUUFBQTV1RCxFQUFBNnVELG9CQTdCQTVyQixFQStCS0QsRUFBVW4zQixJQUEwQjdMLEVBQUFpakMsR0FtSHpDLE9BL0pFMTJCLElBQVM4aEQsRUFBQXR1RCxHQStDVHFtQyxJQUFZaW9CLElBQ2RsMkQsSUFBQSxnQkFDQVgsTUFBQSxXQUNBLElBQUFpcUMsRUFBQS9pQyxLQUFBZ0UsTUFDQTRyRCxFQUFBN3NCLEVBQUE2c0IsWUFDQTl5RCxFQUFBaW1DLEVBQUFqbUMsUUFFQSxPQUFBdXpELE1BQUFULEdBQUE5eUQsRUFBQStjLE9BQUErMUMsTUFHQW4yRCxJQUFBLFNBQ0FYLE1BQUEsV0FDQSxJQUFBOGYsRUFBQTVZLEtBRUFnTyxFQUFBaE8sS0FBQTVFLE1BQ0F5WixFQUFBN0csRUFBQTZHLFNBQ0F5N0MsRUFBQXRpRCxFQUFBc2lELGdCQUNBaDdDLEVBQUF0SCxFQUFBc0gsT0FDQWtuQixFQUFBeHVCLEVBQUF3dUIsY0FDQXV6QixFQUFBL2hELEVBQUEraEQsV0FDQUcsRUFBQWxpRCxFQUFBa2lELFFBQ0FELEVBQUFqaUQsRUFBQWlpRCxTQUNBcGhDLEVBQUE3Z0IsRUFBQTZnQixxQkFDQWdoQyxFQUFBN2hELEVBQUE2aEQsZ0JBQ0FwaEMsRUFBQXpnQixFQUFBeWdCLGdCQUNBNXJCLEVBQUFtTCxFQUFBbkwsU0FDQStzRCxFQUFBNXZELEtBQUFnRSxNQUFBNHJELFlBRUFydEQsRUFBQWk2QixFQUFBLFdBQ0E5eEIsRUFBQW1rQixFQUNBMGhDLEVBQUEsS0FDQUMsRUFBQSxLQUNBQyxFQUFBLEtBRUEsSUFBQVYsSUFBQUcsRUFDQSxZQUdBLEdBQUFILEdBQUFybEQsRUFBQSxDQUNBLElBQUFnZ0IsRUFBQTRsQyxFQUFBcm9ELElBQUEsU0FBQTJpQixFQUFBcnhCLEdBQ0EsT0FBaUJvVixFQUFBQyxFQUFLNUwsY0FDdEIwSCxFQUFBbUMsUUFDYXBULElBQUFGLEVBQUFULE1BQUE4eEIsSUFDYmlsQyxHQUFBajNDLEVBQUFpM0MsaUJBQUFqbEMsTUFJQTJsQyxFQUF1QjVoRCxFQUFBQyxFQUFLNUwsY0FDNUIwSCxHQUVBN0gsV0FDQU4sVUFBQWtzQixFQUNBcmtCLFlBQUEsRUFDQTVILFVBQUFELEVBQUEsZ0JBQ0ErSCxnQkFBQSxXQUNBMjFDLDBCQUFBLEVBQ0FubkQsT0FBQStiLEdBQUF5N0MsRUFBQSxJQUFBM25ELFdBQ0E3RyxTQUFBOUIsS0FBQSt2RCxXQUNBaGxELGtCQUFBLFNBQUEybEQsR0FDQSxPQUFBQSxFQUFBenpELGFBR0F5dEIsR0F5Q0EsT0FyQ0F3bEMsSUFDQUQsSUFDQVEsRUFBQSxrQkFBQVIsRUFBdUR0aEQsRUFBQUMsRUFBSzVMLGNBQzVELFVBRUFxQixLQUFBLFNBQ0E4SixRQUFBbk8sS0FBQW93RCxHQUNBMWdDLFFBQUExdkIsS0FBQW93RCxHQUNBdnRELFlBRUF5UyxFQUFBcTdDLGlCQUNjaGlELEVBQUFDLEVBQUs1TCxjQUNuQixRQUVBbUwsUUFBQW5PLEtBQUFvd0QsR0FDQTFnQyxRQUFBMXZCLEtBQUFvd0QsSUFFQUgsSUFHQU8sRUFBa0I3aEQsRUFBQUMsRUFBSzVMLGNBQ3ZCLE9BQ1dSLFVBQUFELEVBQUEsaUJBQ1grUyxFQUFBczdDLFFBQ1VqaUQsRUFBQUMsRUFBSzVMLGNBQUEsU0FDZkgsV0FDQXdCLEtBQUEsT0FDQXZMLE1BQUE4MkQsRUFDQTl0RCxTQUFBOUIsS0FBQW9OLGFBQ0FzaUIsUUFBQTF2QixLQUFBb3dELEdBQ0EvaEQsT0FBQXJPLEtBQUFnd0QsYUFFQTE2QyxFQUFBMjVDLEtBQ0F3QixJQUlhOWhELEVBQUFDLEVBQUs1TCxjQUNsQixNQUNTUixVQUFBLEdBQUFELEdBQ1RndUQsRUFDQUMsT0FLQWIsRUFoS1csQ0FpS1RoaEQsRUFBQUMsRUFBS25MLFdBRVBpc0QsRUFBTzNpRCxXQUNQbEssU0FBWWlNLEVBQUFGLEVBQVN2RSxLQUNyQjBsRCxXQUFjamhELEVBQUFGLEVBQVNLLEtBQ3ZCaWhELFFBQVdwaEQsRUFBQUYsRUFBU0ssS0FDcEI0ZixxQkFBd0IvZixFQUFBRixFQUFTSyxLQUNqQ25TLFFBQVdnUyxFQUFBRixFQUFTSSxPQUNwQnNoRCxnQkFBbUJ4aEQsRUFBQUYsRUFBU2lpRCxRQUFTL2hELEVBQUFGLEVBQVM1RSxRQUM5QzZLLFNBQVkvRixFQUFBRixFQUFTSSxPQUNyQjZnRCxnQkFBbUIvZ0QsRUFBQUYsRUFBU0ssS0FDNUJxRyxPQUFVeEcsRUFBQUYsRUFBU2xLLE9BQ25CODNCLGNBQWlCMXRCLEVBQUFGLEVBQVM1RSxPQUMxQnlrQixnQkFBbUIzZixFQUFBRixFQUFTNUUsT0FDNUJpbUQsU0FBWW5oRCxFQUFBRixFQUFTRyxXQUFZRCxFQUFBRixFQUFTdkUsS0FBT3lFLEVBQUFGLEVBQVNyUixRQUUxRG15RCxFQUFPdHJELGNBQ1Brc0QsaUJBQUEsc0JBSWUsSUFBQVEsRUFBQSxXQy9LZixTQUFBM2dELEtBVUEsU0FBQTRnRCxFQUFBbndELEVBQUFvRCxFQUFBNUksR0FDQSxJQUFBeVosRUFBQWpVLEVBSUEsWUFIQSxJQUFBaVUsSUFDQUEsRUFBQTdRLEVBQUE2USxVQUVBeEIsS0FBQWtHLE9BQUFuZSxFQUFBNEIsTUFBQSxHQUFBNlgsR0FBQSxFQUdBLElBQUltOEMsRUFBVSxTQUFBM3ZELEdBR2QsU0FBQTZzQixFQUFBOXlCLEdBQ0k4UixJQUFlbE4sS0FBQWt1QixHQUVuQixJQUFBNXNCLEVBQWdCNkwsSUFBMEJuTixNQUFBa3VCLEVBQUEzdEIsV0FBQTVILE9BQUEySCxlQUFBNHRCLElBQUE1d0IsS0FBQTBDLEtBQUE1RSxJQUV0QzYxRCxFQUFnQjN6RCxLQUFBZ0UsR0FFcEIsSUFBQTR2RCxFQUFBOTFELEVBQUEwRyxXQUFBcU8sRUFDQSxZQUFBL1UsSUFDQTgxRCxHQUNBQyxRQUFBQyxLQUFBLDJJQUdBLElBQUF0MEQsRUFBQTFCLEVBQUEwZCxlQUNBLFlBQUExZCxJQUNBMEIsRUFBQTFCLEVBQUEwQixTQUdBLElBQUErWCxFQUFBelosRUFBQTJkLGdCQVVBLE1BVEEsYUFBQTNkLElBQ0F5WixFQUFBelosRUFBQXlaLFVBR0F2VCxFQUFBMEMsT0FDQWxILFVBQ0F1MEQsa0JBQUF2MEQsRUFDQStYLFlBRUF2VCxFQXVZQSxPQXJhRXVNLElBQVNxZ0IsRUFBQTdzQixHQWlDVHFtQyxJQUFZeFosSUFDZHowQixJQUFBLHFCQUNBWCxNQUFBLFNBQUE2dUIsRUFBQTRCLEdBR0EsSUFBQWhuQixFQUFBdkMsS0FBQTVFLE1BQUFtSCxVQUVBLEdBQUFnbkIsRUFBQXpzQixVQUFBa0QsS0FBQWdFLE1BQUFsSCxTQUFBa0QsS0FBQXN4RCxlQUFBLENBQ0EsSUFBQUMsRUFBQXZ4RCxLQUFBc3hELGVBQUE3SyxjQUFBLElBQUFsa0QsRUFBQSxTQUFBZ25CLEVBQUF6c0IsU0FDQXkwRCxHQUFBN25DLFNBQUFnK0IsZ0JBQUE2SixHQUNBQSxFQUFBcnRELFdBS0F6SyxJQUFBLGdCQUNBWCxNQUFBLFNBQUFpSSxHQUNBLElBQUF5SyxFQUFBekssRUFBQW5CLE9BQUE5RyxNQUNBdTRELEVBQUFyeEQsS0FBQWdFLE1BQUFxdEQsa0JBVUEsTUFQQSxLQUFBN2xELEVBQ0FBLEVBQ082a0QsTUFBQXgyQyxPQUFBck8sSUFDUDZsRCxFQUVBeDNDLE9BQUFyTyxNQUtBL1IsSUFBQSxTQUNBWCxNQUFBLFdBQ0EsSUFBQWtWLEVBQUFoTyxLQUFBNUUsTUFDQW1ILEVBQUF5TCxFQUFBekwsVUFDQUMsRUFBQXdMLEVBQUF4TCxVQUNBSyxFQUFBbUwsRUFBQW5MLFNBSUEsUUFBQTdDLEtBQUE1RSxNQUFBbzJELGtCQUFBeHhELEtBQUE1RSxNQUFBNEIsT0FBQWdELEtBQUFnRSxNQUFBNlEsU0FDQSxZQUdBLElBQUF6WixFQUFBNEUsS0FBQTVFLE1BQ0FrYSxFQUFBbGEsRUFBQWthLE9BRUFtOEMsRUFBQVYsT0FBQTN0RCxFQUFBcEQsS0FBQWdFLE1BQUFoRSxLQUFBNUUsT0FDQXMyRCxLQUNBQyxFQUFBLEtBQ0FDLEVBQUEsS0FDQUMsRUFBQSxLQUNBQyxFQUFBLEtBQ0FyQixFQUFBLEtBRUFSLEVBQUE3MEQsRUFBQTIyRCxpQkFBQTMyRCxFQUFBMjJELGdCQUFBOUIsU0FDQStCLEVBQUE1MkQsRUFBQTYyRCxjQUFBLElBQ0FsdkIsRUFBQS9pQyxLQUFBZ0UsTUFDQWxILEVBQUFpbUMsRUFBQWptQyxRQUNBK1gsRUFBQWt1QixFQUFBbHVCLFNBR0FxOUMsRUFBQXAxRCxFQUFBLElBQUFBLEVBQUEsSUFDQXExRCxFQUFBcjFELEVBQUEsRUFBQTIwRCxFQUFBMzBELEVBQUEsRUFBQTIwRCxFQUVBdkcsRUFBQXZ5RCxPQUFBMEMsS0FBQUQsR0FBQUUsT0FBQSxTQUFBQyxFQUFBOUIsR0FJQSxNQUhBLFVBQUFBLEVBQUErQixPQUFBLGdCQUFBL0IsRUFBQStCLE9BQUEsZUFBQS9CLElBQ0E4QixFQUFBOUIsR0FBQTJCLEVBQUEzQixJQUVBOEIsT0FHQSxHQUFBSCxFQUFBZzNELE9BZ0NBLE9BL0JBbkMsSUFFQVEsRUFEQSxrQkFBQVIsRUFDeUJ0aEQsRUFBQUMsRUFBSzVMLGNBQzlCLFVBRUFxQixLQUFBLFNBQ0E4SixRQUFBbk8sS0FBQXF5RCxXQUNBM2lDLFFBQUExdkIsS0FBQXF5RCxZQUVBLzhDLEVBQUFxN0MsaUJBR3lCaGlELEVBQUFDLEVBQUs1TCxjQUM5QixRQUVBbUwsUUFBQW5PLEtBQUFxeUQsV0FDQTNpQyxRQUFBMXZCLEtBQUFxeUQsWUFFQXBDLEdBR0FRLEVBQXVCOWhELEVBQUFDLEVBQUs1TCxjQUM1QixNQUVBOFosTUFBQTFoQixFQUFBOHpELFVBQUEsR0FBQTU1QyxFQUFBczdDLFFBQUE1d0QsS0FBQWdFLE1BQUFsSCxRQUFBLElBQUEyMEQsRUFBQSxLQUNBanZELFVBQUFELEVBQUEsaUJBRUFrdUQsSUFJZTloRCxFQUFBQyxFQUFLNUwsY0FDcEIsS0FDVXNLLEtBQ1Y5SyxVQUFBRCxFQUFBLElBQUFBLEVBQUEsV0FBQW5ILEVBQUFvSCxVQUNBMUksTUFBQXNCLEVBQUF0QixNQUNBcUosSUFBQW5ELEtBQUFzeUQsb0JBQ1dwSCxHQUNEdjhDLEVBQUFDLEVBQUs1TCxjQUNmLE1BRUE4WixNQUFBMWhCLEVBQUE4ekQsVUFBQTU1QyxFQUFBaTlDLFVBQUEsS0FDQXBrRCxRQUFBbk8sS0FBQXpFLEtBQ0EyUyxTQUFBbE8sS0FBQXd5RCxVQUFBLE9BQ0FyRCxXQUFBbnZELEtBQUF5eUQsZUFDQWp3RCxXQUFBeEMsS0FBQXd5RCxVQUFBLEdBQUFqd0QsRUFBQSxpQkFBQUEsRUFBQSxRQUNBdzlCLGlCQUFBLy9CLEtBQUF3eUQsV0FFQXAzRCxFQUFBZzBELFdBQUE4QyxFQUFBLE9BQUFseUQsS0FBQTB5RCxZQUFBdDNELEVBQUFnekIsWUFFVXpmLEVBQUFDLEVBQUs1TCxjQUNmLE1BRUE4WixNQUFBMWhCLEVBQUE4ekQsVUFBQWx2RCxLQUFBZ0UsTUFBQWxILFFBQUEsSUFBQTIwRCxFQUFBLEtBQ0FqdkQsVUFBQUQsRUFBQSxpQkFFWW9NLEVBQUFDLEVBQUs1TCxjQUFBLFNBQ2pCcUIsS0FBQSxPQUNBdkwsTUFBQWtILEtBQUFnRSxNQUFBcXRELGtCQUNBOWhDLFVBQUF2dkIsS0FBQTJ5RCxjQUNBampDLFFBQUExdkIsS0FBQTR5RCxZQUNBOXdELFNBQUE5QixLQUFBNHlELFlBQ0Ezb0QsS0FBQSxNQUVZMEUsRUFBQUMsRUFBSzVMLGNBQ2pCLFFBQ2VSLFVBQUFELEVBQUEsVUFDZixLQUVBa3ZELEdBRVU5aUQsRUFBQUMsRUFBSzVMLGNBQ2YsTUFFQThaLE1BQUExaEIsRUFBQTh6RCxVQUFBNTVDLEVBQUF1OUMsVUFBQSxLQUNBMWtELFFBQUFuTyxLQUFBZ2lDLEtBQ0E5ekIsU0FBQWxPLEtBQUF3eUQsVUFBQSxPQUNBckQsV0FBQW52RCxLQUFBOHlELGVBQ0F0d0QsV0FBQXhDLEtBQUEreUQsVUFBQSxHQUFBeHdELEVBQUEsaUJBQUFBLEVBQUEsUUFDQXc5QixpQkFBQS8vQixLQUFBK3lELFdBRUEzM0QsRUFBQWcwRCxXQUFBK0MsRUFBQSxPQUFBbnlELEtBQUEweUQsWUFBQXQzRCxFQUFBaXpCLFlBRUFvaUMsR0FJQSxHQUFBZ0IsR0FBQSxJQUFBTyxFQUFBLENBQ0EsSUFBQWdCLEdBQ0ExOUMsU0FDQWtuQixjQUFBajZCLEVBQ0E0TCxRQUFBbk8sS0FBQW9OLGFBQ0EraEQsV0FBQW52RCxLQUFBaXpELFdBQ0EvRCxVQUFBOXpELEVBQUE4ekQsVUFDQUUsV0FBQWgwRCxFQUFBZzBELFlBRUFxQyxHQUNBQyxFQUFBcjFELEtBQXlCc1MsRUFBQUMsRUFBSzVMLGNBQWVxc0QsRUFBTy9oRCxPQUFXMGxELEdBQy9EdjVELElBQUEsVUFDQXcxRCxLQUFBd0MsRUFDQWp2RCxVQUFBRCxFQUFBLGdCQUdBLFFBQUFoSixFQUFBLEVBQXVCQSxHQUFBazRELEVBQWVsNEQsSUFBQSxDQUN0QyxJQUFBK2lDLEVBQUF0OEIsS0FBQWdFLE1BQUFsSCxVQUFBdkQsRUFDQW00RCxFQUFBcjFELEtBQXlCc1MsRUFBQUMsRUFBSzVMLGNBQWVxc0QsRUFBTy9oRCxPQUFXMGxELEdBQy9EdjVELElBQUFGLEVBQ0EwMUQsS0FBQTExRCxFQUNBK2lDLGtCQUdPLENBQ1AsSUFBQTQyQixFQUFBOTNELEVBQUE2MkQsY0FBQTM4QyxFQUFBNjlDLE9BQUE3OUMsRUFBQTg5QyxPQUNBQyxFQUFBajRELEVBQUE2MkQsY0FBQTM4QyxFQUFBZytDLE9BQUFoK0MsRUFBQWkrQyxPQUNBLEdBQUFuNEQsRUFBQW80RCxvQkFBQSxDQUNBLElBQUFDLEVBQUFseEQsRUFBQSxhQUNBbkgsRUFBQWt6QixlQUNBbWxDLEdBQUEsSUFBQWx4RCxFQUFBLDBCQUVBb3ZELEVBQXFCaGpELEVBQUFDLEVBQUs1TCxjQUMxQixNQUVBOFosTUFBQTFoQixFQUFBOHpELFVBQUFnRSxFQUFBLEtBQ0F6NUQsSUFBQSxPQUNBMFUsUUFBQW5PLEtBQUEyeEQsU0FDQXpqRCxTQUFBLElBQ0FpaEQsV0FBQW52RCxLQUFBMHpELG1CQUNBbHhELFVBQUFpeEQsR0FFQXI0RCxFQUFBZzBELFdBQUFwdkQsS0FBQTJ6RCxrQkFBQSxZQUFBM3pELEtBQUEweUQsWUFBQXQzRCxFQUFBa3pCLGdCQUVBLElBQUFzbEMsRUFBQXJ4RCxFQUFBLGFBQ0FuSCxFQUFBbXpCLGVBQ0FxbEMsR0FBQSxJQUFBcnhELEVBQUEsMEJBRUFxdkQsRUFBcUJqakQsRUFBQUMsRUFBSzVMLGNBQzFCLE1BRUE4WixNQUFBMWhCLEVBQUE4ekQsVUFBQW1FLEVBQUEsS0FDQTU1RCxJQUFBLE9BQ0F5VSxTQUFBLElBQ0FDLFFBQUFuTyxLQUFBNHhELFNBQ0F6QyxXQUFBbnZELEtBQUE2ekQsbUJBQ0FyeEQsVUFBQW94RCxHQUVBeDRELEVBQUFnMEQsV0FBQXB2RCxLQUFBOHpELGtCQUFBLFlBQUE5ekQsS0FBQTB5RCxZQUFBdDNELEVBQUFtekIsZ0JBR0F1akMsRUFBb0JuakQsRUFBQUMsRUFBSzVMLGNBQWVxc0QsR0FDeEMvNUMsT0FBQWxhLEVBQUFrYSxPQUNBcTlCLE1BQUEsRUFDQW5XLGNBQUFqNkIsRUFDQTRMLFFBQUFuTyxLQUFBb04sYUFDQStoRCxXQUFBbnZELEtBQUFpekQsV0FDQXg1RCxJQUFBZzRELEVBQ0F4QyxLQUFBd0MsRUFDQW4xQixRQUFBLEVBQ0E0eUIsVUFBQTl6RCxFQUFBOHpELFVBQ0FFLFdBQUFoMEQsRUFBQWcwRCxhQUVBeUMsRUFBcUJsakQsRUFBQUMsRUFBSzVMLGNBQWVxc0QsR0FDekMvNUMsT0FBQWxhLEVBQUFrYSxPQUNBa25CLGNBQUFqNkIsRUFDQTRMLFFBQUFuTyxLQUFBb04sYUFDQStoRCxXQUFBbnZELEtBQUFpekQsV0FDQXg1RCxJQUFBLEVBQ0F3MUQsS0FBQSxFQUNBM3lCLFFBQUEsRUFDQTR5QixVQUFBOXpELEVBQUE4ekQsVUFDQUUsV0FBQWgwRCxFQUFBZzBELGFBR0EsSUFBQXZ3QixFQUFBeHJCLEtBQUEyUixJQUFBLEVBQUFsb0IsRUFBQWsxRCxHQUNBaHpCLEVBQUEzckIsS0FBQWl3QixJQUFBeG1DLEVBQUFrMUQsRUFBQVAsR0FFQTMwRCxFQUFBLEdBQUFrMUQsSUFDQWh6QixFQUFBLElBQUFnekIsR0FHQVAsRUFBQTMwRCxHQUFBazFELElBQ0FuekIsRUFBQTR5QixFQUFBLEVBQUFPLEdBR0EsUUFBQStCLEVBQUFsMUIsRUFBMkJrMUIsR0FBQS8wQixFQUFhKzBCLElBQUEsQ0FDeEMsSUFBQUMsRUFBQWwzRCxJQUFBaTNELEVBQ0FyQyxFQUFBcjFELEtBQXlCc1MsRUFBQUMsRUFBSzVMLGNBQWVxc0QsR0FDN0MvNUMsT0FBQWxhLEVBQUFrYSxPQUNBa25CLGNBQUFqNkIsRUFDQTRMLFFBQUFuTyxLQUFBb04sYUFDQStoRCxXQUFBbnZELEtBQUFpekQsV0FDQXg1RCxJQUFBczZELEVBQ0E5RSxLQUFBOEUsRUFDQXozQixPQUFBMDNCLEVBQ0E5RSxVQUFBOXpELEVBQUE4ekQsVUFDQUUsV0FBQWgwRCxFQUFBZzBELGNBSUF0eUQsRUFBQSxLQUFBazFELEdBQUEsSUFBQWwxRCxJQUNBNDBELEVBQUEsR0FBeUIvaUQsRUFBQUMsRUFBSzFDLGFBQUF3bEQsRUFBQSxJQUM5Qmx2RCxVQUFBRCxFQUFBLDBCQUVBbXZELEVBQUF2MEMsUUFBQXcwQyxJQUVBRixFQUFBMzBELEdBQUEsRUFBQWsxRCxHQUFBbDFELElBQUEyMEQsRUFBQSxJQUNBQyxJQUFBbDRELE9BQUEsR0FBNENtVixFQUFBQyxFQUFLMUMsYUFBQXdsRCxJQUFBbDRELE9BQUEsSUFDakRnSixVQUFBRCxFQUFBLDJCQUVBbXZELEVBQUFyMUQsS0FBQXUxRCxJQUdBLElBQUEveUIsR0FDQTZ5QixFQUFBdjBDLFFBQUEwMEMsR0FFQTd5QixJQUFBeXlCLEdBQ0FDLEVBQUFyMUQsS0FBQXkxRCxHQUlBLElBQUFtQyxFQUFBLEtBRUE3NEQsRUFBQTg0RCxZQUNBRCxFQUFvQnRsRCxFQUFBQyxFQUFLNUwsY0FDekIsTUFDV1IsVUFBQUQsRUFBQSxlQUNYbkgsRUFBQTg0RCxVQUFBOTRELEVBQUE0QixPQUFBLElBQUE1QixFQUFBNEIsTUFBQSxHQUFBRixFQUFBLEdBQUErWCxFQUFBLEVBQUEvWCxFQUFBK1gsRUFBQXpaLEVBQUE0QixNQUFBNUIsRUFBQTRCLE1BQUFGLEVBQUErWCxNQUdBLElBQUFzL0MsR0FBQW4wRCxLQUFBd3lELFlBQUFmLEVBQ0EyQyxHQUFBcDBELEtBQUEreUQsWUFBQXRCLEVBQ0EsT0FBYTlpRCxFQUFBQyxFQUFLNUwsY0FDbEIsS0FDUXNLLEtBQ1I5SyxVQUFxQmtNLElBQVVuTSxFQUFBQyxFQUF1QjBuQyxPQUFrQjNuQyxFQUFBLFlBQUFNLElBQ3hFL0ksTUFBQXNCLEVBQUF0QixNQUNBaXFDLGFBQUEsZUFDQTVnQyxJQUFBbkQsS0FBQXN5RCxvQkFDU3BILEdBQ1QrSSxFQUNRdGxELEVBQUFDLEVBQUs1TCxjQUNiLE1BRUE4WixNQUFBMWhCLEVBQUE4ekQsVUFBQTU1QyxFQUFBaTlDLFVBQUEsS0FDQXBrRCxRQUFBbk8sS0FBQXpFLEtBQ0EyUyxTQUFBaW1ELEVBQUEsT0FDQWhGLFdBQUFudkQsS0FBQXl5RCxlQUNBandELFdBQUEyeEQsRUFBQTV4RCxFQUFBLG9CQUFBQSxFQUFBLFFBQ0F3OUIsZ0JBQUFvMEIsR0FFQS80RCxFQUFBZzBELFdBQUE4QyxFQUFBLE9BQUFseUQsS0FBQTB5RCxZQUFBdDNELEVBQUFnekIsWUFFQXNqQyxFQUNRL2lELEVBQUFDLEVBQUs1TCxjQUNiLE1BRUE4WixNQUFBMWhCLEVBQUE4ekQsVUFBQTU1QyxFQUFBdTlDLFVBQUEsS0FDQTFrRCxRQUFBbk8sS0FBQWdpQyxLQUNBOXpCLFNBQUFrbUQsRUFBQSxPQUNBakYsV0FBQW52RCxLQUFBOHlELGVBQ0F0d0QsV0FBQTR4RCxFQUFBN3hELEVBQUEsb0JBQUFBLEVBQUEsUUFDQXc5QixnQkFBQXEwQixHQUVBaDVELEVBQUFnMEQsV0FBQStDLEVBQUEsT0FBQW55RCxLQUFBMHlELFlBQUF0M0QsRUFBQWl6QixZQUVRMWYsRUFBQUMsRUFBSzVMLGNBQWU4dEQsR0FDNUJqdUQsV0FDQXlTLE9BQUFsYSxFQUFBa2EsT0FDQWtuQixjQUFBajZCLEVBQ0Fzc0IscUJBQUF6ekIsRUFBQXl6QixxQkFDQUosZ0JBQUFyekIsRUFBQXF6QixnQkFDQXNoQyxXQUFBL3ZELEtBQUE1RSxNQUFBaTVELGdCQUFBcjBELEtBQUFzMEQsZUFBQSxLQUNBeDNELFFBQUFrRCxLQUFBZ0UsTUFBQWxILFFBQ0ErWCxTQUFBN1UsS0FBQWdFLE1BQUE2USxTQUNBeTdDLGdCQUFBdHdELEtBQUE1RSxNQUFBazFELGdCQUNBSixRQUFBbHdELEtBQUF1MEQsMkJBQUF2MEQsS0FBQW9OLGFBQUEsS0FDQTZpRCxtQkFLQXgyRCxJQUFBLDJCQUNBWCxNQUFBLFNBQUFzQyxFQUFBbXVCLEdBQ0EsSUFBQXhYLEtBVUEsR0FSQSxZQUFBM1csSUFDQTJXLEVBQUFqVixRQUFBMUIsRUFBQTBCLFFBRUExQixFQUFBMEIsVUFBQXlzQixFQUFBenNCLFVBQ0FpVixFQUFBcy9DLGtCQUFBdC9DLEVBQUFqVixVQUlBLGFBQUExQixLQUFBeVosV0FBQTBVLEVBQUExVSxTQUFBLENBQ0EsSUFBQS9YLEVBQUF5c0IsRUFBQXpzQixRQUNBMDNELEVBQUF6RCxFQUFBMzFELEVBQUF5WixTQUFBMFUsRUFBQW51QixHQUNBMEIsSUFBQTAzRCxJQUFBMTNELEVBRUEsWUFBQTFCLElBQ0EyVyxFQUFBalYsVUFDQWlWLEVBQUFzL0Msa0JBQUF2MEQsR0FFQWlWLEVBQUE4QyxTQUFBelosRUFBQXlaLFNBR0EsT0FBQTlDLE1BV0FtYyxFQXRhYyxDQXVhWnZmLEVBQUFDLEVBQUtuTCxXQUVQdXRELEVBQVVqa0QsV0FDVmxLLFNBQVlpTSxFQUFBRixFQUFTdkUsS0FDckI5SCxVQUFhdU0sRUFBQUYsRUFBUzVFLE9BQ3RCeEgsVUFBYXNNLEVBQUFGLEVBQVM1RSxPQUN0QmxOLFFBQVdnUyxFQUFBRixFQUFTSSxPQUNwQjhKLGVBQWtCaEssRUFBQUYsRUFBU0ksT0FDM0JoUyxNQUFTOFIsRUFBQUYsRUFBU0ksT0FDbEI2RixTQUFZL0YsRUFBQUYsRUFBU0ksT0FDckIrSixnQkFBbUJqSyxFQUFBRixFQUFTSSxPQUM1QmxOLFNBQVlnTixFQUFBRixFQUFTSyxLQUNyQnVpRCxpQkFBb0IxaUQsRUFBQUYsRUFBU3ZFLEtBQzdCZ3FELGdCQUFtQnZsRCxFQUFBRixFQUFTdkUsS0FDNUI0bkQsY0FBaUJuakQsRUFBQUYsRUFBU3ZFLEtBQzFCcUcsaUJBQW9CNUIsRUFBQUYsRUFBU0ssS0FDN0I0ZixxQkFBd0IvZixFQUFBRixFQUFTSyxLQUNqQ3VrRCxvQkFBdUIxa0QsRUFBQUYsRUFBU3ZFLEtBQ2hDMG5ELGdCQUFtQmpqRCxFQUFBRixFQUFTRyxXQUFZRCxFQUFBRixFQUFTdkUsS0FBT3lFLEVBQUFGLEVBQVNsSyxTQUNqRXdxRCxVQUFhcGdELEVBQUFGLEVBQVN2RSxLQUN0QmltRCxnQkFBbUJ4aEQsRUFBQUYsRUFBU2lpRCxRQUFTL2hELEVBQUFGLEVBQVM1RSxRQUM5Q2txRCxVQUFhcGxELEVBQUFGLEVBQVNLLEtBQ3RCcUcsT0FBVXhHLEVBQUFGLEVBQVNsSyxPQUNuQjVLLE1BQVNnVixFQUFBRixFQUFTbEssT0FDbEIwcUQsV0FBY3RnRCxFQUFBRixFQUFTSyxLQUN2Qm1mLFNBQVl0ZixFQUFBRixFQUFTRyxXQUFZRCxFQUFBRixFQUFTSyxLQUFPSCxFQUFBRixFQUFTclIsT0FDMUQ4d0IsU0FBWXZmLEVBQUFGLEVBQVNHLFdBQVlELEVBQUFGLEVBQVNLLEtBQU9ILEVBQUFGLEVBQVNyUixPQUMxRCt3QixhQUFnQnhmLEVBQUFGLEVBQVNHLFdBQVlELEVBQUFGLEVBQVNLLEtBQU9ILEVBQUFGLEVBQVNyUixPQUM5RGd4QixhQUFnQnpmLEVBQUFGLEVBQVNHLFdBQVlELEVBQUFGLEVBQVNLLEtBQU9ILEVBQUFGLEVBQVNyUixRQUU5RHl6RCxFQUFVNXNELGNBQ1YwVSxlQUFBLEVBQ0E5YixNQUFBLEVBQ0ErYixnQkFBQSxHQUNBalgsU0FBQXFPLEVBQ0EzTixVQUFBLEdBQ0Fpc0IsZ0JBQUEsWUFDQWxzQixVQUFBLGdCQUNBc3NCLHFCQUFBLEtBQ0EyaUMsa0JBQUEsRUFDQWdDLHFCQUFBLEVBQ0F6QixpQkFBQSxFQUNBc0MsaUJBQUEsRUFDQXBDLGVBQUEsRUFDQS9DLFdBQUEsRUFDQXgrQyxpQkFBQVAsRUFDQW1GLFFDcGZBdzZDLGVBQUEsTUFDQWMsUUFBQSxLQUNBRCxnQkFBQSxLQUNBMUIsS0FBQSxJQUdBc0QsVUFBQSxNQUNBTSxVQUFBLE1BQ0FPLE9BQUEsU0FDQUcsT0FBQSxTQUNBSixPQUFBLFNBQ0FHLE9BQUEsVUQwZUF4NUQsU0FDQXMxRCxXQW5lQSxTQUFBSCxFQUFBNXFELEVBQUE4RSxHQUNBLE9BQUFBLElBcWVBLElBQUk4bkQsRUFBZ0IsV0FDcEIsSUFBQXI0QyxFQUFBNVksS0FFQUEsS0FBQTJ6RCxnQkFBQSxXQUNBLE9BQUF0Z0QsS0FBQTJSLElBQUEsRUFBQXBNLEVBQUE1VSxNQUFBbEgsU0FBQThiLEVBQUF4ZCxNQUFBNjJELGNBQUEsT0FHQWp5RCxLQUFBOHpELGdCQUFBLFdBQ0EsT0FBQXpnRCxLQUFBaXdCLElBQUF5dEIsT0FBQTN0RCxFQUFBd1YsRUFBQTVVLE1BQUE0VSxFQUFBeGQsT0FBQXdkLEVBQUE1VSxNQUFBbEgsU0FBQThiLEVBQUF4ZCxNQUFBNjJELGNBQUEsT0FHQWp5RCxLQUFBMHlELFlBQUEsU0FBQS9zQixHQUNBLElBQUFwakMsRUFBQXFXLEVBQUF4ZCxNQUFBbUgsVUFFQWt5RCxFQUFBOXVCLEdBQTJCaDNCLEVBQUFDLEVBQUs1TCxjQUFBLEtBQXFCUixVQUFBRCxFQUFBLGVBSXJELE1BSEEsbUJBQUFvakMsSUFDQTh1QixFQUFpQjlsRCxFQUFBQyxFQUFLNUwsY0FBQTJpQyxFQUFxQnI0QixPQUFXc0wsRUFBQXhkLFNBRXREcTVELEdBR0F6MEQsS0FBQXN5RCxtQkFBQSxTQUFBLzBELEdBQ0FxYixFQUFBMDRDLGVBQUEvekQsR0FHQXlDLEtBQUEwMEQsUUFBQSxTQUFBekYsR0FDQSxPQXBnQkEsU0FBQW4yRCxHQUNBLHVCQUFBQSxHQUFBNjdELFNBQUE3N0QsSUFBQXVhLEtBQUFrRyxNQUFBemdCLE9BbWdCQTg3RCxDQUFBM0YsT0FBQSxHQUFBQSxJQUFBcjJDLEVBQUE1VSxNQUFBbEgsU0FHQWtELEtBQUF1MEQseUJBQUEsV0FDQSxJQUFBaG9CLEVBQUEzekIsRUFBQXhkLE1BQ0EyMkQsRUFBQXhsQixFQUFBd2xCLGdCQUNBbDlDLEVBQUEwM0IsRUFBQTEzQixTQUdBLFFBRkEwM0IsRUFBQXZ2QyxPQUVBNlgsSUFHQWs5QyxHQUdBL3hELEtBQUEyeUQsY0FBQSxTQUFBNXhELEdBQ0FBLEVBQUF5dUIsVUFBc0JPLEVBQU95L0IsVUFBQXp1RCxFQUFBeXVCLFVBQTJCTyxFQUFPMC9CLFlBQy9EMXVELEVBQUF5TSxrQkFJQXhOLEtBQUE0eUQsWUFBQSxTQUFBN3hELEdBQ0EsSUFBQWpJLEVBQUE4ZixFQUFBdTNDLGNBQUFwdkQsR0FHQWpJLElBRkE4ZixFQUFBNVUsTUFBQXF0RCxtQkFHQXo0QyxFQUFBdkwsVUFDQWdrRCxrQkFBQXY0RCxJQUdBaUksRUFBQXl1QixVQUFzQk8sRUFBT04sTUFDN0I3VyxFQUFBeEwsYUFBQXRVLEdBQ0tpSSxFQUFBeXVCLFVBQXdCTyxFQUFPeS9CLFNBQ3BDNTJDLEVBQUF4TCxhQUFBdFUsRUFBQSxHQUNLaUksRUFBQXl1QixVQUF3Qk8sRUFBTzAvQixZQUNwQzcyQyxFQUFBeEwsYUFBQXRVLEVBQUEsSUFJQWtILEtBQUFzMEQsZUFBQSxTQUFBcnFELEdBQ0EsSUFBQW5OLEVBQUE4YixFQUFBNVUsTUFBQWxILFFBQ0EwM0QsRUFBQXpELEVBQUE5bUQsRUFBQTJPLEVBQUE1VSxNQUFBNFUsRUFBQXhkLE9BQ0EwQixJQUFBMDNELElBQUExM0QsRUFHQSxJQUFBMDNELElBQ0ExM0QsRUFBQThiLEVBQUE1VSxNQUFBbEgsU0FHQSxpQkFBQW1OLElBQ0EsYUFBQTJPLEVBQUF4ZCxPQUNBd2QsRUFBQXZMLFVBQ0F3SCxTQUFBNUssSUFHQSxZQUFBMk8sRUFBQXhkLE9BQ0F3ZCxFQUFBdkwsVUFDQXZRLFVBQ0F1MEQsa0JBQUF2MEQsS0FJQThiLEVBQUF4ZCxNQUFBc1YsaUJBQUE1VCxFQUFBbU4sSUFHQWpLLEtBQUFvTixhQUFBLFNBQUF4TSxHQUNBLElBQUFpQyxFQUFBK1YsRUFBQXhkLE1BQUF5SCxTQUdBb3NELEVBQUFydUQsRUFDQSxHQUFBZ1ksRUFBQTg3QyxRQUFBekYsS0FBQXBzRCxFQUFBLENBQ0EsSUFBQWd5RCxFQUFBOUQsT0FBQTN0RCxFQUFBd1YsRUFBQTVVLE1BQUE0VSxFQUFBeGQsT0FDQTZ6RCxFQUFBNEYsSUFDQTVGLEVBQUE0RixHQUdBLFlBQUFqOEMsRUFBQXhkLE9BQ0F3ZCxFQUFBdkwsVUFDQXZRLFFBQUFteUQsRUFDQW9DLGtCQUFBcEMsSUFJQSxJQUFBcDZDLEVBQUErRCxFQUFBNVUsTUFBQTZRLFNBR0EsT0FGQStELEVBQUF4ZCxNQUFBMEcsU0FBQW10RCxFQUFBcDZDLEdBRUFvNkMsRUFHQSxPQUFBcjJDLEVBQUE1VSxNQUFBbEgsU0FHQWtELEtBQUF6RSxLQUFBLFdBQ0FxZCxFQUFBNDVDLFdBQ0E1NUMsRUFBQXhMLGFBQUF3TCxFQUFBNVUsTUFBQWxILFFBQUEsSUFJQWtELEtBQUFnaUMsS0FBQSxXQUNBcHBCLEVBQUFtNkMsV0FDQW42QyxFQUFBeEwsYUFBQXdMLEVBQUE1VSxNQUFBbEgsUUFBQSxJQUlBa0QsS0FBQTJ4RCxTQUFBLFdBQ0EvNEMsRUFBQXhMLGFBQUF3TCxFQUFBKzZDLG9CQUdBM3pELEtBQUE0eEQsU0FBQSxXQUNBaDVDLEVBQUF4TCxhQUFBd0wsRUFBQWs3QyxvQkFHQTl6RCxLQUFBd3lELFFBQUEsV0FDQSxPQUFBNTVDLEVBQUE1VSxNQUFBbEgsUUFBQSxHQUdBa0QsS0FBQSt5RCxRQUFBLFdBQ0EsT0FBQW42QyxFQUFBNVUsTUFBQWxILFFBQUFpMEQsT0FBQTN0RCxFQUFBd1YsRUFBQTVVLE1BQUE0VSxFQUFBeGQsUUFHQTRFLEtBQUFpekQsV0FBQSxTQUFBMTlDLEVBQUFuTixHQUNBLFFBQUFxTSxFQUFBNVUsVUFBQXJHLE9BQUFzN0QsRUFBQTMzRCxNQUFBc1gsRUFBQSxFQUFBQSxFQUFBLEtBQUFFLEVBQUEsRUFBNEZBLEVBQUFGLEVBQWFFLElBQ3pHbWdELEVBQUFuZ0QsRUFBQSxHQUFBOVUsVUFBQThVLEdBR0EsVUFBQVksRUFBQTliLEtBQUEsS0FBQThiLEVBQUF3L0MsVUFDQTNzRCxFQUFBckksV0FBQXFELEVBQUEweEQsSUFJQTkwRCxLQUFBeXlELGVBQUEsU0FBQTF4RCxHQUNBNlgsRUFBQXE2QyxXQUFBbHlELEVBQUE2WCxFQUFBcmQsT0FHQXlFLEtBQUE4eUQsZUFBQSxTQUFBL3hELEdBQ0E2WCxFQUFBcTZDLFdBQUFseUQsRUFBQTZYLEVBQUFvcEIsT0FHQWhpQyxLQUFBMHpELG1CQUFBLFNBQUEzeUQsR0FDQTZYLEVBQUFxNkMsV0FBQWx5RCxFQUFBNlgsRUFBQSs0QyxXQUdBM3hELEtBQUE2ekQsbUJBQUEsU0FBQTl5RCxHQUNBNlgsRUFBQXE2QyxXQUFBbHlELEVBQUE2WCxFQUFBZzVDLFdBR0E1eEQsS0FBQXF5RCxXQUFBLFNBQUF0eEQsR0FDQUEsRUFBQXl1QixVQUFzQk8sRUFBT04sT0FBQSxVQUFBMXVCLEVBQUFzRCxNQUM3QnVVLEVBQUF4TCxhQUFBd0wsRUFBQTVVLE1BQUFxdEQscUJBS0ExNEQsT0FBQXVXLEVBQUEsU0FBQXZXLENBQVNxNEQsR0FFTSxJQUFBZ0UsRUFBQSxFRWhyQmYvN0QsRUFBQXErQyxFQUFBbG9DLEVBQUEsNEJBQUE0bEQiLCJmaWxlIjoiY2h1bmtzLzUuMDNiZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eTIpO1xuXG5leHBvcnRzLnRvQXJyYXkgPSB0b0FycmF5O1xuZXhwb3J0cy5nZXRBY3RpdmVJbmRleCA9IGdldEFjdGl2ZUluZGV4O1xuZXhwb3J0cy5nZXRBY3RpdmVLZXkgPSBnZXRBY3RpdmVLZXk7XG5leHBvcnRzLnNldFRyYW5zZm9ybSA9IHNldFRyYW5zZm9ybTtcbmV4cG9ydHMuaXNUcmFuc2Zvcm0zZFN1cHBvcnRlZCA9IGlzVHJhbnNmb3JtM2RTdXBwb3J0ZWQ7XG5leHBvcnRzLnNldFRyYW5zaXRpb24gPSBzZXRUcmFuc2l0aW9uO1xuZXhwb3J0cy5nZXRUcmFuc2Zvcm1Qcm9wVmFsdWUgPSBnZXRUcmFuc2Zvcm1Qcm9wVmFsdWU7XG5leHBvcnRzLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xuZXhwb3J0cy5nZXRUcmFuc2Zvcm1CeUluZGV4ID0gZ2V0VHJhbnNmb3JtQnlJbmRleDtcbmV4cG9ydHMuZ2V0TWFyZ2luU3R5bGUgPSBnZXRNYXJnaW5TdHlsZTtcbmV4cG9ydHMuZ2V0U3R5bGUgPSBnZXRTdHlsZTtcbmV4cG9ydHMuc2V0UHhTdHlsZSA9IHNldFB4U3R5bGU7XG5leHBvcnRzLmdldERhdGFBdHRyID0gZ2V0RGF0YUF0dHI7XG5leHBvcnRzLmdldExlZnQgPSBnZXRMZWZ0O1xuZXhwb3J0cy5nZXRUb3AgPSBnZXRUb3A7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiB0b0FycmF5KGNoaWxkcmVuKSB7XG4gIC8vIGFsbG93IFtjLFthLGJdXVxuICB2YXIgYyA9IFtdO1xuICBfcmVhY3QyWydkZWZhdWx0J10uQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICBjLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjO1xufVxuXG5mdW5jdGlvbiBnZXRBY3RpdmVJbmRleChjaGlsZHJlbiwgYWN0aXZlS2V5KSB7XG4gIHZhciBjID0gdG9BcnJheShjaGlsZHJlbik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChjW2ldLmtleSA9PT0gYWN0aXZlS2V5KSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBnZXRBY3RpdmVLZXkoY2hpbGRyZW4sIGluZGV4KSB7XG4gIHZhciBjID0gdG9BcnJheShjaGlsZHJlbik7XG4gIHJldHVybiBjW2luZGV4XS5rZXk7XG59XG5cbmZ1bmN0aW9uIHNldFRyYW5zZm9ybShzdHlsZSwgdikge1xuICBzdHlsZS50cmFuc2Zvcm0gPSB2O1xuICBzdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB2O1xuICBzdHlsZS5tb3pUcmFuc2Zvcm0gPSB2O1xufVxuXG5mdW5jdGlvbiBpc1RyYW5zZm9ybTNkU3VwcG9ydGVkKHN0eWxlKSB7XG4gIHJldHVybiAoJ3RyYW5zZm9ybScgaW4gc3R5bGUgfHwgJ3dlYmtpdFRyYW5zZm9ybScgaW4gc3R5bGUgfHwgJ01velRyYW5zZm9ybScgaW4gc3R5bGUpICYmIHdpbmRvdy5hdG9iO1xufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uKHN0eWxlLCB2KSB7XG4gIHN0eWxlLnRyYW5zaXRpb24gPSB2O1xuICBzdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdjtcbiAgc3R5bGUuTW96VHJhbnNpdGlvbiA9IHY7XG59XG5cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybVByb3BWYWx1ZSh2KSB7XG4gIHJldHVybiB7XG4gICAgdHJhbnNmb3JtOiB2LFxuICAgIFdlYmtpdFRyYW5zZm9ybTogdixcbiAgICBNb3pUcmFuc2Zvcm06IHZcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNWZXJ0aWNhbCh0YWJCYXJQb3NpdGlvbikge1xuICByZXR1cm4gdGFiQmFyUG9zaXRpb24gPT09ICdsZWZ0JyB8fCB0YWJCYXJQb3NpdGlvbiA9PT0gJ3JpZ2h0Jztcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtQnlJbmRleChpbmRleCwgdGFiQmFyUG9zaXRpb24pIHtcbiAgdmFyIHRyYW5zbGF0ZSA9IGlzVmVydGljYWwodGFiQmFyUG9zaXRpb24pID8gJ3RyYW5zbGF0ZVknIDogJ3RyYW5zbGF0ZVgnO1xuICByZXR1cm4gdHJhbnNsYXRlICsgJygnICsgLWluZGV4ICogMTAwICsgJyUpIHRyYW5zbGF0ZVooMCknO1xufVxuXG5mdW5jdGlvbiBnZXRNYXJnaW5TdHlsZShpbmRleCwgdGFiQmFyUG9zaXRpb24pIHtcbiAgdmFyIG1hcmdpbkRpcmVjdGlvbiA9IGlzVmVydGljYWwodGFiQmFyUG9zaXRpb24pID8gJ21hcmdpblRvcCcgOiAnbWFyZ2luTGVmdCc7XG4gIHJldHVybiAoMCwgX2RlZmluZVByb3BlcnR5M1snZGVmYXVsdCddKSh7fSwgbWFyZ2luRGlyZWN0aW9uLCAtaW5kZXggKiAxMDAgKyAnJScpO1xufVxuXG5mdW5jdGlvbiBnZXRTdHlsZShlbCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuICt3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkucmVwbGFjZSgncHgnLCAnJyk7XG59XG5cbmZ1bmN0aW9uIHNldFB4U3R5bGUoZWwsIHZhbHVlLCB2ZXJ0aWNhbCkge1xuICB2YWx1ZSA9IHZlcnRpY2FsID8gJzBweCwgJyArIHZhbHVlICsgJ3B4LCAwcHgnIDogdmFsdWUgKyAncHgsIDBweCwgMHB4JztcbiAgc2V0VHJhbnNmb3JtKGVsLnN0eWxlLCAndHJhbnNsYXRlM2QoJyArIHZhbHVlICsgJyknKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YUF0dHIocHJvcHMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGtleSkge1xuICAgIGlmIChrZXkuc3Vic3RyKDAsIDUpID09PSAnYXJpYS0nIHx8IGtleS5zdWJzdHIoMCwgNSkgPT09ICdkYXRhLScgfHwga2V5ID09PSAncm9sZScpIHtcbiAgICAgIHByZXZba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICAgIHJldHVybiBwcmV2O1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIHRvTnVtKHN0eWxlLCBwcm9wZXJ0eSkge1xuICByZXR1cm4gK3N0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpLnJlcGxhY2UoJ3B4JywgJycpO1xufVxuXG5mdW5jdGlvbiBnZXRUeXBlVmFsdWUoc3RhcnQsIGN1cnJlbnQsIGVuZCwgdGFiTm9kZSwgd3JhcHBlck5vZGUpIHtcbiAgdmFyIHRvdGFsID0gZ2V0U3R5bGUod3JhcHBlck5vZGUsICdwYWRkaW5nLScgKyBzdGFydCk7XG4gIGlmICghdGFiTm9kZSB8fCAhdGFiTm9kZS5wYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIHRvdGFsO1xuICB9XG5cbiAgdmFyIGNoaWxkTm9kZXMgPSB0YWJOb2RlLnBhcmVudE5vZGUuY2hpbGROb2RlcztcblxuICBBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKGNoaWxkTm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG5cbiAgICBpZiAobm9kZSAhPT0gdGFiTm9kZSkge1xuICAgICAgdG90YWwgKz0gdG9OdW0oc3R5bGUsICdtYXJnaW4tJyArIHN0YXJ0KTtcbiAgICAgIHRvdGFsICs9IG5vZGVbY3VycmVudF07XG4gICAgICB0b3RhbCArPSB0b051bShzdHlsZSwgJ21hcmdpbi0nICsgZW5kKTtcblxuICAgICAgaWYgKHN0eWxlLmJveFNpemluZyA9PT0gJ2NvbnRlbnQtYm94Jykge1xuICAgICAgICB0b3RhbCArPSB0b051bShzdHlsZSwgJ2JvcmRlci0nICsgc3RhcnQgKyAnLXdpZHRoJykgKyB0b051bShzdHlsZSwgJ2JvcmRlci0nICsgZW5kICsgJy13aWR0aCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFdlIG5lZWQgY291bnQgY3VycmVudCBub2RlIG1hcmdpblxuICAgIC8vIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC90YWJzL3B1bGwvMTM5I2lzc3VlY29tbWVudC00MzEwMDUyNjJcbiAgICB0b3RhbCArPSB0b051bShzdHlsZSwgJ21hcmdpbi0nICsgc3RhcnQpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiB0b3RhbDtcbn1cblxuZnVuY3Rpb24gZ2V0TGVmdCh0YWJOb2RlLCB3cmFwcGVyTm9kZSkge1xuICByZXR1cm4gZ2V0VHlwZVZhbHVlKCdsZWZ0JywgJ29mZnNldFdpZHRoJywgJ3JpZ2h0JywgdGFiTm9kZSwgd3JhcHBlck5vZGUpO1xufVxuXG5mdW5jdGlvbiBnZXRUb3AodGFiTm9kZSwgd3JhcHBlck5vZGUpIHtcbiAgcmV0dXJuIGdldFR5cGVWYWx1ZSgndG9wJywgJ29mZnNldEhlaWdodCcsICdib3R0b20nLCB0YWJOb2RlLCB3cmFwcGVyTm9kZSk7XG59IiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX0NoZWNrYm94ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DaGVja2JveFwiKSk7XG5cbnZhciBfR3JvdXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0dyb3VwXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbl9DaGVja2JveFtcImRlZmF1bHRcIl0uR3JvdXAgPSBfR3JvdXBbXCJkZWZhdWx0XCJdO1xudmFyIF9kZWZhdWx0ID0gX0NoZWNrYm94W1wiZGVmYXVsdFwiXTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmNDaGVja2JveCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLWNoZWNrYm94XCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfc2hhbGxvd2VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwic2hhbGxvd2VxdWFsXCIpKTtcblxudmFyIF9jb25maWdQcm92aWRlciA9IHJlcXVpcmUoXCIuLi9jb25maWctcHJvdmlkZXJcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBfX3Jlc3QgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG5cbiAgZm9yICh2YXIgcCBpbiBzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgfVxuXG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuXG52YXIgUmFkaW8gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJhZGlvLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSYWRpbygpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmFkaW8pO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUmFkaW8pLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXG4gICAgX3RoaXMuc2F2ZUNoZWNrYm94ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLnJjQ2hlY2tib3ggPSBub2RlO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UoZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5jb250ZXh0LnJhZGlvR3JvdXAgJiYgX3RoaXMuY29udGV4dC5yYWRpb0dyb3VwLm9uQ2hhbmdlKSB7XG4gICAgICAgIF90aGlzLmNvbnRleHQucmFkaW9Hcm91cC5vbkNoYW5nZShlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyUmFkaW8gPSBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIF9jbGFzc05hbWVzO1xuXG4gICAgICB2YXIgZ2V0UHJlZml4Q2xzID0gX3JlZi5nZXRQcmVmaXhDbHM7XG5cbiAgICAgIHZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemUgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSxcbiAgICAgICAgICBwcm9wcyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZS5wcm9wcyxcbiAgICAgICAgICBjb250ZXh0ID0gX2Fzc2VydFRoaXNJbml0aWFsaXplLmNvbnRleHQ7XG5cbiAgICAgIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgICAgICByZXN0UHJvcHMgPSBfX3Jlc3QocHJvcHMsIFtcInByZWZpeENsc1wiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCIsIFwic3R5bGVcIl0pO1xuXG4gICAgICB2YXIgcmFkaW9Hcm91cCA9IGNvbnRleHQucmFkaW9Hcm91cDtcbiAgICAgIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ3JhZGlvJywgY3VzdG9taXplUHJlZml4Q2xzKTtcblxuICAgICAgdmFyIHJhZGlvUHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdFByb3BzKTtcblxuICAgICAgaWYgKHJhZGlvR3JvdXApIHtcbiAgICAgICAgcmFkaW9Qcm9wcy5uYW1lID0gcmFkaW9Hcm91cC5uYW1lO1xuICAgICAgICByYWRpb1Byb3BzLm9uQ2hhbmdlID0gX3RoaXMub25DaGFuZ2U7XG4gICAgICAgIHJhZGlvUHJvcHMuY2hlY2tlZCA9IHByb3BzLnZhbHVlID09PSByYWRpb0dyb3VwLnZhbHVlO1xuICAgICAgICByYWRpb1Byb3BzLmRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQgfHwgcmFkaW9Hcm91cC5kaXNhYmxlZDtcbiAgICAgIH1cblxuICAgICAgdmFyIHdyYXBwZXJDbGFzc1N0cmluZyA9ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKGNsYXNzTmFtZSwgKF9jbGFzc05hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi13cmFwcGVyXCIpLCB0cnVlKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXdyYXBwZXItY2hlY2tlZFwiKSwgcmFkaW9Qcm9wcy5jaGVja2VkKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXdyYXBwZXItZGlzYWJsZWRcIiksIHJhZGlvUHJvcHMuZGlzYWJsZWQpLCBfY2xhc3NOYW1lcykpO1xuICAgICAgcmV0dXJuICgvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvbGFiZWwtaGFzLWFzc29jaWF0ZWQtY29udHJvbFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogd3JhcHBlckNsYXNzU3RyaW5nLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6IHByb3BzLm9uTW91c2VFbnRlcixcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IHByb3BzLm9uTW91c2VMZWF2ZVxuICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KF9yY0NoZWNrYm94W1wiZGVmYXVsdFwiXSwgX2V4dGVuZHMoe30sIHJhZGlvUHJvcHMsIHtcbiAgICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgICByZWY6IF90aGlzLnNhdmVDaGVja2JveFxuICAgICAgICB9KSksIGNoaWxkcmVuICE9PSB1bmRlZmluZWQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBjaGlsZHJlbikgOiBudWxsKVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJhZGlvLCBbe1xuICAgIGtleTogXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCkge1xuICAgICAgcmV0dXJuICEoMCwgX3NoYWxsb3dlcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfc2hhbGxvd2VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKSB8fCAhKDAsIF9zaGFsbG93ZXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLmNvbnRleHQucmFkaW9Hcm91cCwgbmV4dENvbnRleHQucmFkaW9Hcm91cCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvY3VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgdGhpcy5yY0NoZWNrYm94LmZvY3VzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImJsdXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmx1cigpIHtcbiAgICAgIHRoaXMucmNDaGVja2JveC5ibHVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29uc3VtZXIsIG51bGwsIHRoaXMucmVuZGVyUmFkaW8pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSYWRpbztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBSYWRpbztcblJhZGlvLmRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZTogJ3JhZGlvJ1xufTtcblJhZGlvLmNvbnRleHRUeXBlcyA9IHtcbiAgcmFkaW9Hcm91cDogUHJvcFR5cGVzLmFueVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhZGlvLmpzLm1hcFxuIiwidmFyIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnbk1lcmdlVmFsdWU7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UHJvdG90eXBlO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzYWZlR2V0O1xuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXNJbiA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzSW4nKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5c0luO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0ID0gcmVxdWlyZShcInJlYWN0LWxpZmVjeWNsZXMtY29tcGF0XCIpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9yY0NoZWNrYm94ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtY2hlY2tib3hcIikpO1xuXG52YXIgX3NoYWxsb3dlcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInNoYWxsb3dlcXVhbFwiKSk7XG5cbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fdXRpbC93YXJuaW5nXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIF9fcmVzdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcblxuICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICB9XG5cbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5cbnZhciBDaGVja2JveCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ2hlY2tib3gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENoZWNrYm94KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDaGVja2JveCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihDaGVja2JveCkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cbiAgICBfdGhpcy5zYXZlQ2hlY2tib3ggPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMucmNDaGVja2JveCA9IG5vZGU7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlckNoZWNrYm94ID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgICAgdmFyIGdldFByZWZpeENscyA9IF9yZWYuZ2V0UHJlZml4Q2xzO1xuXG4gICAgICB2YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksXG4gICAgICAgICAgcHJvcHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemUucHJvcHMsXG4gICAgICAgICAgY29udGV4dCA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZS5jb250ZXh0O1xuXG4gICAgICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGluZGV0ZXJtaW5hdGUgPSBwcm9wcy5pbmRldGVybWluYXRlLFxuICAgICAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICAgICAgb25Nb3VzZUVudGVyID0gcHJvcHMub25Nb3VzZUVudGVyLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZSA9IHByb3BzLm9uTW91c2VMZWF2ZSxcbiAgICAgICAgICByZXN0UHJvcHMgPSBfX3Jlc3QocHJvcHMsIFtcInByZWZpeENsc1wiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCIsIFwiaW5kZXRlcm1pbmF0ZVwiLCBcInN0eWxlXCIsIFwib25Nb3VzZUVudGVyXCIsIFwib25Nb3VzZUxlYXZlXCJdKTtcblxuICAgICAgdmFyIGNoZWNrYm94R3JvdXAgPSBjb250ZXh0LmNoZWNrYm94R3JvdXA7XG4gICAgICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdjaGVja2JveCcsIGN1c3RvbWl6ZVByZWZpeENscyk7XG5cbiAgICAgIHZhciBjaGVja2JveFByb3BzID0gX2V4dGVuZHMoe30sIHJlc3RQcm9wcyk7XG5cbiAgICAgIGlmIChjaGVja2JveEdyb3VwKSB7XG4gICAgICAgIGNoZWNrYm94UHJvcHMub25DaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHJlc3RQcm9wcy5vbkNoYW5nZSkge1xuICAgICAgICAgICAgcmVzdFByb3BzLm9uQ2hhbmdlLmFwcGx5KHJlc3RQcm9wcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGVja2JveEdyb3VwLnRvZ2dsZU9wdGlvbih7XG4gICAgICAgICAgICBsYWJlbDogY2hpbGRyZW4sXG4gICAgICAgICAgICB2YWx1ZTogcHJvcHMudmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBjaGVja2JveFByb3BzLm5hbWUgPSBjaGVja2JveEdyb3VwLm5hbWU7XG4gICAgICAgIGNoZWNrYm94UHJvcHMuY2hlY2tlZCA9IGNoZWNrYm94R3JvdXAudmFsdWUuaW5kZXhPZihwcm9wcy52YWx1ZSkgIT09IC0xO1xuICAgICAgICBjaGVja2JveFByb3BzLmRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQgfHwgY2hlY2tib3hHcm91cC5kaXNhYmxlZDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsYXNzU3RyaW5nID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoY2xhc3NOYW1lLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXdyYXBwZXJcIiksIHRydWUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItd3JhcHBlci1jaGVja2VkXCIpLCBjaGVja2JveFByb3BzLmNoZWNrZWQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItd3JhcHBlci1kaXNhYmxlZFwiKSwgY2hlY2tib3hQcm9wcy5kaXNhYmxlZCksIF9jbGFzc05hbWVzKSk7XG4gICAgICB2YXIgY2hlY2tib3hDbGFzcyA9ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pbmRldGVybWluYXRlXCIpLCBpbmRldGVybWluYXRlKSk7XG4gICAgICByZXR1cm4gKC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9sYWJlbC1oYXMtYXNzb2NpYXRlZC1jb250cm9sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc1N0cmluZyxcbiAgICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgICAgb25Nb3VzZUVudGVyOiBvbk1vdXNlRW50ZXIsXG4gICAgICAgICAgb25Nb3VzZUxlYXZlOiBvbk1vdXNlTGVhdmVcbiAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChfcmNDaGVja2JveFtcImRlZmF1bHRcIl0sIF9leHRlbmRzKHt9LCBjaGVja2JveFByb3BzLCB7XG4gICAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjaGVja2JveENsYXNzLFxuICAgICAgICAgIHJlZjogX3RoaXMuc2F2ZUNoZWNrYm94XG4gICAgICAgIH0pKSwgY2hpbGRyZW4gIT09IHVuZGVmaW5lZCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBjaGlsZHJlbikpXG4gICAgICApO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2hlY2tib3gsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcblxuICAgICAgdmFyIF9yZWYyID0gdGhpcy5jb250ZXh0IHx8IHt9LFxuICAgICAgICAgIF9yZWYyJGNoZWNrYm94R3JvdXAgPSBfcmVmMi5jaGVja2JveEdyb3VwLFxuICAgICAgICAgIGNoZWNrYm94R3JvdXAgPSBfcmVmMiRjaGVja2JveEdyb3VwID09PSB2b2lkIDAgPyB7fSA6IF9yZWYyJGNoZWNrYm94R3JvdXA7XG5cbiAgICAgIGlmIChjaGVja2JveEdyb3VwLnJlZ2lzdGVyVmFsdWUpIHtcbiAgICAgICAgY2hlY2tib3hHcm91cC5yZWdpc3RlclZhbHVlKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkoJ2NoZWNrZWQnIGluIHRoaXMucHJvcHMgfHwgKHRoaXMuY29udGV4dCB8fCB7fSkuY2hlY2tib3hHcm91cCB8fCAhKCd2YWx1ZScgaW4gdGhpcy5wcm9wcyksICdDaGVja2JveCcsICdgdmFsdWVgIGlzIG5vdCB2YWxpZGF0ZSBwcm9wLCBkbyB5b3UgbWVhbiBgY2hlY2tlZGA/Jyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KSB7XG4gICAgICByZXR1cm4gISgwLCBfc2hhbGxvd2VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9zaGFsbG93ZXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpIHx8ICEoMCwgX3NoYWxsb3dlcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMuY29udGV4dC5jaGVja2JveEdyb3VwLCBuZXh0Q29udGV4dC5jaGVja2JveEdyb3VwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShfcmVmMykge1xuICAgICAgdmFyIHByZXZWYWx1ZSA9IF9yZWYzLnZhbHVlO1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcblxuICAgICAgdmFyIF9yZWY0ID0gdGhpcy5jb250ZXh0IHx8IHt9LFxuICAgICAgICAgIF9yZWY0JGNoZWNrYm94R3JvdXAgPSBfcmVmNC5jaGVja2JveEdyb3VwLFxuICAgICAgICAgIGNoZWNrYm94R3JvdXAgPSBfcmVmNCRjaGVja2JveEdyb3VwID09PSB2b2lkIDAgPyB7fSA6IF9yZWY0JGNoZWNrYm94R3JvdXA7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gcHJldlZhbHVlICYmIGNoZWNrYm94R3JvdXAucmVnaXN0ZXJWYWx1ZSAmJiBjaGVja2JveEdyb3VwLmNhbmNlbFZhbHVlKSB7XG4gICAgICAgIGNoZWNrYm94R3JvdXAuY2FuY2VsVmFsdWUocHJldlZhbHVlKTtcbiAgICAgICAgY2hlY2tib3hHcm91cC5yZWdpc3RlclZhbHVlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuXG4gICAgICB2YXIgX3JlZjUgPSB0aGlzLmNvbnRleHQgfHwge30sXG4gICAgICAgICAgX3JlZjUkY2hlY2tib3hHcm91cCA9IF9yZWY1LmNoZWNrYm94R3JvdXAsXG4gICAgICAgICAgY2hlY2tib3hHcm91cCA9IF9yZWY1JGNoZWNrYm94R3JvdXAgPT09IHZvaWQgMCA/IHt9IDogX3JlZjUkY2hlY2tib3hHcm91cDtcblxuICAgICAgaWYgKGNoZWNrYm94R3JvdXAuY2FuY2VsVmFsdWUpIHtcbiAgICAgICAgY2hlY2tib3hHcm91cC5jYW5jZWxWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvY3VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgdGhpcy5yY0NoZWNrYm94LmZvY3VzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImJsdXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmx1cigpIHtcbiAgICAgIHRoaXMucmNDaGVja2JveC5ibHVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29uc3VtZXIsIG51bGwsIHRoaXMucmVuZGVyQ2hlY2tib3gpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDaGVja2JveDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ2hlY2tib3guX19BTlRfQ0hFQ0tCT1ggPSB0cnVlO1xuQ2hlY2tib3guZGVmYXVsdFByb3BzID0ge1xuICBpbmRldGVybWluYXRlOiBmYWxzZVxufTtcbkNoZWNrYm94LmNvbnRleHRUeXBlcyA9IHtcbiAgY2hlY2tib3hHcm91cDogUHJvcFR5cGVzLmFueVxufTtcbigwLCBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShDaGVja2JveCk7XG52YXIgX2RlZmF1bHQgPSBDaGVja2JveDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DaGVja2JveC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR3JvdXBcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2dyb3VwW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCdXR0b25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3JhZGlvQnV0dG9uW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yYWRpbyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmFkaW9cIikpO1xuXG52YXIgX2dyb3VwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ncm91cFwiKSk7XG5cbnZhciBfcmFkaW9CdXR0b24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JhZGlvQnV0dG9uXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbl9yYWRpb1tcImRlZmF1bHRcIl0uQnV0dG9uID0gX3JhZGlvQnV0dG9uW1wiZGVmYXVsdFwiXTtcbl9yYWRpb1tcImRlZmF1bHRcIl0uR3JvdXAgPSBfZ3JvdXBbXCJkZWZhdWx0XCJdO1xudmFyIF9kZWZhdWx0ID0gX3JhZGlvW1wiZGVmYXVsdFwiXTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5mbGF0QXJyYXkgPSBmbGF0QXJyYXk7XG5leHBvcnRzLnRyZWVNYXAgPSB0cmVlTWFwO1xuZXhwb3J0cy5mbGF0RmlsdGVyID0gZmxhdEZpbHRlcjtcbmV4cG9ydHMubm9ybWFsaXplQ29sdW1ucyA9IG5vcm1hbGl6ZUNvbHVtbnM7XG5leHBvcnRzLmdlbmVyYXRlVmFsdWVNYXBzID0gZ2VuZXJhdGVWYWx1ZU1hcHM7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBmbGF0QXJyYXkoKSB7XG4gIHZhciBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgdmFyIGNoaWxkcmVuTmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2NoaWxkcmVuJztcbiAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gIHZhciBsb29wID0gZnVuY3Rpb24gbG9vcChhcnJheSkge1xuICAgIGFycmF5LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIGlmIChpdGVtW2NoaWxkcmVuTmFtZV0pIHtcbiAgICAgICAgdmFyIG5ld0l0ZW0gPSBfZXh0ZW5kcyh7fSwgaXRlbSk7XG5cbiAgICAgICAgZGVsZXRlIG5ld0l0ZW1bY2hpbGRyZW5OYW1lXTtcbiAgICAgICAgcmVzdWx0LnB1c2gobmV3SXRlbSk7XG5cbiAgICAgICAgaWYgKGl0ZW1bY2hpbGRyZW5OYW1lXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbG9vcChpdGVtW2NoaWxkcmVuTmFtZV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBsb29wKGRhdGEpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiB0cmVlTWFwKHRyZWUsIG1hcHBlcikge1xuICB2YXIgY2hpbGRyZW5OYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnY2hpbGRyZW4nO1xuICByZXR1cm4gdHJlZS5tYXAoZnVuY3Rpb24gKG5vZGUsIGluZGV4KSB7XG4gICAgdmFyIGV4dHJhID0ge307XG5cbiAgICBpZiAobm9kZVtjaGlsZHJlbk5hbWVdKSB7XG4gICAgICBleHRyYVtjaGlsZHJlbk5hbWVdID0gdHJlZU1hcChub2RlW2NoaWxkcmVuTmFtZV0sIG1hcHBlciwgY2hpbGRyZW5OYW1lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoX2V4dGVuZHMoe30sIG1hcHBlcihub2RlLCBpbmRleCkpLCBleHRyYSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmbGF0RmlsdGVyKHRyZWUsIGNhbGxiYWNrKSB7XG4gIHJldHVybiB0cmVlLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBub2RlKSB7XG4gICAgaWYgKGNhbGxiYWNrKG5vZGUpKSB7XG4gICAgICBhY2MucHVzaChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgdmFyIGNoaWxkcmVuID0gZmxhdEZpbHRlcihub2RlLmNoaWxkcmVuLCBjYWxsYmFjayk7XG4gICAgICBhY2MucHVzaC5hcHBseShhY2MsIF90b0NvbnN1bWFibGVBcnJheShjaGlsZHJlbikpO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQ29sdW1ucyhlbGVtZW50cykge1xuICB2YXIgY29sdW1ucyA9IFtdO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY29sdW1uID0gX2V4dGVuZHMoe30sIGVsZW1lbnQucHJvcHMpO1xuXG4gICAgaWYgKGVsZW1lbnQua2V5KSB7XG4gICAgICBjb2x1bW4ua2V5ID0gZWxlbWVudC5rZXk7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQudHlwZSAmJiBlbGVtZW50LnR5cGUuX19BTlRfVEFCTEVfQ09MVU1OX0dST1VQKSB7XG4gICAgICBjb2x1bW4uY2hpbGRyZW4gPSBub3JtYWxpemVDb2x1bW5zKGNvbHVtbi5jaGlsZHJlbik7XG4gICAgfVxuXG4gICAgY29sdW1ucy5wdXNoKGNvbHVtbik7XG4gIH0pO1xuICByZXR1cm4gY29sdW1ucztcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVWYWx1ZU1hcHMoaXRlbXMpIHtcbiAgdmFyIG1hcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAoaXRlbXMgfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gICAgbWFwc1t2YWx1ZS50b1N0cmluZygpXSA9IHZhbHVlO1xuICAgIGdlbmVyYXRlVmFsdWVNYXBzKGNoaWxkcmVuLCBtYXBzKTtcbiAgfSk7XG4gIHJldHVybiBtYXBzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmNTZWxlY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmMtc2VsZWN0XCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfb21pdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm9taXQuanNcIikpO1xuXG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX3V0aWwvd2FybmluZ1wiKSk7XG5cbnZhciBfaWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ljb25cIikpO1xuXG52YXIgX3R5cGUgPSByZXF1aXJlKFwiLi4vX3V0aWwvdHlwZVwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIF9fcmVzdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcblxuICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICB9XG5cbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5cbnZhciBTZWxlY3RTaXplcyA9ICgwLCBfdHlwZS50dXBsZSkoJ2RlZmF1bHQnLCAnbGFyZ2UnLCAnc21hbGwnKTtcbnZhciBTZWxlY3RQcm9wVHlwZXMgPSB7XG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2YoU2VsZWN0U2l6ZXMpLFxuICBub3RGb3VuZENvbnRlbnQ6IFByb3BUeXBlcy5hbnksXG4gIHNob3dTZWFyY2g6IFByb3BUeXBlcy5ib29sLFxuICBvcHRpb25MYWJlbFByb3A6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRyYW5zaXRpb25OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaG9pY2VUcmFuc2l0aW9uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbnZhciBTZWxlY3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNlbGVjdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2VsZWN0KHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlbGVjdCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTZWxlY3QpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLnNhdmVTZWxlY3QgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMucmNTZWxlY3QgPSBub2RlO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZW5kZXJTZWxlY3QgPSBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIF9jbGFzc05hbWVzO1xuXG4gICAgICB2YXIgZ2V0Q29udGV4dFBvcHVwQ29udGFpbmVyID0gX3JlZi5nZXRQb3B1cENvbnRhaW5lcixcbiAgICAgICAgICBnZXRQcmVmaXhDbHMgPSBfcmVmLmdldFByZWZpeENscyxcbiAgICAgICAgICByZW5kZXJFbXB0eSA9IF9yZWYucmVuZGVyRW1wdHk7XG5cbiAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IF9hLnByZWZpeENscyxcbiAgICAgICAgICBfYSRjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX2EkY2xhc3NOYW1lID09PSB2b2lkIDAgPyAnJyA6IF9hJGNsYXNzTmFtZSxcbiAgICAgICAgICBzaXplID0gX2Euc2l6ZSxcbiAgICAgICAgICBtb2RlID0gX2EubW9kZSxcbiAgICAgICAgICBnZXRQb3B1cENvbnRhaW5lciA9IF9hLmdldFBvcHVwQ29udGFpbmVyLFxuICAgICAgICAgIHJlbW92ZUljb24gPSBfYS5yZW1vdmVJY29uLFxuICAgICAgICAgIGNsZWFySWNvbiA9IF9hLmNsZWFySWNvbixcbiAgICAgICAgICBtZW51SXRlbVNlbGVjdGVkSWNvbiA9IF9hLm1lbnVJdGVtU2VsZWN0ZWRJY29uLFxuICAgICAgICAgIHNob3dBcnJvdyA9IF9hLnNob3dBcnJvdyxcbiAgICAgICAgICBpbnB1dFZhbHVlID0gX2EuaW5wdXRWYWx1ZSxcbiAgICAgICAgICBzZWFyY2hWYWx1ZSA9IF9hLnNlYXJjaFZhbHVlLFxuICAgICAgICAgIHJlc3RQcm9wcyA9IF9fcmVzdChfYSwgW1wicHJlZml4Q2xzXCIsIFwiY2xhc3NOYW1lXCIsIFwic2l6ZVwiLCBcIm1vZGVcIiwgXCJnZXRQb3B1cENvbnRhaW5lclwiLCBcInJlbW92ZUljb25cIiwgXCJjbGVhckljb25cIiwgXCJtZW51SXRlbVNlbGVjdGVkSWNvblwiLCBcInNob3dBcnJvd1wiLCBcImlucHV0VmFsdWVcIiwgXCJzZWFyY2hWYWx1ZVwiXSk7XG5cbiAgICAgIHZhciByZXN0ID0gKDAsIF9vbWl0W1wiZGVmYXVsdFwiXSkocmVzdFByb3BzLCBbJ2lucHV0SWNvbiddKTtcbiAgICAgIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ3NlbGVjdCcsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgICB2YXIgY2xzID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoKF9jbGFzc05hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1sZ1wiKSwgc2l6ZSA9PT0gJ2xhcmdlJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zbVwiKSwgc2l6ZSA9PT0gJ3NtYWxsJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zaG93LWFycm93XCIpLCBzaG93QXJyb3cpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZSk7XG4gICAgICB2YXIgb3B0aW9uTGFiZWxQcm9wID0gX3RoaXMucHJvcHMub3B0aW9uTGFiZWxQcm9wO1xuXG4gICAgICBpZiAoX3RoaXMuaXNDb21ib2JveCgpKSB7XG4gICAgICAgIC8vIGNoaWxkcmVuIOW4piBkb20g57uT5p6E5pe277yM5peg5rOV5aGr5YWl6L6T5YWl5qGGXG4gICAgICAgIG9wdGlvbkxhYmVsUHJvcCA9IG9wdGlvbkxhYmVsUHJvcCB8fCAndmFsdWUnO1xuICAgICAgfVxuXG4gICAgICB2YXIgbW9kZUNvbmZpZyA9IHtcbiAgICAgICAgbXVsdGlwbGU6IG1vZGUgPT09ICdtdWx0aXBsZScsXG4gICAgICAgIHRhZ3M6IG1vZGUgPT09ICd0YWdzJyxcbiAgICAgICAgY29tYm9ib3g6IF90aGlzLmlzQ29tYm9ib3goKVxuICAgICAgfTtcbiAgICAgIHZhciBmaW5hbFJlbW92ZUljb24gPSByZW1vdmVJY29uICYmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChyZW1vdmVJY29uKSA/IFJlYWN0LmNsb25lRWxlbWVudChyZW1vdmVJY29uLCB7XG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkocmVtb3ZlSWNvbi5wcm9wcy5jbGFzc05hbWUsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcmVtb3ZlLWljb25cIikpXG4gICAgICB9KSA6IHJlbW92ZUljb24pIHx8IFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2ljb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHR5cGU6IFwiY2xvc2VcIixcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXJlbW92ZS1pY29uXCIpXG4gICAgICB9KTtcbiAgICAgIHZhciBmaW5hbENsZWFySWNvbiA9IGNsZWFySWNvbiAmJiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2xlYXJJY29uKSA/IFJlYWN0LmNsb25lRWxlbWVudChjbGVhckljb24sIHtcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShjbGVhckljb24ucHJvcHMuY2xhc3NOYW1lLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNsZWFyLWljb25cIikpXG4gICAgICB9KSA6IGNsZWFySWNvbikgfHwgUmVhY3QuY3JlYXRlRWxlbWVudChfaWNvbltcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgdHlwZTogXCJjbG9zZS1jaXJjbGVcIixcbiAgICAgICAgdGhlbWU6IFwiZmlsbGVkXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jbGVhci1pY29uXCIpXG4gICAgICB9KTtcbiAgICAgIHZhciBmaW5hbE1lbnVJdGVtU2VsZWN0ZWRJY29uID0gbWVudUl0ZW1TZWxlY3RlZEljb24gJiYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KG1lbnVJdGVtU2VsZWN0ZWRJY29uKSA/IFJlYWN0LmNsb25lRWxlbWVudChtZW51SXRlbVNlbGVjdGVkSWNvbiwge1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKG1lbnVJdGVtU2VsZWN0ZWRJY29uLnByb3BzLmNsYXNzTmFtZSwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zZWxlY3RlZC1pY29uXCIpKVxuICAgICAgfSkgOiBtZW51SXRlbVNlbGVjdGVkSWNvbikgfHwgUmVhY3QuY3JlYXRlRWxlbWVudChfaWNvbltcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgdHlwZTogXCJjaGVja1wiLFxuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItc2VsZWN0ZWQtaWNvblwiKVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfcmNTZWxlY3RbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7XG4gICAgICAgIGlucHV0SWNvbjogX3RoaXMucmVuZGVyU3VmZml4SWNvbihwcmVmaXhDbHMpLFxuICAgICAgICByZW1vdmVJY29uOiBmaW5hbFJlbW92ZUljb24sXG4gICAgICAgIGNsZWFySWNvbjogZmluYWxDbGVhckljb24sXG4gICAgICAgIG1lbnVJdGVtU2VsZWN0ZWRJY29uOiBmaW5hbE1lbnVJdGVtU2VsZWN0ZWRJY29uLFxuICAgICAgICBzaG93QXJyb3c6IHNob3dBcnJvd1xuICAgICAgfSwgcmVzdCwgbW9kZUNvbmZpZywge1xuICAgICAgICBpbnB1dFZhbHVlOiBzZWFyY2hWYWx1ZSB8fCBpbnB1dFZhbHVlLFxuICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgY2xhc3NOYW1lOiBjbHMsXG4gICAgICAgIG9wdGlvbkxhYmVsUHJvcDogb3B0aW9uTGFiZWxQcm9wIHx8ICdjaGlsZHJlbicsXG4gICAgICAgIG5vdEZvdW5kQ29udGVudDogX3RoaXMuZ2V0Tm90Rm91bmRDb250ZW50KHJlbmRlckVtcHR5KSxcbiAgICAgICAgZ2V0UG9wdXBDb250YWluZXI6IGdldFBvcHVwQ29udGFpbmVyIHx8IGdldENvbnRleHRQb3B1cENvbnRhaW5lcixcbiAgICAgICAgcmVmOiBfdGhpcy5zYXZlU2VsZWN0XG4gICAgICB9KSk7XG4gICAgfTtcblxuICAgICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKHByb3BzLm1vZGUgIT09ICdjb21ib2JveCcsICdTZWxlY3QnLCAnVGhlIGNvbWJvYm94IG1vZGUgaXMgZGVwcmVjYXRlZCwgJyArICdpdCB3aWxsIGJlIHJlbW92ZWQgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLCAnICsgJ3BsZWFzZSB1c2UgQXV0b0NvbXBsZXRlIGluc3RlYWQnKTtcbiAgICAoMCwgX3dhcm5pbmdbXCJkZWZhdWx0XCJdKSghKCdpbnB1dFZhbHVlJyBpbiBwcm9wcyksICdTZWxlY3QnLCAnYGlucHV0VmFsdWVgIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgYHNlYXJjaFZhbHVlYCBpbnN0ZWFkLicpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTZWxlY3QsIFt7XG4gICAga2V5OiBcImdldE5vdEZvdW5kQ29udGVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROb3RGb3VuZENvbnRlbnQocmVuZGVyRW1wdHkpIHtcbiAgICAgIHZhciBub3RGb3VuZENvbnRlbnQgPSB0aGlzLnByb3BzLm5vdEZvdW5kQ29udGVudDtcblxuICAgICAgaWYgKG5vdEZvdW5kQ29udGVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBub3RGb3VuZENvbnRlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzQ29tYm9ib3goKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlckVtcHR5KCdTZWxlY3QnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9jdXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICB0aGlzLnJjU2VsZWN0LmZvY3VzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImJsdXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmx1cigpIHtcbiAgICAgIHRoaXMucmNTZWxlY3QuYmx1cigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc0NvbWJvYm94XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzQ29tYm9ib3goKSB7XG4gICAgICB2YXIgbW9kZSA9IHRoaXMucHJvcHMubW9kZTtcbiAgICAgIHJldHVybiBtb2RlID09PSAnY29tYm9ib3gnIHx8IG1vZGUgPT09IFNlbGVjdC5TRUNSRVRfQ09NQk9CT1hfTU9ERV9ET19OT1RfVVNFO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJTdWZmaXhJY29uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclN1ZmZpeEljb24ocHJlZml4Q2xzKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGxvYWRpbmcgPSBfdGhpcyRwcm9wcy5sb2FkaW5nLFxuICAgICAgICAgIHN1ZmZpeEljb24gPSBfdGhpcyRwcm9wcy5zdWZmaXhJY29uO1xuXG4gICAgICBpZiAoc3VmZml4SWNvbikge1xuICAgICAgICByZXR1cm4gUmVhY3QuaXNWYWxpZEVsZW1lbnQoc3VmZml4SWNvbikgPyBSZWFjdC5jbG9uZUVsZW1lbnQoc3VmZml4SWNvbiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoc3VmZml4SWNvbi5wcm9wcy5jbGFzc05hbWUsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYXJyb3ctaWNvblwiKSlcbiAgICAgICAgfSkgOiBzdWZmaXhJY29uO1xuICAgICAgfVxuXG4gICAgICBpZiAobG9hZGluZykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfaWNvbltcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgICB0eXBlOiBcImxvYWRpbmdcIlxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2ljb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHR5cGU6IFwiZG93blwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYXJyb3ctaWNvblwiKVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29uc3VtZXIsIG51bGwsIHRoaXMucmVuZGVyU2VsZWN0KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2VsZWN0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFNlbGVjdDtcblNlbGVjdC5PcHRpb24gPSBfcmNTZWxlY3QuT3B0aW9uO1xuU2VsZWN0Lk9wdEdyb3VwID0gX3JjU2VsZWN0Lk9wdEdyb3VwO1xuU2VsZWN0LlNFQ1JFVF9DT01CT0JPWF9NT0RFX0RPX05PVF9VU0UgPSAnU0VDUkVUX0NPTUJPQk9YX01PREVfRE9fTk9UX1VTRSc7XG5TZWxlY3QuZGVmYXVsdFByb3BzID0ge1xuICBzaG93U2VhcmNoOiBmYWxzZSxcbiAgdHJhbnNpdGlvbk5hbWU6ICdzbGlkZS11cCcsXG4gIGNob2ljZVRyYW5zaXRpb25OYW1lOiAnem9vbSdcbn07XG5TZWxlY3QucHJvcFR5cGVzID0gU2VsZWN0UHJvcFR5cGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcIi4uLy4uL3N0eWxlL2luZGV4LmNzc1wiKTtcblxucmVxdWlyZShcIi4vaW5kZXguY3NzXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3NzLmpzLm1hcFxuIiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgcG9seWZpbGwgfSBmcm9tICdyZWFjdC1saWZlY3ljbGVzLWNvbXBhdCc7XG5cbnZhciBDaGVja2JveCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDaGVja2JveCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2hlY2tib3gocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hlY2tib3gpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBvbkNoYW5nZSA9IF90aGlzJHByb3BzLm9uQ2hhbmdlO1xuXG4gICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCEoJ2NoZWNrZWQnIGluIF90aGlzLnByb3BzKSkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgY2hlY2tlZDogZS50YXJnZXQuY2hlY2tlZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgICBvbkNoYW5nZSh7XG4gICAgICAgICAgdGFyZ2V0OiBfZXh0ZW5kcyh7fSwgX3RoaXMucHJvcHMsIHtcbiAgICAgICAgICAgIGNoZWNrZWQ6IGUudGFyZ2V0LmNoZWNrZWRcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbigpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gcHJldmVudERlZmF1bHQoKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIG5hdGl2ZUV2ZW50OiBlLm5hdGl2ZUV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zYXZlSW5wdXQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMuaW5wdXQgPSBub2RlO1xuICAgIH07XG5cbiAgICB2YXIgY2hlY2tlZCA9ICdjaGVja2VkJyBpbiBwcm9wcyA/IHByb3BzLmNoZWNrZWQgOiBwcm9wcy5kZWZhdWx0Q2hlY2tlZDtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY2hlY2tlZDogY2hlY2tlZFxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgQ2hlY2tib3guZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgIGlmICgnY2hlY2tlZCcgaW4gcHJvcHMpIHtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgY2hlY2tlZDogcHJvcHMuY2hlY2tlZFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIENoZWNrYm94LnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgIHRoaXMuaW5wdXQuZm9jdXMoKTtcbiAgfTtcblxuICBDaGVja2JveC5wcm90b3R5cGUuYmx1ciA9IGZ1bmN0aW9uIGJsdXIoKSB7XG4gICAgdGhpcy5pbnB1dC5ibHVyKCk7XG4gIH07XG5cbiAgQ2hlY2tib3gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcHJlZml4Q2xzID0gX3Byb3BzLnByZWZpeENscyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgIG5hbWUgPSBfcHJvcHMubmFtZSxcbiAgICAgICAgaWQgPSBfcHJvcHMuaWQsXG4gICAgICAgIHR5cGUgPSBfcHJvcHMudHlwZSxcbiAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIHJlYWRPbmx5ID0gX3Byb3BzLnJlYWRPbmx5LFxuICAgICAgICB0YWJJbmRleCA9IF9wcm9wcy50YWJJbmRleCxcbiAgICAgICAgb25DbGljayA9IF9wcm9wcy5vbkNsaWNrLFxuICAgICAgICBvbkZvY3VzID0gX3Byb3BzLm9uRm9jdXMsXG4gICAgICAgIG9uQmx1ciA9IF9wcm9wcy5vbkJsdXIsXG4gICAgICAgIGF1dG9Gb2N1cyA9IF9wcm9wcy5hdXRvRm9jdXMsXG4gICAgICAgIHZhbHVlID0gX3Byb3BzLnZhbHVlLFxuICAgICAgICBvdGhlcnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3ByZWZpeENscycsICdjbGFzc05hbWUnLCAnc3R5bGUnLCAnbmFtZScsICdpZCcsICd0eXBlJywgJ2Rpc2FibGVkJywgJ3JlYWRPbmx5JywgJ3RhYkluZGV4JywgJ29uQ2xpY2snLCAnb25Gb2N1cycsICdvbkJsdXInLCAnYXV0b0ZvY3VzJywgJ3ZhbHVlJ10pO1xuXG4gICAgdmFyIGdsb2JhbFByb3BzID0gT2JqZWN0LmtleXMob3RoZXJzKS5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGtleSkge1xuICAgICAgaWYgKGtleS5zdWJzdHIoMCwgNSkgPT09ICdhcmlhLScgfHwga2V5LnN1YnN0cigwLCA1KSA9PT0gJ2RhdGEtJyB8fCBrZXkgPT09ICdyb2xlJykge1xuICAgICAgICBwcmV2W2tleV0gPSBvdGhlcnNba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH0sIHt9KTtcblxuICAgIHZhciBjaGVja2VkID0gdGhpcy5zdGF0ZS5jaGVja2VkO1xuXG4gICAgdmFyIGNsYXNzU3RyaW5nID0gY2xhc3NOYW1lcyhwcmVmaXhDbHMsIGNsYXNzTmFtZSwgKF9jbGFzc05hbWVzID0ge30sIF9jbGFzc05hbWVzW3ByZWZpeENscyArICctY2hlY2tlZCddID0gY2hlY2tlZCwgX2NsYXNzTmFtZXNbcHJlZml4Q2xzICsgJy1kaXNhYmxlZCddID0gZGlzYWJsZWQsIF9jbGFzc05hbWVzKSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHsgY2xhc3NOYW1lOiBjbGFzc1N0cmluZywgc3R5bGU6IHN0eWxlIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIF9leHRlbmRzKHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgdGFiSW5kZXg6IHRhYkluZGV4LFxuICAgICAgICBjbGFzc05hbWU6IHByZWZpeENscyArICctaW5wdXQnLFxuICAgICAgICBjaGVja2VkOiAhIWNoZWNrZWQsXG4gICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICAgIG9uRm9jdXM6IG9uRm9jdXMsXG4gICAgICAgIG9uQmx1cjogb25CbHVyLFxuICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgICAgICByZWY6IHRoaXMuc2F2ZUlucHV0LFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0sIGdsb2JhbFByb3BzKSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctaW5uZXInIH0pXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gQ2hlY2tib3g7XG59KENvbXBvbmVudCk7XG5cbkNoZWNrYm94LnByb3BUeXBlcyA9IHtcbiAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGVmYXVsdENoZWNrZWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5ib29sXSksXG4gIGNoZWNrZWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5ib29sXSksXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn07XG5DaGVja2JveC5kZWZhdWx0UHJvcHMgPSB7XG4gIHByZWZpeENsczogJ3JjLWNoZWNrYm94JyxcbiAgY2xhc3NOYW1lOiAnJyxcbiAgc3R5bGU6IHt9LFxuICB0eXBlOiAnY2hlY2tib3gnLFxuICBkZWZhdWx0Q2hlY2tlZDogZmFsc2UsXG4gIG9uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoKSB7fSxcbiAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7fSxcbiAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKCkge31cbn07XG5cblxucG9seWZpbGwoQ2hlY2tib3gpO1xuXG5leHBvcnQgZGVmYXVsdCBDaGVja2JveDsiLCJpbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi9DaGVja2JveCc7XG5cbmV4cG9ydCBkZWZhdWx0IENoZWNrYm94OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfVGFibGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYmxlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbnZhciBfZGVmYXVsdCA9IF9UYWJsZVtcImRlZmF1bHRcIl07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgUmVhY3RET00gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9vbWl0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwib21pdC5qc1wiKSk7XG5cbnZhciBfcmNUYWJsZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyYy10YWJsZVwiKSk7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3NoYWxsb3dlcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInNoYWxsb3dlcXVhbFwiKSk7XG5cbnZhciBfZmlsdGVyRHJvcGRvd24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2ZpbHRlckRyb3Bkb3duXCIpKTtcblxudmFyIF9jcmVhdGVTdG9yZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlU3RvcmVcIikpO1xuXG52YXIgX1NlbGVjdGlvbkJveCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2VsZWN0aW9uQm94XCIpKTtcblxudmFyIF9TZWxlY3Rpb25DaGVja2JveEFsbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2VsZWN0aW9uQ2hlY2tib3hBbGxcIikpO1xuXG52YXIgX0NvbHVtbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ29sdW1uXCIpKTtcblxudmFyIF9Db2x1bW5Hcm91cCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ29sdW1uR3JvdXBcIikpO1xuXG52YXIgX2NyZWF0ZUJvZHlSb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZUJvZHlSb3dcIikpO1xuXG52YXIgX3V0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG52YXIgX3BhZ2luYXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9wYWdpbmF0aW9uXCIpKTtcblxudmFyIF9pY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaWNvblwiKSk7XG5cbnZhciBfc3BpbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NwaW5cIikpO1xuXG52YXIgX3RyYW5zQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX3V0aWwvdHJhbnNCdXR0b25cIikpO1xuXG52YXIgX0xvY2FsZVJlY2VpdmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vbG9jYWxlLXByb3ZpZGVyL0xvY2FsZVJlY2VpdmVyXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vbG9jYWxlL2RlZmF1bHRcIikpO1xuXG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX3V0aWwvd2FybmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBfX3Jlc3QgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG5cbiAgZm9yICh2YXIgcCBpbiBzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgfVxuXG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXNwcmVhZCAqL1xuXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24oZSkge1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gIGlmIChlLm5hdGl2ZUV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbikge1xuICAgIGUubmF0aXZlRXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Um93U2VsZWN0aW9uKHByb3BzKSB7XG4gIHJldHVybiBwcm9wcy5yb3dTZWxlY3Rpb24gfHwge307XG59XG5cbmZ1bmN0aW9uIGdldENvbHVtbktleShjb2x1bW4sIGluZGV4KSB7XG4gIHJldHVybiBjb2x1bW4ua2V5IHx8IGNvbHVtbi5kYXRhSW5kZXggfHwgaW5kZXg7XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNvbHVtbihhLCBiKSB7XG4gIGlmIChhICYmIGIgJiYgYS5rZXkgJiYgYS5rZXkgPT09IGIua2V5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gYSA9PT0gYiB8fCAoMCwgX3NoYWxsb3dlcXVhbFtcImRlZmF1bHRcIl0pKGEsIGIsIGZ1bmN0aW9uICh2YWx1ZSwgb3RoZXIpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvdGhlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCB2YWx1ZS50b1N0cmluZygpID09PSBvdGhlci50b1N0cmluZygpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBkZWZhdWx0UGFnaW5hdGlvbiA9IHtcbiAgb25DaGFuZ2U6IG5vb3AsXG4gIG9uU2hvd1NpemVDaGFuZ2U6IG5vb3Bcbn07XG4vKipcbiAqIEF2b2lkIGNyZWF0aW5nIG5ldyBvYmplY3QsIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZVxuICogY2FuIHdvcmtzIGFwcHJvcHJpYXRlbHnjgIJcbiAqL1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxudmFyIFRhYmxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUYWJsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFibGUocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFibGUpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVGFibGUpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmdldENoZWNrYm94UHJvcHNCeUl0ZW0gPSBmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgIHZhciByb3dTZWxlY3Rpb24gPSBnZXRSb3dTZWxlY3Rpb24oX3RoaXMucHJvcHMpO1xuXG4gICAgICBpZiAoIXJvd1NlbGVjdGlvbi5nZXRDaGVja2JveFByb3BzKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleSA9IF90aGlzLmdldFJlY29yZEtleShpdGVtLCBpbmRleCk7IC8vIENhY2hlIGNoZWNrYm94UHJvcHNcblxuXG4gICAgICBpZiAoIV90aGlzLkNoZWNrYm94UHJvcHNDYWNoZVtrZXldKSB7XG4gICAgICAgIF90aGlzLkNoZWNrYm94UHJvcHNDYWNoZVtrZXldID0gcm93U2VsZWN0aW9uLmdldENoZWNrYm94UHJvcHMoaXRlbSkgfHwge307XG4gICAgICAgIHZhciBjaGVja2JveFByb3BzID0gX3RoaXMuQ2hlY2tib3hQcm9wc0NhY2hlW2tleV07XG4gICAgICAgICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKCEoJ2NoZWNrZWQnIGluIGNoZWNrYm94UHJvcHMpICYmICEoJ2RlZmF1bHRDaGVja2VkJyBpbiBjaGVja2JveFByb3BzKSwgJ1RhYmxlJywgJ0RvIG5vdCBzZXQgYGNoZWNrZWRgIG9yIGBkZWZhdWx0Q2hlY2tlZGAgaW4gYGdldENoZWNrYm94UHJvcHNgLiBQbGVhc2UgdXNlIGBzZWxlY3RlZFJvd0tleXNgIGluc3RlYWQuJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5DaGVja2JveFByb3BzQ2FjaGVba2V5XTtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0UmVjb3JkS2V5ID0gZnVuY3Rpb24gKHJlY29yZCwgaW5kZXgpIHtcbiAgICAgIHZhciByb3dLZXkgPSBfdGhpcy5wcm9wcy5yb3dLZXk7XG4gICAgICB2YXIgcmVjb3JkS2V5ID0gdHlwZW9mIHJvd0tleSA9PT0gJ2Z1bmN0aW9uJyA/IHJvd0tleShyZWNvcmQsIGluZGV4KSA6IHJlY29yZFtyb3dLZXldO1xuICAgICAgKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkocmVjb3JkS2V5ICE9PSB1bmRlZmluZWQsICdUYWJsZScsICdFYWNoIHJlY29yZCBpbiBkYXRhU291cmNlIG9mIHRhYmxlIHNob3VsZCBoYXZlIGEgdW5pcXVlIGBrZXlgIHByb3AsICcgKyAnb3Igc2V0IGByb3dLZXlgIG9mIFRhYmxlIHRvIGFuIHVuaXF1ZSBwcmltYXJ5IGtleSwgJyArICdzZWUgaHR0cHM6Ly91LmFudC5kZXNpZ24vdGFibGUtcm93LWtleScpO1xuICAgICAgcmV0dXJuIHJlY29yZEtleSA9PT0gdW5kZWZpbmVkID8gaW5kZXggOiByZWNvcmRLZXk7XG4gICAgfTtcblxuICAgIF90aGlzLm9uUm93ID0gZnVuY3Rpb24gKHByZWZpeENscywgcmVjb3JkLCBpbmRleCkge1xuICAgICAgdmFyIG9uUm93ID0gX3RoaXMucHJvcHMub25Sb3c7XG4gICAgICB2YXIgY3VzdG9tID0gb25Sb3cgPyBvblJvdyhyZWNvcmQsIGluZGV4KSA6IHt9O1xuICAgICAgcmV0dXJuIF9leHRlbmRzKF9leHRlbmRzKHt9LCBjdXN0b20pLCB7XG4gICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICBzdG9yZTogX3RoaXMuc3RvcmUsXG4gICAgICAgIHJvd0tleTogX3RoaXMuZ2V0UmVjb3JkS2V5KHJlY29yZCwgaW5kZXgpXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2VuZXJhdGVQb3B1cENvbnRhaW5lckZ1bmMgPSBmdW5jdGlvbiAoZ2V0UG9wdXBDb250YWluZXIpIHtcbiAgICAgIHZhciBzY3JvbGwgPSBfdGhpcy5wcm9wcy5zY3JvbGw7XG5cbiAgICAgIGlmIChnZXRQb3B1cENvbnRhaW5lcikge1xuICAgICAgICByZXR1cm4gZ2V0UG9wdXBDb250YWluZXI7XG4gICAgICB9IC8vIFVzZSB1bmRlZmluZWQgdG8gbGV0IHJjIGNvbXBvbmVudCB1c2UgZGVmYXVsdCBsb2dpYy5cblxuXG4gICAgICByZXR1cm4gc2Nyb2xsID8gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUmVhY3RET00uZmluZERPTU5vZGUoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgICAgfSA6IHVuZGVmaW5lZDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRmlsdGVyID0gZnVuY3Rpb24gKGNvbHVtbiwgbmV4dEZpbHRlcnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IF90aGlzLnByb3BzO1xuXG4gICAgICB2YXIgcGFnaW5hdGlvbiA9IF9leHRlbmRzKHt9LCBfdGhpcy5zdGF0ZS5wYWdpbmF0aW9uKTtcblxuICAgICAgdmFyIGZpbHRlcnMgPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgX3RoaXMuc3RhdGUuZmlsdGVycyksIF9kZWZpbmVQcm9wZXJ0eSh7fSwgZ2V0Q29sdW1uS2V5KGNvbHVtbiksIG5leHRGaWx0ZXJzKSk7IC8vIFJlbW92ZSBmaWx0ZXJzIG5vdCBpbiBjdXJyZW50IGNvbHVtbnNcblxuXG4gICAgICB2YXIgY3VycmVudENvbHVtbktleXMgPSBbXTtcbiAgICAgICgwLCBfdXRpbC50cmVlTWFwKShfdGhpcy5jb2x1bW5zLCBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoIWMuY2hpbGRyZW4pIHtcbiAgICAgICAgICBjdXJyZW50Q29sdW1uS2V5cy5wdXNoKGdldENvbHVtbktleShjKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmtleXMoZmlsdGVycykuZm9yRWFjaChmdW5jdGlvbiAoY29sdW1uS2V5KSB7XG4gICAgICAgIGlmIChjdXJyZW50Q29sdW1uS2V5cy5pbmRleE9mKGNvbHVtbktleSkgPCAwKSB7XG4gICAgICAgICAgZGVsZXRlIGZpbHRlcnNbY29sdW1uS2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChwcm9wcy5wYWdpbmF0aW9uKSB7XG4gICAgICAgIC8vIFJlc2V0IGN1cnJlbnQgcHJvcFxuICAgICAgICBwYWdpbmF0aW9uLmN1cnJlbnQgPSAxO1xuICAgICAgICBwYWdpbmF0aW9uLm9uQ2hhbmdlKHBhZ2luYXRpb24uY3VycmVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdTdGF0ZSA9IHtcbiAgICAgICAgcGFnaW5hdGlvbjogcGFnaW5hdGlvbixcbiAgICAgICAgZmlsdGVyczoge31cbiAgICAgIH07XG5cbiAgICAgIHZhciBmaWx0ZXJzVG9TZXRTdGF0ZSA9IF9leHRlbmRzKHt9LCBmaWx0ZXJzKTsgLy8gUmVtb3ZlIGZpbHRlcnMgd2hpY2ggaXMgY29udHJvbGxlZFxuXG5cbiAgICAgIF90aGlzLmdldEZpbHRlcmVkVmFsdWVDb2x1bW5zKCkuZm9yRWFjaChmdW5jdGlvbiAoY29sKSB7XG4gICAgICAgIHZhciBjb2x1bW5LZXkgPSBnZXRDb2x1bW5LZXkoY29sKTtcblxuICAgICAgICBpZiAoY29sdW1uS2V5KSB7XG4gICAgICAgICAgZGVsZXRlIGZpbHRlcnNUb1NldFN0YXRlW2NvbHVtbktleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoT2JqZWN0LmtleXMoZmlsdGVyc1RvU2V0U3RhdGUpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbmV3U3RhdGUuZmlsdGVycyA9IGZpbHRlcnNUb1NldFN0YXRlO1xuICAgICAgfSAvLyBDb250cm9sbGVkIGN1cnJlbnQgcHJvcCB3aWxsIG5vdCByZXNwb25kIHVzZXIgaW50ZXJhY3Rpb25cblxuXG4gICAgICBpZiAoX3R5cGVvZihwcm9wcy5wYWdpbmF0aW9uKSA9PT0gJ29iamVjdCcgJiYgJ2N1cnJlbnQnIGluIHByb3BzLnBhZ2luYXRpb24pIHtcbiAgICAgICAgbmV3U3RhdGUucGFnaW5hdGlvbiA9IF9leHRlbmRzKF9leHRlbmRzKHt9LCBwYWdpbmF0aW9uKSwge1xuICAgICAgICAgIGN1cnJlbnQ6IF90aGlzLnN0YXRlLnBhZ2luYXRpb24uY3VycmVudFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUobmV3U3RhdGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuc3RvcmUuc2V0U3RhdGUoe1xuICAgICAgICAgIHNlbGVjdGlvbkRpcnR5OiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgb25DaGFuZ2UgPSBfdGhpcy5wcm9wcy5vbkNoYW5nZTtcblxuICAgICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgICBvbkNoYW5nZS5hcHBseShudWxsLCBfdGhpcy5wcmVwYXJlUGFyYW1zQXJndW1lbnRzKF9leHRlbmRzKF9leHRlbmRzKHt9LCBfdGhpcy5zdGF0ZSksIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbkRpcnR5OiBmYWxzZSxcbiAgICAgICAgICAgIGZpbHRlcnM6IGZpbHRlcnMsXG4gICAgICAgICAgICBwYWdpbmF0aW9uOiBwYWdpbmF0aW9uXG4gICAgICAgICAgfSkpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVNlbGVjdCA9IGZ1bmN0aW9uIChyZWNvcmQsIHJvd0luZGV4LCBlKSB7XG4gICAgICB2YXIgY2hlY2tlZCA9IGUudGFyZ2V0LmNoZWNrZWQ7XG4gICAgICB2YXIgbmF0aXZlRXZlbnQgPSBlLm5hdGl2ZUV2ZW50O1xuICAgICAgdmFyIGRlZmF1bHRTZWxlY3Rpb24gPSBfdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnNlbGVjdGlvbkRpcnR5ID8gW10gOiBfdGhpcy5nZXREZWZhdWx0U2VsZWN0aW9uKCk7XG5cbiAgICAgIHZhciBzZWxlY3RlZFJvd0tleXMgPSBfdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnNlbGVjdGVkUm93S2V5cy5jb25jYXQoZGVmYXVsdFNlbGVjdGlvbik7XG5cbiAgICAgIHZhciBrZXkgPSBfdGhpcy5nZXRSZWNvcmRLZXkocmVjb3JkLCByb3dJbmRleCk7XG5cbiAgICAgIHZhciBwaXZvdCA9IF90aGlzLnN0YXRlLnBpdm90O1xuXG4gICAgICB2YXIgcm93cyA9IF90aGlzLmdldEZsYXRDdXJyZW50UGFnZURhdGEoKTtcblxuICAgICAgdmFyIHJlYWxJbmRleCA9IHJvd0luZGV4O1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuZXhwYW5kZWRSb3dSZW5kZXIpIHtcbiAgICAgICAgcmVhbEluZGV4ID0gcm93cy5maW5kSW5kZXgoZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5nZXRSZWNvcmRLZXkocm93LCByb3dJbmRleCkgPT09IGtleTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuYXRpdmVFdmVudC5zaGlmdEtleSAmJiBwaXZvdCAhPT0gdW5kZWZpbmVkICYmIHJlYWxJbmRleCAhPT0gcGl2b3QpIHtcbiAgICAgICAgdmFyIGNoYW5nZVJvd0tleXMgPSBbXTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IE1hdGguc2lnbihwaXZvdCAtIHJlYWxJbmRleCk7XG4gICAgICAgIHZhciBkaXN0ID0gTWF0aC5hYnMocGl2b3QgLSByZWFsSW5kZXgpO1xuICAgICAgICB2YXIgc3RlcCA9IDA7XG5cbiAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoKSB7XG4gICAgICAgICAgdmFyIGkgPSByZWFsSW5kZXggKyBzdGVwICogZGlyZWN0aW9uO1xuICAgICAgICAgIHN0ZXAgKz0gMTtcbiAgICAgICAgICB2YXIgcm93ID0gcm93c1tpXTtcblxuICAgICAgICAgIHZhciByb3dLZXkgPSBfdGhpcy5nZXRSZWNvcmRLZXkocm93LCBpKTtcblxuICAgICAgICAgIHZhciBjaGVja2JveFByb3BzID0gX3RoaXMuZ2V0Q2hlY2tib3hQcm9wc0J5SXRlbShyb3csIGkpO1xuXG4gICAgICAgICAgaWYgKCFjaGVja2JveFByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRSb3dLZXlzLmluY2x1ZGVzKHJvd0tleSkpIHtcbiAgICAgICAgICAgICAgaWYgKCFjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dLZXlzID0gc2VsZWN0ZWRSb3dLZXlzLmZpbHRlcihmdW5jdGlvbiAoaikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvd0tleSAhPT0gajtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjaGFuZ2VSb3dLZXlzLnB1c2gocm93S2V5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkUm93S2V5cy5wdXNoKHJvd0tleSk7XG4gICAgICAgICAgICAgIGNoYW5nZVJvd0tleXMucHVzaChyb3dLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB3aGlsZSAoc3RlcCA8PSBkaXN0KSB7XG4gICAgICAgICAgX2xvb3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBwaXZvdDogcmVhbEluZGV4XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzLnN0b3JlLnNldFN0YXRlKHtcbiAgICAgICAgICBzZWxlY3Rpb25EaXJ0eTogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpcy5zZXRTZWxlY3RlZFJvd0tleXMoc2VsZWN0ZWRSb3dLZXlzLCB7XG4gICAgICAgICAgc2VsZWN0V2F5OiAnb25TZWxlY3RNdWx0aXBsZScsXG4gICAgICAgICAgcmVjb3JkOiByZWNvcmQsXG4gICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICAgICAgICBjaGFuZ2VSb3dLZXlzOiBjaGFuZ2VSb3dLZXlzLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50OiBuYXRpdmVFdmVudFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgc2VsZWN0ZWRSb3dLZXlzLnB1c2goX3RoaXMuZ2V0UmVjb3JkS2V5KHJlY29yZCwgcmVhbEluZGV4KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZWN0ZWRSb3dLZXlzID0gc2VsZWN0ZWRSb3dLZXlzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgcmV0dXJuIGtleSAhPT0gaTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBwaXZvdDogcmVhbEluZGV4XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzLnN0b3JlLnNldFN0YXRlKHtcbiAgICAgICAgICBzZWxlY3Rpb25EaXJ0eTogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpcy5zZXRTZWxlY3RlZFJvd0tleXMoc2VsZWN0ZWRSb3dLZXlzLCB7XG4gICAgICAgICAgc2VsZWN0V2F5OiAnb25TZWxlY3QnLFxuICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgIGNoZWNrZWQ6IGNoZWNrZWQsXG4gICAgICAgICAgY2hhbmdlUm93S2V5czogdW5kZWZpbmVkLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50OiBuYXRpdmVFdmVudFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmFkaW9TZWxlY3QgPSBmdW5jdGlvbiAocmVjb3JkLCByb3dJbmRleCwgZSkge1xuICAgICAgdmFyIGNoZWNrZWQgPSBlLnRhcmdldC5jaGVja2VkO1xuICAgICAgdmFyIG5hdGl2ZUV2ZW50ID0gZS5uYXRpdmVFdmVudDtcblxuICAgICAgdmFyIGtleSA9IF90aGlzLmdldFJlY29yZEtleShyZWNvcmQsIHJvd0luZGV4KTtcblxuICAgICAgdmFyIHNlbGVjdGVkUm93S2V5cyA9IFtrZXldO1xuXG4gICAgICBfdGhpcy5zdG9yZS5zZXRTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGlvbkRpcnR5OiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgX3RoaXMuc2V0U2VsZWN0ZWRSb3dLZXlzKHNlbGVjdGVkUm93S2V5cywge1xuICAgICAgICBzZWxlY3RXYXk6ICdvblNlbGVjdCcsXG4gICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICBjaGVja2VkOiBjaGVja2VkLFxuICAgICAgICBjaGFuZ2VSb3dLZXlzOiB1bmRlZmluZWQsXG4gICAgICAgIG5hdGl2ZUV2ZW50OiBuYXRpdmVFdmVudFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVNlbGVjdFJvdyA9IGZ1bmN0aW9uIChzZWxlY3Rpb25LZXksIGluZGV4LCBvblNlbGVjdEZ1bmMpIHtcbiAgICAgIHZhciBkYXRhID0gX3RoaXMuZ2V0RmxhdEN1cnJlbnRQYWdlRGF0YSgpO1xuXG4gICAgICB2YXIgZGVmYXVsdFNlbGVjdGlvbiA9IF90aGlzLnN0b3JlLmdldFN0YXRlKCkuc2VsZWN0aW9uRGlydHkgPyBbXSA6IF90aGlzLmdldERlZmF1bHRTZWxlY3Rpb24oKTtcblxuICAgICAgdmFyIHNlbGVjdGVkUm93S2V5cyA9IF90aGlzLnN0b3JlLmdldFN0YXRlKCkuc2VsZWN0ZWRSb3dLZXlzLmNvbmNhdChkZWZhdWx0U2VsZWN0aW9uKTtcblxuICAgICAgdmFyIGNoYW5nZWFibGVSb3dLZXlzID0gZGF0YS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgcmV0dXJuICFfdGhpcy5nZXRDaGVja2JveFByb3BzQnlJdGVtKGl0ZW0sIGkpLmRpc2FibGVkO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5nZXRSZWNvcmRLZXkoaXRlbSwgaSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBjaGFuZ2VSb3dLZXlzID0gW107XG4gICAgICB2YXIgc2VsZWN0V2F5ID0gJ29uU2VsZWN0QWxsJztcbiAgICAgIHZhciBjaGVja2VkOyAvLyBoYW5kbGUgZGVmYXVsdCBzZWxlY3Rpb25cblxuICAgICAgc3dpdGNoIChzZWxlY3Rpb25LZXkpIHtcbiAgICAgICAgY2FzZSAnYWxsJzpcbiAgICAgICAgICBjaGFuZ2VhYmxlUm93S2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZFJvd0tleXMuaW5kZXhPZihrZXkpIDwgMCkge1xuICAgICAgICAgICAgICBzZWxlY3RlZFJvd0tleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICBjaGFuZ2VSb3dLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzZWxlY3RXYXkgPSAnb25TZWxlY3RBbGwnO1xuICAgICAgICAgIGNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JlbW92ZUFsbCc6XG4gICAgICAgICAgY2hhbmdlYWJsZVJvd0tleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRSb3dLZXlzLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkUm93S2V5cy5zcGxpY2Uoc2VsZWN0ZWRSb3dLZXlzLmluZGV4T2Yoa2V5KSwgMSk7XG4gICAgICAgICAgICAgIGNoYW5nZVJvd0tleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNlbGVjdFdheSA9ICdvblNlbGVjdEFsbCc7XG4gICAgICAgICAgY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2ludmVydCc6XG4gICAgICAgICAgY2hhbmdlYWJsZVJvd0tleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRSb3dLZXlzLmluZGV4T2Yoa2V5KSA8IDApIHtcbiAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkUm93S2V5cy5zcGxpY2Uoc2VsZWN0ZWRSb3dLZXlzLmluZGV4T2Yoa2V5KSwgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoYW5nZVJvd0tleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgc2VsZWN0V2F5ID0gJ29uU2VsZWN0SW52ZXJ0JztcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zdG9yZS5zZXRTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGlvbkRpcnR5OiB0cnVlXG4gICAgICB9KTsgLy8gd2hlbiBzZWxlY3QgY3VzdG9tIHNlbGVjdGlvbiwgY2FsbGJhY2sgc2VsZWN0aW9uc1tuXS5vblNlbGVjdFxuXG5cbiAgICAgIHZhciByb3dTZWxlY3Rpb24gPSBfdGhpcy5wcm9wcy5yb3dTZWxlY3Rpb247XG4gICAgICB2YXIgY3VzdG9tU2VsZWN0aW9uU3RhcnRJbmRleCA9IDI7XG5cbiAgICAgIGlmIChyb3dTZWxlY3Rpb24gJiYgcm93U2VsZWN0aW9uLmhpZGVEZWZhdWx0U2VsZWN0aW9ucykge1xuICAgICAgICBjdXN0b21TZWxlY3Rpb25TdGFydEluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGluZGV4ID49IGN1c3RvbVNlbGVjdGlvblN0YXJ0SW5kZXggJiYgdHlwZW9mIG9uU2VsZWN0RnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gb25TZWxlY3RGdW5jKGNoYW5nZWFibGVSb3dLZXlzKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U2VsZWN0ZWRSb3dLZXlzKHNlbGVjdGVkUm93S2V5cywge1xuICAgICAgICBzZWxlY3RXYXk6IHNlbGVjdFdheSxcbiAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICAgICAgY2hhbmdlUm93S2V5czogY2hhbmdlUm93S2V5c1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVBhZ2VDaGFuZ2UgPSBmdW5jdGlvbiAoY3VycmVudCkge1xuICAgICAgdmFyIHByb3BzID0gX3RoaXMucHJvcHM7XG5cbiAgICAgIHZhciBwYWdpbmF0aW9uID0gX2V4dGVuZHMoe30sIF90aGlzLnN0YXRlLnBhZ2luYXRpb24pO1xuXG4gICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICBwYWdpbmF0aW9uLmN1cnJlbnQgPSBjdXJyZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbi5jdXJyZW50ID0gcGFnaW5hdGlvbi5jdXJyZW50IHx8IDE7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBvdGhlckFyZ3VtZW50cyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIG90aGVyQXJndW1lbnRzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcGFnaW5hdGlvbi5vbkNoYW5nZS5hcHBseShwYWdpbmF0aW9uLCBbcGFnaW5hdGlvbi5jdXJyZW50XS5jb25jYXQob3RoZXJBcmd1bWVudHMpKTtcbiAgICAgIHZhciBuZXdTdGF0ZSA9IHtcbiAgICAgICAgcGFnaW5hdGlvbjogcGFnaW5hdGlvblxuICAgICAgfTsgLy8gQ29udHJvbGxlZCBjdXJyZW50IHByb3Agd2lsbCBub3QgcmVzcG9uZCB1c2VyIGludGVyYWN0aW9uXG5cbiAgICAgIGlmIChwcm9wcy5wYWdpbmF0aW9uICYmIF90eXBlb2YocHJvcHMucGFnaW5hdGlvbikgPT09ICdvYmplY3QnICYmICdjdXJyZW50JyBpbiBwcm9wcy5wYWdpbmF0aW9uKSB7XG4gICAgICAgIG5ld1N0YXRlLnBhZ2luYXRpb24gPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgcGFnaW5hdGlvbiksIHtcbiAgICAgICAgICBjdXJyZW50OiBfdGhpcy5zdGF0ZS5wYWdpbmF0aW9uLmN1cnJlbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcblxuICAgICAgX3RoaXMuc3RvcmUuc2V0U3RhdGUoe1xuICAgICAgICBzZWxlY3Rpb25EaXJ0eTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgb25DaGFuZ2UgPSBfdGhpcy5wcm9wcy5vbkNoYW5nZTtcblxuICAgICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICAgIG9uQ2hhbmdlLmFwcGx5KG51bGwsIF90aGlzLnByZXBhcmVQYXJhbXNBcmd1bWVudHMoX2V4dGVuZHMoX2V4dGVuZHMoe30sIF90aGlzLnN0YXRlKSwge1xuICAgICAgICAgIHNlbGVjdGlvbkRpcnR5OiBmYWxzZSxcbiAgICAgICAgICBwYWdpbmF0aW9uOiBwYWdpbmF0aW9uXG4gICAgICAgIH0pKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVNob3dTaXplQ2hhbmdlID0gZnVuY3Rpb24gKGN1cnJlbnQsIHBhZ2VTaXplKSB7XG4gICAgICB2YXIgcGFnaW5hdGlvbiA9IF90aGlzLnN0YXRlLnBhZ2luYXRpb247XG4gICAgICBwYWdpbmF0aW9uLm9uU2hvd1NpemVDaGFuZ2UoY3VycmVudCwgcGFnZVNpemUpO1xuXG4gICAgICB2YXIgbmV4dFBhZ2luYXRpb24gPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgcGFnaW5hdGlvbiksIHtcbiAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplLFxuICAgICAgICBjdXJyZW50OiBjdXJyZW50XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBwYWdpbmF0aW9uOiBuZXh0UGFnaW5hdGlvblxuICAgICAgfSk7XG5cbiAgICAgIHZhciBvbkNoYW5nZSA9IF90aGlzLnByb3BzLm9uQ2hhbmdlO1xuXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgb25DaGFuZ2UuYXBwbHkobnVsbCwgX3RoaXMucHJlcGFyZVBhcmFtc0FyZ3VtZW50cyhfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgX3RoaXMuc3RhdGUpLCB7XG4gICAgICAgICAgcGFnaW5hdGlvbjogbmV4dFBhZ2luYXRpb25cbiAgICAgICAgfSkpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyRXhwYW5kSWNvbiA9IGZ1bmN0aW9uIChwcmVmaXhDbHMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgZXhwYW5kYWJsZSA9IF9yZWYuZXhwYW5kYWJsZSxcbiAgICAgICAgICAgIGV4cGFuZGVkID0gX3JlZi5leHBhbmRlZCxcbiAgICAgICAgICAgIG5lZWRJbmRlbnRTcGFjZWQgPSBfcmVmLm5lZWRJbmRlbnRTcGFjZWQsXG4gICAgICAgICAgICByZWNvcmQgPSBfcmVmLnJlY29yZCxcbiAgICAgICAgICAgIG9uRXhwYW5kID0gX3JlZi5vbkV4cGFuZDtcblxuICAgICAgICBpZiAoZXhwYW5kYWJsZSkge1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9Mb2NhbGVSZWNlaXZlcltcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgICAgIGNvbXBvbmVudE5hbWU6IFwiVGFibGVcIixcbiAgICAgICAgICAgIGRlZmF1bHRMb2NhbGU6IF9kZWZhdWx0W1wiZGVmYXVsdFwiXS5UYWJsZVxuICAgICAgICAgIH0sIGZ1bmN0aW9uIChsb2NhbGUpIHtcbiAgICAgICAgICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3RyYW5zQnV0dG9uW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItcm93LWV4cGFuZC1pY29uXCIpLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXJvdy1jb2xsYXBzZWRcIiksICFleHBhbmRlZCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1yb3ctZXhwYW5kZWRcIiksIGV4cGFuZGVkKSwgX2NsYXNzTmFtZXMpKSxcbiAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgICAgICAgICAgIG9uRXhwYW5kKHJlY29yZCwgZXZlbnQpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogZXhwYW5kZWQgPyBsb2NhbGUuY29sbGFwc2UgOiBsb2NhbGUuZXhwYW5kLFxuICAgICAgICAgICAgICBub1N0eWxlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZWVkSW5kZW50U3BhY2VkKSB7XG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1yb3ctZXhwYW5kLWljb24gXCIpLmNvbmNhdChwcmVmaXhDbHMsIFwiLXJvdy1zcGFjZWRcIilcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyU2VsZWN0aW9uQm94ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoXywgcmVjb3JkLCBpbmRleCkge1xuICAgICAgICB2YXIgcm93S2V5ID0gX3RoaXMuZ2V0UmVjb3JkS2V5KHJlY29yZCwgaW5kZXgpO1xuXG4gICAgICAgIHZhciBwcm9wcyA9IF90aGlzLmdldENoZWNrYm94UHJvcHNCeUl0ZW0ocmVjb3JkLCBpbmRleCk7XG5cbiAgICAgICAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGUgPT09ICdyYWRpbycgPyBfdGhpcy5oYW5kbGVSYWRpb1NlbGVjdChyZWNvcmQsIGluZGV4LCBlKSA6IF90aGlzLmhhbmRsZVNlbGVjdChyZWNvcmQsIGluZGV4LCBlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgIG9uQ2xpY2s6IHN0b3BQcm9wYWdhdGlvblxuICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KF9TZWxlY3Rpb25Cb3hbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICBzdG9yZTogX3RoaXMuc3RvcmUsXG4gICAgICAgICAgcm93SW5kZXg6IHJvd0tleSxcbiAgICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgIGRlZmF1bHRTZWxlY3Rpb246IF90aGlzLmdldERlZmF1bHRTZWxlY3Rpb24oKVxuICAgICAgICB9LCBwcm9wcykpKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlclRhYmxlID0gZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXMyO1xuXG4gICAgICB2YXIgcHJlZml4Q2xzID0gX3JlZjIucHJlZml4Q2xzLFxuICAgICAgICAgIHJlbmRlckVtcHR5ID0gX3JlZjIucmVuZGVyRW1wdHksXG4gICAgICAgICAgZHJvcGRvd25QcmVmaXhDbHMgPSBfcmVmMi5kcm9wZG93blByZWZpeENscyxcbiAgICAgICAgICBjb250ZXh0TG9jYWxlID0gX3JlZjIuY29udGV4dExvY2FsZSxcbiAgICAgICAgICBjb250ZXh0R2V0UG9wdXBDb250YWluZXIgPSBfcmVmMi5nZXRQb3B1cENvbnRhaW5lcjtcblxuICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgc2hvd0hlYWRlciA9IF9hLnNob3dIZWFkZXIsXG4gICAgICAgICAgbG9jYWxlID0gX2EubG9jYWxlLFxuICAgICAgICAgIGdldFBvcHVwQ29udGFpbmVyID0gX2EuZ2V0UG9wdXBDb250YWluZXIsXG4gICAgICAgICAgcmVzdFRhYmxlUHJvcHMgPSBfX3Jlc3QoX2EsIFtcInNob3dIZWFkZXJcIiwgXCJsb2NhbGVcIiwgXCJnZXRQb3B1cENvbnRhaW5lclwiXSk7IC8vIGRvIG5vdCBwYXNzIHByb3Auc3R5bGUgdG8gcmMtdGFibGUsIHNpbmNlIGFscmVhZHkgYXBwbHkgaXQgdG8gY29udGFpbmVyIGRpdlxuXG5cbiAgICAgIHZhciByZXN0UHJvcHMgPSAoMCwgX29taXRbXCJkZWZhdWx0XCJdKShyZXN0VGFibGVQcm9wcywgWydzdHlsZSddKTtcblxuICAgICAgdmFyIGRhdGEgPSBfdGhpcy5nZXRDdXJyZW50UGFnZURhdGEoKTtcblxuICAgICAgdmFyIGV4cGFuZEljb25Bc0NlbGwgPSBfdGhpcy5wcm9wcy5leHBhbmRlZFJvd1JlbmRlciAmJiBfdGhpcy5wcm9wcy5leHBhbmRJY29uQXNDZWxsICE9PSBmYWxzZTsgLy8gdXNlIHByb3BzLmdldFBvcHVwQ29udGFpbmVyIGZpcnN0XG5cbiAgICAgIHZhciByZWFsR2V0UG9wdXBDb250YWluZXIgPSBnZXRQb3B1cENvbnRhaW5lciB8fCBjb250ZXh0R2V0UG9wdXBDb250YWluZXI7IC8vIE1lcmdlIHRvbyBsb2NhbGVzXG5cbiAgICAgIHZhciBtZXJnZWRMb2NhbGUgPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgY29udGV4dExvY2FsZSksIGxvY2FsZSk7XG5cbiAgICAgIGlmICghbG9jYWxlIHx8ICFsb2NhbGUuZW1wdHlUZXh0KSB7XG4gICAgICAgIG1lcmdlZExvY2FsZS5lbXB0eVRleHQgPSByZW5kZXJFbXB0eSgnVGFibGUnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsYXNzU3RyaW5nID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoKF9jbGFzc05hbWVzMiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMyLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoX3RoaXMucHJvcHMuc2l6ZSksIHRydWUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMyLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWJvcmRlcmVkXCIpLCBfdGhpcy5wcm9wcy5ib3JkZXJlZCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZW1wdHlcIiksICFkYXRhLmxlbmd0aCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItd2l0aG91dC1jb2x1bW4taGVhZGVyXCIpLCAhc2hvd0hlYWRlciksIF9jbGFzc05hbWVzMikpO1xuXG4gICAgICB2YXIgY29sdW1uc1dpdGhSb3dTZWxlY3Rpb24gPSBfdGhpcy5yZW5kZXJSb3dTZWxlY3Rpb24oe1xuICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgbG9jYWxlOiBtZXJnZWRMb2NhbGUsXG4gICAgICAgIGdldFBvcHVwQ29udGFpbmVyOiByZWFsR2V0UG9wdXBDb250YWluZXJcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY29sdW1ucyA9IF90aGlzLnJlbmRlckNvbHVtbnNEcm9wZG93bih7XG4gICAgICAgIGNvbHVtbnM6IGNvbHVtbnNXaXRoUm93U2VsZWN0aW9uLFxuICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgZHJvcGRvd25QcmVmaXhDbHM6IGRyb3Bkb3duUHJlZml4Q2xzLFxuICAgICAgICBsb2NhbGU6IG1lcmdlZExvY2FsZSxcbiAgICAgICAgZ2V0UG9wdXBDb250YWluZXI6IHJlYWxHZXRQb3B1cENvbnRhaW5lclxuICAgICAgfSkubWFwKGZ1bmN0aW9uIChjb2x1bW4sIGkpIHtcbiAgICAgICAgdmFyIG5ld0NvbHVtbiA9IF9leHRlbmRzKHt9LCBjb2x1bW4pO1xuXG4gICAgICAgIG5ld0NvbHVtbi5rZXkgPSBnZXRDb2x1bW5LZXkobmV3Q29sdW1uLCBpKTtcbiAgICAgICAgcmV0dXJuIG5ld0NvbHVtbjtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgZXhwYW5kSWNvbkNvbHVtbkluZGV4ID0gY29sdW1uc1swXSAmJiBjb2x1bW5zWzBdLmtleSA9PT0gJ3NlbGVjdGlvbi1jb2x1bW4nID8gMSA6IDA7XG5cbiAgICAgIGlmICgnZXhwYW5kSWNvbkNvbHVtbkluZGV4JyBpbiByZXN0UHJvcHMpIHtcbiAgICAgICAgZXhwYW5kSWNvbkNvbHVtbkluZGV4ID0gcmVzdFByb3BzLmV4cGFuZEljb25Db2x1bW5JbmRleDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3JjVGFibGVbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7XG4gICAgICAgIGtleTogXCJ0YWJsZVwiLFxuICAgICAgICBleHBhbmRJY29uOiBfdGhpcy5yZW5kZXJFeHBhbmRJY29uKHByZWZpeENscylcbiAgICAgIH0sIHJlc3RQcm9wcywge1xuICAgICAgICBvblJvdzogZnVuY3Rpb24gb25Sb3cocmVjb3JkLCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5vblJvdyhwcmVmaXhDbHMsIHJlY29yZCwgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBjb21wb25lbnRzOiBfdGhpcy5jb21wb25lbnRzLFxuICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgY29sdW1uczogY29sdW1ucyxcbiAgICAgICAgc2hvd0hlYWRlcjogc2hvd0hlYWRlcixcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc1N0cmluZyxcbiAgICAgICAgZXhwYW5kSWNvbkNvbHVtbkluZGV4OiBleHBhbmRJY29uQ29sdW1uSW5kZXgsXG4gICAgICAgIGV4cGFuZEljb25Bc0NlbGw6IGV4cGFuZEljb25Bc0NlbGwsXG4gICAgICAgIGVtcHR5VGV4dDogbWVyZ2VkTG9jYWxlLmVtcHR5VGV4dFxuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZW5kZXJDb21wb25lbnQgPSBmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgIHZhciBnZXRQcmVmaXhDbHMgPSBfcmVmMy5nZXRQcmVmaXhDbHMsXG4gICAgICAgICAgcmVuZGVyRW1wdHkgPSBfcmVmMy5yZW5kZXJFbXB0eSxcbiAgICAgICAgICBnZXRQb3B1cENvbnRhaW5lciA9IF9yZWYzLmdldFBvcHVwQ29udGFpbmVyO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY3VzdG9taXplUHJlZml4Q2xzID0gX3RoaXMkcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIGN1c3RvbWl6ZURyb3Bkb3duUHJlZml4Q2xzID0gX3RoaXMkcHJvcHMuZHJvcGRvd25QcmVmaXhDbHMsXG4gICAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wcy5zdHlsZSxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWU7XG5cbiAgICAgIHZhciBkYXRhID0gX3RoaXMuZ2V0Q3VycmVudFBhZ2VEYXRhKCk7XG5cbiAgICAgIHZhciBsb2FkaW5nID0gX3RoaXMucHJvcHMubG9hZGluZztcblxuICAgICAgaWYgKHR5cGVvZiBsb2FkaW5nID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgbG9hZGluZyA9IHtcbiAgICAgICAgICBzcGlubmluZzogbG9hZGluZ1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCd0YWJsZScsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgICB2YXIgZHJvcGRvd25QcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2Ryb3Bkb3duJywgY3VzdG9taXplRHJvcGRvd25QcmVmaXhDbHMpO1xuICAgICAgdmFyIHRhYmxlID0gUmVhY3QuY3JlYXRlRWxlbWVudChfTG9jYWxlUmVjZWl2ZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIGNvbXBvbmVudE5hbWU6IFwiVGFibGVcIixcbiAgICAgICAgZGVmYXVsdExvY2FsZTogX2RlZmF1bHRbXCJkZWZhdWx0XCJdLlRhYmxlXG4gICAgICB9LCBmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXJUYWJsZSh7XG4gICAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgICAgcmVuZGVyRW1wdHk6IHJlbmRlckVtcHR5LFxuICAgICAgICAgIGRyb3Bkb3duUHJlZml4Q2xzOiBkcm9wZG93blByZWZpeENscyxcbiAgICAgICAgICBjb250ZXh0TG9jYWxlOiBsb2NhbGUsXG4gICAgICAgICAgZ2V0UG9wdXBDb250YWluZXI6IGdldFBvcHVwQ29udGFpbmVyXG4gICAgICAgIH0pO1xuICAgICAgfSk7IC8vIGlmIHRoZXJlIGlzIG5vIHBhZ2luYXRpb24gb3Igbm8gZGF0YSxcbiAgICAgIC8vIHRoZSBoZWlnaHQgb2Ygc3BpbiBzaG91bGQgZGVjcmVhc2UgYnkgaGFsZiBvZiBwYWdpbmF0aW9uXG5cbiAgICAgIHZhciBwYWdpbmF0aW9uUGF0Y2hDbGFzcyA9IF90aGlzLmhhc1BhZ2luYXRpb24oKSAmJiBkYXRhICYmIGRhdGEubGVuZ3RoICE9PSAwID8gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi13aXRoLXBhZ2luYXRpb25cIikgOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXdpdGhvdXQtcGFnaW5hdGlvblwiKTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXdyYXBwZXJcIiksIGNsYXNzTmFtZSksXG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChfc3BpbltcImRlZmF1bHRcIl0sIF9leHRlbmRzKHt9LCBsb2FkaW5nLCB7XG4gICAgICAgIGNsYXNzTmFtZTogbG9hZGluZy5zcGlubmluZyA/IFwiXCIuY29uY2F0KHBhZ2luYXRpb25QYXRjaENsYXNzLCBcIiBcIikuY29uY2F0KHByZWZpeENscywgXCItc3Bpbi1ob2xkZXJcIikgOiAnJ1xuICAgICAgfSksIF90aGlzLnJlbmRlclBhZ2luYXRpb24ocHJlZml4Q2xzLCAndG9wJyksIHRhYmxlLCBfdGhpcy5yZW5kZXJQYWdpbmF0aW9uKHByZWZpeENscywgJ2JvdHRvbScpKSk7XG4gICAgfTtcblxuICAgIHZhciBleHBhbmRlZFJvd1JlbmRlciA9IHByb3BzLmV4cGFuZGVkUm93UmVuZGVyLFxuICAgICAgICBfcHJvcHMkY29sdW1ucyA9IHByb3BzLmNvbHVtbnMsXG4gICAgICAgIGNvbHVtbnMgPSBfcHJvcHMkY29sdW1ucyA9PT0gdm9pZCAwID8gW10gOiBfcHJvcHMkY29sdW1ucztcbiAgICAoMCwgX3dhcm5pbmdbXCJkZWZhdWx0XCJdKSghKCdjb2x1bW5zUGFnZVJhbmdlJyBpbiBwcm9wcyB8fCAnY29sdW1uc1BhZ2VTaXplJyBpbiBwcm9wcyksICdUYWJsZScsICdgY29sdW1uc1BhZ2VSYW5nZWAgYW5kIGBjb2x1bW5zUGFnZVNpemVgIGFyZSByZW1vdmVkLCBwbGVhc2UgdXNlICcgKyAnZml4ZWQgY29sdW1ucyBpbnN0ZWFkLCBzZWU6IGh0dHBzOi8vdS5hbnQuZGVzaWduL2ZpeGVkLWNvbHVtbnMuJyk7XG5cbiAgICBpZiAoZXhwYW5kZWRSb3dSZW5kZXIgJiYgY29sdW1ucy5zb21lKGZ1bmN0aW9uIChfcmVmNCkge1xuICAgICAgdmFyIGZpeGVkID0gX3JlZjQuZml4ZWQ7XG4gICAgICByZXR1cm4gISFmaXhlZDtcbiAgICB9KSkge1xuICAgICAgKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkoZmFsc2UsICdUYWJsZScsICdgZXhwYW5kZWRSb3dSZW5kZXJgIGFuZCBgQ29sdW1uLmZpeGVkYCBhcmUgbm90IGNvbXBhdGlibGUuIFBsZWFzZSB1c2Ugb25lIG9mIHRoZW0gYXQgb25lIHRpbWUuJyk7XG4gICAgfVxuXG4gICAgX3RoaXMuY29sdW1ucyA9IHByb3BzLmNvbHVtbnMgfHwgKDAsIF91dGlsLm5vcm1hbGl6ZUNvbHVtbnMpKHByb3BzLmNoaWxkcmVuKTtcblxuICAgIF90aGlzLmNyZWF0ZUNvbXBvbmVudHMocHJvcHMuY29tcG9uZW50cyk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IF9leHRlbmRzKF9leHRlbmRzKHt9LCBfdGhpcy5nZXREZWZhdWx0U29ydE9yZGVyKF90aGlzLmNvbHVtbnMpKSwge1xuICAgICAgLy8g5YeP5bCR54q25oCBXG4gICAgICBmaWx0ZXJzOiBfdGhpcy5nZXRGaWx0ZXJzRnJvbUNvbHVtbnMoKSxcbiAgICAgIHBhZ2luYXRpb246IF90aGlzLmdldERlZmF1bHRQYWdpbmF0aW9uKHByb3BzKSxcbiAgICAgIHBpdm90OiB1bmRlZmluZWRcbiAgICB9KTtcbiAgICBfdGhpcy5DaGVja2JveFByb3BzQ2FjaGUgPSB7fTtcbiAgICBfdGhpcy5zdG9yZSA9ICgwLCBfY3JlYXRlU3RvcmVbXCJkZWZhdWx0XCJdKSh7XG4gICAgICBzZWxlY3RlZFJvd0tleXM6IGdldFJvd1NlbGVjdGlvbihwcm9wcykuc2VsZWN0ZWRSb3dLZXlzIHx8IFtdLFxuICAgICAgc2VsZWN0aW9uRGlydHk6IGZhbHNlXG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRhYmxlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB0aGlzLmNvbHVtbnMgPSBuZXh0UHJvcHMuY29sdW1ucyB8fCAoMCwgX3V0aWwubm9ybWFsaXplQ29sdW1ucykobmV4dFByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgaWYgKCdwYWdpbmF0aW9uJyBpbiBuZXh0UHJvcHMgfHwgJ3BhZ2luYXRpb24nIGluIHRoaXMucHJvcHMpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldmlvdXNTdGF0ZSkge1xuICAgICAgICAgIHZhciBuZXdQYWdpbmF0aW9uID0gX2V4dGVuZHMoX2V4dGVuZHMoX2V4dGVuZHMoe30sIGRlZmF1bHRQYWdpbmF0aW9uKSwgcHJldmlvdXNTdGF0ZS5wYWdpbmF0aW9uKSwgbmV4dFByb3BzLnBhZ2luYXRpb24pO1xuXG4gICAgICAgICAgbmV3UGFnaW5hdGlvbi5jdXJyZW50ID0gbmV3UGFnaW5hdGlvbi5jdXJyZW50IHx8IDE7XG4gICAgICAgICAgbmV3UGFnaW5hdGlvbi5wYWdlU2l6ZSA9IG5ld1BhZ2luYXRpb24ucGFnZVNpemUgfHwgMTA7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhZ2luYXRpb246IG5leHRQcm9wcy5wYWdpbmF0aW9uICE9PSBmYWxzZSA/IG5ld1BhZ2luYXRpb24gOiBlbXB0eU9iamVjdFxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV4dFByb3BzLnJvd1NlbGVjdGlvbiAmJiAnc2VsZWN0ZWRSb3dLZXlzJyBpbiBuZXh0UHJvcHMucm93U2VsZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuc3RvcmUuc2V0U3RhdGUoe1xuICAgICAgICAgIHNlbGVjdGVkUm93S2V5czogbmV4dFByb3BzLnJvd1NlbGVjdGlvbi5zZWxlY3RlZFJvd0tleXMgfHwgW11cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMucm93U2VsZWN0aW9uICYmICFuZXh0UHJvcHMucm93U2VsZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuc3RvcmUuc2V0U3RhdGUoe1xuICAgICAgICAgIHNlbGVjdGVkUm93S2V5czogW11cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICgnZGF0YVNvdXJjZScgaW4gbmV4dFByb3BzICYmIG5leHRQcm9wcy5kYXRhU291cmNlICE9PSB0aGlzLnByb3BzLmRhdGFTb3VyY2UpIHtcbiAgICAgICAgdGhpcy5zdG9yZS5zZXRTdGF0ZSh7XG4gICAgICAgICAgc2VsZWN0aW9uRGlydHk6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xMDEzM1xuXG5cbiAgICAgIHRoaXMuQ2hlY2tib3hQcm9wc0NhY2hlID0ge307XG5cbiAgICAgIGlmICh0aGlzLmdldFNvcnRPcmRlckNvbHVtbnModGhpcy5jb2x1bW5zKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBzb3J0U3RhdGUgPSB0aGlzLmdldFNvcnRTdGF0ZUZyb21Db2x1bW5zKHRoaXMuY29sdW1ucyk7XG5cbiAgICAgICAgaWYgKHNvcnRTdGF0ZS5zb3J0Q29sdW1uICE9PSB0aGlzLnN0YXRlLnNvcnRDb2x1bW4gfHwgc29ydFN0YXRlLnNvcnRPcmRlciAhPT0gdGhpcy5zdGF0ZS5zb3J0T3JkZXIpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHNvcnRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGZpbHRlcmVkVmFsdWVDb2x1bW5zID0gdGhpcy5nZXRGaWx0ZXJlZFZhbHVlQ29sdW1ucyh0aGlzLmNvbHVtbnMpO1xuXG4gICAgICBpZiAoZmlsdGVyZWRWYWx1ZUNvbHVtbnMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgZmlsdGVyc0Zyb21Db2x1bW5zID0gdGhpcy5nZXRGaWx0ZXJzRnJvbUNvbHVtbnModGhpcy5jb2x1bW5zKTtcblxuICAgICAgICB2YXIgbmV3RmlsdGVycyA9IF9leHRlbmRzKHt9LCB0aGlzLnN0YXRlLmZpbHRlcnMpO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKGZpbHRlcnNGcm9tQ29sdW1ucykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgbmV3RmlsdGVyc1trZXldID0gZmlsdGVyc0Zyb21Db2x1bW5zW2tleV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmlzRmlsdGVyc0NoYW5nZWQobmV3RmlsdGVycykpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGZpbHRlcnM6IG5ld0ZpbHRlcnNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudHMobmV4dFByb3BzLmNvbXBvbmVudHMsIHRoaXMucHJvcHMuY29tcG9uZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldERlZmF1bHRTZWxlY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVmYXVsdFNlbGVjdGlvbigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgcm93U2VsZWN0aW9uID0gZ2V0Um93U2VsZWN0aW9uKHRoaXMucHJvcHMpO1xuXG4gICAgICBpZiAoIXJvd1NlbGVjdGlvbi5nZXRDaGVja2JveFByb3BzKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZ2V0RmxhdERhdGEoKS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0sIHJvd0luZGV4KSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuZ2V0Q2hlY2tib3hQcm9wc0J5SXRlbShpdGVtLCByb3dJbmRleCkuZGVmYXVsdENoZWNrZWQ7XG4gICAgICB9KS5tYXAoZnVuY3Rpb24gKHJlY29yZCwgcm93SW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5nZXRSZWNvcmRLZXkocmVjb3JkLCByb3dJbmRleCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RGVmYXVsdFBhZ2luYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVmYXVsdFBhZ2luYXRpb24ocHJvcHMpIHtcbiAgICAgIHZhciBwYWdpbmF0aW9uID0gX3R5cGVvZihwcm9wcy5wYWdpbmF0aW9uKSA9PT0gJ29iamVjdCcgPyBwcm9wcy5wYWdpbmF0aW9uIDoge307XG4gICAgICB2YXIgY3VycmVudDtcblxuICAgICAgaWYgKCdjdXJyZW50JyBpbiBwYWdpbmF0aW9uKSB7XG4gICAgICAgIGN1cnJlbnQgPSBwYWdpbmF0aW9uLmN1cnJlbnQ7XG4gICAgICB9IGVsc2UgaWYgKCdkZWZhdWx0Q3VycmVudCcgaW4gcGFnaW5hdGlvbikge1xuICAgICAgICBjdXJyZW50ID0gcGFnaW5hdGlvbi5kZWZhdWx0Q3VycmVudDtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhZ2VTaXplO1xuXG4gICAgICBpZiAoJ3BhZ2VTaXplJyBpbiBwYWdpbmF0aW9uKSB7XG4gICAgICAgIHBhZ2VTaXplID0gcGFnaW5hdGlvbi5wYWdlU2l6ZTtcbiAgICAgIH0gZWxzZSBpZiAoJ2RlZmF1bHRQYWdlU2l6ZScgaW4gcGFnaW5hdGlvbikge1xuICAgICAgICBwYWdlU2l6ZSA9IHBhZ2luYXRpb24uZGVmYXVsdFBhZ2VTaXplO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5oYXNQYWdpbmF0aW9uKHByb3BzKSA/IF9leHRlbmRzKF9leHRlbmRzKF9leHRlbmRzKHt9LCBkZWZhdWx0UGFnaW5hdGlvbiksIHBhZ2luYXRpb24pLCB7XG4gICAgICAgIGN1cnJlbnQ6IGN1cnJlbnQgfHwgMSxcbiAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplIHx8IDEwXG4gICAgICB9KSA6IHt9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTb3J0T3JkZXJDb2x1bW5zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNvcnRPcmRlckNvbHVtbnMoY29sdW1ucykge1xuICAgICAgcmV0dXJuICgwLCBfdXRpbC5mbGF0RmlsdGVyKShjb2x1bW5zIHx8IHRoaXMuY29sdW1ucyB8fCBbXSwgZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICByZXR1cm4gJ3NvcnRPcmRlcicgaW4gY29sdW1uO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEZpbHRlcmVkVmFsdWVDb2x1bW5zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZpbHRlcmVkVmFsdWVDb2x1bW5zKGNvbHVtbnMpIHtcbiAgICAgIHJldHVybiAoMCwgX3V0aWwuZmxhdEZpbHRlcikoY29sdW1ucyB8fCB0aGlzLmNvbHVtbnMgfHwgW10sIGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBjb2x1bW4uZmlsdGVyZWRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RmlsdGVyc0Zyb21Db2x1bW5zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZpbHRlcnNGcm9tQ29sdW1ucyhjb2x1bW5zKSB7XG4gICAgICB2YXIgZmlsdGVycyA9IHt9O1xuICAgICAgdGhpcy5nZXRGaWx0ZXJlZFZhbHVlQ29sdW1ucyhjb2x1bW5zKS5mb3JFYWNoKGZ1bmN0aW9uIChjb2wpIHtcbiAgICAgICAgdmFyIGNvbEtleSA9IGdldENvbHVtbktleShjb2wpO1xuICAgICAgICBmaWx0ZXJzW2NvbEtleV0gPSBjb2wuZmlsdGVyZWRWYWx1ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpbHRlcnM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldERlZmF1bHRTb3J0T3JkZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVmYXVsdFNvcnRPcmRlcihjb2x1bW5zKSB7XG4gICAgICB2YXIgZGVmaW5lZFNvcnRTdGF0ZSA9IHRoaXMuZ2V0U29ydFN0YXRlRnJvbUNvbHVtbnMoY29sdW1ucyk7XG4gICAgICB2YXIgZGVmYXVsdFNvcnRlZENvbHVtbiA9ICgwLCBfdXRpbC5mbGF0RmlsdGVyKShjb2x1bW5zIHx8IFtdLCBmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBjb2x1bW4uZGVmYXVsdFNvcnRPcmRlciAhPSBudWxsO1xuICAgICAgfSlbMF07XG5cbiAgICAgIGlmIChkZWZhdWx0U29ydGVkQ29sdW1uICYmICFkZWZpbmVkU29ydFN0YXRlLnNvcnRDb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3J0Q29sdW1uOiBkZWZhdWx0U29ydGVkQ29sdW1uLFxuICAgICAgICAgIHNvcnRPcmRlcjogZGVmYXVsdFNvcnRlZENvbHVtbi5kZWZhdWx0U29ydE9yZGVyXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZWZpbmVkU29ydFN0YXRlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTb3J0U3RhdGVGcm9tQ29sdW1uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTb3J0U3RhdGVGcm9tQ29sdW1ucyhjb2x1bW5zKSB7XG4gICAgICAvLyByZXR1cm4gZmlyc3QgY29sdW1uIHdoaWNoIHNvcnRPcmRlciBpcyBub3QgZmFsc3lcbiAgICAgIHZhciBzb3J0ZWRDb2x1bW4gPSB0aGlzLmdldFNvcnRPcmRlckNvbHVtbnMoY29sdW1ucykuZmlsdGVyKGZ1bmN0aW9uIChjb2wpIHtcbiAgICAgICAgcmV0dXJuIGNvbC5zb3J0T3JkZXI7XG4gICAgICB9KVswXTtcblxuICAgICAgaWYgKHNvcnRlZENvbHVtbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvcnRDb2x1bW46IHNvcnRlZENvbHVtbixcbiAgICAgICAgICBzb3J0T3JkZXI6IHNvcnRlZENvbHVtbi5zb3J0T3JkZXJcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc29ydENvbHVtbjogbnVsbCxcbiAgICAgICAgc29ydE9yZGVyOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRNYXhDdXJyZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1heEN1cnJlbnQodG90YWwpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSRwYWdpbmF0aW8gPSB0aGlzLnN0YXRlLnBhZ2luYXRpb24sXG4gICAgICAgICAgY3VycmVudCA9IF90aGlzJHN0YXRlJHBhZ2luYXRpby5jdXJyZW50LFxuICAgICAgICAgIHBhZ2VTaXplID0gX3RoaXMkc3RhdGUkcGFnaW5hdGlvLnBhZ2VTaXplO1xuXG4gICAgICBpZiAoKGN1cnJlbnQgLSAxKSAqIHBhZ2VTaXplID49IHRvdGFsKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKCh0b3RhbCAtIDEpIC8gcGFnZVNpemUpICsgMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFNvcnRlckZuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNvcnRlckZuKHN0YXRlKSB7XG4gICAgICB2YXIgX3JlZjUgPSBzdGF0ZSB8fCB0aGlzLnN0YXRlLFxuICAgICAgICAgIHNvcnRPcmRlciA9IF9yZWY1LnNvcnRPcmRlcixcbiAgICAgICAgICBzb3J0Q29sdW1uID0gX3JlZjUuc29ydENvbHVtbjtcblxuICAgICAgaWYgKCFzb3J0T3JkZXIgfHwgIXNvcnRDb2x1bW4gfHwgdHlwZW9mIHNvcnRDb2x1bW4uc29ydGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBzb3J0Q29sdW1uLnNvcnRlcihhLCBiLCBzb3J0T3JkZXIpO1xuXG4gICAgICAgIGlmIChyZXN1bHQgIT09IDApIHtcbiAgICAgICAgICByZXR1cm4gc29ydE9yZGVyID09PSAnZGVzY2VuZCcgPyAtcmVzdWx0IDogcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRDdXJyZW50UGFnZURhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFBhZ2VEYXRhKCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLmdldExvY2FsRGF0YSgpO1xuICAgICAgdmFyIGN1cnJlbnQ7XG4gICAgICB2YXIgcGFnZVNpemU7XG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlOyAvLyDlpoLmnpzmsqHmnInliIbpobXnmoTor53vvIzpu5jorqTlhajpg6jlsZXnpLpcblxuICAgICAgaWYgKCF0aGlzLmhhc1BhZ2luYXRpb24oKSkge1xuICAgICAgICBwYWdlU2l6ZSA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgIGN1cnJlbnQgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnZVNpemUgPSBzdGF0ZS5wYWdpbmF0aW9uLnBhZ2VTaXplO1xuICAgICAgICBjdXJyZW50ID0gdGhpcy5nZXRNYXhDdXJyZW50KHN0YXRlLnBhZ2luYXRpb24udG90YWwgfHwgZGF0YS5sZW5ndGgpO1xuICAgICAgfSAvLyDliIbpobVcbiAgICAgIC8vIC0tLVxuICAgICAgLy8g5b2T5pWw5o2u6YeP5bCR5LqO562J5LqO5q+P6aG15pWw6YeP5pe277yM55u05o6l6K6+572u5pWw5o2uXG4gICAgICAvLyDlkKbliJnov5vooYzor7vlj5bliIbpobXmlbDmja5cblxuXG4gICAgICBpZiAoZGF0YS5sZW5ndGggPiBwYWdlU2l6ZSB8fCBwYWdlU2l6ZSA9PT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICBkYXRhID0gZGF0YS5zbGljZSgoY3VycmVudCAtIDEpICogcGFnZVNpemUsIGN1cnJlbnQgKiBwYWdlU2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRGbGF0RGF0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGbGF0RGF0YSgpIHtcbiAgICAgIHZhciBjaGlsZHJlbkNvbHVtbk5hbWUgPSB0aGlzLnByb3BzLmNoaWxkcmVuQ29sdW1uTmFtZTtcbiAgICAgIHJldHVybiAoMCwgX3V0aWwuZmxhdEFycmF5KSh0aGlzLmdldExvY2FsRGF0YShudWxsLCBmYWxzZSksIGNoaWxkcmVuQ29sdW1uTmFtZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEZsYXRDdXJyZW50UGFnZURhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmxhdEN1cnJlbnRQYWdlRGF0YSgpIHtcbiAgICAgIHZhciBjaGlsZHJlbkNvbHVtbk5hbWUgPSB0aGlzLnByb3BzLmNoaWxkcmVuQ29sdW1uTmFtZTtcbiAgICAgIHJldHVybiAoMCwgX3V0aWwuZmxhdEFycmF5KSh0aGlzLmdldEN1cnJlbnRQYWdlRGF0YSgpLCBjaGlsZHJlbkNvbHVtbk5hbWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRMb2NhbERhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TG9jYWxEYXRhKHN0YXRlKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGZpbHRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcbiAgICAgIHZhciBjdXJyZW50U3RhdGUgPSBzdGF0ZSB8fCB0aGlzLnN0YXRlO1xuICAgICAgdmFyIGRhdGFTb3VyY2UgPSB0aGlzLnByb3BzLmRhdGFTb3VyY2U7XG4gICAgICB2YXIgZGF0YSA9IGRhdGFTb3VyY2UgfHwgW107IC8vIOS8mOWMluacrOWcsOaOkuW6j1xuXG4gICAgICBkYXRhID0gZGF0YS5zbGljZSgwKTtcbiAgICAgIHZhciBzb3J0ZXJGbiA9IHRoaXMuZ2V0U29ydGVyRm4oY3VycmVudFN0YXRlKTtcblxuICAgICAgaWYgKHNvcnRlckZuKSB7XG4gICAgICAgIGRhdGEgPSB0aGlzLnJlY3Vyc2l2ZVNvcnQoZGF0YSwgc29ydGVyRm4pO1xuICAgICAgfSAvLyDnrZvpgIlcblxuXG4gICAgICBpZiAoZmlsdGVyICYmIGN1cnJlbnRTdGF0ZS5maWx0ZXJzKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGN1cnJlbnRTdGF0ZS5maWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW5LZXkpIHtcbiAgICAgICAgICB2YXIgY29sID0gX3RoaXMzLmZpbmRDb2x1bW4oY29sdW1uS2V5KTtcblxuICAgICAgICAgIGlmICghY29sKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHZhbHVlcyA9IGN1cnJlbnRTdGF0ZS5maWx0ZXJzW2NvbHVtbktleV0gfHwgW107XG5cbiAgICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBvbkZpbHRlciA9IGNvbC5vbkZpbHRlcjtcbiAgICAgICAgICBkYXRhID0gb25GaWx0ZXIgPyBkYXRhLmZpbHRlcihmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzLnNvbWUoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9uRmlsdGVyKHYsIHJlY29yZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSA6IGRhdGE7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0U2VsZWN0ZWRSb3dLZXlzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNlbGVjdGVkUm93S2V5cyhzZWxlY3RlZFJvd0tleXMsIHNlbGVjdGlvbkluZm8pIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgc2VsZWN0V2F5ID0gc2VsZWN0aW9uSW5mby5zZWxlY3RXYXksXG4gICAgICAgICAgcmVjb3JkID0gc2VsZWN0aW9uSW5mby5yZWNvcmQsXG4gICAgICAgICAgY2hlY2tlZCA9IHNlbGVjdGlvbkluZm8uY2hlY2tlZCxcbiAgICAgICAgICBjaGFuZ2VSb3dLZXlzID0gc2VsZWN0aW9uSW5mby5jaGFuZ2VSb3dLZXlzLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50ID0gc2VsZWN0aW9uSW5mby5uYXRpdmVFdmVudDtcbiAgICAgIHZhciByb3dTZWxlY3Rpb24gPSBnZXRSb3dTZWxlY3Rpb24odGhpcy5wcm9wcyk7XG5cbiAgICAgIGlmIChyb3dTZWxlY3Rpb24gJiYgISgnc2VsZWN0ZWRSb3dLZXlzJyBpbiByb3dTZWxlY3Rpb24pKSB7XG4gICAgICAgIHRoaXMuc3RvcmUuc2V0U3RhdGUoe1xuICAgICAgICAgIHNlbGVjdGVkUm93S2V5czogc2VsZWN0ZWRSb3dLZXlzXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGF0YSA9IHRoaXMuZ2V0RmxhdERhdGEoKTtcblxuICAgICAgaWYgKCFyb3dTZWxlY3Rpb24ub25DaGFuZ2UgJiYgIXJvd1NlbGVjdGlvbltzZWxlY3RXYXldKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlbGVjdGVkUm93cyA9IGRhdGEuZmlsdGVyKGZ1bmN0aW9uIChyb3csIGkpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkUm93S2V5cy5pbmRleE9mKF90aGlzNC5nZXRSZWNvcmRLZXkocm93LCBpKSkgPj0gMDtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocm93U2VsZWN0aW9uLm9uQ2hhbmdlKSB7XG4gICAgICAgIHJvd1NlbGVjdGlvbi5vbkNoYW5nZShzZWxlY3RlZFJvd0tleXMsIHNlbGVjdGVkUm93cyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3RXYXkgPT09ICdvblNlbGVjdCcgJiYgcm93U2VsZWN0aW9uLm9uU2VsZWN0KSB7XG4gICAgICAgIHJvd1NlbGVjdGlvbi5vblNlbGVjdChyZWNvcmQsIGNoZWNrZWQsIHNlbGVjdGVkUm93cywgbmF0aXZlRXZlbnQpO1xuICAgICAgfSBlbHNlIGlmIChzZWxlY3RXYXkgPT09ICdvblNlbGVjdE11bHRpcGxlJyAmJiByb3dTZWxlY3Rpb24ub25TZWxlY3RNdWx0aXBsZSkge1xuICAgICAgICB2YXIgY2hhbmdlUm93cyA9IGRhdGEuZmlsdGVyKGZ1bmN0aW9uIChyb3csIGkpIHtcbiAgICAgICAgICByZXR1cm4gY2hhbmdlUm93S2V5cy5pbmRleE9mKF90aGlzNC5nZXRSZWNvcmRLZXkocm93LCBpKSkgPj0gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJvd1NlbGVjdGlvbi5vblNlbGVjdE11bHRpcGxlKGNoZWNrZWQsIHNlbGVjdGVkUm93cywgY2hhbmdlUm93cyk7XG4gICAgICB9IGVsc2UgaWYgKHNlbGVjdFdheSA9PT0gJ29uU2VsZWN0QWxsJyAmJiByb3dTZWxlY3Rpb24ub25TZWxlY3RBbGwpIHtcbiAgICAgICAgdmFyIF9jaGFuZ2VSb3dzID0gZGF0YS5maWx0ZXIoZnVuY3Rpb24gKHJvdywgaSkge1xuICAgICAgICAgIHJldHVybiBjaGFuZ2VSb3dLZXlzLmluZGV4T2YoX3RoaXM0LmdldFJlY29yZEtleShyb3csIGkpKSA+PSAwO1xuICAgICAgICB9KTtcblxuICAgICAgICByb3dTZWxlY3Rpb24ub25TZWxlY3RBbGwoY2hlY2tlZCwgc2VsZWN0ZWRSb3dzLCBfY2hhbmdlUm93cyk7XG4gICAgICB9IGVsc2UgaWYgKHNlbGVjdFdheSA9PT0gJ29uU2VsZWN0SW52ZXJ0JyAmJiByb3dTZWxlY3Rpb24ub25TZWxlY3RJbnZlcnQpIHtcbiAgICAgICAgcm93U2VsZWN0aW9uLm9uU2VsZWN0SW52ZXJ0KHNlbGVjdGVkUm93S2V5cyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRvZ2dsZVNvcnRPcmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGVTb3J0T3JkZXIoY29sdW1uKSB7XG4gICAgICBpZiAoIWNvbHVtbi5zb3J0ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFnaW5hdGlvbiA9IF9leHRlbmRzKHt9LCB0aGlzLnN0YXRlLnBhZ2luYXRpb24pO1xuXG4gICAgICB2YXIgc29ydERpcmVjdGlvbnMgPSBjb2x1bW4uc29ydERpcmVjdGlvbnMgfHwgdGhpcy5wcm9wcy5zb3J0RGlyZWN0aW9ucztcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgc29ydE9yZGVyID0gX3RoaXMkc3RhdGUuc29ydE9yZGVyLFxuICAgICAgICAgIHNvcnRDb2x1bW4gPSBfdGhpcyRzdGF0ZS5zb3J0Q29sdW1uOyAvLyDlj6rlkIzml7blhYHorrjkuIDliJfov5vooYzmjpLluo/vvIzlkKbliJnkvJrlr7zoh7TmjpLluo/pobrluo/nmoTpgLvovpHpl67pophcblxuICAgICAgdmFyIG5ld1NvcnRPcmRlcjsgLy8g5YiH5o2i5Y+m5LiA5YiX5pe277yM5Lii5byDIHNvcnRPcmRlciDnmoTnirbmgIFcblxuICAgICAgaWYgKGlzU2FtZUNvbHVtbihzb3J0Q29sdW1uLCBjb2x1bW4pICYmIHNvcnRPcmRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIOaMieeFp3NvcnREaXJlY3Rpb25z55qE5YaF5a655L6d5qyh5YiH5o2i5o6S5bqP54q25oCBXG4gICAgICAgIHZhciBtZXRob2RJbmRleCA9IHNvcnREaXJlY3Rpb25zLmluZGV4T2Yoc29ydE9yZGVyKSArIDE7XG4gICAgICAgIG5ld1NvcnRPcmRlciA9IG1ldGhvZEluZGV4ID09PSBzb3J0RGlyZWN0aW9ucy5sZW5ndGggPyB1bmRlZmluZWQgOiBzb3J0RGlyZWN0aW9uc1ttZXRob2RJbmRleF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdTb3J0T3JkZXIgPSBzb3J0RGlyZWN0aW9uc1swXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvcHMucGFnaW5hdGlvbikge1xuICAgICAgICAvLyBSZXNldCBjdXJyZW50IHByb3BcbiAgICAgICAgcGFnaW5hdGlvbi5jdXJyZW50ID0gMTtcbiAgICAgICAgcGFnaW5hdGlvbi5vbkNoYW5nZShwYWdpbmF0aW9uLmN1cnJlbnQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3U3RhdGUgPSB7XG4gICAgICAgIHBhZ2luYXRpb246IHBhZ2luYXRpb24sXG4gICAgICAgIHNvcnRPcmRlcjogbmV3U29ydE9yZGVyLFxuICAgICAgICBzb3J0Q29sdW1uOiBuZXdTb3J0T3JkZXIgPyBjb2x1bW4gOiBudWxsXG4gICAgICB9OyAvLyBDb250cm9sbGVkXG5cbiAgICAgIGlmICh0aGlzLmdldFNvcnRPcmRlckNvbHVtbnMoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvbkNoYW5nZSA9IHRoaXMucHJvcHMub25DaGFuZ2U7XG5cbiAgICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgICBvbkNoYW5nZS5hcHBseShudWxsLCB0aGlzLnByZXBhcmVQYXJhbXNBcmd1bWVudHMoX2V4dGVuZHMoX2V4dGVuZHMoe30sIHRoaXMuc3RhdGUpLCBuZXdTdGF0ZSkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzUGFnaW5hdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNQYWdpbmF0aW9uKHByb3BzKSB7XG4gICAgICByZXR1cm4gKHByb3BzIHx8IHRoaXMucHJvcHMpLnBhZ2luYXRpb24gIT09IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc0ZpbHRlcnNDaGFuZ2VkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzRmlsdGVyc0NoYW5nZWQoZmlsdGVycykge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHZhciBmaWx0ZXJzQ2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAoT2JqZWN0LmtleXMoZmlsdGVycykubGVuZ3RoICE9PSBPYmplY3Qua2V5cyh0aGlzLnN0YXRlLmZpbHRlcnMpLmxlbmd0aCkge1xuICAgICAgICBmaWx0ZXJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBPYmplY3Qua2V5cyhmaWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW5LZXkpIHtcbiAgICAgICAgICBpZiAoZmlsdGVyc1tjb2x1bW5LZXldICE9PSBfdGhpczUuc3RhdGUuZmlsdGVyc1tjb2x1bW5LZXldKSB7XG4gICAgICAgICAgICBmaWx0ZXJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpbHRlcnNDaGFuZ2VkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1NvcnRDb2x1bW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNTb3J0Q29sdW1uKGNvbHVtbikge1xuICAgICAgdmFyIHNvcnRDb2x1bW4gPSB0aGlzLnN0YXRlLnNvcnRDb2x1bW47XG5cbiAgICAgIGlmICghY29sdW1uIHx8ICFzb3J0Q29sdW1uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldENvbHVtbktleShzb3J0Q29sdW1uKSA9PT0gZ2V0Q29sdW1uS2V5KGNvbHVtbik7XG4gICAgfSAvLyBHZXQgcGFnaW5hdGlvbiwgZmlsdGVycywgc29ydGVyXG5cbiAgfSwge1xuICAgIGtleTogXCJwcmVwYXJlUGFyYW1zQXJndW1lbnRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmVQYXJhbXNBcmd1bWVudHMoc3RhdGUpIHtcbiAgICAgIHZhciBwYWdpbmF0aW9uID0gX2V4dGVuZHMoe30sIHN0YXRlLnBhZ2luYXRpb24pOyAvLyByZW1vdmUgdXNlbGVzcyBoYW5kbGUgZnVuY3Rpb24gaW4gVGFibGUub25DaGFuZ2VcblxuXG4gICAgICBkZWxldGUgcGFnaW5hdGlvbi5vbkNoYW5nZTtcbiAgICAgIGRlbGV0ZSBwYWdpbmF0aW9uLm9uU2hvd1NpemVDaGFuZ2U7XG4gICAgICB2YXIgZmlsdGVycyA9IHN0YXRlLmZpbHRlcnM7XG4gICAgICB2YXIgc29ydGVyID0ge307XG5cbiAgICAgIGlmIChzdGF0ZS5zb3J0Q29sdW1uICYmIHN0YXRlLnNvcnRPcmRlcikge1xuICAgICAgICBzb3J0ZXIuY29sdW1uID0gc3RhdGUuc29ydENvbHVtbjtcbiAgICAgICAgc29ydGVyLm9yZGVyID0gc3RhdGUuc29ydE9yZGVyO1xuICAgICAgICBzb3J0ZXIuZmllbGQgPSBzdGF0ZS5zb3J0Q29sdW1uLmRhdGFJbmRleDtcbiAgICAgICAgc29ydGVyLmNvbHVtbktleSA9IGdldENvbHVtbktleShzdGF0ZS5zb3J0Q29sdW1uKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGV4dHJhID0ge1xuICAgICAgICBjdXJyZW50RGF0YVNvdXJjZTogdGhpcy5nZXRMb2NhbERhdGEoc3RhdGUpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIFtwYWdpbmF0aW9uLCBmaWx0ZXJzLCBzb3J0ZXIsIGV4dHJhXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZmluZENvbHVtblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kQ29sdW1uKG15S2V5KSB7XG4gICAgICB2YXIgY29sdW1uO1xuICAgICAgKDAsIF91dGlsLnRyZWVNYXApKHRoaXMuY29sdW1ucywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGdldENvbHVtbktleShjKSA9PT0gbXlLZXkpIHtcbiAgICAgICAgICBjb2x1bW4gPSBjO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjb2x1bW47XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZUNvbXBvbmVudHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50cygpIHtcbiAgICAgIHZhciBjb21wb25lbnRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHZhciBwcmV2Q29tcG9uZW50cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIGJvZHlSb3cgPSBjb21wb25lbnRzICYmIGNvbXBvbmVudHMuYm9keSAmJiBjb21wb25lbnRzLmJvZHkucm93O1xuICAgICAgdmFyIHByZUJvZHlSb3cgPSBwcmV2Q29tcG9uZW50cyAmJiBwcmV2Q29tcG9uZW50cy5ib2R5ICYmIHByZXZDb21wb25lbnRzLmJvZHkucm93O1xuXG4gICAgICBpZiAoIXRoaXMucm93IHx8IGJvZHlSb3cgIT09IHByZUJvZHlSb3cpIHtcbiAgICAgICAgdGhpcy5yb3cgPSAoMCwgX2NyZWF0ZUJvZHlSb3dbXCJkZWZhdWx0XCJdKShib2R5Um93KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb21wb25lbnRzID0gX2V4dGVuZHMoX2V4dGVuZHMoe30sIGNvbXBvbmVudHMpLCB7XG4gICAgICAgIGJvZHk6IF9leHRlbmRzKF9leHRlbmRzKHt9LCBjb21wb25lbnRzLmJvZHkpLCB7XG4gICAgICAgICAgcm93OiB0aGlzLnJvd1xuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlY3Vyc2l2ZVNvcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjdXJzaXZlU29ydChkYXRhLCBzb3J0ZXJGbikge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyRjaGlsZHJlbkMgPSB0aGlzLnByb3BzLmNoaWxkcmVuQ29sdW1uTmFtZSxcbiAgICAgICAgICBjaGlsZHJlbkNvbHVtbk5hbWUgPSBfdGhpcyRwcm9wcyRjaGlsZHJlbkMgPT09IHZvaWQgMCA/ICdjaGlsZHJlbicgOiBfdGhpcyRwcm9wcyRjaGlsZHJlbkM7XG4gICAgICByZXR1cm4gZGF0YS5zb3J0KHNvcnRlckZuKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1bY2hpbGRyZW5Db2x1bW5OYW1lXSA/IF9leHRlbmRzKF9leHRlbmRzKHt9LCBpdGVtKSwgX2RlZmluZVByb3BlcnR5KHt9LCBjaGlsZHJlbkNvbHVtbk5hbWUsIF90aGlzNi5yZWN1cnNpdmVTb3J0KGl0ZW1bY2hpbGRyZW5Db2x1bW5OYW1lXSwgc29ydGVyRm4pKSkgOiBpdGVtO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclBhZ2luYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyUGFnaW5hdGlvbihwcmVmaXhDbHMsIHBhZ2luYXRpb25Qb3NpdGlvbikge1xuICAgICAgLy8g5by65Yi25LiN6ZyA6KaB5YiG6aG1XG4gICAgICBpZiAoIXRoaXMuaGFzUGFnaW5hdGlvbigpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2l6ZSA9ICdkZWZhdWx0JztcbiAgICAgIHZhciBwYWdpbmF0aW9uID0gdGhpcy5zdGF0ZS5wYWdpbmF0aW9uO1xuXG4gICAgICBpZiAocGFnaW5hdGlvbi5zaXplKSB7XG4gICAgICAgIHNpemUgPSBwYWdpbmF0aW9uLnNpemU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuc2l6ZSA9PT0gJ21pZGRsZScgfHwgdGhpcy5wcm9wcy5zaXplID09PSAnc21hbGwnKSB7XG4gICAgICAgIHNpemUgPSAnc21hbGwnO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9zaXRpb24gPSBwYWdpbmF0aW9uLnBvc2l0aW9uIHx8ICdib3R0b20nO1xuICAgICAgdmFyIHRvdGFsID0gcGFnaW5hdGlvbi50b3RhbCB8fCB0aGlzLmdldExvY2FsRGF0YSgpLmxlbmd0aDtcbiAgICAgIHJldHVybiB0b3RhbCA+IDAgJiYgKHBvc2l0aW9uID09PSBwYWdpbmF0aW9uUG9zaXRpb24gfHwgcG9zaXRpb24gPT09ICdib3RoJykgPyBSZWFjdC5jcmVhdGVFbGVtZW50KF9wYWdpbmF0aW9uW1wiZGVmYXVsdFwiXSwgX2V4dGVuZHMoe1xuICAgICAgICBrZXk6IFwicGFnaW5hdGlvbi1cIi5jb25jYXQocGFnaW5hdGlvblBvc2l0aW9uKVxuICAgICAgfSwgcGFnaW5hdGlvbiwge1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKHBhZ2luYXRpb24uY2xhc3NOYW1lLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXBhZ2luYXRpb25cIikpLFxuICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVQYWdlQ2hhbmdlLFxuICAgICAgICB0b3RhbDogdG90YWwsXG4gICAgICAgIHNpemU6IHNpemUsXG4gICAgICAgIGN1cnJlbnQ6IHRoaXMuZ2V0TWF4Q3VycmVudCh0b3RhbCksXG4gICAgICAgIG9uU2hvd1NpemVDaGFuZ2U6IHRoaXMuaGFuZGxlU2hvd1NpemVDaGFuZ2VcbiAgICAgIH0pKSA6IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclJvd1NlbGVjdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJSb3dTZWxlY3Rpb24oX3JlZjYpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB2YXIgcHJlZml4Q2xzID0gX3JlZjYucHJlZml4Q2xzLFxuICAgICAgICAgIGxvY2FsZSA9IF9yZWY2LmxvY2FsZSxcbiAgICAgICAgICBnZXRQb3B1cENvbnRhaW5lciA9IF9yZWY2LmdldFBvcHVwQ29udGFpbmVyO1xuICAgICAgdmFyIHJvd1NlbGVjdGlvbiA9IHRoaXMucHJvcHMucm93U2VsZWN0aW9uO1xuICAgICAgdmFyIGNvbHVtbnMgPSB0aGlzLmNvbHVtbnMuY29uY2F0KCk7XG5cbiAgICAgIGlmIChyb3dTZWxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLmdldEZsYXRDdXJyZW50UGFnZURhdGEoKS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgaWYgKHJvd1NlbGVjdGlvbi5nZXRDaGVja2JveFByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gIV90aGlzNy5nZXRDaGVja2JveFByb3BzQnlJdGVtKGl0ZW0sIGluZGV4KS5kaXNhYmxlZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBzZWxlY3Rpb25Db2x1bW5DbGFzcyA9ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItc2VsZWN0aW9uLWNvbHVtblwiKSwgX2RlZmluZVByb3BlcnR5KHt9LCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXNlbGVjdGlvbi1jb2x1bW4tY3VzdG9tXCIpLCByb3dTZWxlY3Rpb24uc2VsZWN0aW9ucykpO1xuXG4gICAgICAgIHZhciBzZWxlY3Rpb25Db2x1bW4gPSBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgICAgIGtleTogJ3NlbGVjdGlvbi1jb2x1bW4nLFxuICAgICAgICAgIHJlbmRlcjogdGhpcy5yZW5kZXJTZWxlY3Rpb25Cb3gocm93U2VsZWN0aW9uLnR5cGUpLFxuICAgICAgICAgIGNsYXNzTmFtZTogc2VsZWN0aW9uQ29sdW1uQ2xhc3MsXG4gICAgICAgICAgZml4ZWQ6IHJvd1NlbGVjdGlvbi5maXhlZCxcbiAgICAgICAgICB3aWR0aDogcm93U2VsZWN0aW9uLmNvbHVtbldpZHRoLFxuICAgICAgICAgIHRpdGxlOiByb3dTZWxlY3Rpb24uY29sdW1uVGl0bGVcbiAgICAgICAgfSwgX3JjVGFibGUuSU5URVJOQUxfQ09MX0RFRklORSwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zZWxlY3Rpb24tY29sXCIpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyb3dTZWxlY3Rpb24udHlwZSAhPT0gJ3JhZGlvJykge1xuICAgICAgICAgIHZhciBjaGVja2JveEFsbERpc2FibGVkID0gZGF0YS5ldmVyeShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczcuZ2V0Q2hlY2tib3hQcm9wc0J5SXRlbShpdGVtLCBpbmRleCkuZGlzYWJsZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2VsZWN0aW9uQ29sdW1uLnRpdGxlID0gc2VsZWN0aW9uQ29sdW1uLnRpdGxlIHx8IFJlYWN0LmNyZWF0ZUVsZW1lbnQoX1NlbGVjdGlvbkNoZWNrYm94QWxsW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICAgICAgc3RvcmU6IHRoaXMuc3RvcmUsXG4gICAgICAgICAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICBnZXRDaGVja2JveFByb3BzQnlJdGVtOiB0aGlzLmdldENoZWNrYm94UHJvcHNCeUl0ZW0sXG4gICAgICAgICAgICBnZXRSZWNvcmRLZXk6IHRoaXMuZ2V0UmVjb3JkS2V5LFxuICAgICAgICAgICAgZGlzYWJsZWQ6IGNoZWNrYm94QWxsRGlzYWJsZWQsXG4gICAgICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgICAgIG9uU2VsZWN0OiB0aGlzLmhhbmRsZVNlbGVjdFJvdyxcbiAgICAgICAgICAgIHNlbGVjdGlvbnM6IHJvd1NlbGVjdGlvbi5zZWxlY3Rpb25zLFxuICAgICAgICAgICAgaGlkZURlZmF1bHRTZWxlY3Rpb25zOiByb3dTZWxlY3Rpb24uaGlkZURlZmF1bHRTZWxlY3Rpb25zLFxuICAgICAgICAgICAgZ2V0UG9wdXBDb250YWluZXI6IHRoaXMuZ2VuZXJhdGVQb3B1cENvbnRhaW5lckZ1bmMoZ2V0UG9wdXBDb250YWluZXIpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ2ZpeGVkJyBpbiByb3dTZWxlY3Rpb24pIHtcbiAgICAgICAgICBzZWxlY3Rpb25Db2x1bW4uZml4ZWQgPSByb3dTZWxlY3Rpb24uZml4ZWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoY29sdW1ucy5zb21lKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICByZXR1cm4gY29sdW1uLmZpeGVkID09PSAnbGVmdCcgfHwgY29sdW1uLmZpeGVkID09PSB0cnVlO1xuICAgICAgICB9KSkge1xuICAgICAgICAgIHNlbGVjdGlvbkNvbHVtbi5maXhlZCA9ICdsZWZ0JztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2x1bW5zWzBdICYmIGNvbHVtbnNbMF0ua2V5ID09PSAnc2VsZWN0aW9uLWNvbHVtbicpIHtcbiAgICAgICAgICBjb2x1bW5zWzBdID0gc2VsZWN0aW9uQ29sdW1uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbHVtbnMudW5zaGlmdChzZWxlY3Rpb25Db2x1bW4pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb2x1bW5zO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJDb2x1bW5zRHJvcGRvd25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQ29sdW1uc0Ryb3Bkb3duKF9yZWY3KSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgICAgdmFyIHByZWZpeENscyA9IF9yZWY3LnByZWZpeENscyxcbiAgICAgICAgICBkcm9wZG93blByZWZpeENscyA9IF9yZWY3LmRyb3Bkb3duUHJlZml4Q2xzLFxuICAgICAgICAgIGNvbHVtbnMgPSBfcmVmNy5jb2x1bW5zLFxuICAgICAgICAgIGxvY2FsZSA9IF9yZWY3LmxvY2FsZSxcbiAgICAgICAgICBnZXRQb3B1cENvbnRhaW5lciA9IF9yZWY3LmdldFBvcHVwQ29udGFpbmVyO1xuICAgICAgdmFyIF90aGlzJHN0YXRlMiA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgc29ydE9yZGVyID0gX3RoaXMkc3RhdGUyLnNvcnRPcmRlcixcbiAgICAgICAgICBmaWx0ZXJzID0gX3RoaXMkc3RhdGUyLmZpbHRlcnM7XG4gICAgICByZXR1cm4gKDAsIF91dGlsLnRyZWVNYXApKGNvbHVtbnMsIGZ1bmN0aW9uIChjb2x1bW4sIGkpIHtcbiAgICAgICAgdmFyIF9jbGFzc05hbWVzNDtcblxuICAgICAgICB2YXIga2V5ID0gZ2V0Q29sdW1uS2V5KGNvbHVtbiwgaSk7XG4gICAgICAgIHZhciBmaWx0ZXJEcm9wZG93bjtcbiAgICAgICAgdmFyIHNvcnRCdXR0b247XG4gICAgICAgIHZhciBvbkhlYWRlckNlbGwgPSBjb2x1bW4ub25IZWFkZXJDZWxsO1xuXG4gICAgICAgIHZhciBpc1NvcnRDb2x1bW4gPSBfdGhpczguaXNTb3J0Q29sdW1uKGNvbHVtbik7XG5cbiAgICAgICAgaWYgKGNvbHVtbi5maWx0ZXJzICYmIGNvbHVtbi5maWx0ZXJzLmxlbmd0aCA+IDAgfHwgY29sdW1uLmZpbHRlckRyb3Bkb3duKSB7XG4gICAgICAgICAgdmFyIGNvbEZpbHRlcnMgPSBrZXkgaW4gZmlsdGVycyA/IGZpbHRlcnNba2V5XSA6IFtdO1xuICAgICAgICAgIGZpbHRlckRyb3Bkb3duID0gUmVhY3QuY3JlYXRlRWxlbWVudChfZmlsdGVyRHJvcGRvd25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgICAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICAgICAgICAgIGNvbHVtbjogY29sdW1uLFxuICAgICAgICAgICAgc2VsZWN0ZWRLZXlzOiBjb2xGaWx0ZXJzLFxuICAgICAgICAgICAgY29uZmlybUZpbHRlcjogX3RoaXM4LmhhbmRsZUZpbHRlcixcbiAgICAgICAgICAgIHByZWZpeENsczogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1maWx0ZXJcIiksXG4gICAgICAgICAgICBkcm9wZG93blByZWZpeENsczogZHJvcGRvd25QcmVmaXhDbHMgfHwgJ2FudC1kcm9wZG93bicsXG4gICAgICAgICAgICBnZXRQb3B1cENvbnRhaW5lcjogX3RoaXM4LmdlbmVyYXRlUG9wdXBDb250YWluZXJGdW5jKGdldFBvcHVwQ29udGFpbmVyKSxcbiAgICAgICAgICAgIGtleTogXCJmaWx0ZXItZHJvcGRvd25cIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbHVtbi5zb3J0ZXIpIHtcbiAgICAgICAgICB2YXIgc29ydERpcmVjdGlvbnMgPSBjb2x1bW4uc29ydERpcmVjdGlvbnMgfHwgX3RoaXM4LnByb3BzLnNvcnREaXJlY3Rpb25zO1xuICAgICAgICAgIHZhciBpc0FzY2VuZCA9IGlzU29ydENvbHVtbiAmJiBzb3J0T3JkZXIgPT09ICdhc2NlbmQnO1xuICAgICAgICAgIHZhciBpc0Rlc2NlbmQgPSBpc1NvcnRDb2x1bW4gJiYgc29ydE9yZGVyID09PSAnZGVzY2VuZCc7XG4gICAgICAgICAgdmFyIGFzY2VuZCA9IHNvcnREaXJlY3Rpb25zLmluZGV4T2YoJ2FzY2VuZCcpICE9PSAtMSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KF9pY29uW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNvbHVtbi1zb3J0ZXItdXAgXCIpLmNvbmNhdChpc0FzY2VuZCA/ICdvbicgOiAnb2ZmJyksXG4gICAgICAgICAgICB0eXBlOiBcImNhcmV0LXVwXCIsXG4gICAgICAgICAgICB0aGVtZTogXCJmaWxsZWRcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBkZXNjZW5kID0gc29ydERpcmVjdGlvbnMuaW5kZXhPZignZGVzY2VuZCcpICE9PSAtMSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KF9pY29uW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNvbHVtbi1zb3J0ZXItZG93biBcIikuY29uY2F0KGlzRGVzY2VuZCA/ICdvbicgOiAnb2ZmJyksXG4gICAgICAgICAgICB0eXBlOiBcImNhcmV0LWRvd25cIixcbiAgICAgICAgICAgIHRoZW1lOiBcImZpbGxlZFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc29ydEJ1dHRvbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgdGl0bGU6IGxvY2FsZS5zb3J0VGl0bGUsXG4gICAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29sdW1uLXNvcnRlci1pbm5lclwiKSwgYXNjZW5kICYmIGRlc2NlbmQgJiYgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jb2x1bW4tc29ydGVyLWlubmVyLWZ1bGxcIikpLFxuICAgICAgICAgICAga2V5OiBcInNvcnRlclwiXG4gICAgICAgICAgfSwgYXNjZW5kLCBkZXNjZW5kKTtcblxuICAgICAgICAgIG9uSGVhZGVyQ2VsbCA9IGZ1bmN0aW9uIG9uSGVhZGVyQ2VsbChjb2wpIHtcbiAgICAgICAgICAgIHZhciBjb2xQcm9wcyA9IHt9OyAvLyBHZXQgb3JpZ2luYWwgZmlyc3RcblxuICAgICAgICAgICAgaWYgKGNvbHVtbi5vbkhlYWRlckNlbGwpIHtcbiAgICAgICAgICAgICAgY29sUHJvcHMgPSBfZXh0ZW5kcyh7fSwgY29sdW1uLm9uSGVhZGVyQ2VsbChjb2wpKTtcbiAgICAgICAgICAgIH0gLy8gQWRkIHNvcnRlciBsb2dpY1xuXG5cbiAgICAgICAgICAgIHZhciBvbkhlYWRlckNlbGxDbGljayA9IGNvbFByb3BzLm9uQ2xpY2s7XG5cbiAgICAgICAgICAgIGNvbFByb3BzLm9uQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF90aGlzOC50b2dnbGVTb3J0T3JkZXIoY29sdW1uKTtcblxuICAgICAgICAgICAgICBpZiAob25IZWFkZXJDZWxsQ2xpY2spIHtcbiAgICAgICAgICAgICAgICBvbkhlYWRlckNlbGxDbGljay5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBjb2xQcm9wcztcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKF9leHRlbmRzKHt9LCBjb2x1bW4pLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShjb2x1bW4uY2xhc3NOYW1lLCAoX2NsYXNzTmFtZXM0ID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczQsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29sdW1uLWhhcy1hY3Rpb25zXCIpLCBzb3J0QnV0dG9uIHx8IGZpbHRlckRyb3Bkb3duKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzNCwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jb2x1bW4taGFzLWZpbHRlcnNcIiksIGZpbHRlckRyb3Bkb3duKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzNCwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jb2x1bW4taGFzLXNvcnRlcnNcIiksIHNvcnRCdXR0b24pLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXM0LCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNvbHVtbi1zb3J0XCIpLCBpc1NvcnRDb2x1bW4gJiYgc29ydE9yZGVyKSwgX2NsYXNzTmFtZXM0KSksXG4gICAgICAgICAgdGl0bGU6IFtSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICBrZXk6IFwidGl0bGVcIixcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1oZWFkZXItY29sdW1uXCIpXG4gICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IHNvcnRCdXR0b24gPyBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNvbHVtbi1zb3J0ZXJzXCIpIDogdW5kZWZpbmVkXG4gICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNvbHVtbi10aXRsZVwiKVxuICAgICAgICAgIH0sIF90aGlzOC5yZW5kZXJDb2x1bW5UaXRsZShjb2x1bW4udGl0bGUpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNvbHVtbi1zb3J0ZXJcIilcbiAgICAgICAgICB9LCBzb3J0QnV0dG9uKSkpLCBmaWx0ZXJEcm9wZG93bl0sXG4gICAgICAgICAgb25IZWFkZXJDZWxsOiBvbkhlYWRlckNlbGxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyQ29sdW1uVGl0bGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQ29sdW1uVGl0bGUodGl0bGUpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTMgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGZpbHRlcnMgPSBfdGhpcyRzdGF0ZTMuZmlsdGVycyxcbiAgICAgICAgICBzb3J0T3JkZXIgPSBfdGhpcyRzdGF0ZTMuc29ydE9yZGVyOyAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xMTI0NiNpc3N1ZWNvbW1lbnQtNDA1MDA5MTY3XG5cbiAgICAgIGlmICh0aXRsZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aXRsZSh7XG4gICAgICAgICAgZmlsdGVyczogZmlsdGVycyxcbiAgICAgICAgICBzb3J0T3JkZXI6IHNvcnRPcmRlclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRpdGxlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnN1bWVyLCBudWxsLCB0aGlzLnJlbmRlckNvbXBvbmVudCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRhYmxlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFRhYmxlO1xuVGFibGUuQ29sdW1uID0gX0NvbHVtbltcImRlZmF1bHRcIl07XG5UYWJsZS5Db2x1bW5Hcm91cCA9IF9Db2x1bW5Hcm91cFtcImRlZmF1bHRcIl07XG5UYWJsZS5wcm9wVHlwZXMgPSB7XG4gIGRhdGFTb3VyY2U6IFByb3BUeXBlcy5hcnJheSxcbiAgY29sdW1uczogUHJvcFR5cGVzLmFycmF5LFxuICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHVzZUZpeGVkSGVhZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgcm93U2VsZWN0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNpemU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGxvYWRpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIGJvcmRlcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBsb2NhbGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGRyb3Bkb3duUHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzb3J0RGlyZWN0aW9uczogUHJvcFR5cGVzLmFycmF5LFxuICBnZXRQb3B1cENvbnRhaW5lcjogUHJvcFR5cGVzLmZ1bmNcbn07XG5UYWJsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGRhdGFTb3VyY2U6IFtdLFxuICB1c2VGaXhlZEhlYWRlcjogZmFsc2UsXG4gIGNsYXNzTmFtZTogJycsXG4gIHNpemU6ICdkZWZhdWx0JyxcbiAgbG9hZGluZzogZmFsc2UsXG4gIGJvcmRlcmVkOiBmYWxzZSxcbiAgaW5kZW50U2l6ZTogMjAsXG4gIGxvY2FsZToge30sXG4gIHJvd0tleTogJ2tleScsXG4gIHNob3dIZWFkZXI6IHRydWUsXG4gIHNvcnREaXJlY3Rpb25zOiBbJ2FzY2VuZCcsICdkZXNjZW5kJ10sXG4gIGNoaWxkcmVuQ29sdW1uTmFtZTogJ2NoaWxkcmVuJ1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRhYmxlLmpzLm1hcFxuIiwidmFyIGJhc2VNZXJnZSA9IHJlcXVpcmUoJy4vX2Jhc2VNZXJnZScpLFxuICAgIGNyZWF0ZUFzc2lnbmVyID0gcmVxdWlyZSgnLi9fY3JlYXRlQXNzaWduZXInKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuNS4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7XG4gKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gKiB9O1xuICpcbiAqIHZhciBvdGhlciA9IHtcbiAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAqIH07XG4gKlxuICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAqL1xudmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2U7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGFzc2lnbk1lcmdlVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25NZXJnZVZhbHVlJyksXG4gICAgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBiYXNlTWVyZ2VEZWVwID0gcmVxdWlyZSgnLi9fYmFzZU1lcmdlRGVlcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyksXG4gICAgc2FmZUdldCA9IHJlcXVpcmUoJy4vX3NhZmVHZXQnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBrZXlzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNZXJnZTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBzdGFja0NsZWFyID0gcmVxdWlyZSgnLi9fc3RhY2tDbGVhcicpLFxuICAgIHN0YWNrRGVsZXRlID0gcmVxdWlyZSgnLi9fc3RhY2tEZWxldGUnKSxcbiAgICBzdGFja0dldCA9IHJlcXVpcmUoJy4vX3N0YWNrR2V0JyksXG4gICAgc3RhY2tIYXMgPSByZXF1aXJlKCcuL19zdGFja0hhcycpLFxuICAgIHN0YWNrU2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YWNrO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCJ2YXIgY3JlYXRlQmFzZUZvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJhc2VGb3InKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3I7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRm9yO1xuIiwidmFyIGFzc2lnbk1lcmdlVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25NZXJnZVZhbHVlJyksXG4gICAgY2xvbmVCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUJ1ZmZlcicpLFxuICAgIGNsb25lVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Nsb25lVHlwZWRBcnJheScpLFxuICAgIGNvcHlBcnJheSA9IHJlcXVpcmUoJy4vX2NvcHlBcnJheScpLFxuICAgIGluaXRDbG9uZU9iamVjdCA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZU9iamVjdCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0FycmF5TGlrZU9iamVjdCA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2VPYmplY3QnKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vaXNQbGFpbk9iamVjdCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5JyksXG4gICAgc2FmZUdldCA9IHJlcXVpcmUoJy4vX3NhZmVHZXQnKSxcbiAgICB0b1BsYWluT2JqZWN0ID0gcmVxdWlyZSgnLi90b1BsYWluT2JqZWN0Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICBpZiAoc3RhY2tlZCkge1xuICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgIDogdW5kZWZpbmVkO1xuXG4gIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgaWYgKGlzQ29tbW9uKSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChpc0NvbW1vbikge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgfVxuICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1lcmdlRGVlcDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgaWYgKGlzRGVlcCkge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lQnVmZmVyO1xuIiwidmFyIGNsb25lQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUFycmF5QnVmZmVyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVUeXBlZEFycmF5O1xuIiwidmFyIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZUFycmF5QnVmZmVyO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gVWludDhBcnJheTtcbiIsIi8qKlxuICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlBcnJheTtcbiIsInZhciBiYXNlQ3JlYXRlID0gcmVxdWlyZSgnLi9fYmFzZUNyZWF0ZScpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZU9iamVjdDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xudmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgIH1cbiAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ3JlYXRlO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlckFyZztcbiIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAqIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2VPYmplY3Q7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUGxhaW5PYmplY3Q7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICovXG5mdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1BsYWluT2JqZWN0O1xuIiwidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKTtcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weU9iamVjdDtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzSW4gPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzSW4nKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5c0luO1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5c0luO1xuIiwidmFyIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vX2lzSXRlcmF0ZWVDYWxsJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQXNzaWduZXI7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgb3ZlclJlc3QgPSByZXF1aXJlKCcuL19vdmVyUmVzdCcpLFxuICAgIHNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fc2V0VG9TdHJpbmcnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVJlc3Q7XG4iLCJ2YXIgYXBwbHkgPSByZXF1aXJlKCcuL19hcHBseScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJSZXN0O1xuIiwiLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcGx5O1xuIiwidmFyIGJhc2VTZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VTZXRUb1N0cmluZycpLFxuICAgIHNob3J0T3V0ID0gcmVxdWlyZSgnLi9fc2hvcnRPdXQnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb1N0cmluZztcbiIsInZhciBjb25zdGFudCA9IHJlcXVpcmUoJy4vY29uc3RhbnQnKSxcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2RlZmluZVByb3BlcnR5JyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICd3cml0YWJsZSc6IHRydWVcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTZXRUb1N0cmluZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnN0YW50O1xuIiwiLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xudmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICBIT1RfU1BBTiA9IDE2O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAqIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgdmFyIGNvdW50ID0gMCxcbiAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3J0T3V0O1xuIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICApIHtcbiAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0l0ZXJhdGVlQ2FsbDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIFJlYWN0RE9NID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0ID0gcmVxdWlyZShcInJlYWN0LWxpZmVjeWNsZXMtY29tcGF0XCIpO1xuXG52YXIgX3JjTWVudSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyYy1tZW51XCIpKTtcblxudmFyIF9kb21DbG9zZXN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWNsb3Nlc3RcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9zaGFsbG93ZXF1YWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJzaGFsbG93ZXF1YWxcIikpO1xuXG52YXIgX2Ryb3Bkb3duID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vZHJvcGRvd25cIikpO1xuXG52YXIgX2ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9pY29uXCIpKTtcblxudmFyIF9jaGVja2JveCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NoZWNrYm94XCIpKTtcblxudmFyIF9yYWRpbyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3JhZGlvXCIpKTtcblxudmFyIF9GaWx0ZXJEcm9wZG93bk1lbnVXcmFwcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9GaWx0ZXJEcm9wZG93bk1lbnVXcmFwcGVyXCIpKTtcblxudmFyIF91dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKGUpIHtcbiAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICBpZiAoZS5uYXRpdmVFdmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24pIHtcbiAgICBlLm5hdGl2ZUV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9XG59XG5cbnZhciBGaWx0ZXJNZW51ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhGaWx0ZXJNZW51LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGaWx0ZXJNZW51KHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpbHRlck1lbnUpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRmlsdGVyTWVudSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc2V0TmV2ZXJTaG93biA9IGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgIHZhciByb290Tm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgIHZhciBmaWx0ZXJCZWxvbmdUb1Njcm9sbEJvZHkgPSAhISgwLCBfZG9tQ2xvc2VzdFtcImRlZmF1bHRcIl0pKHJvb3ROb2RlLCBcIi5hbnQtdGFibGUtc2Nyb2xsXCIpO1xuXG4gICAgICBpZiAoZmlsdGVyQmVsb25nVG9TY3JvbGxCb2R5KSB7XG4gICAgICAgIC8vIFdoZW4gZml4ZWQgY29sdW1uIGhhdmUgZmlsdGVycywgdGhlcmUgd2lsbCBiZSB0d28gZHJvcGRvd24gbWVudXNcbiAgICAgICAgLy8gRmlsdGVyIGRyb3Bkb3duIG1lbnUgaW5zaWRlIHNjcm9sbCBib2R5IHNob3VsZCBuZXZlciBiZSBzaG93blxuICAgICAgICAvLyBUbyBmaXggaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvNTAxMCBhbmRcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvNzkwOVxuICAgICAgICBfdGhpcy5uZXZlclNob3duID0gISFjb2x1bW4uZml4ZWQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnNldFNlbGVjdGVkS2V5cyA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgc2VsZWN0ZWRLZXlzID0gX3JlZi5zZWxlY3RlZEtleXM7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc2VsZWN0ZWRLZXlzOiBzZWxlY3RlZEtleXNcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDbGVhckZpbHRlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGVkS2V5czogW11cbiAgICAgIH0sIF90aGlzLmhhbmRsZUNvbmZpcm0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDb25maXJtID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0VmlzaWJsZShmYWxzZSk7IC8vIENhbGwgYHNldFNlbGVjdGVkS2V5c2AgJiBgY29uZmlybWAgaW4gdGhlIHNhbWUgdGltZSB3aWxsIG1ha2UgZmlsdGVyIGRhdGEgbm90IHVwIHRvIGRhdGVcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzEyMjg0XG5cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe30sIF90aGlzLmNvbmZpcm1GaWx0ZXIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vblZpc2libGVDaGFuZ2UgPSBmdW5jdGlvbiAodmlzaWJsZSkge1xuICAgICAgX3RoaXMuc2V0VmlzaWJsZSh2aXNpYmxlKTtcblxuICAgICAgdmFyIGNvbHVtbiA9IF90aGlzLnByb3BzLmNvbHVtbjsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTc4MzNcblxuICAgICAgaWYgKCF2aXNpYmxlICYmICEoY29sdW1uLmZpbHRlckRyb3Bkb3duIGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7XG4gICAgICAgIF90aGlzLmNvbmZpcm1GaWx0ZXIoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTWVudUl0ZW1DbGljayA9IGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICB2YXIgc2VsZWN0ZWRLZXlzID0gX3RoaXMuc3RhdGUuc2VsZWN0ZWRLZXlzO1xuXG4gICAgICBpZiAoIWluZm8ua2V5UGF0aCB8fCBpbmZvLmtleVBhdGgubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5UGF0aE9mU2VsZWN0ZWRJdGVtID0gX3RoaXMuc3RhdGUua2V5UGF0aE9mU2VsZWN0ZWRJdGVtO1xuXG4gICAgICBpZiAoc2VsZWN0ZWRLZXlzICYmIHNlbGVjdGVkS2V5cy5pbmRleE9mKGluZm8ua2V5KSA+PSAwKSB7XG4gICAgICAgIC8vIGRlc2VsZWN0IFN1Yk1lbnUgY2hpbGRcbiAgICAgICAgZGVsZXRlIGtleVBhdGhPZlNlbGVjdGVkSXRlbVtpbmZvLmtleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzZWxlY3QgU3ViTWVudSBjaGlsZFxuICAgICAgICBrZXlQYXRoT2ZTZWxlY3RlZEl0ZW1baW5mby5rZXldID0gaW5mby5rZXlQYXRoO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGtleVBhdGhPZlNlbGVjdGVkSXRlbToga2V5UGF0aE9mU2VsZWN0ZWRJdGVtXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyRmlsdGVySWNvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY29sdW1uID0gX3RoaXMkcHJvcHMuY29sdW1uLFxuICAgICAgICAgIGxvY2FsZSA9IF90aGlzJHByb3BzLmxvY2FsZSxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfdGhpcyRwcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgICAgc2VsZWN0ZWRLZXlzID0gX3RoaXMkcHJvcHMuc2VsZWN0ZWRLZXlzO1xuICAgICAgdmFyIGZpbHRlcmVkID0gc2VsZWN0ZWRLZXlzICYmIHNlbGVjdGVkS2V5cy5sZW5ndGggPiAwO1xuICAgICAgdmFyIGZpbHRlckljb24gPSBjb2x1bW4uZmlsdGVySWNvbjtcblxuICAgICAgaWYgKHR5cGVvZiBmaWx0ZXJJY29uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZpbHRlckljb24gPSBmaWx0ZXJJY29uKGZpbHRlcmVkKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRyb3Bkb3duSWNvbkNsYXNzID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoKF9jbGFzc05hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zZWxlY3RlZFwiKSwgZmlsdGVyZWQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItb3BlblwiKSwgX3RoaXMuZ2V0RHJvcGRvd25WaXNpYmxlKCkpLCBfY2xhc3NOYW1lcykpO1xuICAgICAgcmV0dXJuIGZpbHRlckljb24gPyBSZWFjdC5jbG9uZUVsZW1lbnQoZmlsdGVySWNvbiwge1xuICAgICAgICB0aXRsZTogbG9jYWxlLmZpbHRlclRpdGxlLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaWNvblwiKSwgZHJvcGRvd25JY29uQ2xhc3MsIGZpbHRlckljb24ucHJvcHMuY2xhc3NOYW1lKSxcbiAgICAgICAgb25DbGljazogc3RvcFByb3BhZ2F0aW9uXG4gICAgICB9KSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2ljb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHRpdGxlOiBsb2NhbGUuZmlsdGVyVGl0bGUsXG4gICAgICAgIHR5cGU6IFwiZmlsdGVyXCIsXG4gICAgICAgIHRoZW1lOiBcImZpbGxlZFwiLFxuICAgICAgICBjbGFzc05hbWU6IGRyb3Bkb3duSWNvbkNsYXNzLFxuICAgICAgICBvbkNsaWNrOiBzdG9wUHJvcGFnYXRpb25cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2YXIgdmlzaWJsZSA9ICdmaWx0ZXJEcm9wZG93blZpc2libGUnIGluIHByb3BzLmNvbHVtbiA/IHByb3BzLmNvbHVtbi5maWx0ZXJEcm9wZG93blZpc2libGUgOiBmYWxzZTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNlbGVjdGVkS2V5czogcHJvcHMuc2VsZWN0ZWRLZXlzLFxuICAgICAgdmFsdWVLZXlzOiAoMCwgX3V0aWwuZ2VuZXJhdGVWYWx1ZU1hcHMpKHByb3BzLmNvbHVtbi5maWx0ZXJzKSxcbiAgICAgIGtleVBhdGhPZlNlbGVjdGVkSXRlbToge30sXG4gICAgICB2aXNpYmxlOiB2aXNpYmxlLFxuICAgICAgcHJldlByb3BzOiBwcm9wc1xuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZpbHRlck1lbnUsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIGNvbHVtbiA9IHRoaXMucHJvcHMuY29sdW1uO1xuICAgICAgdGhpcy5zZXROZXZlclNob3duKGNvbHVtbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB2YXIgY29sdW1uID0gdGhpcy5wcm9wcy5jb2x1bW47XG4gICAgICB0aGlzLnNldE5ldmVyU2hvd24oY29sdW1uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RHJvcGRvd25WaXNpYmxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERyb3Bkb3duVmlzaWJsZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLm5ldmVyU2hvd24gPyBmYWxzZSA6IHRoaXMuc3RhdGUudmlzaWJsZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0VmlzaWJsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWaXNpYmxlKHZpc2libGUpIHtcbiAgICAgIHZhciBjb2x1bW4gPSB0aGlzLnByb3BzLmNvbHVtbjtcblxuICAgICAgaWYgKCEoJ2ZpbHRlckRyb3Bkb3duVmlzaWJsZScgaW4gY29sdW1uKSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB2aXNpYmxlOiB2aXNpYmxlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29sdW1uLm9uRmlsdGVyRHJvcGRvd25WaXNpYmxlQ2hhbmdlKSB7XG4gICAgICAgIGNvbHVtbi5vbkZpbHRlckRyb3Bkb3duVmlzaWJsZUNoYW5nZSh2aXNpYmxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzU3ViTWVudVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNTdWJNZW51KCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzJGNvbHVtbiRmaSA9IHRoaXMucHJvcHMuY29sdW1uLmZpbHRlcnMsXG4gICAgICAgICAgZmlsdGVycyA9IF90aGlzJHByb3BzJGNvbHVtbiRmaSA9PT0gdm9pZCAwID8gW10gOiBfdGhpcyRwcm9wcyRjb2x1bW4kZmk7XG4gICAgICByZXR1cm4gZmlsdGVycy5zb21lKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiAhIShpdGVtLmNoaWxkcmVuICYmIGl0ZW0uY2hpbGRyZW4ubGVuZ3RoID4gMCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29uZmlybUZpbHRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb25maXJtRmlsdGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY29sdW1uID0gX3RoaXMkcHJvcHMyLmNvbHVtbixcbiAgICAgICAgICBwcm9wU2VsZWN0ZWRLZXlzID0gX3RoaXMkcHJvcHMyLnNlbGVjdGVkS2V5cyxcbiAgICAgICAgICBjb25maXJtRmlsdGVyID0gX3RoaXMkcHJvcHMyLmNvbmZpcm1GaWx0ZXI7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIHNlbGVjdGVkS2V5cyA9IF90aGlzJHN0YXRlLnNlbGVjdGVkS2V5cyxcbiAgICAgICAgICB2YWx1ZUtleXMgPSBfdGhpcyRzdGF0ZS52YWx1ZUtleXM7XG4gICAgICB2YXIgZmlsdGVyRHJvcGRvd24gPSBjb2x1bW4uZmlsdGVyRHJvcGRvd247XG5cbiAgICAgIGlmICghKDAsIF9zaGFsbG93ZXF1YWxbXCJkZWZhdWx0XCJdKShzZWxlY3RlZEtleXMsIHByb3BTZWxlY3RlZEtleXMpKSB7XG4gICAgICAgIGNvbmZpcm1GaWx0ZXIoY29sdW1uLCBmaWx0ZXJEcm9wZG93biA/IHNlbGVjdGVkS2V5cyA6IHNlbGVjdGVkS2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZUtleXNba2V5XTtcbiAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4ga2V5ICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyTWVudXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyTWVudXMoaXRlbXMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIGlmIChpdGVtLmNoaWxkcmVuICYmIGl0ZW0uY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBrZXlQYXRoT2ZTZWxlY3RlZEl0ZW0gPSBfdGhpczIuc3RhdGUua2V5UGF0aE9mU2VsZWN0ZWRJdGVtO1xuICAgICAgICAgIHZhciBjb250YWluU2VsZWN0ZWQgPSBPYmplY3Qua2V5cyhrZXlQYXRoT2ZTZWxlY3RlZEl0ZW0pLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGtleVBhdGhPZlNlbGVjdGVkSXRlbVtrZXldLmluZGV4T2YoaXRlbS52YWx1ZSkgPj0gMDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgc3ViTWVudUNscyA9IGNvbnRhaW5TZWxlY3RlZCA/IFwiXCIuY29uY2F0KF90aGlzMi5wcm9wcy5kcm9wZG93blByZWZpeENscywgXCItc3VibWVudS1jb250YWluLXNlbGVjdGVkXCIpIDogJyc7XG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3JjTWVudS5TdWJNZW51LCB7XG4gICAgICAgICAgICB0aXRsZTogaXRlbS50ZXh0LFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBzdWJNZW51Q2xzLFxuICAgICAgICAgICAga2V5OiBpdGVtLnZhbHVlLnRvU3RyaW5nKClcbiAgICAgICAgICB9LCBfdGhpczIucmVuZGVyTWVudXMoaXRlbS5jaGlsZHJlbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF90aGlzMi5yZW5kZXJNZW51SXRlbShpdGVtKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJNZW51SXRlbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJNZW51SXRlbShpdGVtKSB7XG4gICAgICB2YXIgY29sdW1uID0gdGhpcy5wcm9wcy5jb2x1bW47XG4gICAgICB2YXIgc2VsZWN0ZWRLZXlzID0gdGhpcy5zdGF0ZS5zZWxlY3RlZEtleXM7XG4gICAgICB2YXIgbXVsdGlwbGUgPSAnZmlsdGVyTXVsdGlwbGUnIGluIGNvbHVtbiA/IGNvbHVtbi5maWx0ZXJNdWx0aXBsZSA6IHRydWU7IC8vIFdlIHN0aWxsIG5lZWQgdHJhZGUga2V5IGFzIHN0cmluZyBzaW5jZSBNZW51IHJlbmRlciBuZWVkIHN0cmluZ1xuXG4gICAgICB2YXIgaW50ZXJuYWxTZWxlY3RlZEtleXMgPSAoc2VsZWN0ZWRLZXlzIHx8IFtdKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5LnRvU3RyaW5nKCk7XG4gICAgICB9KTtcbiAgICAgIHZhciBpbnB1dCA9IG11bHRpcGxlID8gUmVhY3QuY3JlYXRlRWxlbWVudChfY2hlY2tib3hbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIGNoZWNrZWQ6IGludGVybmFsU2VsZWN0ZWRLZXlzLmluZGV4T2YoaXRlbS52YWx1ZS50b1N0cmluZygpKSA+PSAwXG4gICAgICB9KSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3JhZGlvW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBjaGVja2VkOiBpbnRlcm5hbFNlbGVjdGVkS2V5cy5pbmRleE9mKGl0ZW0udmFsdWUudG9TdHJpbmcoKSkgPj0gMFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfcmNNZW51Lkl0ZW0sIHtcbiAgICAgICAga2V5OiBpdGVtLnZhbHVlXG4gICAgICB9LCBpbnB1dCwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCwgaXRlbS50ZXh0KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIG9yaWdpblNlbGVjdGVkS2V5cyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRLZXlzO1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY29sdW1uID0gX3RoaXMkcHJvcHMzLmNvbHVtbixcbiAgICAgICAgICBsb2NhbGUgPSBfdGhpcyRwcm9wczMubG9jYWxlLFxuICAgICAgICAgIHByZWZpeENscyA9IF90aGlzJHByb3BzMy5wcmVmaXhDbHMsXG4gICAgICAgICAgZHJvcGRvd25QcmVmaXhDbHMgPSBfdGhpcyRwcm9wczMuZHJvcGRvd25QcmVmaXhDbHMsXG4gICAgICAgICAgZ2V0UG9wdXBDb250YWluZXIgPSBfdGhpcyRwcm9wczMuZ2V0UG9wdXBDb250YWluZXI7IC8vIGRlZmF1bHQgbXVsdGlwbGUgc2VsZWN0aW9uIGluIGZpbHRlciBkcm9wZG93blxuXG4gICAgICB2YXIgbXVsdGlwbGUgPSAnZmlsdGVyTXVsdGlwbGUnIGluIGNvbHVtbiA/IGNvbHVtbi5maWx0ZXJNdWx0aXBsZSA6IHRydWU7XG4gICAgICB2YXIgZHJvcGRvd25NZW51Q2xhc3MgPSAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShfZGVmaW5lUHJvcGVydHkoe30sIFwiXCIuY29uY2F0KGRyb3Bkb3duUHJlZml4Q2xzLCBcIi1tZW51LXdpdGhvdXQtc3VibWVudVwiKSwgIXRoaXMuaGFzU3ViTWVudSgpKSk7XG4gICAgICB2YXIgZmlsdGVyRHJvcGRvd24gPSBjb2x1bW4uZmlsdGVyRHJvcGRvd247XG5cbiAgICAgIGlmIChmaWx0ZXJEcm9wZG93biBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgIGZpbHRlckRyb3Bkb3duID0gZmlsdGVyRHJvcGRvd24oe1xuICAgICAgICAgIHByZWZpeENsczogXCJcIi5jb25jYXQoZHJvcGRvd25QcmVmaXhDbHMsIFwiLWN1c3RvbVwiKSxcbiAgICAgICAgICBzZXRTZWxlY3RlZEtleXM6IGZ1bmN0aW9uIHNldFNlbGVjdGVkS2V5cyhzZWxlY3RlZEtleXMpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczMuc2V0U2VsZWN0ZWRLZXlzKHtcbiAgICAgICAgICAgICAgc2VsZWN0ZWRLZXlzOiBzZWxlY3RlZEtleXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2VsZWN0ZWRLZXlzOiBvcmlnaW5TZWxlY3RlZEtleXMsXG4gICAgICAgICAgY29uZmlybTogdGhpcy5oYW5kbGVDb25maXJtLFxuICAgICAgICAgIGNsZWFyRmlsdGVyczogdGhpcy5oYW5kbGVDbGVhckZpbHRlcnMsXG4gICAgICAgICAgZmlsdGVyczogY29sdW1uLmZpbHRlcnNcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtZW51cyA9IGZpbHRlckRyb3Bkb3duID8gUmVhY3QuY3JlYXRlRWxlbWVudChfRmlsdGVyRHJvcGRvd25NZW51V3JhcHBlcltcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWRyb3Bkb3duXCIpXG4gICAgICB9LCBmaWx0ZXJEcm9wZG93bikgOiBSZWFjdC5jcmVhdGVFbGVtZW50KF9GaWx0ZXJEcm9wZG93bk1lbnVXcmFwcGVyW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZHJvcGRvd25cIilcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3JjTWVudVtcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgbXVsdGlwbGU6IG11bHRpcGxlLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZU1lbnVJdGVtQ2xpY2ssXG4gICAgICAgIHByZWZpeENsczogXCJcIi5jb25jYXQoZHJvcGRvd25QcmVmaXhDbHMsIFwiLW1lbnVcIiksXG4gICAgICAgIGNsYXNzTmFtZTogZHJvcGRvd25NZW51Q2xhc3MsXG4gICAgICAgIG9uU2VsZWN0OiB0aGlzLnNldFNlbGVjdGVkS2V5cyxcbiAgICAgICAgb25EZXNlbGVjdDogdGhpcy5zZXRTZWxlY3RlZEtleXMsXG4gICAgICAgIHNlbGVjdGVkS2V5czogb3JpZ2luU2VsZWN0ZWRLZXlzICYmIG9yaWdpblNlbGVjdGVkS2V5cy5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgIHJldHVybiB2YWwudG9TdHJpbmcoKTtcbiAgICAgICAgfSksXG4gICAgICAgIGdldFBvcHVwQ29udGFpbmVyOiBnZXRQb3B1cENvbnRhaW5lclxuICAgICAgfSwgdGhpcy5yZW5kZXJNZW51cyhjb2x1bW4uZmlsdGVycykpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWRyb3Bkb3duLWJ0bnNcIilcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWRyb3Bkb3duLWxpbmsgY29uZmlybVwiKSxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDb25maXJtXG4gICAgICB9LCBsb2NhbGUuZmlsdGVyQ29uZmlybSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWRyb3Bkb3duLWxpbmsgY2xlYXJcIiksXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xlYXJGaWx0ZXJzXG4gICAgICB9LCBsb2NhbGUuZmlsdGVyUmVzZXQpKSk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfZHJvcGRvd25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHRyaWdnZXI6IFsnY2xpY2snXSxcbiAgICAgICAgcGxhY2VtZW50OiBcImJvdHRvbVJpZ2h0XCIsXG4gICAgICAgIG92ZXJsYXk6IG1lbnVzLFxuICAgICAgICB2aXNpYmxlOiB0aGlzLmdldERyb3Bkb3duVmlzaWJsZSgpLFxuICAgICAgICBvblZpc2libGVDaGFuZ2U6IHRoaXMub25WaXNpYmxlQ2hhbmdlLFxuICAgICAgICBnZXRQb3B1cENvbnRhaW5lcjogZ2V0UG9wdXBDb250YWluZXIsXG4gICAgICAgIGZvcmNlUmVuZGVyOiB0cnVlXG4gICAgICB9LCB0aGlzLnJlbmRlckZpbHRlckljb24oKSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgdmFyIGNvbHVtbiA9IG5leHRQcm9wcy5jb2x1bW47XG4gICAgICB2YXIgcHJldlByb3BzID0gcHJldlN0YXRlLnByZXZQcm9wcztcbiAgICAgIHZhciBuZXdTdGF0ZSA9IHtcbiAgICAgICAgcHJldlByb3BzOiBuZXh0UHJvcHNcbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIGlmIHRoZSBzdGF0ZSBpcyB2aXNpYmxlIHRoZSBjb21wb25lbnQgc2hvdWxkIGlnbm9yZSB1cGRhdGVzIG9uIHNlbGVjdGVkS2V5cyBwcm9wIHRvIGF2b2lkXG4gICAgICAgKiB0aGF0IHRoZSB1c2VyIHNlbGVjdGlvbiBpcyBsb3N0XG4gICAgICAgKiB0aGlzIGhhcHBlbnMgZnJlcXVlbnRseSB3aGVuIGEgdGFibGUgaXMgY29ubmVjdGVkIG9uIHNvbWUgc29ydCBvZiByZWFsdGltZSBkYXRhXG4gICAgICAgKiBGaXhlcyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xMDI4OSBhbmRcbiAgICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzEwMjA5XG4gICAgICAgKi9cblxuICAgICAgaWYgKCdzZWxlY3RlZEtleXMnIGluIG5leHRQcm9wcyAmJiAhKDAsIF9zaGFsbG93ZXF1YWxbXCJkZWZhdWx0XCJdKShwcmV2UHJvcHMuc2VsZWN0ZWRLZXlzLCBuZXh0UHJvcHMuc2VsZWN0ZWRLZXlzKSkge1xuICAgICAgICBuZXdTdGF0ZS5zZWxlY3RlZEtleXMgPSBuZXh0UHJvcHMuc2VsZWN0ZWRLZXlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoISgwLCBfc2hhbGxvd2VxdWFsW1wiZGVmYXVsdFwiXSkoKHByZXZQcm9wcy5jb2x1bW4gfHwge30pLmZpbHRlcnMsIChuZXh0UHJvcHMuY29sdW1uIHx8IHt9KS5maWx0ZXJzKSkge1xuICAgICAgICBuZXdTdGF0ZS52YWx1ZUtleXMgPSAoMCwgX3V0aWwuZ2VuZXJhdGVWYWx1ZU1hcHMpKG5leHRQcm9wcy5jb2x1bW4uZmlsdGVycyk7XG4gICAgICB9XG5cbiAgICAgIGlmICgnZmlsdGVyRHJvcGRvd25WaXNpYmxlJyBpbiBjb2x1bW4pIHtcbiAgICAgICAgbmV3U3RhdGUudmlzaWJsZSA9IGNvbHVtbi5maWx0ZXJEcm9wZG93blZpc2libGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRmlsdGVyTWVudTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRmlsdGVyTWVudS5kZWZhdWx0UHJvcHMgPSB7XG4gIGhhbmRsZUZpbHRlcjogZnVuY3Rpb24gaGFuZGxlRmlsdGVyKCkge30sXG4gIGNvbHVtbjoge31cbn07XG4oMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoRmlsdGVyTWVudSk7XG52YXIgX2RlZmF1bHQgPSBGaWx0ZXJNZW51O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlckRyb3Bkb3duLmpzLm1hcFxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIG1hdGNoZXMgPSByZXF1aXJlKCdkb20tbWF0Y2hlcycpO1xuXG4vKipcbiAqIEBwYXJhbSBlbGVtZW50IHtFbGVtZW50fVxuICogQHBhcmFtIHNlbGVjdG9yIHtTdHJpbmd9XG4gKiBAcGFyYW0gY29udGV4dCB7RWxlbWVudH1cbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGVsZW1lbnQsIHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gIGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuICAvLyBndWFyZCBhZ2FpbnN0IG9ycGhhbnNcbiAgZWxlbWVudCA9IHsgcGFyZW50Tm9kZTogZWxlbWVudCB9O1xuXG4gIHdoaWxlICgoZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSkgJiYgZWxlbWVudCAhPT0gY29udGV4dCkge1xuICAgIGlmIChtYXRjaGVzKGVsZW1lbnQsIHNlbGVjdG9yKSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIERPTSBlbGVtZW50IG1hdGNoZXMgYSBDU1Mgc2VsZWN0b3JcbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2hlcyhlbGVtLCBzZWxlY3Rvcikge1xuICAvLyBWZW5kb3Itc3BlY2lmaWMgaW1wbGVtZW50YXRpb25zIG9mIGBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzKClgLlxuICB2YXIgcHJvdG8gPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVNYXRjaGVzID0gcHJvdG8ubWF0Y2hlcyB8fFxuICAgICAgcHJvdG8ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICBwcm90by5tc01hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgcHJvdG8ub01hdGNoZXNTZWxlY3RvciB8fFxuICAgICAgcHJvdG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yO1xuXG4gIGlmICghZWxlbSB8fCBlbGVtLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHBhcmVudEVsZW0gPSBlbGVtLnBhcmVudE5vZGU7XG5cbiAgLy8gdXNlIG5hdGl2ZSAnbWF0Y2hlcydcbiAgaWYgKG5hdGl2ZU1hdGNoZXMpIHtcbiAgICByZXR1cm4gbmF0aXZlTWF0Y2hlcy5jYWxsKGVsZW0sIHNlbGVjdG9yKTtcbiAgfVxuXG4gIC8vIG5hdGl2ZSBzdXBwb3J0IGZvciBgbWF0Y2hlc2AgaXMgbWlzc2luZyBhbmQgYSBmYWxsYmFjayBpcyByZXF1aXJlZFxuICB2YXIgbm9kZXMgPSBwYXJlbnRFbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB2YXIgbGVuID0gbm9kZXMubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAobm9kZXNbaV0gPT09IGVsZW0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBFeHBvc2UgYG1hdGNoZXNgXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIFByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdExpZmVjeWNsZXNDb21wYXQgPSByZXF1aXJlKFwicmVhY3QtbGlmZWN5Y2xlcy1jb21wYXRcIik7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3NoYWxsb3dlcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInNoYWxsb3dlcXVhbFwiKSk7XG5cbnZhciBfb21pdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm9taXQuanNcIikpO1xuXG52YXIgX0NoZWNrYm94ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DaGVja2JveFwiKSk7XG5cbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuXG4gIGZvciAodmFyIHAgaW4gcykge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIH1cblxuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcblxudmFyIENoZWNrYm94R3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENoZWNrYm94R3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENoZWNrYm94R3JvdXAocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hlY2tib3hHcm91cCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihDaGVja2JveEdyb3VwKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5jYW5jZWxWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIHJlZ2lzdGVyZWRWYWx1ZXMgPSBfcmVmLnJlZ2lzdGVyZWRWYWx1ZXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVnaXN0ZXJlZFZhbHVlczogcmVnaXN0ZXJlZFZhbHVlcy5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbCAhPT0gdmFsdWU7XG4gICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZWdpc3RlclZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgdmFyIHJlZ2lzdGVyZWRWYWx1ZXMgPSBfcmVmMi5yZWdpc3RlcmVkVmFsdWVzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlZ2lzdGVyZWRWYWx1ZXM6IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocmVnaXN0ZXJlZFZhbHVlcyksIFt2YWx1ZV0pXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMudG9nZ2xlT3B0aW9uID0gZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgdmFyIHJlZ2lzdGVyZWRWYWx1ZXMgPSBfdGhpcy5zdGF0ZS5yZWdpc3RlcmVkVmFsdWVzO1xuXG4gICAgICB2YXIgb3B0aW9uSW5kZXggPSBfdGhpcy5zdGF0ZS52YWx1ZS5pbmRleE9mKG9wdGlvbi52YWx1ZSk7XG5cbiAgICAgIHZhciB2YWx1ZSA9IF90b0NvbnN1bWFibGVBcnJheShfdGhpcy5zdGF0ZS52YWx1ZSk7XG5cbiAgICAgIGlmIChvcHRpb25JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgdmFsdWUucHVzaChvcHRpb24udmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUuc3BsaWNlKG9wdGlvbkluZGV4LCAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCEoJ3ZhbHVlJyBpbiBfdGhpcy5wcm9wcykpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9uQ2hhbmdlID0gX3RoaXMucHJvcHMub25DaGFuZ2U7XG5cbiAgICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IF90aGlzLmdldE9wdGlvbnMoKTtcblxuICAgICAgICBvbkNoYW5nZSh2YWx1ZS5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgIHJldHVybiByZWdpc3RlcmVkVmFsdWVzLmluZGV4T2YodmFsKSAhPT0gLTE7XG4gICAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICB2YXIgaW5kZXhBID0gb3B0aW9ucy5maW5kSW5kZXgoZnVuY3Rpb24gKG9wdCkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdC52YWx1ZSA9PT0gYTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgaW5kZXhCID0gb3B0aW9ucy5maW5kSW5kZXgoZnVuY3Rpb24gKG9wdCkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdC52YWx1ZSA9PT0gYjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gaW5kZXhBIC0gaW5kZXhCO1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlckdyb3VwID0gZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgZ2V0UHJlZml4Q2xzID0gX3JlZjMuZ2V0UHJlZml4Q2xzO1xuXG4gICAgICB2YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksXG4gICAgICAgICAgcHJvcHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemUucHJvcHMsXG4gICAgICAgICAgc3RhdGUgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemUuc3RhdGU7XG5cbiAgICAgIHZhciBjdXN0b21pemVQcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICAgICAgb3B0aW9ucyA9IHByb3BzLm9wdGlvbnMsXG4gICAgICAgICAgcmVzdFByb3BzID0gX19yZXN0KHByb3BzLCBbXCJwcmVmaXhDbHNcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcIm9wdGlvbnNcIl0pO1xuXG4gICAgICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdjaGVja2JveCcsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgICB2YXIgZ3JvdXBQcmVmaXhDbHMgPSBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWdyb3VwXCIpO1xuICAgICAgdmFyIGRvbVByb3BzID0gKDAsIF9vbWl0W1wiZGVmYXVsdFwiXSkocmVzdFByb3BzLCBbJ2NoaWxkcmVuJywgJ2RlZmF1bHRWYWx1ZScsICd2YWx1ZScsICdvbkNoYW5nZScsICdkaXNhYmxlZCddKTtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuXG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcy5nZXRPcHRpb25zKCkubWFwKGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfQ2hlY2tib3hbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgICAgIGtleTogb3B0aW9uLnZhbHVlLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBkaXNhYmxlZDogJ2Rpc2FibGVkJyBpbiBvcHRpb24gPyBvcHRpb24uZGlzYWJsZWQgOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICAgIHZhbHVlOiBvcHRpb24udmFsdWUsXG4gICAgICAgICAgICBjaGVja2VkOiBzdGF0ZS52YWx1ZS5pbmRleE9mKG9wdGlvbi52YWx1ZSkgIT09IC0xLFxuICAgICAgICAgICAgb25DaGFuZ2U6IG9wdGlvbi5vbkNoYW5nZSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQoZ3JvdXBQcmVmaXhDbHMsIFwiLWl0ZW1cIilcbiAgICAgICAgICB9LCBvcHRpb24ubGFiZWwpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsYXNzU3RyaW5nID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoZ3JvdXBQcmVmaXhDbHMsIGNsYXNzTmFtZSk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NTdHJpbmcsXG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfSwgZG9tUHJvcHMpLCBjaGlsZHJlbik7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IHByb3BzLnZhbHVlIHx8IHByb3BzLmRlZmF1bHRWYWx1ZSB8fCBbXSxcbiAgICAgIHJlZ2lzdGVyZWRWYWx1ZXM6IFtdXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2hlY2tib3hHcm91cCwgW3tcbiAgICBrZXk6IFwiZ2V0Q2hpbGRDb250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoZWNrYm94R3JvdXA6IHtcbiAgICAgICAgICB0b2dnbGVPcHRpb246IHRoaXMudG9nZ2xlT3B0aW9uLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIG5hbWU6IHRoaXMucHJvcHMubmFtZSxcbiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xNjM3NlxuICAgICAgICAgIHJlZ2lzdGVyVmFsdWU6IHRoaXMucmVnaXN0ZXJWYWx1ZSxcbiAgICAgICAgICBjYW5jZWxWYWx1ZTogdGhpcy5jYW5jZWxWYWx1ZVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICByZXR1cm4gISgwLCBfc2hhbGxvd2VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9zaGFsbG93ZXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRPcHRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9wdGlvbnMoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMucHJvcHMub3B0aW9uczsgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy83OTYwXG5cbiAgICAgIHJldHVybiBvcHRpb25zLm1hcChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbDogb3B0aW9uLFxuICAgICAgICAgICAgdmFsdWU6IG9wdGlvblxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3B0aW9uO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29uc3VtZXIsIG51bGwsIHRoaXMucmVuZGVyR3JvdXApO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAoJ3ZhbHVlJyBpbiBuZXh0UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogbmV4dFByb3BzLnZhbHVlIHx8IFtdXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDaGVja2JveEdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5DaGVja2JveEdyb3VwLmRlZmF1bHRQcm9wcyA9IHtcbiAgb3B0aW9uczogW11cbn07XG5DaGVja2JveEdyb3VwLnByb3BUeXBlcyA9IHtcbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYXJyYXksXG4gIHZhbHVlOiBQcm9wVHlwZXMuYXJyYXksXG4gIG9wdGlvbnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmNcbn07XG5DaGVja2JveEdyb3VwLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICBjaGVja2JveEdyb3VwOiBQcm9wVHlwZXMuYW55XG59O1xuKDAsIF9yZWFjdExpZmVjeWNsZXNDb21wYXQucG9seWZpbGwpKENoZWNrYm94R3JvdXApO1xudmFyIF9kZWZhdWx0ID0gQ2hlY2tib3hHcm91cDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Hcm91cC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3NoYWxsb3dlcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInNoYWxsb3dlcXVhbFwiKSk7XG5cbnZhciBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0ID0gcmVxdWlyZShcInJlYWN0LWxpZmVjeWNsZXMtY29tcGF0XCIpO1xuXG52YXIgX3JhZGlvID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yYWRpb1wiKSk7XG5cbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBnZXRDaGVja2VkVmFsdWUoY2hpbGRyZW4pIHtcbiAgdmFyIHZhbHVlID0gbnVsbDtcbiAgdmFyIG1hdGNoZWQgPSBmYWxzZTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKHJhZGlvKSB7XG4gICAgaWYgKHJhZGlvICYmIHJhZGlvLnByb3BzICYmIHJhZGlvLnByb3BzLmNoZWNrZWQpIHtcbiAgICAgIHZhbHVlID0gcmFkaW8ucHJvcHMudmFsdWU7XG4gICAgICBtYXRjaGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbWF0Y2hlZCA/IHtcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSA6IHVuZGVmaW5lZDtcbn1cblxudmFyIFJhZGlvR3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJhZGlvR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJhZGlvR3JvdXAocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmFkaW9Hcm91cCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihSYWRpb0dyb3VwKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5vblJhZGlvQ2hhbmdlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICB2YXIgbGFzdFZhbHVlID0gX3RoaXMuc3RhdGUudmFsdWU7XG4gICAgICB2YXIgdmFsdWUgPSBldi50YXJnZXQudmFsdWU7XG5cbiAgICAgIGlmICghKCd2YWx1ZScgaW4gX3RoaXMucHJvcHMpKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvbkNoYW5nZSA9IF90aGlzLnByb3BzLm9uQ2hhbmdlO1xuXG4gICAgICBpZiAob25DaGFuZ2UgJiYgdmFsdWUgIT09IGxhc3RWYWx1ZSkge1xuICAgICAgICBvbkNoYW5nZShldik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlckdyb3VwID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBnZXRQcmVmaXhDbHMgPSBfcmVmLmdldFByZWZpeENscztcblxuICAgICAgdmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZSA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLFxuICAgICAgICAgIHByb3BzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplLnByb3BzO1xuXG4gICAgICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIF9wcm9wcyRjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzJGNsYXNzTmFtZSA9PT0gdm9pZCAwID8gJycgOiBfcHJvcHMkY2xhc3NOYW1lLFxuICAgICAgICAgIG9wdGlvbnMgPSBwcm9wcy5vcHRpb25zLFxuICAgICAgICAgIGJ1dHRvblN0eWxlID0gcHJvcHMuYnV0dG9uU3R5bGU7XG4gICAgICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdyYWRpbycsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgICB2YXIgZ3JvdXBQcmVmaXhDbHMgPSBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWdyb3VwXCIpO1xuICAgICAgdmFyIGNsYXNzU3RyaW5nID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoZ3JvdXBQcmVmaXhDbHMsIFwiXCIuY29uY2F0KGdyb3VwUHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KGJ1dHRvblN0eWxlKSwgX2RlZmluZVByb3BlcnR5KHt9LCBcIlwiLmNvbmNhdChncm91cFByZWZpeENscywgXCItXCIpLmNvbmNhdChwcm9wcy5zaXplKSwgcHJvcHMuc2l6ZSksIGNsYXNzTmFtZSk7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjsgLy8g5aaC5p6c5a2Y5ZyoIG9wdGlvbnMsIOS8mOWFiOS9v+eUqFxuXG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBvcHRpb25zLm1hcChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyDmraTlpITnsbvlnovoh6rliqjmjqjlr7zkuLogc3RyaW5nXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfcmFkaW9bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgICAgICAgIGtleTogb3B0aW9uLFxuICAgICAgICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgICAgICAgZGlzYWJsZWQ6IF90aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgICB2YWx1ZTogb3B0aW9uLFxuICAgICAgICAgICAgICBjaGVja2VkOiBfdGhpcy5zdGF0ZS52YWx1ZSA9PT0gb3B0aW9uXG4gICAgICAgICAgICB9LCBvcHRpb24pO1xuICAgICAgICAgIH0gLy8g5q2k5aSE57G75Z6L6Ieq5Yqo5o6o5a+85Li6IHsgbGFiZWw6IHN0cmluZyB2YWx1ZTogc3RyaW5nIH1cblxuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3JhZGlvW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICAgICAga2V5OiBcInJhZGlvLWdyb3VwLXZhbHVlLW9wdGlvbnMtXCIuY29uY2F0KG9wdGlvbi52YWx1ZSksXG4gICAgICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgICAgIGRpc2FibGVkOiBvcHRpb24uZGlzYWJsZWQgfHwgX3RoaXMucHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgICB2YWx1ZTogb3B0aW9uLnZhbHVlLFxuICAgICAgICAgICAgY2hlY2tlZDogX3RoaXMuc3RhdGUudmFsdWUgPT09IG9wdGlvbi52YWx1ZVxuICAgICAgICAgIH0sIG9wdGlvbi5sYWJlbCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NTdHJpbmcsXG4gICAgICAgIHN0eWxlOiBwcm9wcy5zdHlsZSxcbiAgICAgICAgb25Nb3VzZUVudGVyOiBwcm9wcy5vbk1vdXNlRW50ZXIsXG4gICAgICAgIG9uTW91c2VMZWF2ZTogcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgICBpZDogcHJvcHMuaWRcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9O1xuXG4gICAgdmFyIHZhbHVlO1xuXG4gICAgaWYgKCd2YWx1ZScgaW4gcHJvcHMpIHtcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWU7XG4gICAgfSBlbHNlIGlmICgnZGVmYXVsdFZhbHVlJyBpbiBwcm9wcykge1xuICAgICAgdmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGVja2VkVmFsdWUgPSBnZXRDaGVja2VkVmFsdWUocHJvcHMuY2hpbGRyZW4pO1xuICAgICAgdmFsdWUgPSBjaGVja2VkVmFsdWUgJiYgY2hlY2tlZFZhbHVlLnZhbHVlO1xuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmFkaW9Hcm91cCwgW3tcbiAgICBrZXk6IFwiZ2V0Q2hpbGRDb250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJhZGlvR3JvdXA6IHtcbiAgICAgICAgICBvbkNoYW5nZTogdGhpcy5vblJhZGlvQ2hhbmdlLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIG5hbWU6IHRoaXMucHJvcHMubmFtZVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICByZXR1cm4gISgwLCBfc2hhbGxvd2VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9zaGFsbG93ZXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnN1bWVyLCBudWxsLCB0aGlzLnJlbmRlckdyb3VwKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKCd2YWx1ZScgaW4gbmV4dFByb3BzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IG5leHRQcm9wcy52YWx1ZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hlY2tlZFZhbHVlID0gZ2V0Q2hlY2tlZFZhbHVlKG5leHRQcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIGlmIChjaGVja2VkVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogY2hlY2tlZFZhbHVlLnZhbHVlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSYWRpb0dyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5SYWRpb0dyb3VwLmRlZmF1bHRQcm9wcyA9IHtcbiAgYnV0dG9uU3R5bGU6ICdvdXRsaW5lJ1xufTtcblJhZGlvR3JvdXAuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJhZGlvR3JvdXA6IFByb3BUeXBlcy5hbnlcbn07XG4oMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoUmFkaW9Hcm91cCk7XG52YXIgX2RlZmF1bHQgPSBSYWRpb0dyb3VwO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyb3VwLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIFByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yYWRpbyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmFkaW9cIikpO1xuXG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIF9fcmVzdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcblxuICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICB9XG5cbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5cbnZhciBSYWRpb0J1dHRvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmFkaW9CdXR0b24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJhZGlvQnV0dG9uKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSYWRpb0J1dHRvbik7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihSYWRpb0J1dHRvbikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cbiAgICBfdGhpcy5yZW5kZXJSYWRpb0J1dHRvbiA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgZ2V0UHJlZml4Q2xzID0gX3JlZi5nZXRQcmVmaXhDbHM7XG5cbiAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IF9hLnByZWZpeENscyxcbiAgICAgICAgICByYWRpb1Byb3BzID0gX19yZXN0KF9hLCBbXCJwcmVmaXhDbHNcIl0pO1xuXG4gICAgICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdyYWRpby1idXR0b24nLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuXG4gICAgICBpZiAoX3RoaXMuY29udGV4dC5yYWRpb0dyb3VwKSB7XG4gICAgICAgIHJhZGlvUHJvcHMuY2hlY2tlZCA9IF90aGlzLnByb3BzLnZhbHVlID09PSBfdGhpcy5jb250ZXh0LnJhZGlvR3JvdXAudmFsdWU7XG4gICAgICAgIHJhZGlvUHJvcHMuZGlzYWJsZWQgPSBfdGhpcy5wcm9wcy5kaXNhYmxlZCB8fCBfdGhpcy5jb250ZXh0LnJhZGlvR3JvdXAuZGlzYWJsZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9yYWRpb1tcImRlZmF1bHRcIl0sIF9leHRlbmRzKHtcbiAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHNcbiAgICAgIH0sIHJhZGlvUHJvcHMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJhZGlvQnV0dG9uLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnN1bWVyLCBudWxsLCB0aGlzLnJlbmRlclJhZGlvQnV0dG9uKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmFkaW9CdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gUmFkaW9CdXR0b247XG5SYWRpb0J1dHRvbi5jb250ZXh0VHlwZXMgPSB7XG4gIHJhZGlvR3JvdXA6IFByb3BUeXBlcy5hbnlcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYWRpb0J1dHRvbi5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG52YXIgRmlsdGVyRHJvcGRvd25NZW51V3JhcHBlciA9IGZ1bmN0aW9uIEZpbHRlckRyb3Bkb3duTWVudVdyYXBwZXIocHJvcHMpIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogcHJvcHMuY2xhc3NOYW1lLFxuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgcmV0dXJuIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9LCBwcm9wcy5jaGlsZHJlbik7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBGaWx0ZXJEcm9wZG93bk1lbnVXcmFwcGVyO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZpbHRlckRyb3Bkb3duTWVudVdyYXBwZXIuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gY3JlYXRlU3RvcmU7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKGluaXRpYWxTdGF0ZSkge1xuICB2YXIgc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShwYXJ0aWFsKSB7XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgc3RhdGUpLCBwYXJ0aWFsKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgdmFyIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0U3RhdGU6IHNldFN0YXRlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZVxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlU3RvcmUuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NoZWNrYm94ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY2hlY2tib3hcIikpO1xuXG52YXIgX3JhZGlvID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcmFkaW9cIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuXG4gIGZvciAodmFyIHAgaW4gcykge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIH1cblxuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcblxudmFyIFNlbGVjdGlvbkJveCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2VsZWN0aW9uQm94LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTZWxlY3Rpb25Cb3gocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VsZWN0aW9uQm94KTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFNlbGVjdGlvbkJveCkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY2hlY2tlZDogX3RoaXMuZ2V0Q2hlY2tTdGF0ZShwcm9wcylcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTZWxlY3Rpb25Cb3gsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q2hlY2tTdGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGVja1N0YXRlKHByb3BzKSB7XG4gICAgICB2YXIgc3RvcmUgPSBwcm9wcy5zdG9yZSxcbiAgICAgICAgICBkZWZhdWx0U2VsZWN0aW9uID0gcHJvcHMuZGVmYXVsdFNlbGVjdGlvbixcbiAgICAgICAgICByb3dJbmRleCA9IHByb3BzLnJvd0luZGV4O1xuICAgICAgdmFyIGNoZWNrZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKHN0b3JlLmdldFN0YXRlKCkuc2VsZWN0aW9uRGlydHkpIHtcbiAgICAgICAgY2hlY2tlZCA9IHN0b3JlLmdldFN0YXRlKCkuc2VsZWN0ZWRSb3dLZXlzLmluZGV4T2Yocm93SW5kZXgpID49IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGVja2VkID0gc3RvcmUuZ2V0U3RhdGUoKS5zZWxlY3RlZFJvd0tleXMuaW5kZXhPZihyb3dJbmRleCkgPj0gMCB8fCBkZWZhdWx0U2VsZWN0aW9uLmluZGV4T2Yocm93SW5kZXgpID49IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjaGVja2VkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdWJzY3JpYmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3Vic2NyaWJlKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBzdG9yZSA9IHRoaXMucHJvcHMuc3RvcmU7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNoZWNrZWQgPSBfdGhpczIuZ2V0Q2hlY2tTdGF0ZShfdGhpczIucHJvcHMpO1xuXG4gICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgY2hlY2tlZDogY2hlY2tlZFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB0eXBlID0gX2EudHlwZSxcbiAgICAgICAgICByb3dJbmRleCA9IF9hLnJvd0luZGV4LFxuICAgICAgICAgIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInR5cGVcIiwgXCJyb3dJbmRleFwiXSk7XG5cbiAgICAgIHZhciBjaGVja2VkID0gdGhpcy5zdGF0ZS5jaGVja2VkO1xuXG4gICAgICBpZiAodHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfcmFkaW9bXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICAgICAgICB2YWx1ZTogcm93SW5kZXhcbiAgICAgICAgfSwgcmVzdCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfY2hlY2tib3hbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7XG4gICAgICAgIGNoZWNrZWQ6IGNoZWNrZWRcbiAgICAgIH0sIHJlc3QpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2VsZWN0aW9uQm94O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFNlbGVjdGlvbkJveDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlbGVjdGlvbkJveC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxudmFyIF9jaGVja2JveCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NoZWNrYm94XCIpKTtcblxudmFyIF9kcm9wZG93biA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2Ryb3Bkb3duXCIpKTtcblxudmFyIF9tZW51ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vbWVudVwiKSk7XG5cbnZhciBfaWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ljb25cIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBjaGVja1NlbGVjdGlvbihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBnZXRDaGVja2JveFByb3BzQnlJdGVtID0gX3JlZi5nZXRDaGVja2JveFByb3BzQnlJdGVtLFxuICAgICAgZ2V0UmVjb3JkS2V5ID0gX3JlZi5nZXRSZWNvcmRLZXksXG4gICAgICBkYXRhID0gX3JlZi5kYXRhLFxuICAgICAgdHlwZSA9IF9yZWYudHlwZSxcbiAgICAgIGJ5RGVmYXVsdENoZWNrZWQgPSBfcmVmLmJ5RGVmYXVsdENoZWNrZWQ7XG5cbiAgLy8gdHlwZSBzaG91bGQgYmUgJ2V2ZXJ5JyB8ICdzb21lJ1xuICBpZiAodHlwZSA9PT0gJ2V2ZXJ5JyB8fCB0eXBlID09PSAnc29tZScpIHtcbiAgICByZXR1cm4gYnlEZWZhdWx0Q2hlY2tlZCA/IGRhdGFbdHlwZV0oZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgIHJldHVybiBnZXRDaGVja2JveFByb3BzQnlJdGVtKGl0ZW0sIGkpLmRlZmF1bHRDaGVja2VkO1xuICAgIH0pIDogZGF0YVt0eXBlXShmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCkuc2VsZWN0ZWRSb3dLZXlzLmluZGV4T2YoZ2V0UmVjb3JkS2V5KGl0ZW0sIGkpKSA+PSAwO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRJbmRldGVybWluYXRlU3RhdGUocHJvcHMpIHtcbiAgdmFyIHN0b3JlID0gcHJvcHMuc3RvcmUsXG4gICAgICBkYXRhID0gcHJvcHMuZGF0YTtcblxuICBpZiAoIWRhdGEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHNvbWVDaGVja2VkTm90QnlEZWZhdWx0Q2hlY2tlZCA9IGNoZWNrU2VsZWN0aW9uKF9leHRlbmRzKF9leHRlbmRzKHt9LCBwcm9wcyksIHtcbiAgICBkYXRhOiBkYXRhLFxuICAgIHR5cGU6ICdzb21lJyxcbiAgICBieURlZmF1bHRDaGVja2VkOiBmYWxzZVxuICB9KSkgJiYgIWNoZWNrU2VsZWN0aW9uKF9leHRlbmRzKF9leHRlbmRzKHt9LCBwcm9wcyksIHtcbiAgICBkYXRhOiBkYXRhLFxuICAgIHR5cGU6ICdldmVyeScsXG4gICAgYnlEZWZhdWx0Q2hlY2tlZDogZmFsc2VcbiAgfSkpO1xuICB2YXIgc29tZUNoZWNrZWRCeURlZmF1bHRDaGVja2VkID0gY2hlY2tTZWxlY3Rpb24oX2V4dGVuZHMoX2V4dGVuZHMoe30sIHByb3BzKSwge1xuICAgIGRhdGE6IGRhdGEsXG4gICAgdHlwZTogJ3NvbWUnLFxuICAgIGJ5RGVmYXVsdENoZWNrZWQ6IHRydWVcbiAgfSkpICYmICFjaGVja1NlbGVjdGlvbihfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgcHJvcHMpLCB7XG4gICAgZGF0YTogZGF0YSxcbiAgICB0eXBlOiAnZXZlcnknLFxuICAgIGJ5RGVmYXVsdENoZWNrZWQ6IHRydWVcbiAgfSkpO1xuXG4gIGlmIChzdG9yZS5nZXRTdGF0ZSgpLnNlbGVjdGlvbkRpcnR5KSB7XG4gICAgcmV0dXJuIHNvbWVDaGVja2VkTm90QnlEZWZhdWx0Q2hlY2tlZDtcbiAgfVxuXG4gIHJldHVybiBzb21lQ2hlY2tlZE5vdEJ5RGVmYXVsdENoZWNrZWQgfHwgc29tZUNoZWNrZWRCeURlZmF1bHRDaGVja2VkO1xufVxuXG5mdW5jdGlvbiBnZXRDaGVja1N0YXRlKHByb3BzKSB7XG4gIHZhciBzdG9yZSA9IHByb3BzLnN0b3JlLFxuICAgICAgZGF0YSA9IHByb3BzLmRhdGE7XG5cbiAgaWYgKCFkYXRhLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzdG9yZS5nZXRTdGF0ZSgpLnNlbGVjdGlvbkRpcnR5KSB7XG4gICAgcmV0dXJuIGNoZWNrU2VsZWN0aW9uKF9leHRlbmRzKF9leHRlbmRzKHt9LCBwcm9wcyksIHtcbiAgICAgIGRhdGE6IGRhdGEsXG4gICAgICB0eXBlOiAnZXZlcnknLFxuICAgICAgYnlEZWZhdWx0Q2hlY2tlZDogZmFsc2VcbiAgICB9KSk7XG4gIH1cblxuICByZXR1cm4gY2hlY2tTZWxlY3Rpb24oX2V4dGVuZHMoX2V4dGVuZHMoe30sIHByb3BzKSwge1xuICAgIGRhdGE6IGRhdGEsXG4gICAgdHlwZTogJ2V2ZXJ5JyxcbiAgICBieURlZmF1bHRDaGVja2VkOiBmYWxzZVxuICB9KSkgfHwgY2hlY2tTZWxlY3Rpb24oX2V4dGVuZHMoX2V4dGVuZHMoe30sIHByb3BzKSwge1xuICAgIGRhdGE6IGRhdGEsXG4gICAgdHlwZTogJ2V2ZXJ5JyxcbiAgICBieURlZmF1bHRDaGVja2VkOiB0cnVlXG4gIH0pKTtcbn1cblxudmFyIFNlbGVjdGlvbkNoZWNrYm94QWxsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTZWxlY3Rpb25DaGVja2JveEFsbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2VsZWN0aW9uQ2hlY2tib3hBbGwocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VsZWN0aW9uQ2hlY2tib3hBbGwpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2VsZWN0aW9uQ2hlY2tib3hBbGwpLmNhbGwodGhpcywgcHJvcHMpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNoZWNrZWQ6IGZhbHNlLFxuICAgICAgaW5kZXRlcm1pbmF0ZTogZmFsc2VcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU2VsZWN0QWxsQ2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBjaGVja2VkID0gZS50YXJnZXQuY2hlY2tlZDtcblxuICAgICAgX3RoaXMucHJvcHMub25TZWxlY3QoY2hlY2tlZCA/ICdhbGwnIDogJ3JlbW92ZUFsbCcsIDAsIG51bGwpO1xuICAgIH07XG5cbiAgICBfdGhpcy5kZWZhdWx0U2VsZWN0aW9ucyA9IHByb3BzLmhpZGVEZWZhdWx0U2VsZWN0aW9ucyA/IFtdIDogW3tcbiAgICAgIGtleTogJ2FsbCcsXG4gICAgICB0ZXh0OiBwcm9wcy5sb2NhbGUuc2VsZWN0QWxsLFxuICAgICAgb25TZWxlY3Q6IGZ1bmN0aW9uIG9uU2VsZWN0KCkge31cbiAgICB9LCB7XG4gICAgICBrZXk6ICdpbnZlcnQnLFxuICAgICAgdGV4dDogcHJvcHMubG9jYWxlLnNlbGVjdEludmVydCxcbiAgICAgIG9uU2VsZWN0OiBmdW5jdGlvbiBvblNlbGVjdCgpIHt9XG4gICAgfV07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNlbGVjdGlvbkNoZWNrYm94QWxsLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRDaGVja1N0YXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldENoZWNrU3RhdGUocHJvcHMpIHtcbiAgICAgIHZhciBjaGVja2VkID0gZ2V0Q2hlY2tTdGF0ZShwcm9wcyk7XG4gICAgICB2YXIgaW5kZXRlcm1pbmF0ZSA9IGdldEluZGV0ZXJtaW5hdGVTdGF0ZShwcm9wcyk7XG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgdmFyIG5ld1N0YXRlID0ge307XG5cbiAgICAgICAgaWYgKGluZGV0ZXJtaW5hdGUgIT09IHByZXZTdGF0ZS5pbmRldGVybWluYXRlKSB7XG4gICAgICAgICAgbmV3U3RhdGUuaW5kZXRlcm1pbmF0ZSA9IGluZGV0ZXJtaW5hdGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hlY2tlZCAhPT0gcHJldlN0YXRlLmNoZWNrZWQpIHtcbiAgICAgICAgICBuZXdTdGF0ZS5jaGVja2VkID0gY2hlY2tlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdWJzY3JpYmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3Vic2NyaWJlKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBzdG9yZSA9IHRoaXMucHJvcHMuc3RvcmU7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNldENoZWNrU3RhdGUoX3RoaXMyLnByb3BzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJNZW51c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJNZW51cyhzZWxlY3Rpb25zKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgcmV0dXJuIHNlbGVjdGlvbnMubWFwKGZ1bmN0aW9uIChzZWxlY3Rpb24sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9tZW51W1wiZGVmYXVsdFwiXS5JdGVtLCB7XG4gICAgICAgICAga2V5OiBzZWxlY3Rpb24ua2V5IHx8IGluZGV4XG4gICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG4gICAgICAgICAgICBfdGhpczMucHJvcHMub25TZWxlY3Qoc2VsZWN0aW9uLmtleSwgaW5kZXgsIHNlbGVjdGlvbi5vblNlbGVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBzZWxlY3Rpb24udGV4dCkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgcHJlZml4Q2xzID0gX3RoaXMkcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIHNlbGVjdGlvbnMgPSBfdGhpcyRwcm9wcy5zZWxlY3Rpb25zLFxuICAgICAgICAgIGdldFBvcHVwQ29udGFpbmVyID0gX3RoaXMkcHJvcHMuZ2V0UG9wdXBDb250YWluZXI7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGNoZWNrZWQgPSBfdGhpcyRzdGF0ZS5jaGVja2VkLFxuICAgICAgICAgIGluZGV0ZXJtaW5hdGUgPSBfdGhpcyRzdGF0ZS5pbmRldGVybWluYXRlO1xuICAgICAgdmFyIHNlbGVjdGlvblByZWZpeENscyA9IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItc2VsZWN0aW9uXCIpO1xuICAgICAgdmFyIGN1c3RvbVNlbGVjdGlvbnMgPSBudWxsO1xuXG4gICAgICBpZiAoc2VsZWN0aW9ucykge1xuICAgICAgICB2YXIgbmV3U2VsZWN0aW9ucyA9IEFycmF5LmlzQXJyYXkoc2VsZWN0aW9ucykgPyB0aGlzLmRlZmF1bHRTZWxlY3Rpb25zLmNvbmNhdChzZWxlY3Rpb25zKSA6IHRoaXMuZGVmYXVsdFNlbGVjdGlvbnM7XG4gICAgICAgIHZhciBtZW51ID0gUmVhY3QuY3JlYXRlRWxlbWVudChfbWVudVtcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHNlbGVjdGlvblByZWZpeENscywgXCItbWVudVwiKSxcbiAgICAgICAgICBzZWxlY3RlZEtleXM6IFtdXG4gICAgICAgIH0sIHRoaXMucmVuZGVyTWVudXMobmV3U2VsZWN0aW9ucykpO1xuICAgICAgICBjdXN0b21TZWxlY3Rpb25zID0gbmV3U2VsZWN0aW9ucy5sZW5ndGggPiAwID8gUmVhY3QuY3JlYXRlRWxlbWVudChfZHJvcGRvd25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgICAgb3ZlcmxheTogbWVudSxcbiAgICAgICAgICBnZXRQb3B1cENvbnRhaW5lcjogZ2V0UG9wdXBDb250YWluZXJcbiAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChzZWxlY3Rpb25QcmVmaXhDbHMsIFwiLWRvd25cIilcbiAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChfaWNvbltcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgICB0eXBlOiBcImRvd25cIlxuICAgICAgICB9KSkpIDogbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IHNlbGVjdGlvblByZWZpeENsc1xuICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChfY2hlY2tib3hbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoX2RlZmluZVByb3BlcnR5KHt9LCBcIlwiLmNvbmNhdChzZWxlY3Rpb25QcmVmaXhDbHMsIFwiLXNlbGVjdC1hbGwtY3VzdG9tXCIpLCBjdXN0b21TZWxlY3Rpb25zKSksXG4gICAgICAgIGNoZWNrZWQ6IGNoZWNrZWQsXG4gICAgICAgIGluZGV0ZXJtaW5hdGU6IGluZGV0ZXJtaW5hdGUsXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlU2VsZWN0QWxsQ2hhbmdlXG4gICAgICB9KSwgY3VzdG9tU2VsZWN0aW9ucyk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHtcbiAgICAgIHZhciBjaGVja2VkID0gZ2V0Q2hlY2tTdGF0ZShwcm9wcyk7XG4gICAgICB2YXIgaW5kZXRlcm1pbmF0ZSA9IGdldEluZGV0ZXJtaW5hdGVTdGF0ZShwcm9wcyk7XG4gICAgICB2YXIgbmV3U3RhdGUgPSB7fTtcblxuICAgICAgaWYgKGluZGV0ZXJtaW5hdGUgIT09IHN0YXRlLmluZGV0ZXJtaW5hdGUpIHtcbiAgICAgICAgbmV3U3RhdGUuaW5kZXRlcm1pbmF0ZSA9IGluZGV0ZXJtaW5hdGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGVja2VkICE9PSBzdGF0ZS5jaGVja2VkKSB7XG4gICAgICAgIG5ld1N0YXRlLmNoZWNrZWQgPSBjaGVja2VkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNlbGVjdGlvbkNoZWNrYm94QWxsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4oMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoU2VsZWN0aW9uQ2hlY2tib3hBbGwpO1xudmFyIF9kZWZhdWx0ID0gU2VsZWN0aW9uQ2hlY2tib3hBbGw7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VsZWN0aW9uQ2hlY2tib3hBbGwuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcmVmZXItc3RhdGVsZXNzLWZ1bmN0aW9uICovXG52YXIgQ29sdW1uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDb2x1bW4sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbHVtbigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29sdW1uKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ29sdW1uKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBDb2x1bW47XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gQ29sdW1uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29sdW1uLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIENvbHVtbkdyb3VwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDb2x1bW5Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ29sdW1uR3JvdXAoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbHVtbkdyb3VwKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ29sdW1uR3JvdXApLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIENvbHVtbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IENvbHVtbkdyb3VwO1xuQ29sdW1uR3JvdXAuX19BTlRfVEFCTEVfQ09MVU1OX0dST1VQID0gdHJ1ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbHVtbkdyb3VwLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGNyZWF0ZVRhYmxlUm93O1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfb21pdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm9taXQuanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBjcmVhdGVUYWJsZVJvdygpIHtcbiAgdmFyIENvbXBvbmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3RyJztcblxuICB2YXIgQm9keVJvdyA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQm9keVJvdywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBCb2R5Um93KHByb3BzKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCb2R5Um93KTtcblxuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQm9keVJvdykuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgICAgX3RoaXMuc3RvcmUgPSBwcm9wcy5zdG9yZTtcblxuICAgICAgdmFyIF90aGlzJHN0b3JlJGdldFN0YXRlID0gX3RoaXMuc3RvcmUuZ2V0U3RhdGUoKSxcbiAgICAgICAgICBzZWxlY3RlZFJvd0tleXMgPSBfdGhpcyRzdG9yZSRnZXRTdGF0ZS5zZWxlY3RlZFJvd0tleXM7XG5cbiAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICBzZWxlY3RlZDogc2VsZWN0ZWRSb3dLZXlzLmluZGV4T2YocHJvcHMucm93S2V5KSA+PSAwXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhCb2R5Um93LCBbe1xuICAgICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInN1YnNjcmliZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN1YnNjcmliZSgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIHN0b3JlID0gX3RoaXMkcHJvcHMuc3RvcmUsXG4gICAgICAgICAgICByb3dLZXkgPSBfdGhpcyRwcm9wcy5yb3dLZXk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBzdG9yZS5zdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBfdGhpczIkc3RvcmUkZ2V0U3RhdGUgPSBfdGhpczIuc3RvcmUuZ2V0U3RhdGUoKSxcbiAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dLZXlzID0gX3RoaXMyJHN0b3JlJGdldFN0YXRlLnNlbGVjdGVkUm93S2V5cztcblxuICAgICAgICAgIHZhciBzZWxlY3RlZCA9IHNlbGVjdGVkUm93S2V5cy5pbmRleE9mKHJvd0tleSkgPj0gMDtcblxuICAgICAgICAgIGlmIChzZWxlY3RlZCAhPT0gX3RoaXMyLnN0YXRlLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICBzZWxlY3RlZDogc2VsZWN0ZWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIHJvd1Byb3BzID0gKDAsIF9vbWl0W1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgWydwcmVmaXhDbHMnLCAncm93S2V5JywgJ3N0b3JlJ10pO1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzMltcImRlZmF1bHRcIl0pKHRoaXMucHJvcHMuY2xhc3NOYW1lLCBfZGVmaW5lUHJvcGVydHkoe30sIFwiXCIuY29uY2F0KHRoaXMucHJvcHMucHJlZml4Q2xzLCBcIi1yb3ctc2VsZWN0ZWRcIiksIHRoaXMuc3RhdGUuc2VsZWN0ZWQpKTtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgcm93UHJvcHMpLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgICAgfSksIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCb2R5Um93O1xuICB9KFJlYWN0LkNvbXBvbmVudCk7XG5cbiAgcmV0dXJuIEJvZHlSb3c7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVCb2R5Um93LmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9QYWdpbmF0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QYWdpbmF0aW9uXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbnZhciBfZGVmYXVsdCA9IF9QYWdpbmF0aW9uW1wiZGVmYXVsdFwiXTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmNQYWdpbmF0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtcGFnaW5hdGlvblwiKSk7XG5cbnZhciBfZW5fVVMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy1wYWdpbmF0aW9uL2xpYi9sb2NhbGUvZW5fVVNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9NaW5pU2VsZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9NaW5pU2VsZWN0XCIpKTtcblxudmFyIF9pY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaWNvblwiKSk7XG5cbnZhciBfc2VsZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2VsZWN0XCIpKTtcblxudmFyIF9Mb2NhbGVSZWNlaXZlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2xvY2FsZS1wcm92aWRlci9Mb2NhbGVSZWNlaXZlclwiKSk7XG5cbnZhciBfY29uZmlnUHJvdmlkZXIgPSByZXF1aXJlKFwiLi4vY29uZmlnLXByb3ZpZGVyXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuXG4gIGZvciAodmFyIHAgaW4gcykge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIH1cblxuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcblxudmFyIFBhZ2luYXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBhZ2luYXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBhZ2luYXRpb24oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2luYXRpb24pO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUGFnaW5hdGlvbikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cbiAgICBfdGhpcy5nZXRJY29uc1Byb3BzID0gZnVuY3Rpb24gKHByZWZpeENscykge1xuICAgICAgdmFyIHByZXZJY29uID0gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbS1saW5rXCIpXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KF9pY29uW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICB0eXBlOiBcImxlZnRcIlxuICAgICAgfSkpO1xuICAgICAgdmFyIG5leHRJY29uID0gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbS1saW5rXCIpXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KF9pY29uW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICB0eXBlOiBcInJpZ2h0XCJcbiAgICAgIH0pKTtcbiAgICAgIHZhciBqdW1wUHJldkljb24gPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pdGVtLWxpbmtcIilcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbS1jb250YWluZXJcIilcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2ljb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pdGVtLWxpbmstaWNvblwiKSxcbiAgICAgICAgdHlwZTogXCJkb3VibGUtbGVmdFwiXG4gICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbS1lbGxpcHNpc1wiKVxuICAgICAgfSwgXCJcXHUyMDIyXFx1MjAyMlxcdTIwMjJcIikpKTtcbiAgICAgIHZhciBqdW1wTmV4dEljb24gPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pdGVtLWxpbmtcIilcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaXRlbS1jb250YWluZXJcIilcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2ljb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pdGVtLWxpbmstaWNvblwiKSxcbiAgICAgICAgdHlwZTogXCJkb3VibGUtcmlnaHRcIlxuICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWl0ZW0tZWxsaXBzaXNcIilcbiAgICAgIH0sIFwiXFx1MjAyMlxcdTIwMjJcXHUyMDIyXCIpKSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmV2SWNvbjogcHJldkljb24sXG4gICAgICAgIG5leHRJY29uOiBuZXh0SWNvbixcbiAgICAgICAganVtcFByZXZJY29uOiBqdW1wUHJldkljb24sXG4gICAgICAgIGp1bXBOZXh0SWNvbjoganVtcE5leHRJY29uXG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfdGhpcy5yZW5kZXJQYWdpbmF0aW9uID0gZnVuY3Rpb24gKGNvbnRleHRMb2NhbGUpIHtcbiAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IF9hLnByZWZpeENscyxcbiAgICAgICAgICBjdXN0b21pemVTZWxlY3RQcmVmaXhDbHMgPSBfYS5zZWxlY3RQcmVmaXhDbHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX2EuY2xhc3NOYW1lLFxuICAgICAgICAgIHNpemUgPSBfYS5zaXplLFxuICAgICAgICAgIGN1c3RvbUxvY2FsZSA9IF9hLmxvY2FsZSxcbiAgICAgICAgICByZXN0UHJvcHMgPSBfX3Jlc3QoX2EsIFtcInByZWZpeENsc1wiLCBcInNlbGVjdFByZWZpeENsc1wiLCBcImNsYXNzTmFtZVwiLCBcInNpemVcIiwgXCJsb2NhbGVcIl0pO1xuXG4gICAgICB2YXIgbG9jYWxlID0gX2V4dGVuZHMoX2V4dGVuZHMoe30sIGNvbnRleHRMb2NhbGUpLCBjdXN0b21Mb2NhbGUpO1xuXG4gICAgICB2YXIgaXNTbWFsbCA9IHNpemUgPT09ICdzbWFsbCc7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBnZXRQcmVmaXhDbHMgPSBfcmVmLmdldFByZWZpeENscztcbiAgICAgICAgdmFyIHByZWZpeENscyA9IGdldFByZWZpeENscygncGFnaW5hdGlvbicsIGN1c3RvbWl6ZVByZWZpeENscyk7XG4gICAgICAgIHZhciBzZWxlY3RQcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ3NlbGVjdCcsIGN1c3RvbWl6ZVNlbGVjdFByZWZpeENscyk7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9yY1BhZ2luYXRpb25bXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7fSwgcmVzdFByb3BzLCB7XG4gICAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgICAgc2VsZWN0UHJlZml4Q2xzOiBzZWxlY3RQcmVmaXhDbHNcbiAgICAgICAgfSwgX3RoaXMuZ2V0SWNvbnNQcm9wcyhwcmVmaXhDbHMpLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShjbGFzc05hbWUsIHtcbiAgICAgICAgICAgIG1pbmk6IGlzU21hbGxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzZWxlY3RDb21wb25lbnRDbGFzczogaXNTbWFsbCA/IF9NaW5pU2VsZWN0W1wiZGVmYXVsdFwiXSA6IF9zZWxlY3RbXCJkZWZhdWx0XCJdLFxuICAgICAgICAgIGxvY2FsZTogbG9jYWxlXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGFnaW5hdGlvbiwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9Mb2NhbGVSZWNlaXZlcltcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgY29tcG9uZW50TmFtZTogXCJQYWdpbmF0aW9uXCIsXG4gICAgICAgIGRlZmF1bHRMb2NhbGU6IF9lbl9VU1tcImRlZmF1bHRcIl1cbiAgICAgIH0sIHRoaXMucmVuZGVyUGFnaW5hdGlvbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBhZ2luYXRpb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gUGFnaW5hdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBhZ2luYXRpb24uanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3NlbGVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NlbGVjdFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBNaW5pU2VsZWN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNaW5pU2VsZWN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNaW5pU2VsZWN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNaW5pU2VsZWN0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTWluaVNlbGVjdCkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTWluaVNlbGVjdCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9zZWxlY3RbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7XG4gICAgICAgIHNpemU6IFwic21hbGxcIlxuICAgICAgfSwgdGhpcy5wcm9wcykpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNaW5pU2VsZWN0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IE1pbmlTZWxlY3Q7XG5NaW5pU2VsZWN0Lk9wdGlvbiA9IF9zZWxlY3RbXCJkZWZhdWx0XCJdLk9wdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1pbmlTZWxlY3QuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX0tleUNvZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYy11dGlsL2xpYi9LZXlDb2RlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIF9fcmVzdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcblxuICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICB9XG5cbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG4vKipcbiAqIFdyYXAgb2Ygc3ViIGNvbXBvbmVudCB3aGljaCBuZWVkIHVzZSBhcyBCdXR0b24gY2FwYWNpdHkgKGxpa2UgSWNvbiBjb21wb25lbnQpLlxuICogVGhpcyBoZWxwcyBhY2Nlc3NpYmlsaXR5IHJlYWRlciB0byB0cmVhZCBhcyBhIGludGVyYWN0aXZlIGJ1dHRvbiB0byBvcGVyYXRpb24uXG4gKi9cblxuXG52YXIgaW5saW5lU3R5bGUgPSB7XG4gIGJvcmRlcjogMCxcbiAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50JyxcbiAgcGFkZGluZzogMCxcbiAgbGluZUhlaWdodDogJ2luaGVyaXQnLFxuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xufTtcblxudmFyIFRyYW5zQnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUcmFuc0J1dHRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNCdXR0b24oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zQnV0dG9uKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRyYW5zQnV0dG9uKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblxuICAgIF90aGlzLm9uS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGtleUNvZGUgPSBldmVudC5rZXlDb2RlO1xuXG4gICAgICBpZiAoa2V5Q29kZSA9PT0gX0tleUNvZGVbXCJkZWZhdWx0XCJdLkVOVEVSKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uS2V5VXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBrZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcbiAgICAgIHZhciBvbkNsaWNrID0gX3RoaXMucHJvcHMub25DbGljaztcblxuICAgICAgaWYgKGtleUNvZGUgPT09IF9LZXlDb2RlW1wiZGVmYXVsdFwiXS5FTlRFUiAmJiBvbkNsaWNrKSB7XG4gICAgICAgIG9uQ2xpY2soKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0UmVmID0gZnVuY3Rpb24gKGJ0bikge1xuICAgICAgX3RoaXMuZGl2ID0gYnRuO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVHJhbnNCdXR0b24sIFt7XG4gICAga2V5OiBcImZvY3VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgaWYgKHRoaXMuZGl2KSB7XG4gICAgICAgIHRoaXMuZGl2LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImJsdXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmx1cigpIHtcbiAgICAgIGlmICh0aGlzLmRpdikge1xuICAgICAgICB0aGlzLmRpdi5ibHVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHN0eWxlID0gX2Euc3R5bGUsXG4gICAgICAgICAgbm9TdHlsZSA9IF9hLm5vU3R5bGUsXG4gICAgICAgICAgcmVzdFByb3BzID0gX19yZXN0KF9hLCBbXCJzdHlsZVwiLCBcIm5vU3R5bGVcIl0pO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIHRhYkluZGV4OiAwLFxuICAgICAgICByZWY6IHRoaXMuc2V0UmVmXG4gICAgICB9LCByZXN0UHJvcHMsIHtcbiAgICAgICAgb25LZXlEb3duOiB0aGlzLm9uS2V5RG93bixcbiAgICAgICAgb25LZXlVcDogdGhpcy5vbktleVVwLFxuICAgICAgICBzdHlsZTogX2V4dGVuZHMoX2V4dGVuZHMoe30sICFub1N0eWxlID8gaW5saW5lU3R5bGUgOiBudWxsKSwgc3R5bGUpXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRyYW5zQnV0dG9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG52YXIgX2RlZmF1bHQgPSBUcmFuc0J1dHRvbjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc0J1dHRvbi5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqIHNvbWUga2V5LWNvZGVzIGRlZmluaXRpb24gYW5kIHV0aWxzIGZyb20gY2xvc3VyZS1saWJyYXJ5XG4gKiBAYXV0aG9yIHlpbWluZ2hlQGdtYWlsLmNvbVxuICovXG52YXIgS2V5Q29kZSA9IHtcbiAgLyoqXG4gICAqIE1BQ19FTlRFUlxuICAgKi9cbiAgTUFDX0VOVEVSOiAzLFxuXG4gIC8qKlxuICAgKiBCQUNLU1BBQ0VcbiAgICovXG4gIEJBQ0tTUEFDRTogOCxcblxuICAvKipcbiAgICogVEFCXG4gICAqL1xuICBUQUI6IDksXG5cbiAgLyoqXG4gICAqIE5VTUxPQ0sgb24gRkYvU2FmYXJpIE1hY1xuICAgKi9cbiAgTlVNX0NFTlRFUjogMTIsXG4gIC8vIE5VTUxPQ0sgb24gRkYvU2FmYXJpIE1hY1xuXG4gIC8qKlxuICAgKiBFTlRFUlxuICAgKi9cbiAgRU5URVI6IDEzLFxuXG4gIC8qKlxuICAgKiBTSElGVFxuICAgKi9cbiAgU0hJRlQ6IDE2LFxuXG4gIC8qKlxuICAgKiBDVFJMXG4gICAqL1xuICBDVFJMOiAxNyxcblxuICAvKipcbiAgICogQUxUXG4gICAqL1xuICBBTFQ6IDE4LFxuXG4gIC8qKlxuICAgKiBQQVVTRVxuICAgKi9cbiAgUEFVU0U6IDE5LFxuXG4gIC8qKlxuICAgKiBDQVBTX0xPQ0tcbiAgICovXG4gIENBUFNfTE9DSzogMjAsXG5cbiAgLyoqXG4gICAqIEVTQ1xuICAgKi9cbiAgRVNDOiAyNyxcblxuICAvKipcbiAgICogU1BBQ0VcbiAgICovXG4gIFNQQUNFOiAzMixcblxuICAvKipcbiAgICogUEFHRV9VUFxuICAgKi9cbiAgUEFHRV9VUDogMzMsXG4gIC8vIGFsc28gTlVNX05PUlRIX0VBU1RcblxuICAvKipcbiAgICogUEFHRV9ET1dOXG4gICAqL1xuICBQQUdFX0RPV046IDM0LFxuICAvLyBhbHNvIE5VTV9TT1VUSF9FQVNUXG5cbiAgLyoqXG4gICAqIEVORFxuICAgKi9cbiAgRU5EOiAzNSxcbiAgLy8gYWxzbyBOVU1fU09VVEhfV0VTVFxuXG4gIC8qKlxuICAgKiBIT01FXG4gICAqL1xuICBIT01FOiAzNixcbiAgLy8gYWxzbyBOVU1fTk9SVEhfV0VTVFxuXG4gIC8qKlxuICAgKiBMRUZUXG4gICAqL1xuICBMRUZUOiAzNyxcbiAgLy8gYWxzbyBOVU1fV0VTVFxuXG4gIC8qKlxuICAgKiBVUFxuICAgKi9cbiAgVVA6IDM4LFxuICAvLyBhbHNvIE5VTV9OT1JUSFxuXG4gIC8qKlxuICAgKiBSSUdIVFxuICAgKi9cbiAgUklHSFQ6IDM5LFxuICAvLyBhbHNvIE5VTV9FQVNUXG5cbiAgLyoqXG4gICAqIERPV05cbiAgICovXG4gIERPV046IDQwLFxuICAvLyBhbHNvIE5VTV9TT1VUSFxuXG4gIC8qKlxuICAgKiBQUklOVF9TQ1JFRU5cbiAgICovXG4gIFBSSU5UX1NDUkVFTjogNDQsXG5cbiAgLyoqXG4gICAqIElOU0VSVFxuICAgKi9cbiAgSU5TRVJUOiA0NSxcbiAgLy8gYWxzbyBOVU1fSU5TRVJUXG5cbiAgLyoqXG4gICAqIERFTEVURVxuICAgKi9cbiAgREVMRVRFOiA0NixcbiAgLy8gYWxzbyBOVU1fREVMRVRFXG5cbiAgLyoqXG4gICAqIFpFUk9cbiAgICovXG4gIFpFUk86IDQ4LFxuXG4gIC8qKlxuICAgKiBPTkVcbiAgICovXG4gIE9ORTogNDksXG5cbiAgLyoqXG4gICAqIFRXT1xuICAgKi9cbiAgVFdPOiA1MCxcblxuICAvKipcbiAgICogVEhSRUVcbiAgICovXG4gIFRIUkVFOiA1MSxcblxuICAvKipcbiAgICogRk9VUlxuICAgKi9cbiAgRk9VUjogNTIsXG5cbiAgLyoqXG4gICAqIEZJVkVcbiAgICovXG4gIEZJVkU6IDUzLFxuXG4gIC8qKlxuICAgKiBTSVhcbiAgICovXG4gIFNJWDogNTQsXG5cbiAgLyoqXG4gICAqIFNFVkVOXG4gICAqL1xuICBTRVZFTjogNTUsXG5cbiAgLyoqXG4gICAqIEVJR0hUXG4gICAqL1xuICBFSUdIVDogNTYsXG5cbiAgLyoqXG4gICAqIE5JTkVcbiAgICovXG4gIE5JTkU6IDU3LFxuXG4gIC8qKlxuICAgKiBRVUVTVElPTl9NQVJLXG4gICAqL1xuICBRVUVTVElPTl9NQVJLOiA2MyxcbiAgLy8gbmVlZHMgbG9jYWxpemF0aW9uXG5cbiAgLyoqXG4gICAqIEFcbiAgICovXG4gIEE6IDY1LFxuXG4gIC8qKlxuICAgKiBCXG4gICAqL1xuICBCOiA2NixcblxuICAvKipcbiAgICogQ1xuICAgKi9cbiAgQzogNjcsXG5cbiAgLyoqXG4gICAqIERcbiAgICovXG4gIEQ6IDY4LFxuXG4gIC8qKlxuICAgKiBFXG4gICAqL1xuICBFOiA2OSxcblxuICAvKipcbiAgICogRlxuICAgKi9cbiAgRjogNzAsXG5cbiAgLyoqXG4gICAqIEdcbiAgICovXG4gIEc6IDcxLFxuXG4gIC8qKlxuICAgKiBIXG4gICAqL1xuICBIOiA3MixcblxuICAvKipcbiAgICogSVxuICAgKi9cbiAgSTogNzMsXG5cbiAgLyoqXG4gICAqIEpcbiAgICovXG4gIEo6IDc0LFxuXG4gIC8qKlxuICAgKiBLXG4gICAqL1xuICBLOiA3NSxcblxuICAvKipcbiAgICogTFxuICAgKi9cbiAgTDogNzYsXG5cbiAgLyoqXG4gICAqIE1cbiAgICovXG4gIE06IDc3LFxuXG4gIC8qKlxuICAgKiBOXG4gICAqL1xuICBOOiA3OCxcblxuICAvKipcbiAgICogT1xuICAgKi9cbiAgTzogNzksXG5cbiAgLyoqXG4gICAqIFBcbiAgICovXG4gIFA6IDgwLFxuXG4gIC8qKlxuICAgKiBRXG4gICAqL1xuICBROiA4MSxcblxuICAvKipcbiAgICogUlxuICAgKi9cbiAgUjogODIsXG5cbiAgLyoqXG4gICAqIFNcbiAgICovXG4gIFM6IDgzLFxuXG4gIC8qKlxuICAgKiBUXG4gICAqL1xuICBUOiA4NCxcblxuICAvKipcbiAgICogVVxuICAgKi9cbiAgVTogODUsXG5cbiAgLyoqXG4gICAqIFZcbiAgICovXG4gIFY6IDg2LFxuXG4gIC8qKlxuICAgKiBXXG4gICAqL1xuICBXOiA4NyxcblxuICAvKipcbiAgICogWFxuICAgKi9cbiAgWDogODgsXG5cbiAgLyoqXG4gICAqIFlcbiAgICovXG4gIFk6IDg5LFxuXG4gIC8qKlxuICAgKiBaXG4gICAqL1xuICBaOiA5MCxcblxuICAvKipcbiAgICogTUVUQVxuICAgKi9cbiAgTUVUQTogOTEsXG4gIC8vIFdJTl9LRVlfTEVGVFxuXG4gIC8qKlxuICAgKiBXSU5fS0VZX1JJR0hUXG4gICAqL1xuICBXSU5fS0VZX1JJR0hUOiA5MixcblxuICAvKipcbiAgICogQ09OVEVYVF9NRU5VXG4gICAqL1xuICBDT05URVhUX01FTlU6IDkzLFxuXG4gIC8qKlxuICAgKiBOVU1fWkVST1xuICAgKi9cbiAgTlVNX1pFUk86IDk2LFxuXG4gIC8qKlxuICAgKiBOVU1fT05FXG4gICAqL1xuICBOVU1fT05FOiA5NyxcblxuICAvKipcbiAgICogTlVNX1RXT1xuICAgKi9cbiAgTlVNX1RXTzogOTgsXG5cbiAgLyoqXG4gICAqIE5VTV9USFJFRVxuICAgKi9cbiAgTlVNX1RIUkVFOiA5OSxcblxuICAvKipcbiAgICogTlVNX0ZPVVJcbiAgICovXG4gIE5VTV9GT1VSOiAxMDAsXG5cbiAgLyoqXG4gICAqIE5VTV9GSVZFXG4gICAqL1xuICBOVU1fRklWRTogMTAxLFxuXG4gIC8qKlxuICAgKiBOVU1fU0lYXG4gICAqL1xuICBOVU1fU0lYOiAxMDIsXG5cbiAgLyoqXG4gICAqIE5VTV9TRVZFTlxuICAgKi9cbiAgTlVNX1NFVkVOOiAxMDMsXG5cbiAgLyoqXG4gICAqIE5VTV9FSUdIVFxuICAgKi9cbiAgTlVNX0VJR0hUOiAxMDQsXG5cbiAgLyoqXG4gICAqIE5VTV9OSU5FXG4gICAqL1xuICBOVU1fTklORTogMTA1LFxuXG4gIC8qKlxuICAgKiBOVU1fTVVMVElQTFlcbiAgICovXG4gIE5VTV9NVUxUSVBMWTogMTA2LFxuXG4gIC8qKlxuICAgKiBOVU1fUExVU1xuICAgKi9cbiAgTlVNX1BMVVM6IDEwNyxcblxuICAvKipcbiAgICogTlVNX01JTlVTXG4gICAqL1xuICBOVU1fTUlOVVM6IDEwOSxcblxuICAvKipcbiAgICogTlVNX1BFUklPRFxuICAgKi9cbiAgTlVNX1BFUklPRDogMTEwLFxuXG4gIC8qKlxuICAgKiBOVU1fRElWSVNJT05cbiAgICovXG4gIE5VTV9ESVZJU0lPTjogMTExLFxuXG4gIC8qKlxuICAgKiBGMVxuICAgKi9cbiAgRjE6IDExMixcblxuICAvKipcbiAgICogRjJcbiAgICovXG4gIEYyOiAxMTMsXG5cbiAgLyoqXG4gICAqIEYzXG4gICAqL1xuICBGMzogMTE0LFxuXG4gIC8qKlxuICAgKiBGNFxuICAgKi9cbiAgRjQ6IDExNSxcblxuICAvKipcbiAgICogRjVcbiAgICovXG4gIEY1OiAxMTYsXG5cbiAgLyoqXG4gICAqIEY2XG4gICAqL1xuICBGNjogMTE3LFxuXG4gIC8qKlxuICAgKiBGN1xuICAgKi9cbiAgRjc6IDExOCxcblxuICAvKipcbiAgICogRjhcbiAgICovXG4gIEY4OiAxMTksXG5cbiAgLyoqXG4gICAqIEY5XG4gICAqL1xuICBGOTogMTIwLFxuXG4gIC8qKlxuICAgKiBGMTBcbiAgICovXG4gIEYxMDogMTIxLFxuXG4gIC8qKlxuICAgKiBGMTFcbiAgICovXG4gIEYxMTogMTIyLFxuXG4gIC8qKlxuICAgKiBGMTJcbiAgICovXG4gIEYxMjogMTIzLFxuXG4gIC8qKlxuICAgKiBOVU1MT0NLXG4gICAqL1xuICBOVU1MT0NLOiAxNDQsXG5cbiAgLyoqXG4gICAqIFNFTUlDT0xPTlxuICAgKi9cbiAgU0VNSUNPTE9OOiAxODYsXG4gIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuXG4gIC8qKlxuICAgKiBEQVNIXG4gICAqL1xuICBEQVNIOiAxODksXG4gIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuXG4gIC8qKlxuICAgKiBFUVVBTFNcbiAgICovXG4gIEVRVUFMUzogMTg3LFxuICAvLyBuZWVkcyBsb2NhbGl6YXRpb25cblxuICAvKipcbiAgICogQ09NTUFcbiAgICovXG4gIENPTU1BOiAxODgsXG4gIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuXG4gIC8qKlxuICAgKiBQRVJJT0RcbiAgICovXG4gIFBFUklPRDogMTkwLFxuICAvLyBuZWVkcyBsb2NhbGl6YXRpb25cblxuICAvKipcbiAgICogU0xBU0hcbiAgICovXG4gIFNMQVNIOiAxOTEsXG4gIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuXG4gIC8qKlxuICAgKiBBUE9TVFJPUEhFXG4gICAqL1xuICBBUE9TVFJPUEhFOiAxOTIsXG4gIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuXG4gIC8qKlxuICAgKiBTSU5HTEVfUVVPVEVcbiAgICovXG4gIFNJTkdMRV9RVU9URTogMjIyLFxuICAvLyBuZWVkcyBsb2NhbGl6YXRpb25cblxuICAvKipcbiAgICogT1BFTl9TUVVBUkVfQlJBQ0tFVFxuICAgKi9cbiAgT1BFTl9TUVVBUkVfQlJBQ0tFVDogMjE5LFxuICAvLyBuZWVkcyBsb2NhbGl6YXRpb25cblxuICAvKipcbiAgICogQkFDS1NMQVNIXG4gICAqL1xuICBCQUNLU0xBU0g6IDIyMCxcbiAgLy8gbmVlZHMgbG9jYWxpemF0aW9uXG5cbiAgLyoqXG4gICAqIENMT1NFX1NRVUFSRV9CUkFDS0VUXG4gICAqL1xuICBDTE9TRV9TUVVBUkVfQlJBQ0tFVDogMjIxLFxuICAvLyBuZWVkcyBsb2NhbGl6YXRpb25cblxuICAvKipcbiAgICogV0lOX0tFWVxuICAgKi9cbiAgV0lOX0tFWTogMjI0LFxuXG4gIC8qKlxuICAgKiBNQUNfRkZfTUVUQVxuICAgKi9cbiAgTUFDX0ZGX01FVEE6IDIyNCxcbiAgLy8gRmlyZWZveCAoR2Vja28pIGZpcmVzIHRoaXMgZm9yIHRoZSBtZXRhIGtleSBpbnN0ZWFkIG9mIDkxXG5cbiAgLyoqXG4gICAqIFdJTl9JTUVcbiAgICovXG4gIFdJTl9JTUU6IDIyOVxufTtcbi8qXG4gd2hldGhlciB0ZXh0IGFuZCBtb2RpZmllZCBrZXkgaXMgZW50ZXJlZCBhdCB0aGUgc2FtZSB0aW1lLlxuICovXG5cbktleUNvZGUuaXNUZXh0TW9kaWZ5aW5nS2V5RXZlbnQgPSBmdW5jdGlvbiBpc1RleHRNb2RpZnlpbmdLZXlFdmVudChlKSB7XG4gIHZhciBrZXlDb2RlID0gZS5rZXlDb2RlO1xuXG4gIGlmIChlLmFsdEtleSAmJiAhZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCAvLyBGdW5jdGlvbiBrZXlzIGRvbid0IGdlbmVyYXRlIHRleHRcbiAga2V5Q29kZSA+PSBLZXlDb2RlLkYxICYmIGtleUNvZGUgPD0gS2V5Q29kZS5GMTIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gVGhlIGZvbGxvd2luZyBrZXlzIGFyZSBxdWl0ZSBoYXJtbGVzcywgZXZlbiBpbiBjb21iaW5hdGlvbiB3aXRoXG4gIC8vIENUUkwsIEFMVCBvciBTSElGVC5cblxuXG4gIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgIGNhc2UgS2V5Q29kZS5BTFQ6XG4gICAgY2FzZSBLZXlDb2RlLkNBUFNfTE9DSzpcbiAgICBjYXNlIEtleUNvZGUuQ09OVEVYVF9NRU5VOlxuICAgIGNhc2UgS2V5Q29kZS5DVFJMOlxuICAgIGNhc2UgS2V5Q29kZS5ET1dOOlxuICAgIGNhc2UgS2V5Q29kZS5FTkQ6XG4gICAgY2FzZSBLZXlDb2RlLkVTQzpcbiAgICBjYXNlIEtleUNvZGUuSE9NRTpcbiAgICBjYXNlIEtleUNvZGUuSU5TRVJUOlxuICAgIGNhc2UgS2V5Q29kZS5MRUZUOlxuICAgIGNhc2UgS2V5Q29kZS5NQUNfRkZfTUVUQTpcbiAgICBjYXNlIEtleUNvZGUuTUVUQTpcbiAgICBjYXNlIEtleUNvZGUuTlVNTE9DSzpcbiAgICBjYXNlIEtleUNvZGUuTlVNX0NFTlRFUjpcbiAgICBjYXNlIEtleUNvZGUuUEFHRV9ET1dOOlxuICAgIGNhc2UgS2V5Q29kZS5QQUdFX1VQOlxuICAgIGNhc2UgS2V5Q29kZS5QQVVTRTpcbiAgICBjYXNlIEtleUNvZGUuUFJJTlRfU0NSRUVOOlxuICAgIGNhc2UgS2V5Q29kZS5SSUdIVDpcbiAgICBjYXNlIEtleUNvZGUuU0hJRlQ6XG4gICAgY2FzZSBLZXlDb2RlLlVQOlxuICAgIGNhc2UgS2V5Q29kZS5XSU5fS0VZOlxuICAgIGNhc2UgS2V5Q29kZS5XSU5fS0VZX1JJR0hUOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuLypcbiB3aGV0aGVyIGNoYXJhY3RlciBpcyBlbnRlcmVkLlxuICovXG5cblxuS2V5Q29kZS5pc0NoYXJhY3RlcktleSA9IGZ1bmN0aW9uIGlzQ2hhcmFjdGVyS2V5KGtleUNvZGUpIHtcbiAgaWYgKGtleUNvZGUgPj0gS2V5Q29kZS5aRVJPICYmIGtleUNvZGUgPD0gS2V5Q29kZS5OSU5FKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoa2V5Q29kZSA+PSBLZXlDb2RlLk5VTV9aRVJPICYmIGtleUNvZGUgPD0gS2V5Q29kZS5OVU1fTVVMVElQTFkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChrZXlDb2RlID49IEtleUNvZGUuQSAmJiBrZXlDb2RlIDw9IEtleUNvZGUuWikge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIFNhZmFyaSBzZW5kcyB6ZXJvIGtleSBjb2RlIGZvciBub24tbGF0aW4gY2hhcmFjdGVycy5cblxuXG4gIGlmICh3aW5kb3cubmF2aWdhdGlvbi51c2VyQWdlbnQuaW5kZXhPZignV2ViS2l0JykgIT09IC0xICYmIGtleUNvZGUgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgIGNhc2UgS2V5Q29kZS5TUEFDRTpcbiAgICBjYXNlIEtleUNvZGUuUVVFU1RJT05fTUFSSzpcbiAgICBjYXNlIEtleUNvZGUuTlVNX1BMVVM6XG4gICAgY2FzZSBLZXlDb2RlLk5VTV9NSU5VUzpcbiAgICBjYXNlIEtleUNvZGUuTlVNX1BFUklPRDpcbiAgICBjYXNlIEtleUNvZGUuTlVNX0RJVklTSU9OOlxuICAgIGNhc2UgS2V5Q29kZS5TRU1JQ09MT046XG4gICAgY2FzZSBLZXlDb2RlLkRBU0g6XG4gICAgY2FzZSBLZXlDb2RlLkVRVUFMUzpcbiAgICBjYXNlIEtleUNvZGUuQ09NTUE6XG4gICAgY2FzZSBLZXlDb2RlLlBFUklPRDpcbiAgICBjYXNlIEtleUNvZGUuU0xBU0g6XG4gICAgY2FzZSBLZXlDb2RlLkFQT1NUUk9QSEU6XG4gICAgY2FzZSBLZXlDb2RlLlNJTkdMRV9RVU9URTpcbiAgICBjYXNlIEtleUNvZGUuT1BFTl9TUVVBUkVfQlJBQ0tFVDpcbiAgICBjYXNlIEtleUNvZGUuQkFDS1NMQVNIOlxuICAgIGNhc2UgS2V5Q29kZS5DTE9TRV9TUVVBUkVfQlJBQ0tFVDpcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIF9kZWZhdWx0ID0gS2V5Q29kZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX29taXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJvbWl0LmpzXCIpKTtcblxudmFyIF9HcmlkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HcmlkXCIpKTtcblxudmFyIF9NZXRhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9NZXRhXCIpKTtcblxudmFyIF90YWJzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdGFic1wiKSk7XG5cbnZhciBfcm93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcm93XCIpKTtcblxudmFyIF9jb2wgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb2xcIikpO1xuXG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX3V0aWwvd2FybmluZ1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBfX3Jlc3QgPSB2b2lkIDAgJiYgKHZvaWQgMCkuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG5cbiAgZm9yICh2YXIgcCBpbiBzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgfVxuXG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIikgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSkgdFtwW2ldXSA9IHNbcFtpXV07XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuXG5mdW5jdGlvbiBnZXRBY3Rpb24oYWN0aW9ucykge1xuICB2YXIgYWN0aW9uTGlzdCA9IGFjdGlvbnMubWFwKGZ1bmN0aW9uIChhY3Rpb24sIGluZGV4KSB7XG4gICAgcmV0dXJuICgvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHdpZHRoOiBcIlwiLmNvbmNhdCgxMDAgLyBhY3Rpb25zLmxlbmd0aCwgXCIlXCIpXG4gICAgICAgIH0sXG4gICAgICAgIGtleTogXCJhY3Rpb24tXCIuY29uY2F0KGluZGV4KVxuICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCwgYWN0aW9uKSlcbiAgICApO1xuICB9KTtcbiAgcmV0dXJuIGFjdGlvbkxpc3Q7XG59XG5cbnZhciBDYXJkID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDYXJkLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDYXJkKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYXJkKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKENhcmQpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXG4gICAgX3RoaXMub25UYWJDaGFuZ2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25UYWJDaGFuZ2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25UYWJDaGFuZ2Uoa2V5KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyQ2FyZCA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXMsIF9leHRyYVByb3BzO1xuXG4gICAgICB2YXIgZ2V0UHJlZml4Q2xzID0gX3JlZi5nZXRQcmVmaXhDbHM7XG5cbiAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IF9hLnByZWZpeENscyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsXG4gICAgICAgICAgZXh0cmEgPSBfYS5leHRyYSxcbiAgICAgICAgICBfYSRoZWFkU3R5bGUgPSBfYS5oZWFkU3R5bGUsXG4gICAgICAgICAgaGVhZFN0eWxlID0gX2EkaGVhZFN0eWxlID09PSB2b2lkIDAgPyB7fSA6IF9hJGhlYWRTdHlsZSxcbiAgICAgICAgICBfYSRib2R5U3R5bGUgPSBfYS5ib2R5U3R5bGUsXG4gICAgICAgICAgYm9keVN0eWxlID0gX2EkYm9keVN0eWxlID09PSB2b2lkIDAgPyB7fSA6IF9hJGJvZHlTdHlsZSxcbiAgICAgICAgICB0aXRsZSA9IF9hLnRpdGxlLFxuICAgICAgICAgIGxvYWRpbmcgPSBfYS5sb2FkaW5nLFxuICAgICAgICAgIF9hJGJvcmRlcmVkID0gX2EuYm9yZGVyZWQsXG4gICAgICAgICAgYm9yZGVyZWQgPSBfYSRib3JkZXJlZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9hJGJvcmRlcmVkLFxuICAgICAgICAgIF9hJHNpemUgPSBfYS5zaXplLFxuICAgICAgICAgIHNpemUgPSBfYSRzaXplID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfYSRzaXplLFxuICAgICAgICAgIHR5cGUgPSBfYS50eXBlLFxuICAgICAgICAgIGNvdmVyID0gX2EuY292ZXIsXG4gICAgICAgICAgYWN0aW9ucyA9IF9hLmFjdGlvbnMsXG4gICAgICAgICAgdGFiTGlzdCA9IF9hLnRhYkxpc3QsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbixcbiAgICAgICAgICBhY3RpdmVUYWJLZXkgPSBfYS5hY3RpdmVUYWJLZXksXG4gICAgICAgICAgZGVmYXVsdEFjdGl2ZVRhYktleSA9IF9hLmRlZmF1bHRBY3RpdmVUYWJLZXksXG4gICAgICAgICAgdGFiQmFyRXh0cmFDb250ZW50ID0gX2EudGFiQmFyRXh0cmFDb250ZW50LFxuICAgICAgICAgIG90aGVycyA9IF9fcmVzdChfYSwgW1wicHJlZml4Q2xzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXh0cmFcIiwgXCJoZWFkU3R5bGVcIiwgXCJib2R5U3R5bGVcIiwgXCJ0aXRsZVwiLCBcImxvYWRpbmdcIiwgXCJib3JkZXJlZFwiLCBcInNpemVcIiwgXCJ0eXBlXCIsIFwiY292ZXJcIiwgXCJhY3Rpb25zXCIsIFwidGFiTGlzdFwiLCBcImNoaWxkcmVuXCIsIFwiYWN0aXZlVGFiS2V5XCIsIFwiZGVmYXVsdEFjdGl2ZVRhYktleVwiLCBcInRhYkJhckV4dHJhQ29udGVudFwiXSk7XG5cbiAgICAgIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2NhcmQnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgICAgdmFyIGNsYXNzU3RyaW5nID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkocHJlZml4Q2xzLCBjbGFzc05hbWUsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbG9hZGluZ1wiKSwgbG9hZGluZyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ib3JkZXJlZFwiKSwgYm9yZGVyZWQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaG92ZXJhYmxlXCIpLCBfdGhpcy5nZXRDb21wYXRpYmxlSG92ZXJhYmxlKCkpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29udGFpbi1ncmlkXCIpLCBfdGhpcy5pc0NvbnRhaW5HcmlkKCkpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29udGFpbi10YWJzXCIpLCB0YWJMaXN0ICYmIHRhYkxpc3QubGVuZ3RoKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoc2l6ZSksIHNpemUgIT09ICdkZWZhdWx0JyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi10eXBlLVwiKS5jb25jYXQodHlwZSksICEhdHlwZSksIF9jbGFzc05hbWVzKSk7XG4gICAgICB2YXIgbG9hZGluZ0Jsb2NrU3R5bGUgPSBib2R5U3R5bGUucGFkZGluZyA9PT0gMCB8fCBib2R5U3R5bGUucGFkZGluZyA9PT0gJzBweCcgPyB7XG4gICAgICAgIHBhZGRpbmc6IDI0XG4gICAgICB9IDogdW5kZWZpbmVkO1xuICAgICAgdmFyIGxvYWRpbmdCbG9jayA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbG9hZGluZy1jb250ZW50XCIpLFxuICAgICAgICBzdHlsZTogbG9hZGluZ0Jsb2NrU3R5bGVcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3Jvd1tcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgZ3V0dGVyOiA4XG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb2xbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHNwYW46IDIyXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWxvYWRpbmctYmxvY2tcIilcbiAgICAgIH0pKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3Jvd1tcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgZ3V0dGVyOiA4XG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb2xbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHNwYW46IDhcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbG9hZGluZy1ibG9ja1wiKVxuICAgICAgfSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb2xbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHNwYW46IDE1XG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWxvYWRpbmctYmxvY2tcIilcbiAgICAgIH0pKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3Jvd1tcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgZ3V0dGVyOiA4XG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb2xbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHNwYW46IDZcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbG9hZGluZy1ibG9ja1wiKVxuICAgICAgfSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb2xbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHNwYW46IDE4XG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWxvYWRpbmctYmxvY2tcIilcbiAgICAgIH0pKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3Jvd1tcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgZ3V0dGVyOiA4XG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb2xbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHNwYW46IDEzXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWxvYWRpbmctYmxvY2tcIilcbiAgICAgIH0pKSwgUmVhY3QuY3JlYXRlRWxlbWVudChfY29sW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBzcGFuOiA5XG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWxvYWRpbmctYmxvY2tcIilcbiAgICAgIH0pKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3Jvd1tcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgZ3V0dGVyOiA4XG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb2xbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHNwYW46IDRcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbG9hZGluZy1ibG9ja1wiKVxuICAgICAgfSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb2xbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHNwYW46IDNcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbG9hZGluZy1ibG9ja1wiKVxuICAgICAgfSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb2xbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHNwYW46IDE2XG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWxvYWRpbmctYmxvY2tcIilcbiAgICAgIH0pKSkpO1xuICAgICAgdmFyIGhhc0FjdGl2ZVRhYktleSA9IGFjdGl2ZVRhYktleSAhPT0gdW5kZWZpbmVkO1xuICAgICAgdmFyIGV4dHJhUHJvcHMgPSAoX2V4dHJhUHJvcHMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9leHRyYVByb3BzLCBoYXNBY3RpdmVUYWJLZXkgPyAnYWN0aXZlS2V5JyA6ICdkZWZhdWx0QWN0aXZlS2V5JywgaGFzQWN0aXZlVGFiS2V5ID8gYWN0aXZlVGFiS2V5IDogZGVmYXVsdEFjdGl2ZVRhYktleSksIF9kZWZpbmVQcm9wZXJ0eShfZXh0cmFQcm9wcywgXCJ0YWJCYXJFeHRyYUNvbnRlbnRcIiwgdGFiQmFyRXh0cmFDb250ZW50KSwgX2V4dHJhUHJvcHMpO1xuICAgICAgdmFyIGhlYWQ7XG4gICAgICB2YXIgdGFicyA9IHRhYkxpc3QgJiYgdGFiTGlzdC5sZW5ndGggPyBSZWFjdC5jcmVhdGVFbGVtZW50KF90YWJzW1wiZGVmYXVsdFwiXSwgX2V4dGVuZHMoe30sIGV4dHJhUHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWhlYWQtdGFic1wiKSxcbiAgICAgICAgc2l6ZTogXCJsYXJnZVwiLFxuICAgICAgICBvbkNoYW5nZTogX3RoaXMub25UYWJDaGFuZ2VcbiAgICAgIH0pLCB0YWJMaXN0Lm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfdGFic1tcImRlZmF1bHRcIl0uVGFiUGFuZSwge1xuICAgICAgICAgIHRhYjogaXRlbS50YWIsXG4gICAgICAgICAgZGlzYWJsZWQ6IGl0ZW0uZGlzYWJsZWQsXG4gICAgICAgICAga2V5OiBpdGVtLmtleVxuICAgICAgICB9KTtcbiAgICAgIH0pKSA6IG51bGw7XG5cbiAgICAgIGlmICh0aXRsZSB8fCBleHRyYSB8fCB0YWJzKSB7XG4gICAgICAgIGhlYWQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaGVhZFwiKSxcbiAgICAgICAgICBzdHlsZTogaGVhZFN0eWxlXG4gICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1oZWFkLXdyYXBwZXJcIilcbiAgICAgICAgfSwgdGl0bGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWhlYWQtdGl0bGVcIilcbiAgICAgICAgfSwgdGl0bGUpLCBleHRyYSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZXh0cmFcIilcbiAgICAgICAgfSwgZXh0cmEpKSwgdGFicyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb3ZlckRvbSA9IGNvdmVyID8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jb3ZlclwiKVxuICAgICAgfSwgY292ZXIpIDogbnVsbDtcbiAgICAgIHZhciBib2R5ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1ib2R5XCIpLFxuICAgICAgICBzdHlsZTogYm9keVN0eWxlXG4gICAgICB9LCBsb2FkaW5nID8gbG9hZGluZ0Jsb2NrIDogY2hpbGRyZW4pO1xuICAgICAgdmFyIGFjdGlvbkRvbSA9IGFjdGlvbnMgJiYgYWN0aW9ucy5sZW5ndGggPyBSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYWN0aW9uc1wiKVxuICAgICAgfSwgZ2V0QWN0aW9uKGFjdGlvbnMpKSA6IG51bGw7XG4gICAgICB2YXIgZGl2UHJvcHMgPSAoMCwgX29taXRbXCJkZWZhdWx0XCJdKShvdGhlcnMsIFsnb25UYWJDaGFuZ2UnLCAnbm9Ib3ZlcmluZycsICdob3ZlcmFibGUnXSk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgZGl2UHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc1N0cmluZ1xuICAgICAgfSksIGhlYWQsIGNvdmVyRG9tLCBib2R5LCBhY3Rpb25Eb20pO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2FyZCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAoJ25vSG92ZXJpbmcnIGluIHRoaXMucHJvcHMpIHtcbiAgICAgICAgKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkoIXRoaXMucHJvcHMubm9Ib3ZlcmluZywgJ0NhcmQnLCAnYG5vSG92ZXJpbmdgIGlzIGRlcHJlY2F0ZWQsIHlvdSBjYW4gcmVtb3ZlIGl0IHNhZmVseSBvciB1c2UgYGhvdmVyYWJsZWAgaW5zdGVhZC4nKTtcbiAgICAgICAgKDAsIF93YXJuaW5nW1wiZGVmYXVsdFwiXSkoISF0aGlzLnByb3BzLm5vSG92ZXJpbmcsICdDYXJkJywgJ2Bub0hvdmVyaW5nPXtmYWxzZX1gIGlzIGRlcHJlY2F0ZWQsIHVzZSBgaG92ZXJhYmxlYCBpbnN0ZWFkLicpO1xuICAgICAgfVxuICAgIH0gLy8gRm9yIDIueCBjb21wYXRpYmxlXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRDb21wYXRpYmxlSG92ZXJhYmxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbXBhdGlibGVIb3ZlcmFibGUoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG5vSG92ZXJpbmcgPSBfdGhpcyRwcm9wcy5ub0hvdmVyaW5nLFxuICAgICAgICAgIGhvdmVyYWJsZSA9IF90aGlzJHByb3BzLmhvdmVyYWJsZTtcblxuICAgICAgaWYgKCdub0hvdmVyaW5nJyBpbiB0aGlzLnByb3BzKSB7XG4gICAgICAgIHJldHVybiAhbm9Ib3ZlcmluZyB8fCBob3ZlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhIWhvdmVyYWJsZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNDb250YWluR3JpZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0NvbnRhaW5HcmlkKCkge1xuICAgICAgdmFyIGNvbnRhaW5HcmlkO1xuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCh0aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnR5cGUgJiYgZWxlbWVudC50eXBlID09PSBfR3JpZFtcImRlZmF1bHRcIl0pIHtcbiAgICAgICAgICBjb250YWluR3JpZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNvbnRhaW5HcmlkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2NvbmZpZ1Byb3ZpZGVyLkNvbmZpZ0NvbnN1bWVyLCBudWxsLCB0aGlzLnJlbmRlckNhcmQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDYXJkO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IENhcmQ7XG5DYXJkLkdyaWQgPSBfR3JpZFtcImRlZmF1bHRcIl07XG5DYXJkLk1ldGEgPSBfTWV0YVtcImRlZmF1bHRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuXG4gIGZvciAodmFyIHAgaW4gcykge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIH1cblxuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcblxudmFyIEdyaWQgPSBmdW5jdGlvbiBHcmlkKHByb3BzKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb25maWdQcm92aWRlci5Db25maWdDb25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZ2V0UHJlZml4Q2xzID0gX3JlZi5nZXRQcmVmaXhDbHM7XG5cbiAgICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIF9wcm9wcyRob3ZlcmFibGUgPSBwcm9wcy5ob3ZlcmFibGUsXG4gICAgICAgIGhvdmVyYWJsZSA9IF9wcm9wcyRob3ZlcmFibGUgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkaG92ZXJhYmxlLFxuICAgICAgICBvdGhlcnMgPSBfX3Jlc3QocHJvcHMsIFtcInByZWZpeENsc1wiLCBcImNsYXNzTmFtZVwiLCBcImhvdmVyYWJsZVwiXSk7XG5cbiAgICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdjYXJkJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICB2YXIgY2xhc3NTdHJpbmcgPSAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWdyaWRcIiksIGNsYXNzTmFtZSwgX2RlZmluZVByb3BlcnR5KHt9LCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWdyaWQtaG92ZXJhYmxlXCIpLCBob3ZlcmFibGUpKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgb3RoZXJzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzU3RyaW5nXG4gICAgfSkpO1xuICB9KTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IEdyaWQ7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3JpZC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuXG4gIGZvciAodmFyIHAgaW4gcykge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIH1cblxuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcblxudmFyIE1ldGEgPSBmdW5jdGlvbiBNZXRhKHByb3BzKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb25maWdQcm92aWRlci5Db25maWdDb25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZ2V0UHJlZml4Q2xzID0gX3JlZi5nZXRQcmVmaXhDbHM7XG5cbiAgICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGF2YXRhciA9IHByb3BzLmF2YXRhcixcbiAgICAgICAgdGl0bGUgPSBwcm9wcy50aXRsZSxcbiAgICAgICAgZGVzY3JpcHRpb24gPSBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgb3RoZXJzID0gX19yZXN0KHByb3BzLCBbXCJwcmVmaXhDbHNcIiwgXCJjbGFzc05hbWVcIiwgXCJhdmF0YXJcIiwgXCJ0aXRsZVwiLCBcImRlc2NyaXB0aW9uXCJdKTtcblxuICAgIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2NhcmQnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgIHZhciBjbGFzc1N0cmluZyA9ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbWV0YVwiKSwgY2xhc3NOYW1lKTtcbiAgICB2YXIgYXZhdGFyRG9tID0gYXZhdGFyID8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbWV0YS1hdmF0YXJcIilcbiAgICB9LCBhdmF0YXIpIDogbnVsbDtcbiAgICB2YXIgdGl0bGVEb20gPSB0aXRsZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW1ldGEtdGl0bGVcIilcbiAgICB9LCB0aXRsZSkgOiBudWxsO1xuICAgIHZhciBkZXNjcmlwdGlvbkRvbSA9IGRlc2NyaXB0aW9uID8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItbWV0YS1kZXNjcmlwdGlvblwiKVxuICAgIH0sIGRlc2NyaXB0aW9uKSA6IG51bGw7XG4gICAgdmFyIE1ldGFEZXRhaWwgPSB0aXRsZURvbSB8fCBkZXNjcmlwdGlvbkRvbSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW1ldGEtZGV0YWlsXCIpXG4gICAgfSwgdGl0bGVEb20sIGRlc2NyaXB0aW9uRG9tKSA6IG51bGw7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIG90aGVycywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc1N0cmluZ1xuICAgIH0pLCBhdmF0YXJEb20sIE1ldGFEZXRhaWwpO1xuICB9KTtcbn07XG5cbnZhciBfZGVmYXVsdCA9IE1ldGE7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWV0YS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBSZWFjdERPTSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3JjVGFicyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyYy10YWJzXCIpKTtcblxudmFyIF9UYWJDb250ZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmMtdGFicy9saWIvVGFiQ29udGVudFwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX29taXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJvbWl0LmpzXCIpKTtcblxudmFyIF9UYWJCYXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYkJhclwiKSk7XG5cbnZhciBfaWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ljb25cIikpO1xuXG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX3V0aWwvd2FybmluZ1wiKSk7XG5cbnZhciBfc3R5bGVDaGVja2VyID0gcmVxdWlyZShcIi4uL191dGlsL3N0eWxlQ2hlY2tlclwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIF9fcmVzdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcblxuICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICB9XG5cbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5cbnZhciBUYWJzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUYWJzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJzKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWJzKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRhYnMpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXG4gICAgX3RoaXMucmVtb3ZlVGFiID0gZnVuY3Rpb24gKHRhcmdldEtleSwgZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgaWYgKCF0YXJnZXRLZXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgb25FZGl0ID0gX3RoaXMucHJvcHMub25FZGl0O1xuXG4gICAgICBpZiAob25FZGl0KSB7XG4gICAgICAgIG9uRWRpdCh0YXJnZXRLZXksICdyZW1vdmUnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKGFjdGl2ZUtleSkge1xuICAgICAgdmFyIG9uQ2hhbmdlID0gX3RoaXMucHJvcHMub25DaGFuZ2U7XG5cbiAgICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgICBvbkNoYW5nZShhY3RpdmVLZXkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5jcmVhdGVOZXdUYWIgPSBmdW5jdGlvbiAodGFyZ2V0S2V5KSB7XG4gICAgICB2YXIgb25FZGl0ID0gX3RoaXMucHJvcHMub25FZGl0O1xuXG4gICAgICBpZiAob25FZGl0KSB7XG4gICAgICAgIG9uRWRpdCh0YXJnZXRLZXksICdhZGQnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyVGFicyA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICAgIHZhciBnZXRQcmVmaXhDbHMgPSBfcmVmLmdldFByZWZpeENscztcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IF90aGlzJHByb3BzLnByZWZpeENscyxcbiAgICAgICAgICBfdGhpcyRwcm9wcyRjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMkY2xhc3NOYW1lID09PSB2b2lkIDAgPyAnJyA6IF90aGlzJHByb3BzJGNsYXNzTmFtZSxcbiAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICBfdGhpcyRwcm9wcyR0eXBlID0gX3RoaXMkcHJvcHMudHlwZSxcbiAgICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ2xpbmUnIDogX3RoaXMkcHJvcHMkdHlwZSxcbiAgICAgICAgICB0YWJQb3NpdGlvbiA9IF90aGlzJHByb3BzLnRhYlBvc2l0aW9uLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgX3RoaXMkcHJvcHMkYW5pbWF0ZWQgPSBfdGhpcyRwcm9wcy5hbmltYXRlZCxcbiAgICAgICAgICBhbmltYXRlZCA9IF90aGlzJHByb3BzJGFuaW1hdGVkID09PSB2b2lkIDAgPyB0cnVlIDogX3RoaXMkcHJvcHMkYW5pbWF0ZWQsXG4gICAgICAgICAgaGlkZUFkZCA9IF90aGlzJHByb3BzLmhpZGVBZGQ7XG4gICAgICB2YXIgdGFiQmFyRXh0cmFDb250ZW50ID0gX3RoaXMucHJvcHMudGFiQmFyRXh0cmFDb250ZW50O1xuICAgICAgdmFyIHRhYlBhbmVBbmltYXRlZCA9IF90eXBlb2YoYW5pbWF0ZWQpID09PSAnb2JqZWN0JyA/IGFuaW1hdGVkLnRhYlBhbmUgOiBhbmltYXRlZDsgLy8gY2FyZCB0YWJzIHNob3VsZCBub3QgaGF2ZSBhbmltYXRpb25cblxuICAgICAgaWYgKHR5cGUgIT09ICdsaW5lJykge1xuICAgICAgICB0YWJQYW5lQW5pbWF0ZWQgPSAnYW5pbWF0ZWQnIGluIF90aGlzLnByb3BzID8gdGFiUGFuZUFuaW1hdGVkIDogZmFsc2U7XG4gICAgICB9XG5cbiAgICAgICgwLCBfd2FybmluZ1tcImRlZmF1bHRcIl0pKCEodHlwZS5pbmRleE9mKCdjYXJkJykgPj0gMCAmJiAoc2l6ZSA9PT0gJ3NtYWxsJyB8fCBzaXplID09PSAnbGFyZ2UnKSksICdUYWJzJywgXCJgdHlwZT1jYXJkfGVkaXRhYmxlLWNhcmRgIGRvZXNuJ3QgaGF2ZSBzbWFsbCBvciBsYXJnZSBzaXplLCBpdCdzIGJ5IGRlc2lnbi5cIik7XG4gICAgICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCd0YWJzJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICAgIHZhciBjbHMgPSAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShjbGFzc05hbWUsIChfY2xhc3NOYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItdmVydGljYWxcIiksIHRhYlBvc2l0aW9uID09PSAnbGVmdCcgfHwgdGFiUG9zaXRpb24gPT09ICdyaWdodCcpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdChzaXplKSwgISFzaXplKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNhcmRcIiksIHR5cGUuaW5kZXhPZignY2FyZCcpID49IDApLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdCh0eXBlKSwgdHJ1ZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1uby1hbmltYXRpb25cIiksICF0YWJQYW5lQW5pbWF0ZWQpLCBfY2xhc3NOYW1lcykpOyAvLyBvbmx5IGNhcmQgdHlwZSB0YWJzIGNhbiBiZSBhZGRlZCBhbmQgY2xvc2VkXG5cbiAgICAgIHZhciBjaGlsZHJlbldpdGhDbG9zZSA9IFtdO1xuXG4gICAgICBpZiAodHlwZSA9PT0gJ2VkaXRhYmxlLWNhcmQnKSB7XG4gICAgICAgIGNoaWxkcmVuV2l0aENsb3NlID0gW107XG4gICAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkgcmV0dXJuIGNoaWxkO1xuICAgICAgICAgIHZhciBjbG9zYWJsZSA9IGNoaWxkLnByb3BzLmNsb3NhYmxlO1xuICAgICAgICAgIGNsb3NhYmxlID0gdHlwZW9mIGNsb3NhYmxlID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBjbG9zYWJsZTtcbiAgICAgICAgICB2YXIgY2xvc2VJY29uID0gY2xvc2FibGUgPyBSZWFjdC5jcmVhdGVFbGVtZW50KF9pY29uW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICAgICAgdHlwZTogXCJjbG9zZVwiLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWNsb3NlLXhcIiksXG4gICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbW92ZVRhYihjaGlsZC5rZXksIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pIDogbnVsbDtcbiAgICAgICAgICBjaGlsZHJlbldpdGhDbG9zZS5wdXNoKFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgICAgdGFiOiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbG9zYWJsZSA/IHVuZGVmaW5lZCA6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItdGFiLXVuY2xvc2FibGVcIilcbiAgICAgICAgICAgIH0sIGNoaWxkLnByb3BzLnRhYiwgY2xvc2VJY29uKSxcbiAgICAgICAgICAgIGtleTogY2hpbGQua2V5IHx8IGluZGV4XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTsgLy8gQWRkIG5ldyB0YWIgaGFuZGxlclxuXG4gICAgICAgIGlmICghaGlkZUFkZCkge1xuICAgICAgICAgIHRhYkJhckV4dHJhQ29udGVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2ljb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgICAgICB0eXBlOiBcInBsdXNcIixcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1uZXctdGFiXCIpLFxuICAgICAgICAgICAgb25DbGljazogX3RoaXMuY3JlYXRlTmV3VGFiXG4gICAgICAgICAgfSksIHRhYkJhckV4dHJhQ29udGVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGFiQmFyRXh0cmFDb250ZW50ID0gdGFiQmFyRXh0cmFDb250ZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1leHRyYS1jb250ZW50XCIpXG4gICAgICB9LCB0YWJCYXJFeHRyYUNvbnRlbnQpIDogbnVsbDtcblxuICAgICAgdmFyIHRhYkJhclByb3BzID0gX19yZXN0KF90aGlzLnByb3BzLCBbXSk7XG5cbiAgICAgIHZhciBjb250ZW50Q2xzID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1cIikuY29uY2F0KHRhYlBvc2l0aW9uLCBcIi1jb250ZW50XCIpLCB0eXBlLmluZGV4T2YoJ2NhcmQnKSA+PSAwICYmIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY2FyZC1jb250ZW50XCIpKTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9yY1RhYnNbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7fSwgX3RoaXMucHJvcHMsIHtcbiAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgIGNsYXNzTmFtZTogY2xzLFxuICAgICAgICB0YWJCYXJQb3NpdGlvbjogdGFiUG9zaXRpb24sXG4gICAgICAgIHJlbmRlclRhYkJhcjogZnVuY3Rpb24gcmVuZGVyVGFiQmFyKCkge1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9UYWJCYXJbXCJkZWZhdWx0XCJdLCBfZXh0ZW5kcyh7fSwgKDAsIF9vbWl0W1wiZGVmYXVsdFwiXSkodGFiQmFyUHJvcHMsIFsnY2xhc3NOYW1lJ10pLCB7XG4gICAgICAgICAgICB0YWJCYXJFeHRyYUNvbnRlbnQ6IHRhYkJhckV4dHJhQ29udGVudFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVuZGVyVGFiQ29udGVudDogZnVuY3Rpb24gcmVuZGVyVGFiQ29udGVudCgpIHtcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfVGFiQ29udGVudFtcImRlZmF1bHRcIl0sIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY29udGVudENscyxcbiAgICAgICAgICAgIGFuaW1hdGVkOiB0YWJQYW5lQW5pbWF0ZWQsXG4gICAgICAgICAgICBhbmltYXRlZFdpdGhNYXJnaW46IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25DaGFuZ2U6IF90aGlzLmhhbmRsZUNoYW5nZVxuICAgICAgfSksIGNoaWxkcmVuV2l0aENsb3NlLmxlbmd0aCA+IDAgPyBjaGlsZHJlbldpdGhDbG9zZSA6IGNoaWxkcmVuKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRhYnMsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIE5PX0ZMRVggPSAnIG5vLWZsZXgnO1xuICAgICAgdmFyIHRhYk5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgICAgaWYgKHRhYk5vZGUgJiYgIV9zdHlsZUNoZWNrZXIuaXNGbGV4U3VwcG9ydGVkICYmIHRhYk5vZGUuY2xhc3NOYW1lLmluZGV4T2YoTk9fRkxFWCkgPT09IC0xKSB7XG4gICAgICAgIHRhYk5vZGUuY2xhc3NOYW1lICs9IE5PX0ZMRVg7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfY29uZmlnUHJvdmlkZXIuQ29uZmlnQ29uc3VtZXIsIG51bGwsIHRoaXMucmVuZGVyVGFicyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRhYnM7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gVGFicztcblRhYnMuVGFiUGFuZSA9IF9yY1RhYnMuVGFiUGFuZTtcblRhYnMuZGVmYXVsdFByb3BzID0ge1xuICBoaWRlQWRkOiBmYWxzZSxcbiAgdGFiUG9zaXRpb246ICd0b3AnXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eScpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5Mik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG52YXIgX2NsYXNzbmFtZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lczIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBUYWJDb250ZW50ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czNbJ2RlZmF1bHQnXSkoVGFiQ29udGVudCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFiQ29udGVudCgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrM1snZGVmYXVsdCddKSh0aGlzLCBUYWJDb250ZW50KTtcbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuM1snZGVmYXVsdCddKSh0aGlzLCAoVGFiQ29udGVudC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhYkNvbnRlbnQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzWydkZWZhdWx0J10pKFRhYkNvbnRlbnQsIFt7XG4gICAga2V5OiAnZ2V0VGFiUGFuZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUYWJQYW5lcygpIHtcbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICB2YXIgYWN0aXZlS2V5ID0gcHJvcHMuYWN0aXZlS2V5O1xuICAgICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gICAgICB2YXIgbmV3Q2hpbGRyZW4gPSBbXTtcblxuICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoIWNoaWxkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBrZXkgPSBjaGlsZC5rZXk7XG4gICAgICAgIHZhciBhY3RpdmUgPSBhY3RpdmVLZXkgPT09IGtleTtcbiAgICAgICAgbmV3Q2hpbGRyZW4ucHVzaChfcmVhY3QyWydkZWZhdWx0J10uY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgICAgICAgZGVzdHJveUluYWN0aXZlVGFiUGFuZTogcHJvcHMuZGVzdHJveUluYWN0aXZlVGFiUGFuZSxcbiAgICAgICAgICByb290UHJlZml4Q2xzOiBwcm9wcy5wcmVmaXhDbHNcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBuZXdDaGlsZHJlbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzbmFtZXM7XG5cbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICB2YXIgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgYWN0aXZlS2V5ID0gcHJvcHMuYWN0aXZlS2V5LFxuICAgICAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICB0YWJCYXJQb3NpdGlvbiA9IHByb3BzLnRhYkJhclBvc2l0aW9uLFxuICAgICAgICAgIGFuaW1hdGVkID0gcHJvcHMuYW5pbWF0ZWQsXG4gICAgICAgICAgYW5pbWF0ZWRXaXRoTWFyZ2luID0gcHJvcHMuYW5pbWF0ZWRXaXRoTWFyZ2luO1xuICAgICAgdmFyIHN0eWxlID0gcHJvcHMuc3R5bGU7XG5cbiAgICAgIHZhciBjbGFzc2VzID0gKDAsIF9jbGFzc25hbWVzM1snZGVmYXVsdCddKSgoX2NsYXNzbmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTNbJ2RlZmF1bHQnXSkoX2NsYXNzbmFtZXMsIHByZWZpeENscyArICctY29udGVudCcsIHRydWUpLCAoMCwgX2RlZmluZVByb3BlcnR5M1snZGVmYXVsdCddKShfY2xhc3NuYW1lcywgYW5pbWF0ZWQgPyBwcmVmaXhDbHMgKyAnLWNvbnRlbnQtYW5pbWF0ZWQnIDogcHJlZml4Q2xzICsgJy1jb250ZW50LW5vLWFuaW1hdGVkJywgdHJ1ZSksIF9jbGFzc25hbWVzKSwgY2xhc3NOYW1lKTtcbiAgICAgIGlmIChhbmltYXRlZCkge1xuICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSAoMCwgX3V0aWxzLmdldEFjdGl2ZUluZGV4KShjaGlsZHJlbiwgYWN0aXZlS2V5KTtcbiAgICAgICAgaWYgKGFjdGl2ZUluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHZhciBhbmltYXRlZFN0eWxlID0gYW5pbWF0ZWRXaXRoTWFyZ2luID8gKDAsIF91dGlscy5nZXRNYXJnaW5TdHlsZSkoYWN0aXZlSW5kZXgsIHRhYkJhclBvc2l0aW9uKSA6ICgwLCBfdXRpbHMuZ2V0VHJhbnNmb3JtUHJvcFZhbHVlKSgoMCwgX3V0aWxzLmdldFRyYW5zZm9ybUJ5SW5kZXgpKGFjdGl2ZUluZGV4LCB0YWJCYXJQb3NpdGlvbikpO1xuICAgICAgICAgIHN0eWxlID0gKDAsIF9leHRlbmRzM1snZGVmYXVsdCddKSh7fSwgc3R5bGUsIGFuaW1hdGVkU3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlID0gKDAsIF9leHRlbmRzM1snZGVmYXVsdCddKSh7fSwgc3R5bGUsIHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmdldFRhYlBhbmVzKClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUYWJDb250ZW50O1xufShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gVGFiQ29udGVudDtcblxuXG5UYWJDb250ZW50LnByb3BUeXBlcyA9IHtcbiAgYW5pbWF0ZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgYW5pbWF0ZWRXaXRoTWFyZ2luOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHByZWZpeENsczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG4gIGFjdGl2ZUtleTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIHN0eWxlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmFueSxcbiAgdGFiQmFyUG9zaXRpb246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBkZXN0cm95SW5hY3RpdmVUYWJQYW5lOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2xcbn07XG5cblRhYkNvbnRlbnQuZGVmYXVsdFByb3BzID0ge1xuICBhbmltYXRlZDogdHJ1ZVxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfU2Nyb2xsYWJsZUlua1RhYkJhciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJjLXRhYnMvbGliL1Njcm9sbGFibGVJbmtUYWJCYXJcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9pY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaWNvblwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBUYWJCYXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRhYkJhciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFiQmFyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWJCYXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihUYWJCYXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRhYkJhciwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB0YWJCYXJTdHlsZSA9IF90aGlzJHByb3BzLnRhYkJhclN0eWxlLFxuICAgICAgICAgIGFuaW1hdGVkID0gX3RoaXMkcHJvcHMuYW5pbWF0ZWQsXG4gICAgICAgICAgcmVuZGVyVGFiQmFyID0gX3RoaXMkcHJvcHMucmVuZGVyVGFiQmFyLFxuICAgICAgICAgIHRhYkJhckV4dHJhQ29udGVudCA9IF90aGlzJHByb3BzLnRhYkJhckV4dHJhQ29udGVudCxcbiAgICAgICAgICB0YWJQb3NpdGlvbiA9IF90aGlzJHByb3BzLnRhYlBvc2l0aW9uLFxuICAgICAgICAgIHByZWZpeENscyA9IF90aGlzJHByb3BzLnByZWZpeENscyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzLnNpemUsXG4gICAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzLnR5cGU7XG4gICAgICB2YXIgaW5rQmFyQW5pbWF0ZWQgPSBfdHlwZW9mKGFuaW1hdGVkKSA9PT0gJ29iamVjdCcgPyBhbmltYXRlZC5pbmtCYXIgOiBhbmltYXRlZDtcbiAgICAgIHZhciBpc1ZlcnRpY2FsID0gdGFiUG9zaXRpb24gPT09ICdsZWZ0JyB8fCB0YWJQb3NpdGlvbiA9PT0gJ3JpZ2h0JztcbiAgICAgIHZhciBwcmV2SWNvblR5cGUgPSBpc1ZlcnRpY2FsID8gJ3VwJyA6ICdsZWZ0JztcbiAgICAgIHZhciBuZXh0SWNvblR5cGUgPSBpc1ZlcnRpY2FsID8gJ2Rvd24nIDogJ3JpZ2h0JztcbiAgICAgIHZhciBwcmV2SWNvbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXRhYi1wcmV2LWljb25cIilcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2ljb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIHR5cGU6IHByZXZJY29uVHlwZSxcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXRhYi1wcmV2LWljb24tdGFyZ2V0XCIpXG4gICAgICB9KSk7XG4gICAgICB2YXIgbmV4dEljb24gPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi10YWItbmV4dC1pY29uXCIpXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KF9pY29uW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICB0eXBlOiBuZXh0SWNvblR5cGUsXG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi10YWItbmV4dC1pY29uLXRhcmdldFwiKVxuICAgICAgfSkpOyAvLyBBZGRpdGlvbmFsIGNsYXNzTmFtZSBmb3Igc3R5bGUgdXNhZ2VcblxuICAgICAgdmFyIGNscyA9ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdCh0YWJQb3NpdGlvbiwgXCItYmFyXCIpLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoc2l6ZSwgXCItYmFyXCIpLCAhIXNpemUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY2FyZC1iYXJcIiksIHR5cGUgJiYgdHlwZS5pbmRleE9mKCdjYXJkJykgPj0gMCksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKTtcblxuICAgICAgdmFyIHJlbmRlclByb3BzID0gX2V4dGVuZHMoX2V4dGVuZHMoe30sIHRoaXMucHJvcHMpLCB7XG4gICAgICAgIGNoaWxkcmVuOiBudWxsLFxuICAgICAgICBpbmtCYXJBbmltYXRlZDogaW5rQmFyQW5pbWF0ZWQsXG4gICAgICAgIGV4dHJhQ29udGVudDogdGFiQmFyRXh0cmFDb250ZW50LFxuICAgICAgICBzdHlsZTogdGFiQmFyU3R5bGUsXG4gICAgICAgIHByZXZJY29uOiBwcmV2SWNvbixcbiAgICAgICAgbmV4dEljb246IG5leHRJY29uLFxuICAgICAgICBjbGFzc05hbWU6IGNsc1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBSZW5kZXJUYWJCYXI7XG5cbiAgICAgIGlmIChyZW5kZXJUYWJCYXIpIHtcbiAgICAgICAgUmVuZGVyVGFiQmFyID0gcmVuZGVyVGFiQmFyKHJlbmRlclByb3BzLCBfU2Nyb2xsYWJsZUlua1RhYkJhcltcImRlZmF1bHRcIl0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUmVuZGVyVGFiQmFyID0gUmVhY3QuY3JlYXRlRWxlbWVudChfU2Nyb2xsYWJsZUlua1RhYkJhcltcImRlZmF1bHRcIl0sIHJlbmRlclByb3BzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChSZW5kZXJUYWJCYXIpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUYWJCYXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gVGFiQmFyO1xuVGFiQmFyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYW5pbWF0ZWQ6IHRydWUsXG4gIHR5cGU6ICdsaW5lJ1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRhYkJhci5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfSW5rVGFiQmFyTm9kZSA9IHJlcXVpcmUoJy4vSW5rVGFiQmFyTm9kZScpO1xuXG52YXIgX0lua1RhYkJhck5vZGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW5rVGFiQmFyTm9kZSk7XG5cbnZhciBfVGFiQmFyVGFic05vZGUgPSByZXF1aXJlKCcuL1RhYkJhclRhYnNOb2RlJyk7XG5cbnZhciBfVGFiQmFyVGFic05vZGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGFiQmFyVGFic05vZGUpO1xuXG52YXIgX1RhYkJhclJvb3ROb2RlID0gcmVxdWlyZSgnLi9UYWJCYXJSb290Tm9kZScpO1xuXG52YXIgX1RhYkJhclJvb3ROb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhYkJhclJvb3ROb2RlKTtcblxudmFyIF9TY3JvbGxhYmxlVGFiQmFyTm9kZSA9IHJlcXVpcmUoJy4vU2Nyb2xsYWJsZVRhYkJhck5vZGUnKTtcblxudmFyIF9TY3JvbGxhYmxlVGFiQmFyTm9kZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TY3JvbGxhYmxlVGFiQmFyTm9kZSk7XG5cbnZhciBfU2F2ZVJlZiA9IHJlcXVpcmUoJy4vU2F2ZVJlZicpO1xuXG52YXIgX1NhdmVSZWYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2F2ZVJlZik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIFNjcm9sbGFibGVJbmtUYWJCYXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzM1snZGVmYXVsdCddKShTY3JvbGxhYmxlSW5rVGFiQmFyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTY3JvbGxhYmxlSW5rVGFiQmFyKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szWydkZWZhdWx0J10pKHRoaXMsIFNjcm9sbGFibGVJbmtUYWJCYXIpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zWydkZWZhdWx0J10pKHRoaXMsIChTY3JvbGxhYmxlSW5rVGFiQmFyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2Nyb2xsYWJsZUlua1RhYkJhcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczNbJ2RlZmF1bHQnXSkoU2Nyb2xsYWJsZUlua1RhYkJhciwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICByZW5kZXJUYWJCYXJOb2RlID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHJlc3RQcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzWydkZWZhdWx0J10pKF9wcm9wcywgWydjaGlsZHJlbiddKTtcblxuXG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9TYXZlUmVmMlsnZGVmYXVsdCddLFxuICAgICAgICBudWxsLFxuICAgICAgICBmdW5jdGlvbiAoc2F2ZVJlZiwgZ2V0UmVmKSB7XG4gICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX1RhYkJhclJvb3ROb2RlMlsnZGVmYXVsdCddLFxuICAgICAgICAgICAgKDAsIF9leHRlbmRzM1snZGVmYXVsdCddKSh7IHNhdmVSZWY6IHNhdmVSZWYgfSwgcmVzdFByb3BzKSxcbiAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBfU2Nyb2xsYWJsZVRhYkJhck5vZGUyWydkZWZhdWx0J10sXG4gICAgICAgICAgICAgICgwLCBfZXh0ZW5kczNbJ2RlZmF1bHQnXSkoeyBzYXZlUmVmOiBzYXZlUmVmLCBnZXRSZWY6IGdldFJlZiB9LCByZXN0UHJvcHMpLFxuICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfVGFiQmFyVGFic05vZGUyWydkZWZhdWx0J10sICgwLCBfZXh0ZW5kczNbJ2RlZmF1bHQnXSkoeyBzYXZlUmVmOiBzYXZlUmVmLCByZW5kZXJUYWJCYXJOb2RlOiByZW5kZXJUYWJCYXJOb2RlIH0sIHJlc3RQcm9wcykpLFxuICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfSW5rVGFiQmFyTm9kZTJbJ2RlZmF1bHQnXSwgKDAsIF9leHRlbmRzM1snZGVmYXVsdCddKSh7IHNhdmVSZWY6IHNhdmVSZWYsIGdldFJlZjogZ2V0UmVmIH0sIHJlc3RQcm9wcykpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFNjcm9sbGFibGVJbmtUYWJCYXI7XG59KF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpOyAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcmVmZXItc3RhdGVsZXNzLWZ1bmN0aW9uICovXG5cblxuZXhwb3J0c1snZGVmYXVsdCddID0gU2Nyb2xsYWJsZUlua1RhYkJhcjtcblxuXG5TY3JvbGxhYmxlSW5rVGFiQmFyLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuY1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eTIpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9jbGFzc25hbWVzMiA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxudmFyIF9jbGFzc25hbWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMyKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY29tcG9uZW50RGlkVXBkYXRlKGNvbXBvbmVudCwgaW5pdCkge1xuICB2YXIgX2NvbXBvbmVudCRwcm9wcyA9IGNvbXBvbmVudC5wcm9wcyxcbiAgICAgIHN0eWxlcyA9IF9jb21wb25lbnQkcHJvcHMuc3R5bGVzLFxuICAgICAgcGFuZWxzID0gX2NvbXBvbmVudCRwcm9wcy5wYW5lbHMsXG4gICAgICBhY3RpdmVLZXkgPSBfY29tcG9uZW50JHByb3BzLmFjdGl2ZUtleTtcblxuICB2YXIgcm9vdE5vZGUgPSBjb21wb25lbnQucHJvcHMuZ2V0UmVmKCdyb290Jyk7XG4gIHZhciB3cmFwTm9kZSA9IGNvbXBvbmVudC5wcm9wcy5nZXRSZWYoJ25hdicpIHx8IHJvb3ROb2RlO1xuICB2YXIgaW5rQmFyTm9kZSA9IGNvbXBvbmVudC5wcm9wcy5nZXRSZWYoJ2lua0JhcicpO1xuICB2YXIgYWN0aXZlVGFiID0gY29tcG9uZW50LnByb3BzLmdldFJlZignYWN0aXZlVGFiJyk7XG4gIHZhciBpbmtCYXJOb2RlU3R5bGUgPSBpbmtCYXJOb2RlLnN0eWxlO1xuICB2YXIgdGFiQmFyUG9zaXRpb24gPSBjb21wb25lbnQucHJvcHMudGFiQmFyUG9zaXRpb247XG4gIHZhciBhY3RpdmVJbmRleCA9ICgwLCBfdXRpbHMuZ2V0QWN0aXZlSW5kZXgpKHBhbmVscywgYWN0aXZlS2V5KTtcbiAgaWYgKGluaXQpIHtcbiAgICAvLyBwcmV2ZW50IG1vdW50IGFuaW1hdGlvblxuICAgIGlua0Jhck5vZGVTdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9XG4gIGlmIChhY3RpdmVUYWIpIHtcbiAgICB2YXIgdGFiTm9kZSA9IGFjdGl2ZVRhYjtcbiAgICB2YXIgdHJhbnNmb3JtU3VwcG9ydGVkID0gKDAsIF91dGlscy5pc1RyYW5zZm9ybTNkU3VwcG9ydGVkKShpbmtCYXJOb2RlU3R5bGUpO1xuXG4gICAgLy8gUmVzZXQgY3VycmVudCBzdHlsZVxuICAgICgwLCBfdXRpbHMuc2V0VHJhbnNmb3JtKShpbmtCYXJOb2RlU3R5bGUsICcnKTtcbiAgICBpbmtCYXJOb2RlU3R5bGUud2lkdGggPSAnJztcbiAgICBpbmtCYXJOb2RlU3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgaW5rQmFyTm9kZVN0eWxlLmxlZnQgPSAnJztcbiAgICBpbmtCYXJOb2RlU3R5bGUudG9wID0gJyc7XG4gICAgaW5rQmFyTm9kZVN0eWxlLmJvdHRvbSA9ICcnO1xuICAgIGlua0Jhck5vZGVTdHlsZS5yaWdodCA9ICcnO1xuXG4gICAgaWYgKHRhYkJhclBvc2l0aW9uID09PSAndG9wJyB8fCB0YWJCYXJQb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIHZhciBsZWZ0ID0gKDAsIF91dGlscy5nZXRMZWZ0KSh0YWJOb2RlLCB3cmFwTm9kZSk7XG4gICAgICB2YXIgd2lkdGggPSB0YWJOb2RlLm9mZnNldFdpZHRoO1xuXG4gICAgICAvLyBJZiB0YWJOb2RlJ3dpZHRoIHdpZHRoIGVxdWFsIHRvIHdyYXBOb2RlJ3dpZHRoIHdoZW4gdGFiQmFyUG9zaXRpb24gaXMgdG9wIG9yIGJvdHRvbVxuICAgICAgLy8gSXQgbWVhbnMgbm8gY3NzIHdvcmtpbmcsIHRoZW4gaW5rIGJhciBzaG91bGQgbm90IGhhdmUgd2lkdGggdW50aWwgY3NzIGlzIGxvYWRlZFxuICAgICAgLy8gRml4IGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzc1NjRcbiAgICAgIGlmICh3aWR0aCA9PT0gcm9vdE5vZGUub2Zmc2V0V2lkdGgpIHtcbiAgICAgICAgd2lkdGggPSAwO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZXMuaW5rQmFyICYmIHN0eWxlcy5pbmtCYXIud2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB3aWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmlua0Jhci53aWR0aCwgMTApO1xuICAgICAgICBpZiAod2lkdGgpIHtcbiAgICAgICAgICBsZWZ0ICs9ICh0YWJOb2RlLm9mZnNldFdpZHRoIC0gd2lkdGgpIC8gMjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyB1c2UgM2QgZ3B1IHRvIG9wdGltaXplIHJlbmRlclxuICAgICAgaWYgKHRyYW5zZm9ybVN1cHBvcnRlZCkge1xuICAgICAgICAoMCwgX3V0aWxzLnNldFRyYW5zZm9ybSkoaW5rQmFyTm9kZVN0eWxlLCAndHJhbnNsYXRlM2QoJyArIGxlZnQgKyAncHgsMCwwKScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5rQmFyTm9kZVN0eWxlLmxlZnQgPSBsZWZ0ICsgJ3B4JztcbiAgICAgIH1cbiAgICAgIGlua0Jhck5vZGVTdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHRvcCA9ICgwLCBfdXRpbHMuZ2V0VG9wKSh0YWJOb2RlLCB3cmFwTm9kZSwgdHJ1ZSk7XG4gICAgICB2YXIgaGVpZ2h0ID0gdGFiTm9kZS5vZmZzZXRIZWlnaHQ7XG4gICAgICBpZiAoc3R5bGVzLmlua0JhciAmJiBzdHlsZXMuaW5rQmFyLmhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGhlaWdodCA9IHBhcnNlRmxvYXQoc3R5bGVzLmlua0Jhci5oZWlnaHQsIDEwKTtcbiAgICAgICAgaWYgKGhlaWdodCkge1xuICAgICAgICAgIHRvcCArPSAodGFiTm9kZS5vZmZzZXRIZWlnaHQgLSBoZWlnaHQpIC8gMjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRyYW5zZm9ybVN1cHBvcnRlZCkge1xuICAgICAgICAoMCwgX3V0aWxzLnNldFRyYW5zZm9ybSkoaW5rQmFyTm9kZVN0eWxlLCAndHJhbnNsYXRlM2QoMCwnICsgdG9wICsgJ3B4LDApJyk7XG4gICAgICAgIGlua0Jhck5vZGVTdHlsZS50b3AgPSAnMCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmtCYXJOb2RlU3R5bGUudG9wID0gdG9wICsgJ3B4JztcbiAgICAgIH1cbiAgICAgIGlua0Jhck5vZGVTdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuICAgIH1cbiAgfVxuICBpbmtCYXJOb2RlU3R5bGUuZGlzcGxheSA9IGFjdGl2ZUluZGV4ICE9PSAtMSA/ICdibG9jaycgOiAnbm9uZSc7XG59XG5cbnZhciBJbmtUYWJCYXJOb2RlID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czNbJ2RlZmF1bHQnXSkoSW5rVGFiQmFyTm9kZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5rVGFiQmFyTm9kZSgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrM1snZGVmYXVsdCddKSh0aGlzLCBJbmtUYWJCYXJOb2RlKTtcbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuM1snZGVmYXVsdCddKSh0aGlzLCAoSW5rVGFiQmFyTm9kZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElua1RhYkJhck5vZGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzWydkZWZhdWx0J10pKElua1RhYkJhck5vZGUsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAvLyByZWYgaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvODY3OFxuICAgICAgLy8gcmVmIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvdGFicy9pc3N1ZXMvMTM1XG4gICAgICAvLyBJbmtUYWJCYXJOb2RlIG5lZWQgcGFyZW50L3Jvb3QgcmVmIGZvciBjYWxjdWxhdGluZyBwb3NpdGlvblxuICAgICAgLy8gc2luY2UgcGFyZW50IGNvbXBvbmVudERpZE1vdW50IHRyaWdnZXJlZCBhZnRlciBjaGlsZCBjb21wb25lbnREaWRNb3VudFxuICAgICAgLy8gd2UncmUgZG9pbmcgYSBxdWljayBmaXggaGVyZSB0byB1c2Ugc2V0VGltZW91dCB0byBjYWxjdWxhdGUgcG9zaXRpb25cbiAgICAgIC8vIGFmdGVyIHBhcmVudC9yb290IGNvbXBvbmVudCBtb3VudGVkXG4gICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX2NvbXBvbmVudERpZFVwZGF0ZShfdGhpczIsIHRydWUpO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgX2NvbXBvbmVudERpZFVwZGF0ZSh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9jbGFzc25hbWVzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIHN0eWxlcyA9IF9wcm9wcy5zdHlsZXMsXG4gICAgICAgICAgaW5rQmFyQW5pbWF0ZWQgPSBfcHJvcHMuaW5rQmFyQW5pbWF0ZWQ7XG5cbiAgICAgIHZhciBjbGFzc05hbWUgPSBwcmVmaXhDbHMgKyAnLWluay1iYXInO1xuICAgICAgdmFyIGNsYXNzZXMgPSAoMCwgX2NsYXNzbmFtZXMzWydkZWZhdWx0J10pKChfY2xhc3NuYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5M1snZGVmYXVsdCddKShfY2xhc3NuYW1lcywgY2xhc3NOYW1lLCB0cnVlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTNbJ2RlZmF1bHQnXSkoX2NsYXNzbmFtZXMsIGlua0JhckFuaW1hdGVkID8gY2xhc3NOYW1lICsgJy1hbmltYXRlZCcgOiBjbGFzc05hbWUgKyAnLW5vLWFuaW1hdGVkJywgdHJ1ZSksIF9jbGFzc25hbWVzKSk7XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgc3R5bGU6IHN0eWxlcy5pbmtCYXIsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAga2V5OiAnaW5rQmFyJyxcbiAgICAgICAgcmVmOiB0aGlzLnByb3BzLnNhdmVSZWYoJ2lua0JhcicpXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIElua1RhYkJhck5vZGU7XG59KF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBJbmtUYWJCYXJOb2RlO1xuXG5cbklua1RhYkJhck5vZGUucHJvcFR5cGVzID0ge1xuICBwcmVmaXhDbHM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBzdHlsZXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub2JqZWN0LFxuICBpbmtCYXJBbmltYXRlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBzYXZlUmVmOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmNcbn07XG5cbklua1RhYkJhck5vZGUuZGVmYXVsdFByb3BzID0ge1xuICBwcmVmaXhDbHM6ICcnLFxuICBpbmtCYXJBbmltYXRlZDogdHJ1ZSxcbiAgc3R5bGVzOiB7fSxcbiAgc2F2ZVJlZjogZnVuY3Rpb24gc2F2ZVJlZigpIHt9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eTIpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIFRhYkJhclRhYnNOb2RlID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czNbJ2RlZmF1bHQnXSkoVGFiQmFyVGFic05vZGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYkJhclRhYnNOb2RlKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szWydkZWZhdWx0J10pKHRoaXMsIFRhYkJhclRhYnNOb2RlKTtcbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuM1snZGVmYXVsdCddKSh0aGlzLCAoVGFiQmFyVGFic05vZGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUYWJCYXJUYWJzTm9kZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczNbJ2RlZmF1bHQnXSkoVGFiQmFyVGFic05vZGUsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLnBhbmVscyxcbiAgICAgICAgICBhY3RpdmVLZXkgPSBfcHJvcHMuYWN0aXZlS2V5LFxuICAgICAgICAgIHByZWZpeENscyA9IF9wcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgICAgdGFiQmFyR3V0dGVyID0gX3Byb3BzLnRhYkJhckd1dHRlcixcbiAgICAgICAgICBzYXZlUmVmID0gX3Byb3BzLnNhdmVSZWYsXG4gICAgICAgICAgdGFiQmFyUG9zaXRpb24gPSBfcHJvcHMudGFiQmFyUG9zaXRpb24sXG4gICAgICAgICAgcmVuZGVyVGFiQmFyTm9kZSA9IF9wcm9wcy5yZW5kZXJUYWJCYXJOb2RlO1xuXG4gICAgICB2YXIgcnN0ID0gW107XG5cbiAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGtleSA9IGNoaWxkLmtleTtcbiAgICAgICAgdmFyIGNscyA9IGFjdGl2ZUtleSA9PT0ga2V5ID8gcHJlZml4Q2xzICsgJy10YWItYWN0aXZlJyA6ICcnO1xuICAgICAgICBjbHMgKz0gJyAnICsgcHJlZml4Q2xzICsgJy10YWInO1xuICAgICAgICB2YXIgZXZlbnRzID0ge307XG4gICAgICAgIGlmIChjaGlsZC5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgIGNscyArPSAnICcgKyBwcmVmaXhDbHMgKyAnLXRhYi1kaXNhYmxlZCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXZlbnRzID0ge1xuICAgICAgICAgICAgb25DbGljazogX3RoaXMyLnByb3BzLm9uVGFiQ2xpY2suYmluZChfdGhpczIsIGtleSlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWYgPSB7fTtcbiAgICAgICAgaWYgKGFjdGl2ZUtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgcmVmLnJlZiA9IHNhdmVSZWYoJ2FjdGl2ZVRhYicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGd1dHRlciA9IHRhYkJhckd1dHRlciAmJiBpbmRleCA9PT0gY2hpbGRyZW4ubGVuZ3RoIC0gMSA/IDAgOiB0YWJCYXJHdXR0ZXI7XG4gICAgICAgIHZhciBzdHlsZSA9ICgwLCBfZGVmaW5lUHJvcGVydHkzWydkZWZhdWx0J10pKHt9LCAoMCwgX3V0aWxzLmlzVmVydGljYWwpKHRhYkJhclBvc2l0aW9uKSA/ICdtYXJnaW5Cb3R0b20nIDogJ21hcmdpblJpZ2h0JywgZ3V0dGVyKTtcbiAgICAgICAgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKSgndGFiJyBpbiBjaGlsZC5wcm9wcywgJ1RoZXJlIG11c3QgYmUgYHRhYmAgcHJvcGVydHkgb24gY2hpbGRyZW4gb2YgVGFicy4nKTtcblxuICAgICAgICB2YXIgbm9kZSA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICgwLCBfZXh0ZW5kczNbJ2RlZmF1bHQnXSkoe1xuICAgICAgICAgICAgcm9sZTogJ3RhYicsXG4gICAgICAgICAgICAnYXJpYS1kaXNhYmxlZCc6IGNoaWxkLnByb3BzLmRpc2FibGVkID8gJ3RydWUnIDogJ2ZhbHNlJyxcbiAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogYWN0aXZlS2V5ID09PSBrZXkgPyAndHJ1ZScgOiAnZmFsc2UnXG4gICAgICAgICAgfSwgZXZlbnRzLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IGNscyxcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgc3R5bGU6IHN0eWxlXG4gICAgICAgICAgfSwgcmVmKSxcbiAgICAgICAgICBjaGlsZC5wcm9wcy50YWJcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAocmVuZGVyVGFiQmFyTm9kZSkge1xuICAgICAgICAgIG5vZGUgPSByZW5kZXJUYWJCYXJOb2RlKG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcnN0LnB1c2gobm9kZSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyByZWY6IHNhdmVSZWYoJ25hdlRhYnNDb250YWluZXInKSB9LFxuICAgICAgICByc3RcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUYWJCYXJUYWJzTm9kZTtcbn0oX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFRhYkJhclRhYnNOb2RlO1xuXG5cblRhYkJhclRhYnNOb2RlLnByb3BUeXBlcyA9IHtcbiAgYWN0aXZlS2V5OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgcGFuZWxzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG4gIHByZWZpeENsczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIHRhYkJhckd1dHRlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5udW1iZXIsXG4gIG9uVGFiQ2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgc2F2ZVJlZjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICByZW5kZXJUYWJCYXJOb2RlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIHRhYkJhclBvc2l0aW9uOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZ1xufTtcblxuVGFiQmFyVGFic05vZGUuZGVmYXVsdFByb3BzID0ge1xuICBwYW5lbHM6IFtdLFxuICBwcmVmaXhDbHM6IFtdLFxuICB0YWJCYXJHdXR0ZXI6IG51bGwsXG4gIG9uVGFiQ2xpY2s6IGZ1bmN0aW9uIG9uVGFiQ2xpY2soKSB7fSxcbiAgc2F2ZVJlZjogZnVuY3Rpb24gc2F2ZVJlZigpIHt9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eTIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG52YXIgX2NsYXNzbmFtZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lczIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBUYWJCYXJSb290Tm9kZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzWydkZWZhdWx0J10pKFRhYkJhclJvb3ROb2RlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJCYXJSb290Tm9kZSgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrM1snZGVmYXVsdCddKSh0aGlzLCBUYWJCYXJSb290Tm9kZSk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjNbJ2RlZmF1bHQnXSkodGhpcywgKFRhYkJhclJvb3ROb2RlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFiQmFyUm9vdE5vZGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzWydkZWZhdWx0J10pKFRhYkJhclJvb3ROb2RlLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHByZWZpeENscyA9IF9wcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgICAgb25LZXlEb3duID0gX3Byb3BzLm9uS2V5RG93bixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGV4dHJhQ29udGVudCA9IF9wcm9wcy5leHRyYUNvbnRlbnQsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdGFiQmFyUG9zaXRpb24gPSBfcHJvcHMudGFiQmFyUG9zaXRpb24sXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgcmVzdFByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczNbJ2RlZmF1bHQnXSkoX3Byb3BzLCBbJ3ByZWZpeENscycsICdvbktleURvd24nLCAnY2xhc3NOYW1lJywgJ2V4dHJhQ29udGVudCcsICdzdHlsZScsICd0YWJCYXJQb3NpdGlvbicsICdjaGlsZHJlbiddKTtcblxuICAgICAgdmFyIGNscyA9ICgwLCBfY2xhc3NuYW1lczNbJ2RlZmF1bHQnXSkocHJlZml4Q2xzICsgJy1iYXInLCAoMCwgX2RlZmluZVByb3BlcnR5M1snZGVmYXVsdCddKSh7fSwgY2xhc3NOYW1lLCAhIWNsYXNzTmFtZSkpO1xuICAgICAgdmFyIHRvcE9yQm90dG9tID0gdGFiQmFyUG9zaXRpb24gPT09ICd0b3AnIHx8IHRhYkJhclBvc2l0aW9uID09PSAnYm90dG9tJztcbiAgICAgIHZhciB0YWJCYXJFeHRyYUNvbnRlbnRTdHlsZSA9IHRvcE9yQm90dG9tID8geyBmbG9hdDogJ3JpZ2h0JyB9IDoge307XG4gICAgICB2YXIgZXh0cmFDb250ZW50U3R5bGUgPSBleHRyYUNvbnRlbnQgJiYgZXh0cmFDb250ZW50LnByb3BzID8gZXh0cmFDb250ZW50LnByb3BzLnN0eWxlIDoge307XG4gICAgICB2YXIgbmV3Q2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgIGlmIChleHRyYUNvbnRlbnQpIHtcbiAgICAgICAgbmV3Q2hpbGRyZW4gPSBbKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGV4dHJhQ29udGVudCwge1xuICAgICAgICAgIGtleTogJ2V4dHJhJyxcbiAgICAgICAgICBzdHlsZTogKDAsIF9leHRlbmRzM1snZGVmYXVsdCddKSh7fSwgdGFiQmFyRXh0cmFDb250ZW50U3R5bGUsIGV4dHJhQ29udGVudFN0eWxlKVxuICAgICAgICB9KSwgKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkcmVuLCB7IGtleTogJ2NvbnRlbnQnIH0pXTtcbiAgICAgICAgbmV3Q2hpbGRyZW4gPSB0b3BPckJvdHRvbSA/IG5ld0NoaWxkcmVuIDogbmV3Q2hpbGRyZW4ucmV2ZXJzZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgKDAsIF9leHRlbmRzM1snZGVmYXVsdCddKSh7XG4gICAgICAgICAgcm9sZTogJ3RhYmxpc3QnLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xzLFxuICAgICAgICAgIHRhYkluZGV4OiAnMCcsXG4gICAgICAgICAgcmVmOiB0aGlzLnByb3BzLnNhdmVSZWYoJ3Jvb3QnKSxcbiAgICAgICAgICBvbktleURvd246IG9uS2V5RG93bixcbiAgICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgICAgfSwgKDAsIF91dGlscy5nZXREYXRhQXR0cikocmVzdFByb3BzKSksXG4gICAgICAgIG5ld0NoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVGFiQmFyUm9vdE5vZGU7XG59KF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBUYWJCYXJSb290Tm9kZTtcblxuXG5UYWJCYXJSb290Tm9kZS5wcm9wVHlwZXMgPSB7XG4gIHByZWZpeENsczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIHN0eWxlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9iamVjdCxcbiAgdGFiQmFyUG9zaXRpb246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub25lT2YoWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSksXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG4gIGV4dHJhQ29udGVudDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuICBvbktleURvd246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgc2F2ZVJlZjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jXG59O1xuXG5UYWJCYXJSb290Tm9kZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHByZWZpeENsczogJycsXG4gIGNsYXNzTmFtZTogJycsXG4gIHN0eWxlOiB7fSxcbiAgdGFiQmFyUG9zaXRpb246ICd0b3AnLFxuICBleHRyYUNvbnRlbnQ6IG51bGwsXG4gIGNoaWxkcmVuOiBudWxsLFxuICBvbktleURvd246IGZ1bmN0aW9uIG9uS2V5RG93bigpIHt9LFxuICBzYXZlUmVmOiBmdW5jdGlvbiBzYXZlUmVmKCkge31cbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5Jyk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkyKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY2xhc3NuYW1lczUgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG5cbnZhciBfY2xhc3NuYW1lczYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzNSk7XG5cbnZhciBfZGVib3VuY2UgPSByZXF1aXJlKCdsb2Rhc2gvZGVib3VuY2UnKTtcblxudmFyIF9kZWJvdW5jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJvdW5jZSk7XG5cbnZhciBfcmVzaXplT2JzZXJ2ZXJQb2x5ZmlsbCA9IHJlcXVpcmUoJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCcpO1xuXG52YXIgX3Jlc2l6ZU9ic2VydmVyUG9seWZpbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVzaXplT2JzZXJ2ZXJQb2x5ZmlsbCk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIFNjcm9sbGFibGVUYWJCYXJOb2RlID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czNbJ2RlZmF1bHQnXSkoU2Nyb2xsYWJsZVRhYkJhck5vZGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbGFibGVUYWJCYXJOb2RlKHByb3BzKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazNbJ2RlZmF1bHQnXSkodGhpcywgU2Nyb2xsYWJsZVRhYkJhck5vZGUpO1xuXG4gICAgdmFyIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuM1snZGVmYXVsdCddKSh0aGlzLCAoU2Nyb2xsYWJsZVRhYkJhck5vZGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTY3JvbGxhYmxlVGFiQmFyTm9kZSkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLnByZXZUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLnByb3BlcnR5TmFtZSAhPT0gJ29wYWNpdHknKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBjb250YWluZXIgPSBfdGhpcy5wcm9wcy5nZXRSZWYoJ2NvbnRhaW5lcicpO1xuICAgICAgX3RoaXMuc2Nyb2xsVG9BY3RpdmVUYWIoe1xuICAgICAgICB0YXJnZXQ6IGNvbnRhaW5lcixcbiAgICAgICAgY3VycmVudFRhcmdldDogY29udGFpbmVyXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2Nyb2xsVG9BY3RpdmVUYWIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGFjdGl2ZVRhYiA9IF90aGlzLnByb3BzLmdldFJlZignYWN0aXZlVGFiJyk7XG4gICAgICB2YXIgbmF2V3JhcCA9IF90aGlzLnByb3BzLmdldFJlZignbmF2V3JhcCcpO1xuICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCB8fCAhYWN0aXZlVGFiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gd2hlbiBub3Qgc2Nyb2xsYWJsZSBvciBlbnRlciBzY3JvbGxhYmxlIGZpcnN0IHRpbWUsIGRvbid0IGVtaXQgc2Nyb2xsaW5nXG4gICAgICB2YXIgbmVlZFRvU3JvbGwgPSBfdGhpcy5pc05leHRQcmV2U2hvd24oKSAmJiBfdGhpcy5sYXN0TmV4dFByZXZTaG93bjtcbiAgICAgIF90aGlzLmxhc3ROZXh0UHJldlNob3duID0gX3RoaXMuaXNOZXh0UHJldlNob3duKCk7XG4gICAgICBpZiAoIW5lZWRUb1Nyb2xsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjdGl2ZVRhYldIID0gX3RoaXMuZ2V0U2Nyb2xsV0goYWN0aXZlVGFiKTtcbiAgICAgIHZhciBuYXZXcmFwTm9kZVdIID0gX3RoaXMuZ2V0T2Zmc2V0V0gobmF2V3JhcCk7XG4gICAgICB2YXIgb2Zmc2V0ID0gX3RoaXMub2Zmc2V0O1xuXG4gICAgICB2YXIgd3JhcE9mZnNldCA9IF90aGlzLmdldE9mZnNldExUKG5hdldyYXApO1xuICAgICAgdmFyIGFjdGl2ZVRhYk9mZnNldCA9IF90aGlzLmdldE9mZnNldExUKGFjdGl2ZVRhYik7XG4gICAgICBpZiAod3JhcE9mZnNldCA+IGFjdGl2ZVRhYk9mZnNldCkge1xuICAgICAgICBvZmZzZXQgKz0gd3JhcE9mZnNldCAtIGFjdGl2ZVRhYk9mZnNldDtcbiAgICAgICAgX3RoaXMuc2V0T2Zmc2V0KG9mZnNldCk7XG4gICAgICB9IGVsc2UgaWYgKHdyYXBPZmZzZXQgKyBuYXZXcmFwTm9kZVdIIDwgYWN0aXZlVGFiT2Zmc2V0ICsgYWN0aXZlVGFiV0gpIHtcbiAgICAgICAgb2Zmc2V0IC09IGFjdGl2ZVRhYk9mZnNldCArIGFjdGl2ZVRhYldIIC0gKHdyYXBPZmZzZXQgKyBuYXZXcmFwTm9kZVdIKTtcbiAgICAgICAgX3RoaXMuc2V0T2Zmc2V0KG9mZnNldCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnByZXYgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMucHJvcHMub25QcmV2Q2xpY2soZSk7XG4gICAgICB2YXIgbmF2V3JhcE5vZGUgPSBfdGhpcy5wcm9wcy5nZXRSZWYoJ25hdldyYXAnKTtcbiAgICAgIHZhciBuYXZXcmFwTm9kZVdIID0gX3RoaXMuZ2V0T2Zmc2V0V0gobmF2V3JhcE5vZGUpO1xuICAgICAgdmFyIG9mZnNldCA9IF90aGlzLm9mZnNldDtcblxuICAgICAgX3RoaXMuc2V0T2Zmc2V0KG9mZnNldCArIG5hdldyYXBOb2RlV0gpO1xuICAgIH07XG5cbiAgICBfdGhpcy5uZXh0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnByb3BzLm9uTmV4dENsaWNrKGUpO1xuICAgICAgdmFyIG5hdldyYXBOb2RlID0gX3RoaXMucHJvcHMuZ2V0UmVmKCduYXZXcmFwJyk7XG4gICAgICB2YXIgbmF2V3JhcE5vZGVXSCA9IF90aGlzLmdldE9mZnNldFdIKG5hdldyYXBOb2RlKTtcbiAgICAgIHZhciBvZmZzZXQgPSBfdGhpcy5vZmZzZXQ7XG5cbiAgICAgIF90aGlzLnNldE9mZnNldChvZmZzZXQgLSBuYXZXcmFwTm9kZVdIKTtcbiAgICB9O1xuXG4gICAgX3RoaXMub2Zmc2V0ID0gMDtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbmV4dDogZmFsc2UsXG4gICAgICBwcmV2OiBmYWxzZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczNbJ2RlZmF1bHQnXSkoU2Nyb2xsYWJsZVRhYkJhck5vZGUsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSgpO1xuICAgICAgdGhpcy5kZWJvdW5jZWRSZXNpemUgPSAoMCwgX2RlYm91bmNlMlsnZGVmYXVsdCddKShmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zZXROZXh0UHJldigpO1xuICAgICAgICBfdGhpczIuc2Nyb2xsVG9BY3RpdmVUYWIoKTtcbiAgICAgIH0sIDIwMCk7XG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbmV3IF9yZXNpemVPYnNlcnZlclBvbHlmaWxsMlsnZGVmYXVsdCddKHRoaXMuZGVib3VuY2VkUmVzaXplKTtcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnByb3BzLmdldFJlZignY29udGFpbmVyJykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICBpZiAocHJldlByb3BzICYmIHByZXZQcm9wcy50YWJCYXJQb3NpdGlvbiAhPT0gcHJvcHMudGFiQmFyUG9zaXRpb24pIHtcbiAgICAgICAgdGhpcy5zZXRPZmZzZXQoMCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuZXh0UHJldiA9IHRoaXMuc2V0TmV4dFByZXYoKTtcbiAgICAgIC8vIHdhaXQgbmV4dCwgcHJldiBzaG93IGhpZGVcbiAgICAgIC8qIGVzbGludCByZWFjdC9uby1kaWQtdXBkYXRlLXNldC1zdGF0ZTowICovXG4gICAgICBpZiAodGhpcy5pc05leHRQcmV2U2hvd24odGhpcy5zdGF0ZSkgIT09IHRoaXMuaXNOZXh0UHJldlNob3duKG5leHRQcmV2KSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHt9LCB0aGlzLnNjcm9sbFRvQWN0aXZlVGFiKTtcbiAgICAgIH0gZWxzZSBpZiAoIXByZXZQcm9wcyB8fCBwcm9wcy5hY3RpdmVLZXkgIT09IHByZXZQcm9wcy5hY3RpdmVLZXkpIHtcbiAgICAgICAgLy8gY2FuIG5vdCB1c2UgcHJvcHMuYWN0aXZlS2V5XG4gICAgICAgIHRoaXMuc2Nyb2xsVG9BY3RpdmVUYWIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucmVzaXplT2JzZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5kZWJvdW5jZWRSZXNpemUgJiYgdGhpcy5kZWJvdW5jZWRSZXNpemUuY2FuY2VsKSB7XG4gICAgICAgIHRoaXMuZGVib3VuY2VkUmVzaXplLmNhbmNlbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldE5leHRQcmV2JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TmV4dFByZXYoKSB7XG4gICAgICB2YXIgbmF2Tm9kZSA9IHRoaXMucHJvcHMuZ2V0UmVmKCduYXYnKTtcbiAgICAgIHZhciBuYXZUYWJzQ29udGFpbmVyID0gdGhpcy5wcm9wcy5nZXRSZWYoJ25hdlRhYnNDb250YWluZXInKTtcbiAgICAgIHZhciBuYXZOb2RlV0ggPSB0aGlzLmdldFNjcm9sbFdIKG5hdlRhYnNDb250YWluZXIgfHwgbmF2Tm9kZSk7XG4gICAgICAvLyBBZGQgMXB4IHRvIGZpeCBgb2Zmc2V0V2lkdGhgIHdpdGggZGVjaW1hbCBpbiBDaHJvbWUgbm90IGNvcnJlY3QgaGFuZGxlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xMzQyM1xuICAgICAgdmFyIGNvbnRhaW5lcldIID0gdGhpcy5nZXRPZmZzZXRXSCh0aGlzLnByb3BzLmdldFJlZignY29udGFpbmVyJykpICsgMTtcbiAgICAgIHZhciBuYXZXcmFwTm9kZVdIID0gdGhpcy5nZXRPZmZzZXRXSCh0aGlzLnByb3BzLmdldFJlZignbmF2V3JhcCcpKTtcbiAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldDtcblxuICAgICAgdmFyIG1pbk9mZnNldCA9IGNvbnRhaW5lcldIIC0gbmF2Tm9kZVdIO1xuICAgICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgbmV4dCA9IF9zdGF0ZS5uZXh0LFxuICAgICAgICAgIHByZXYgPSBfc3RhdGUucHJldjtcblxuICAgICAgaWYgKG1pbk9mZnNldCA+PSAwKSB7XG4gICAgICAgIG5leHQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZXRPZmZzZXQoMCwgZmFsc2UpO1xuICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgfSBlbHNlIGlmIChtaW5PZmZzZXQgPCBvZmZzZXQpIHtcbiAgICAgICAgbmV4dCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0ID0gZmFsc2U7XG4gICAgICAgIC8vIEZpeCBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy84ODYxXG4gICAgICAgIC8vIFRlc3Qgd2l0aCBjb250YWluZXIgb2Zmc2V0IHdoaWNoIGlzIHN0YWJsZVxuICAgICAgICAvLyBhbmQgc2V0IHRoZSBvZmZzZXQgb2YgdGhlIG5hdiB3cmFwIG5vZGVcbiAgICAgICAgdmFyIHJlYWxPZmZzZXQgPSBuYXZXcmFwTm9kZVdIIC0gbmF2Tm9kZVdIO1xuICAgICAgICB0aGlzLnNldE9mZnNldChyZWFsT2Zmc2V0LCBmYWxzZSk7XG4gICAgICAgIG9mZnNldCA9IHJlYWxPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgIHByZXYgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJldiA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldE5leHQobmV4dCk7XG4gICAgICB0aGlzLnNldFByZXYocHJldik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBuZXh0LFxuICAgICAgICBwcmV2OiBwcmV2XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldE9mZnNldFdIJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T2Zmc2V0V0gobm9kZSkge1xuICAgICAgdmFyIHRhYkJhclBvc2l0aW9uID0gdGhpcy5wcm9wcy50YWJCYXJQb3NpdGlvbjtcbiAgICAgIHZhciBwcm9wID0gJ29mZnNldFdpZHRoJztcbiAgICAgIGlmICh0YWJCYXJQb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHRhYkJhclBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIHByb3AgPSAnb2Zmc2V0SGVpZ2h0JztcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlW3Byb3BdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFNjcm9sbFdIJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Nyb2xsV0gobm9kZSkge1xuICAgICAgdmFyIHRhYkJhclBvc2l0aW9uID0gdGhpcy5wcm9wcy50YWJCYXJQb3NpdGlvbjtcbiAgICAgIHZhciBwcm9wID0gJ3Njcm9sbFdpZHRoJztcbiAgICAgIGlmICh0YWJCYXJQb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHRhYkJhclBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIHByb3AgPSAnc2Nyb2xsSGVpZ2h0JztcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlW3Byb3BdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldE9mZnNldExUJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T2Zmc2V0TFQobm9kZSkge1xuICAgICAgdmFyIHRhYkJhclBvc2l0aW9uID0gdGhpcy5wcm9wcy50YWJCYXJQb3NpdGlvbjtcbiAgICAgIHZhciBwcm9wID0gJ2xlZnQnO1xuICAgICAgaWYgKHRhYkJhclBvc2l0aW9uID09PSAnbGVmdCcgfHwgdGFiQmFyUG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgcHJvcCA9ICd0b3AnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbcHJvcF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0T2Zmc2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T2Zmc2V0KG9mZnNldCkge1xuICAgICAgdmFyIGNoZWNrTmV4dFByZXYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgICAgIHZhciB0YXJnZXQgPSBNYXRoLm1pbigwLCBvZmZzZXQpO1xuICAgICAgaWYgKHRoaXMub2Zmc2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSB0YXJnZXQ7XG4gICAgICAgIHZhciBuYXZPZmZzZXQgPSB7fTtcbiAgICAgICAgdmFyIHRhYkJhclBvc2l0aW9uID0gdGhpcy5wcm9wcy50YWJCYXJQb3NpdGlvbjtcbiAgICAgICAgdmFyIG5hdlN0eWxlID0gdGhpcy5wcm9wcy5nZXRSZWYoJ25hdicpLnN0eWxlO1xuICAgICAgICB2YXIgdHJhbnNmb3JtU3VwcG9ydGVkID0gKDAsIF91dGlscy5pc1RyYW5zZm9ybTNkU3VwcG9ydGVkKShuYXZTdHlsZSk7XG4gICAgICAgIGlmICh0YWJCYXJQb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHRhYkJhclBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgaWYgKHRyYW5zZm9ybVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgbmF2T2Zmc2V0ID0ge1xuICAgICAgICAgICAgICB2YWx1ZTogJ3RyYW5zbGF0ZTNkKDAsJyArIHRhcmdldCArICdweCwwKSdcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5hdk9mZnNldCA9IHtcbiAgICAgICAgICAgICAgbmFtZTogJ3RvcCcsXG4gICAgICAgICAgICAgIHZhbHVlOiB0YXJnZXQgKyAncHgnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2Zvcm1TdXBwb3J0ZWQpIHtcbiAgICAgICAgICBuYXZPZmZzZXQgPSB7XG4gICAgICAgICAgICB2YWx1ZTogJ3RyYW5zbGF0ZTNkKCcgKyB0YXJnZXQgKyAncHgsMCwwKSdcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5hdk9mZnNldCA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdsZWZ0JyxcbiAgICAgICAgICAgIHZhbHVlOiB0YXJnZXQgKyAncHgnXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhbnNmb3JtU3VwcG9ydGVkKSB7XG4gICAgICAgICAgKDAsIF91dGlscy5zZXRUcmFuc2Zvcm0pKG5hdlN0eWxlLCBuYXZPZmZzZXQudmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5hdlN0eWxlW25hdk9mZnNldC5uYW1lXSA9IG5hdk9mZnNldC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hlY2tOZXh0UHJldikge1xuICAgICAgICAgIHRoaXMuc2V0TmV4dFByZXYoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFByZXYnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQcmV2KHYpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlLnByZXYgIT09IHYpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgcHJldjogdlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXROZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TmV4dCh2KSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5uZXh0ICE9PSB2KSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG5leHQ6IHZcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaXNOZXh0UHJldlNob3duJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNOZXh0UHJldlNob3duKHN0YXRlKSB7XG4gICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLm5leHQgfHwgc3RhdGUucHJldjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnN0YXRlLm5leHQgfHwgdGhpcy5zdGF0ZS5wcmV2O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfY2xhc3NuYW1lcywgX2NsYXNzbmFtZXMyLCBfY2xhc3NuYW1lczMsIF9jbGFzc25hbWVzNDtcblxuICAgICAgdmFyIF9zdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIG5leHQgPSBfc3RhdGUyLm5leHQsXG4gICAgICAgICAgcHJldiA9IF9zdGF0ZTIucHJldjtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHByZWZpeENscyA9IF9wcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgICAgc2Nyb2xsQW5pbWF0ZWQgPSBfcHJvcHMuc2Nyb2xsQW5pbWF0ZWQsXG4gICAgICAgICAgbmF2V3JhcHBlciA9IF9wcm9wcy5uYXZXcmFwcGVyLFxuICAgICAgICAgIHByZXZJY29uID0gX3Byb3BzLnByZXZJY29uLFxuICAgICAgICAgIG5leHRJY29uID0gX3Byb3BzLm5leHRJY29uO1xuXG4gICAgICB2YXIgc2hvd05leHRQcmV2ID0gcHJldiB8fCBuZXh0O1xuXG4gICAgICB2YXIgcHJldkJ1dHRvbiA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIHtcbiAgICAgICAgICBvbkNsaWNrOiBwcmV2ID8gdGhpcy5wcmV2IDogbnVsbCxcbiAgICAgICAgICB1bnNlbGVjdGFibGU6ICd1bnNlbGVjdGFibGUnLFxuICAgICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzNlsnZGVmYXVsdCddKSgoX2NsYXNzbmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTNbJ2RlZmF1bHQnXSkoX2NsYXNzbmFtZXMsIHByZWZpeENscyArICctdGFiLXByZXYnLCAxKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTNbJ2RlZmF1bHQnXSkoX2NsYXNzbmFtZXMsIHByZWZpeENscyArICctdGFiLWJ0bi1kaXNhYmxlZCcsICFwcmV2KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTNbJ2RlZmF1bHQnXSkoX2NsYXNzbmFtZXMsIHByZWZpeENscyArICctdGFiLWFycm93LXNob3cnLCBzaG93TmV4dFByZXYpLCBfY2xhc3NuYW1lcykpLFxuICAgICAgICAgIG9uVHJhbnNpdGlvbkVuZDogdGhpcy5wcmV2VHJhbnNpdGlvbkVuZFxuICAgICAgICB9LFxuICAgICAgICBwcmV2SWNvbiB8fCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXRhYi1wcmV2LWljb24nIH0pXG4gICAgICApO1xuXG4gICAgICB2YXIgbmV4dEJ1dHRvbiA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIHtcbiAgICAgICAgICBvbkNsaWNrOiBuZXh0ID8gdGhpcy5uZXh0IDogbnVsbCxcbiAgICAgICAgICB1bnNlbGVjdGFibGU6ICd1bnNlbGVjdGFibGUnLFxuICAgICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzNlsnZGVmYXVsdCddKSgoX2NsYXNzbmFtZXMyID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkzWydkZWZhdWx0J10pKF9jbGFzc25hbWVzMiwgcHJlZml4Q2xzICsgJy10YWItbmV4dCcsIDEpLCAoMCwgX2RlZmluZVByb3BlcnR5M1snZGVmYXVsdCddKShfY2xhc3NuYW1lczIsIHByZWZpeENscyArICctdGFiLWJ0bi1kaXNhYmxlZCcsICFuZXh0KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTNbJ2RlZmF1bHQnXSkoX2NsYXNzbmFtZXMyLCBwcmVmaXhDbHMgKyAnLXRhYi1hcnJvdy1zaG93Jywgc2hvd05leHRQcmV2KSwgX2NsYXNzbmFtZXMyKSlcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dEljb24gfHwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy10YWItbmV4dC1pY29uJyB9KVxuICAgICAgKTtcblxuICAgICAgdmFyIG5hdkNsYXNzTmFtZSA9IHByZWZpeENscyArICctbmF2JztcbiAgICAgIHZhciBuYXZDbGFzc2VzID0gKDAsIF9jbGFzc25hbWVzNlsnZGVmYXVsdCddKSgoX2NsYXNzbmFtZXMzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkzWydkZWZhdWx0J10pKF9jbGFzc25hbWVzMywgbmF2Q2xhc3NOYW1lLCB0cnVlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTNbJ2RlZmF1bHQnXSkoX2NsYXNzbmFtZXMzLCBzY3JvbGxBbmltYXRlZCA/IG5hdkNsYXNzTmFtZSArICctYW5pbWF0ZWQnIDogbmF2Q2xhc3NOYW1lICsgJy1uby1hbmltYXRlZCcsIHRydWUpLCBfY2xhc3NuYW1lczMpKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzNlsnZGVmYXVsdCddKSgoX2NsYXNzbmFtZXM0ID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkzWydkZWZhdWx0J10pKF9jbGFzc25hbWVzNCwgcHJlZml4Q2xzICsgJy1uYXYtY29udGFpbmVyJywgMSksICgwLCBfZGVmaW5lUHJvcGVydHkzWydkZWZhdWx0J10pKF9jbGFzc25hbWVzNCwgcHJlZml4Q2xzICsgJy1uYXYtY29udGFpbmVyLXNjcm9sbGluZycsIHNob3dOZXh0UHJldiksIF9jbGFzc25hbWVzNCkpLFxuICAgICAgICAgIGtleTogJ2NvbnRhaW5lcicsXG4gICAgICAgICAgcmVmOiB0aGlzLnByb3BzLnNhdmVSZWYoJ2NvbnRhaW5lcicpXG4gICAgICAgIH0sXG4gICAgICAgIHByZXZCdXR0b24sXG4gICAgICAgIG5leHRCdXR0b24sXG4gICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLW5hdi13cmFwJywgcmVmOiB0aGlzLnByb3BzLnNhdmVSZWYoJ25hdldyYXAnKSB9LFxuICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1uYXYtc2Nyb2xsJyB9LFxuICAgICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogbmF2Q2xhc3NlcywgcmVmOiB0aGlzLnByb3BzLnNhdmVSZWYoJ25hdicpIH0sXG4gICAgICAgICAgICAgIG5hdldyYXBwZXIodGhpcy5wcm9wcy5jaGlsZHJlbilcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTY3JvbGxhYmxlVGFiQmFyTm9kZTtcbn0oX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNjcm9sbGFibGVUYWJCYXJOb2RlO1xuXG5cblNjcm9sbGFibGVUYWJCYXJOb2RlLnByb3BUeXBlcyA9IHtcbiAgYWN0aXZlS2V5OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgZ2V0UmVmOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc2F2ZVJlZjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLmlzUmVxdWlyZWQsXG4gIHRhYkJhclBvc2l0aW9uOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9uZU9mKFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10pLFxuICBwcmVmaXhDbHM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICBzY3JvbGxBbmltYXRlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBvblByZXZDbGljazogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBvbk5leHRDbGljazogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBuYXZXcmFwcGVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG4gIHByZXZJY29uOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG4gIG5leHRJY29uOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGVcbn07XG5cblNjcm9sbGFibGVUYWJCYXJOb2RlLmRlZmF1bHRQcm9wcyA9IHtcbiAgdGFiQmFyUG9zaXRpb246ICdsZWZ0JyxcbiAgcHJlZml4Q2xzOiAnJyxcbiAgc2Nyb2xsQW5pbWF0ZWQ6IHRydWUsXG4gIG9uUHJldkNsaWNrOiBmdW5jdGlvbiBvblByZXZDbGljaygpIHt9LFxuICBvbk5leHRDbGljazogZnVuY3Rpb24gb25OZXh0Q2xpY2soKSB7fSxcbiAgbmF2V3JhcHBlcjogZnVuY3Rpb24gbmF2V3JhcHBlcihlbGUpIHtcbiAgICByZXR1cm4gZWxlO1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgU2F2ZVJlZiA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzWydkZWZhdWx0J10pKFNhdmVSZWYsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNhdmVSZWYoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazNbJ2RlZmF1bHQnXSkodGhpcywgU2F2ZVJlZik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjNbJ2RlZmF1bHQnXSkodGhpcywgKF9yZWYgPSBTYXZlUmVmLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2F2ZVJlZikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmdldFJlZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX3RoaXNbbmFtZV07XG4gICAgfSwgX3RoaXMuc2F2ZVJlZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICBfdGhpc1tuYW1lXSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zWydkZWZhdWx0J10pKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzWydkZWZhdWx0J10pKFNhdmVSZWYsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4odGhpcy5zYXZlUmVmLCB0aGlzLmdldFJlZik7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTYXZlUmVmO1xufShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU2F2ZVJlZjtcblxuXG5TYXZlUmVmLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuY1xufTtcblxuU2F2ZVJlZi5kZWZhdWx0UHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLmlzRmxleFN1cHBvcnRlZCA9IHZvaWQgMDtcblxudmFyIGlzU3R5bGVTdXBwb3J0ID0gZnVuY3Rpb24gaXNTdHlsZVN1cHBvcnQoc3R5bGVOYW1lKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHZhciBzdHlsZU5hbWVMaXN0ID0gQXJyYXkuaXNBcnJheShzdHlsZU5hbWUpID8gc3R5bGVOYW1lIDogW3N0eWxlTmFtZV07XG4gICAgdmFyIGRvY3VtZW50RWxlbWVudCA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgcmV0dXJuIHN0eWxlTmFtZUxpc3Quc29tZShmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIG5hbWUgaW4gZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxudmFyIGlzRmxleFN1cHBvcnRlZCA9IGlzU3R5bGVTdXBwb3J0KFsnZmxleCcsICd3ZWJraXRGbGV4JywgJ0ZsZXgnLCAnbXNGbGV4J10pO1xuZXhwb3J0cy5pc0ZsZXhTdXBwb3J0ZWQgPSBpc0ZsZXhTdXBwb3J0ZWQ7XG52YXIgX2RlZmF1bHQgPSBpc1N0eWxlU3VwcG9ydDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZUNoZWNrZXIuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxudmFyIF90b29sdGlwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9vbHRpcFwiKSk7XG5cbnZhciBfaWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ljb25cIikpO1xuXG52YXIgX2J1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2J1dHRvblwiKSk7XG5cbnZhciBfTG9jYWxlUmVjZWl2ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9sb2NhbGUtcHJvdmlkZXIvTG9jYWxlUmVjZWl2ZXJcIikpO1xuXG52YXIgX2RlZmF1bHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vbG9jYWxlL2RlZmF1bHRcIikpO1xuXG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIF9fcmVzdCA9IHZvaWQgMCAmJiAodm9pZCAwKS5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcblxuICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICB9XG5cbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5cbnZhciBQb3Bjb25maXJtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3Bjb25maXJtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3Bjb25maXJtKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcGNvbmZpcm0pO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUG9wY29uZmlybSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMub25Db25maXJtID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnNldFZpc2libGUoZmFsc2UsIGUpO1xuXG4gICAgICB2YXIgb25Db25maXJtID0gX3RoaXMucHJvcHMub25Db25maXJtO1xuXG4gICAgICBpZiAob25Db25maXJtKSB7XG4gICAgICAgIG9uQ29uZmlybS5jYWxsKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25DYW5jZWwgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMuc2V0VmlzaWJsZShmYWxzZSwgZSk7XG5cbiAgICAgIHZhciBvbkNhbmNlbCA9IF90aGlzLnByb3BzLm9uQ2FuY2VsO1xuXG4gICAgICBpZiAob25DYW5jZWwpIHtcbiAgICAgICAgb25DYW5jZWwuY2FsbChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uVmlzaWJsZUNoYW5nZSA9IGZ1bmN0aW9uICh2aXNpYmxlKSB7XG4gICAgICB2YXIgZGlzYWJsZWQgPSBfdGhpcy5wcm9wcy5kaXNhYmxlZDtcblxuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0VmlzaWJsZSh2aXNpYmxlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2F2ZVRvb2x0aXAgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMudG9vbHRpcCA9IG5vZGU7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlck92ZXJsYXkgPSBmdW5jdGlvbiAocHJlZml4Q2xzLCBwb3Bjb25maXJtTG9jYWxlKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBva0J1dHRvblByb3BzID0gX3RoaXMkcHJvcHMub2tCdXR0b25Qcm9wcyxcbiAgICAgICAgICBjYW5jZWxCdXR0b25Qcm9wcyA9IF90aGlzJHByb3BzLmNhbmNlbEJ1dHRvblByb3BzLFxuICAgICAgICAgIHRpdGxlID0gX3RoaXMkcHJvcHMudGl0bGUsXG4gICAgICAgICAgY2FuY2VsVGV4dCA9IF90aGlzJHByb3BzLmNhbmNlbFRleHQsXG4gICAgICAgICAgb2tUZXh0ID0gX3RoaXMkcHJvcHMub2tUZXh0LFxuICAgICAgICAgIG9rVHlwZSA9IF90aGlzJHByb3BzLm9rVHlwZSxcbiAgICAgICAgICBpY29uID0gX3RoaXMkcHJvcHMuaWNvbjtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaW5uZXItY29udGVudFwiKVxuICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1tZXNzYWdlXCIpXG4gICAgICB9LCBpY29uLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW1lc3NhZ2UtdGl0bGVcIilcbiAgICAgIH0sIHRpdGxlKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItYnV0dG9uc1wiKVxuICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChfYnV0dG9uW1wiZGVmYXVsdFwiXSwgX2V4dGVuZHMoe1xuICAgICAgICBvbkNsaWNrOiBfdGhpcy5vbkNhbmNlbCxcbiAgICAgICAgc2l6ZTogXCJzbWFsbFwiXG4gICAgICB9LCBjYW5jZWxCdXR0b25Qcm9wcyksIGNhbmNlbFRleHQgfHwgcG9wY29uZmlybUxvY2FsZS5jYW5jZWxUZXh0KSwgUmVhY3QuY3JlYXRlRWxlbWVudChfYnV0dG9uW1wiZGVmYXVsdFwiXSwgX2V4dGVuZHMoe1xuICAgICAgICBvbkNsaWNrOiBfdGhpcy5vbkNvbmZpcm0sXG4gICAgICAgIHR5cGU6IG9rVHlwZSxcbiAgICAgICAgc2l6ZTogXCJzbWFsbFwiXG4gICAgICB9LCBva0J1dHRvblByb3BzKSwgb2tUZXh0IHx8IHBvcGNvbmZpcm1Mb2NhbGUub2tUZXh0KSkpKTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyQ29uZmlybSA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgZ2V0UHJlZml4Q2xzID0gX3JlZi5nZXRQcmVmaXhDbHM7XG5cbiAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGN1c3RvbWl6ZVByZWZpeENscyA9IF9hLnByZWZpeENscyxcbiAgICAgICAgICBwbGFjZW1lbnQgPSBfYS5wbGFjZW1lbnQsXG4gICAgICAgICAgcmVzdFByb3BzID0gX19yZXN0KF9hLCBbXCJwcmVmaXhDbHNcIiwgXCJwbGFjZW1lbnRcIl0pO1xuXG4gICAgICB2YXIgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdwb3BvdmVyJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgICAgIHZhciBvdmVybGF5ID0gUmVhY3QuY3JlYXRlRWxlbWVudChfTG9jYWxlUmVjZWl2ZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIGNvbXBvbmVudE5hbWU6IFwiUG9wY29uZmlybVwiLFxuICAgICAgICBkZWZhdWx0TG9jYWxlOiBfZGVmYXVsdDJbXCJkZWZhdWx0XCJdLlBvcGNvbmZpcm1cbiAgICAgIH0sIGZ1bmN0aW9uIChwb3Bjb25maXJtTG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXJPdmVybGF5KHByZWZpeENscywgcG9wY29uZmlybUxvY2FsZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF90b29sdGlwW1wiZGVmYXVsdFwiXSwgX2V4dGVuZHMoe30sIHJlc3RQcm9wcywge1xuICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICAgIG9uVmlzaWJsZUNoYW5nZTogX3RoaXMub25WaXNpYmxlQ2hhbmdlLFxuICAgICAgICB2aXNpYmxlOiBfdGhpcy5zdGF0ZS52aXNpYmxlLFxuICAgICAgICBvdmVybGF5OiBvdmVybGF5LFxuICAgICAgICByZWY6IF90aGlzLnNhdmVUb29sdGlwXG4gICAgICB9KSk7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdmlzaWJsZTogcHJvcHMudmlzaWJsZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvcGNvbmZpcm0sIFt7XG4gICAga2V5OiBcImdldFBvcHVwRG9tTm9kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQb3B1cERvbU5vZGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b29sdGlwLmdldFBvcHVwRG9tTm9kZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRWaXNpYmxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZpc2libGUodmlzaWJsZSwgZSkge1xuICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcblxuICAgICAgaWYgKCEoJ3Zpc2libGUnIGluIHByb3BzKSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB2aXNpYmxlOiB2aXNpYmxlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgb25WaXNpYmxlQ2hhbmdlID0gcHJvcHMub25WaXNpYmxlQ2hhbmdlO1xuXG4gICAgICBpZiAob25WaXNpYmxlQ2hhbmdlKSB7XG4gICAgICAgIG9uVmlzaWJsZUNoYW5nZSh2aXNpYmxlLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb25maWdQcm92aWRlci5Db25maWdDb25zdW1lciwgbnVsbCwgdGhpcy5yZW5kZXJDb25maXJtKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKCd2aXNpYmxlJyBpbiBuZXh0UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2aXNpYmxlOiBuZXh0UHJvcHMudmlzaWJsZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoJ2RlZmF1bHRWaXNpYmxlJyBpbiBuZXh0UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2aXNpYmxlOiBuZXh0UHJvcHMuZGVmYXVsdFZpc2libGVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBvcGNvbmZpcm07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblBvcGNvbmZpcm0uZGVmYXVsdFByb3BzID0ge1xuICB0cmFuc2l0aW9uTmFtZTogJ3pvb20tYmlnJyxcbiAgcGxhY2VtZW50OiAndG9wJyxcbiAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgb2tUeXBlOiAncHJpbWFyeScsXG4gIGljb246IFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2ljb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgdHlwZTogXCJleGNsYW1hdGlvbi1jaXJjbGVcIixcbiAgICB0aGVtZTogXCJmaWxsZWRcIlxuICB9KSxcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xuKDAsIF9yZWFjdExpZmVjeWNsZXNDb21wYXQucG9seWZpbGwpKFBvcGNvbmZpcm0pO1xudmFyIF9kZWZhdWx0ID0gUG9wY29uZmlybTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX2NvbmZpZ1Byb3ZpZGVyID0gcmVxdWlyZShcIi4uL2NvbmZpZy1wcm92aWRlclwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgX19yZXN0ID0gdm9pZCAwICYmICh2b2lkIDApLl9fcmVzdCB8fCBmdW5jdGlvbiAocywgZSkge1xuICB2YXIgdCA9IHt9O1xuXG4gIGZvciAodmFyIHAgaW4gcykge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMCkgdFtwXSA9IHNbcF07XG4gIH1cblxuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcblxudmFyIERpdmlkZXIgPSBmdW5jdGlvbiBEaXZpZGVyKHByb3BzKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9jb25maWdQcm92aWRlci5Db25maWdDb25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICB2YXIgZ2V0UHJlZml4Q2xzID0gX3JlZi5nZXRQcmVmaXhDbHM7XG5cbiAgICB2YXIgY3VzdG9taXplUHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ2hvcml6b250YWwnIDogX3Byb3BzJHR5cGUsXG4gICAgICAgIF9wcm9wcyRvcmllbnRhdGlvbiA9IHByb3BzLm9yaWVudGF0aW9uLFxuICAgICAgICBvcmllbnRhdGlvbiA9IF9wcm9wcyRvcmllbnRhdGlvbiA9PT0gdm9pZCAwID8gJ2NlbnRlcicgOiBfcHJvcHMkb3JpZW50YXRpb24sXG4gICAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgZGFzaGVkID0gcHJvcHMuZGFzaGVkLFxuICAgICAgICByZXN0UHJvcHMgPSBfX3Jlc3QocHJvcHMsIFtcInByZWZpeENsc1wiLCBcInR5cGVcIiwgXCJvcmllbnRhdGlvblwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCIsIFwiZGFzaGVkXCJdKTtcblxuICAgIHZhciBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2RpdmlkZXInLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICAgIHZhciBvcmllbnRhdGlvblByZWZpeCA9IG9yaWVudGF0aW9uLmxlbmd0aCA+IDAgPyBcIi1cIi5jb25jYXQob3JpZW50YXRpb24pIDogb3JpZW50YXRpb247XG4gICAgdmFyIGNsYXNzU3RyaW5nID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoY2xhc3NOYW1lLCBwcmVmaXhDbHMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItXCIpLmNvbmNhdCh0eXBlKSwgKF9jbGFzc05hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi13aXRoLXRleHRcIikuY29uY2F0KG9yaWVudGF0aW9uUHJlZml4KSwgY2hpbGRyZW4pLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZGFzaGVkXCIpLCAhIWRhc2hlZCksIF9jbGFzc05hbWVzKSk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc1N0cmluZ1xuICAgIH0sIHJlc3RQcm9wcywge1xuICAgICAgcm9sZTogXCJzZXBhcmF0b3JcIlxuICAgIH0pLCBjaGlsZHJlbiAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaW5uZXItdGV4dFwiKVxuICAgIH0sIGNoaWxkcmVuKSk7XG4gIH0pO1xufTtcblxudmFyIF9kZWZhdWx0ID0gRGl2aWRlcjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiLi4vLi4vc3R5bGUvaW5kZXguY3NzXCIpO1xuXG5yZXF1aXJlKFwiLi9pbmRleC5jc3NcIik7XG5cbnJlcXVpcmUoXCIuLi8uLi9lbXB0eS9zdHlsZS9jc3NcIik7XG5cbnJlcXVpcmUoXCIuLi8uLi9yYWRpby9zdHlsZS9jc3NcIik7XG5cbnJlcXVpcmUoXCIuLi8uLi9jaGVja2JveC9zdHlsZS9jc3NcIik7XG5cbnJlcXVpcmUoXCIuLi8uLi9kcm9wZG93bi9zdHlsZS9jc3NcIik7XG5cbnJlcXVpcmUoXCIuLi8uLi9zcGluL3N0eWxlL2Nzc1wiKTtcblxucmVxdWlyZShcIi4uLy4uL3BhZ2luYXRpb24vc3R5bGUvY3NzXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3NzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCIuLi8uLi9zdHlsZS9pbmRleC5jc3NcIik7XG5cbnJlcXVpcmUoXCIuL2luZGV4LmNzc1wiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNzcy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiLi4vLi4vc3R5bGUvaW5kZXguY3NzXCIpO1xuXG5yZXF1aXJlKFwiLi9pbmRleC5jc3NcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcIi4uLy4uL3N0eWxlL2luZGV4LmNzc1wiKTtcblxucmVxdWlyZShcIi4vaW5kZXguY3NzXCIpO1xuXG5yZXF1aXJlKFwiLi4vLi4vc2VsZWN0L3N0eWxlL2Nzc1wiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNzcy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiLi4vLi4vc3R5bGUvaW5kZXguY3NzXCIpO1xuXG5yZXF1aXJlKFwiLi9pbmRleC5jc3NcIik7XG5cbnJlcXVpcmUoXCIuLi8uLi9lbXB0eS9zdHlsZS9jc3NcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcIi4uLy4uL3N0eWxlL2luZGV4LmNzc1wiKTtcblxucmVxdWlyZShcIi4vaW5kZXguY3NzXCIpO1xuXG5yZXF1aXJlKFwiLi4vLi4vdGFicy9zdHlsZS9jc3NcIik7XG5cbnJlcXVpcmUoXCIuLi8uLi9yb3cvc3R5bGUvY3NzXCIpO1xuXG5yZXF1aXJlKFwiLi4vLi4vY29sL3N0eWxlL2Nzc1wiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNzcy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiLi4vLi4vc3R5bGUvaW5kZXguY3NzXCIpO1xuXG5yZXF1aXJlKFwiLi9pbmRleC5jc3NcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcIi4uLy4uL3N0eWxlL2luZGV4LmNzc1wiKTtcblxucmVxdWlyZShcIi4uLy4uL3BvcG92ZXIvc3R5bGUvY3NzXCIpO1xuXG5yZXF1aXJlKFwiLi4vLi4vYnV0dG9uL3N0eWxlL2Nzc1wiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNzcy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiLi4vLi4vc3R5bGUvaW5kZXguY3NzXCIpO1xuXG5yZXF1aXJlKFwiLi9pbmRleC5jc3NcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcIi4uLy4uL3N0eWxlL2luZGV4LmNzc1wiKTtcblxucmVxdWlyZShcIi4vaW5kZXguY3NzXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3NzLmpzLm1hcFxuIiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5cbnZhciBzY3JvbGxiYXJWZXJ0aWNhbFNpemUgPSB2b2lkIDA7XG52YXIgc2Nyb2xsYmFySG9yaXpvbnRhbFNpemUgPSB2b2lkIDA7XG5cbi8vIE1lYXN1cmUgc2Nyb2xsYmFyIHdpZHRoIGZvciBwYWRkaW5nIGJvZHkgZHVyaW5nIG1vZGFsIHNob3cvaGlkZVxudmFyIHNjcm9sbGJhck1lYXN1cmUgPSB7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6ICctOTk5OXB4JyxcbiAgd2lkdGg6ICc1MHB4JyxcbiAgaGVpZ2h0OiAnNTBweCdcbn07XG5cbi8vIFRoaXMgY29uc3QgaXMgdXNlZCBmb3IgY29sZ3JvdXAuY29sIGludGVybmFsIHByb3BzLiBBbmQgc2hvdWxkIG5vdCBwcm92aWRlcyB0byB1c2VyLlxuZXhwb3J0IHZhciBJTlRFUk5BTF9DT0xfREVGSU5FID0gJ1JDX1RBQkxFX0lOVEVSTkFMX0NPTF9ERUZJTkUnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWVhc3VyZVNjcm9sbGJhcihfcmVmKSB7XG4gIHZhciBfcmVmJGRpcmVjdGlvbiA9IF9yZWYuZGlyZWN0aW9uLFxuICAgICAgZGlyZWN0aW9uID0gX3JlZiRkaXJlY3Rpb24gPT09IHVuZGVmaW5lZCA/ICd2ZXJ0aWNhbCcgOiBfcmVmJGRpcmVjdGlvbixcbiAgICAgIHByZWZpeENscyA9IF9yZWYucHJlZml4Q2xzO1xuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgdmFyIGlzVmVydGljYWwgPSBkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XG4gIGlmIChpc1ZlcnRpY2FsICYmIHNjcm9sbGJhclZlcnRpY2FsU2l6ZSkge1xuICAgIHJldHVybiBzY3JvbGxiYXJWZXJ0aWNhbFNpemU7XG4gIH0gZWxzZSBpZiAoIWlzVmVydGljYWwgJiYgc2Nyb2xsYmFySG9yaXpvbnRhbFNpemUpIHtcbiAgICByZXR1cm4gc2Nyb2xsYmFySG9yaXpvbnRhbFNpemU7XG4gIH1cbiAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBPYmplY3Qua2V5cyhzY3JvbGxiYXJNZWFzdXJlKS5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQcm9wKSB7XG4gICAgc2Nyb2xsRGl2LnN0eWxlW3Njcm9sbFByb3BdID0gc2Nyb2xsYmFyTWVhc3VyZVtzY3JvbGxQcm9wXTtcbiAgfSk7XG4gIC8vIGFwcGx5IGhpZGUgc2Nyb2xsYmFyIGNsYXNzTmFtZSBhaGVhZFxuICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gcHJlZml4Q2xzICsgJy1oaWRlLXNjcm9sbGJhciBzY3JvbGwtZGl2LWFwcGVuZC10by1ib2R5JztcbiAgLy8gQXBwZW5kIHJlbGF0ZWQgb3ZlcmZsb3cgc3R5bGVcbiAgaWYgKGlzVmVydGljYWwpIHtcbiAgICBzY3JvbGxEaXYuc3R5bGUub3ZlcmZsb3dZID0gJ3Njcm9sbCc7XG4gIH0gZWxzZSB7XG4gICAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93WCA9ICdzY3JvbGwnO1xuICB9XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgdmFyIHNpemUgPSAwO1xuICBpZiAoaXNWZXJ0aWNhbCkge1xuICAgIHNpemUgPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gICAgc2Nyb2xsYmFyVmVydGljYWxTaXplID0gc2l6ZTtcbiAgfSBlbHNlIHtcbiAgICBzaXplID0gc2Nyb2xsRGl2Lm9mZnNldEhlaWdodCAtIHNjcm9sbERpdi5jbGllbnRIZWlnaHQ7XG4gICAgc2Nyb2xsYmFySG9yaXpvbnRhbFNpemUgPSBzaXplO1xuICB9XG5cbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICByZXR1cm4gc2l6ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICB2YXIgdGltZW91dCA9IHZvaWQgMDtcbiAgZnVuY3Rpb24gZGVib3VuY2VGdW5jKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAvLyBodHRwczovL2ZiLm1lL3JlYWN0LWV2ZW50LXBvb2xpbmdcbiAgICBpZiAoYXJnc1swXSAmJiBhcmdzWzBdLnBlcnNpc3QpIHtcbiAgICAgIGFyZ3NbMF0ucGVyc2lzdCgpO1xuICAgIH1cbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiBsYXRlcigpIHtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgaWYgKGNhbGxOb3cpIHtcbiAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfVxuICB9XG4gIGRlYm91bmNlRnVuYy5jYW5jZWwgPSBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGRlYm91bmNlRnVuYztcbn1cblxudmFyIHdhcm5lZCA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIHdhcm5pbmdPbmNlKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gIGlmICghd2FybmVkW2Zvcm1hdF0pIHtcbiAgICB3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKTtcbiAgICB3YXJuZWRbZm9ybWF0XSA9ICFjb25kaXRpb247XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgaXRlbSkge1xuICB2YXIgaW5kZXggPSBhcnJheS5pbmRleE9mKGl0ZW0pO1xuICB2YXIgZnJvbnQgPSBhcnJheS5zbGljZSgwLCBpbmRleCk7XG4gIHZhciBsYXN0ID0gYXJyYXkuc2xpY2UoaW5kZXggKyAxLCBhcnJheS5sZW5ndGgpO1xuICByZXR1cm4gZnJvbnQuY29uY2F0KGxhc3QpO1xufVxuXG4vKipcbiAqIFJldHVybnMgb25seSBkYXRhLSBhbmQgYXJpYS0ga2V5L3ZhbHVlIHBhaXJzXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGFBbmRBcmlhUHJvcHMocHJvcHMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSkge1xuICAgIGlmIChrZXkuc3Vic3RyKDAsIDUpID09PSAnZGF0YS0nIHx8IGtleS5zdWJzdHIoMCwgNSkgPT09ICdhcmlhLScpIHtcbiAgICAgIG1lbW9ba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXknO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnZhciBDb2x1bW5NYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb2x1bW5NYW5hZ2VyKGNvbHVtbnMsIGVsZW1lbnRzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbHVtbk1hbmFnZXIpO1xuXG4gICAgdGhpcy5fY2FjaGVkID0ge307XG5cbiAgICB0aGlzLmNvbHVtbnMgPSBjb2x1bW5zIHx8IHRoaXMubm9ybWFsaXplKGVsZW1lbnRzKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb2x1bW5NYW5hZ2VyLCBbe1xuICAgIGtleTogJ2lzQW55Q29sdW1uc0ZpeGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNBbnlDb2x1bW5zRml4ZWQoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGUoJ2lzQW55Q29sdW1uc0ZpeGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuY29sdW1ucy5zb21lKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICByZXR1cm4gISFjb2x1bW4uZml4ZWQ7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaXNBbnlDb2x1bW5zTGVmdEZpeGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNBbnlDb2x1bW5zTGVmdEZpeGVkKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYWNoZSgnaXNBbnlDb2x1bW5zTGVmdEZpeGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLmNvbHVtbnMuc29tZShmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbHVtbi5maXhlZCA9PT0gJ2xlZnQnIHx8IGNvbHVtbi5maXhlZCA9PT0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpc0FueUNvbHVtbnNSaWdodEZpeGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNBbnlDb2x1bW5zUmlnaHRGaXhlZCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGUoJ2lzQW55Q29sdW1uc1JpZ2h0Rml4ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMuY29sdW1ucy5zb21lKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICByZXR1cm4gY29sdW1uLmZpeGVkID09PSAncmlnaHQnO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xlZnRDb2x1bW5zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVmdENvbHVtbnMoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlKCdsZWZ0Q29sdW1ucycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNC5ncm91cGVkQ29sdW1ucygpLmZpbHRlcihmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbHVtbi5maXhlZCA9PT0gJ2xlZnQnIHx8IGNvbHVtbi5maXhlZCA9PT0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyaWdodENvbHVtbnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByaWdodENvbHVtbnMoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlKCdyaWdodENvbHVtbnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczUuZ3JvdXBlZENvbHVtbnMoKS5maWx0ZXIoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgIHJldHVybiBjb2x1bW4uZml4ZWQgPT09ICdyaWdodCc7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGVhZkNvbHVtbnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsZWFmQ29sdW1ucygpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGUoJ2xlYWZDb2x1bW5zJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXM2Ll9sZWFmQ29sdW1ucyhfdGhpczYuY29sdW1ucyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsZWZ0TGVhZkNvbHVtbnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsZWZ0TGVhZkNvbHVtbnMoKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlKCdsZWZ0TGVhZkNvbHVtbnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczcuX2xlYWZDb2x1bW5zKF90aGlzNy5sZWZ0Q29sdW1ucygpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JpZ2h0TGVhZkNvbHVtbnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByaWdodExlYWZDb2x1bW5zKCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYWNoZSgncmlnaHRMZWFmQ29sdW1ucycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzOC5fbGVhZkNvbHVtbnMoX3RoaXM4LnJpZ2h0Q29sdW1ucygpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGFkZCBhcHByb3ByaWF0ZSByb3dzcGFuIGFuZCBjb2xzcGFuIHRvIGNvbHVtblxuXG4gIH0sIHtcbiAgICBrZXk6ICdncm91cGVkQ29sdW1ucycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwZWRDb2x1bW5zKCkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYWNoZSgnZ3JvdXBlZENvbHVtbnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfZ3JvdXBDb2x1bW5zID0gZnVuY3Rpb24gX2dyb3VwQ29sdW1ucyhjb2x1bW5zKSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRSb3cgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgICAgICAgdmFyIHBhcmVudENvbHVtbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICAgICAgdmFyIHJvd3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IFtdO1xuXG4gICAgICAgICAgLy8gdHJhY2sgaG93IG1hbnkgcm93cyB3ZSBnb3RcbiAgICAgICAgICByb3dzW2N1cnJlbnRSb3ddID0gcm93c1tjdXJyZW50Um93XSB8fCBbXTtcbiAgICAgICAgICB2YXIgZ3JvdXBlZCA9IFtdO1xuICAgICAgICAgIHZhciBzZXRSb3dTcGFuID0gZnVuY3Rpb24gc2V0Um93U3Bhbihjb2x1bW4pIHtcbiAgICAgICAgICAgIHZhciByb3dTcGFuID0gcm93cy5sZW5ndGggLSBjdXJyZW50Um93O1xuICAgICAgICAgICAgaWYgKGNvbHVtbiAmJiAhY29sdW1uLmNoaWxkcmVuICYmIC8vIHBhcmVudCBjb2x1bW5zIGFyZSBzdXBwb3NlZCB0byBiZSBvbmUgcm93XG4gICAgICAgICAgICByb3dTcGFuID4gMSAmJiAoIWNvbHVtbi5yb3dTcGFuIHx8IGNvbHVtbi5yb3dTcGFuIDwgcm93U3BhbikpIHtcbiAgICAgICAgICAgICAgY29sdW1uLnJvd1NwYW4gPSByb3dTcGFuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4sIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgbmV3Q29sdW1uID0gX2V4dGVuZHMoe30sIGNvbHVtbik7XG4gICAgICAgICAgICByb3dzW2N1cnJlbnRSb3ddLnB1c2gobmV3Q29sdW1uKTtcbiAgICAgICAgICAgIHBhcmVudENvbHVtbi5jb2xTcGFuID0gcGFyZW50Q29sdW1uLmNvbFNwYW4gfHwgMDtcbiAgICAgICAgICAgIGlmIChuZXdDb2x1bW4uY2hpbGRyZW4gJiYgbmV3Q29sdW1uLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgbmV3Q29sdW1uLmNoaWxkcmVuID0gX2dyb3VwQ29sdW1ucyhuZXdDb2x1bW4uY2hpbGRyZW4sIGN1cnJlbnRSb3cgKyAxLCBuZXdDb2x1bW4sIHJvd3MpO1xuICAgICAgICAgICAgICBwYXJlbnRDb2x1bW4uY29sU3BhbiArPSBuZXdDb2x1bW4uY29sU3BhbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcmVudENvbHVtbi5jb2xTcGFuKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB1cGRhdGUgcm93c3BhbiB0byBhbGwgc2FtZSByb3cgY29sdW1uc1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3dzW2N1cnJlbnRSb3ddLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgICAgICAgICBzZXRSb3dTcGFuKHJvd3NbY3VycmVudFJvd11baV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbGFzdCBjb2x1bW4sIHVwZGF0ZSByb3dzcGFuIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBpZiAoaW5kZXggKyAxID09PSBjb2x1bW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgICBzZXRSb3dTcGFuKG5ld0NvbHVtbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBncm91cGVkLnB1c2gobmV3Q29sdW1uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gZ3JvdXBlZDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF9ncm91cENvbHVtbnMoX3RoaXM5LmNvbHVtbnMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbm9ybWFsaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplKGVsZW1lbnRzKSB7XG4gICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XG5cbiAgICAgIHZhciBjb2x1bW5zID0gW107XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb2x1bW4gPSBfZXh0ZW5kcyh7fSwgZWxlbWVudC5wcm9wcyk7XG4gICAgICAgIGlmIChlbGVtZW50LmtleSkge1xuICAgICAgICAgIGNvbHVtbi5rZXkgPSBlbGVtZW50LmtleTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudC50eXBlLmlzVGFibGVDb2x1bW5Hcm91cCkge1xuICAgICAgICAgIGNvbHVtbi5jaGlsZHJlbiA9IF90aGlzMTAubm9ybWFsaXplKGNvbHVtbi5jaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgY29sdW1ucy5wdXNoKGNvbHVtbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjb2x1bW5zO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Jlc2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoY29sdW1ucywgZWxlbWVudHMpIHtcbiAgICAgIHRoaXMuY29sdW1ucyA9IGNvbHVtbnMgfHwgdGhpcy5ub3JtYWxpemUoZWxlbWVudHMpO1xuICAgICAgdGhpcy5fY2FjaGVkID0ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2NhY2hlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NhY2hlKG5hbWUsIGZuKSB7XG4gICAgICBpZiAobmFtZSBpbiB0aGlzLl9jYWNoZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFtuYW1lXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NhY2hlZFtuYW1lXSA9IGZuKCk7XG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGVkW25hbWVdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19sZWFmQ29sdW1ucycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9sZWFmQ29sdW1ucyhjb2x1bW5zKSB7XG4gICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICAgIHZhciBsZWFmQ29sdW1ucyA9IFtdO1xuICAgICAgY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgaWYgKCFjb2x1bW4uY2hpbGRyZW4pIHtcbiAgICAgICAgICBsZWFmQ29sdW1ucy5wdXNoKGNvbHVtbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGVhZkNvbHVtbnMucHVzaC5hcHBseShsZWFmQ29sdW1ucywgX3RvQ29uc3VtYWJsZUFycmF5KF90aGlzMTEuX2xlYWZDb2x1bW5zKGNvbHVtbi5jaGlsZHJlbikpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbGVhZkNvbHVtbnM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbHVtbk1hbmFnZXI7XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IENvbHVtbk1hbmFnZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgSU5URVJOQUxfQ09MX0RFRklORSB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb2xHcm91cChwcm9wcywgX3JlZikge1xuICB2YXIgdGFibGUgPSBfcmVmLnRhYmxlO1xuICB2YXIgX3RhYmxlJHByb3BzID0gdGFibGUucHJvcHMsXG4gICAgICBwcmVmaXhDbHMgPSBfdGFibGUkcHJvcHMucHJlZml4Q2xzLFxuICAgICAgZXhwYW5kSWNvbkFzQ2VsbCA9IF90YWJsZSRwcm9wcy5leHBhbmRJY29uQXNDZWxsO1xuICB2YXIgZml4ZWQgPSBwcm9wcy5maXhlZDtcblxuXG4gIHZhciBjb2xzID0gW107XG5cbiAgaWYgKGV4cGFuZEljb25Bc0NlbGwgJiYgZml4ZWQgIT09ICdyaWdodCcpIHtcbiAgICBjb2xzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudCgnY29sJywgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctZXhwYW5kLWljb24tY29sJywga2V5OiAncmMtdGFibGUtZXhwYW5kLWljb24tY29sJyB9KSk7XG4gIH1cblxuICB2YXIgbGVhZkNvbHVtbnMgPSB2b2lkIDA7XG5cbiAgaWYgKGZpeGVkID09PSAnbGVmdCcpIHtcbiAgICBsZWFmQ29sdW1ucyA9IHRhYmxlLmNvbHVtbk1hbmFnZXIubGVmdExlYWZDb2x1bW5zKCk7XG4gIH0gZWxzZSBpZiAoZml4ZWQgPT09ICdyaWdodCcpIHtcbiAgICBsZWFmQ29sdW1ucyA9IHRhYmxlLmNvbHVtbk1hbmFnZXIucmlnaHRMZWFmQ29sdW1ucygpO1xuICB9IGVsc2Uge1xuICAgIGxlYWZDb2x1bW5zID0gdGFibGUuY29sdW1uTWFuYWdlci5sZWFmQ29sdW1ucygpO1xuICB9XG4gIGNvbHMgPSBjb2xzLmNvbmNhdChsZWFmQ29sdW1ucy5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIGtleSA9IF9yZWYyLmtleSxcbiAgICAgICAgZGF0YUluZGV4ID0gX3JlZjIuZGF0YUluZGV4LFxuICAgICAgICB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBhZGRpdGlvbmFsUHJvcHMgPSBfcmVmMltJTlRFUk5BTF9DT0xfREVGSU5FXTtcblxuICAgIHZhciBtZXJnZWRLZXkgPSBrZXkgIT09IHVuZGVmaW5lZCA/IGtleSA6IGRhdGFJbmRleDtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnY29sJywgX2V4dGVuZHMoeyBrZXk6IG1lcmdlZEtleSwgc3R5bGU6IHsgd2lkdGg6IHdpZHRoLCBtaW5XaWR0aDogd2lkdGggfSB9LCBhZGRpdGlvbmFsUHJvcHMpKTtcbiAgfSkpO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICdjb2xncm91cCcsXG4gICAgbnVsbCxcbiAgICBjb2xzXG4gICk7XG59XG5cbkNvbEdyb3VwLnByb3BUeXBlcyA9IHtcbiAgZml4ZWQ6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbkNvbEdyb3VwLmNvbnRleHRUeXBlcyA9IHtcbiAgdGFibGU6IFByb3BUeXBlcy5hbnlcbn07IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ21pbmktc3RvcmUnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmZ1bmN0aW9uIFRhYmxlSGVhZGVyUm93KF9yZWYpIHtcbiAgdmFyIHJvdyA9IF9yZWYucm93LFxuICAgICAgaW5kZXggPSBfcmVmLmluZGV4LFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQsXG4gICAgICBjb21wb25lbnRzID0gX3JlZi5jb21wb25lbnRzLFxuICAgICAgb25IZWFkZXJSb3cgPSBfcmVmLm9uSGVhZGVyUm93LFxuICAgICAgcHJlZml4Q2xzID0gX3JlZi5wcmVmaXhDbHM7XG5cbiAgdmFyIEhlYWRlclJvdyA9IGNvbXBvbmVudHMuaGVhZGVyLnJvdztcbiAgdmFyIEhlYWRlckNlbGwgPSBjb21wb25lbnRzLmhlYWRlci5jZWxsO1xuICB2YXIgcm93UHJvcHMgPSBvbkhlYWRlclJvdyhyb3cubWFwKGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgcmV0dXJuIGNlbGwuY29sdW1uO1xuICB9KSwgaW5kZXgpO1xuICB2YXIgY3VzdG9tU3R5bGUgPSByb3dQcm9wcyA/IHJvd1Byb3BzLnN0eWxlIDoge307XG4gIHZhciBzdHlsZSA9IF9leHRlbmRzKHsgaGVpZ2h0OiBoZWlnaHQgfSwgY3VzdG9tU3R5bGUpO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIEhlYWRlclJvdyxcbiAgICBfZXh0ZW5kcyh7fSwgcm93UHJvcHMsIHsgc3R5bGU6IHN0eWxlIH0pLFxuICAgIHJvdy5tYXAoZnVuY3Rpb24gKGNlbGwsIGkpIHtcbiAgICAgIHZhciBjb2x1bW4gPSBjZWxsLmNvbHVtbixcbiAgICAgICAgICBjZWxsUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoY2VsbCwgWydjb2x1bW4nXSk7XG5cbiAgICAgIHZhciBjdXN0b21Qcm9wcyA9IGNvbHVtbi5vbkhlYWRlckNlbGwgPyBjb2x1bW4ub25IZWFkZXJDZWxsKGNvbHVtbikgOiB7fTtcbiAgICAgIGlmIChjb2x1bW4uYWxpZ24pIHtcbiAgICAgICAgY3VzdG9tUHJvcHMuc3R5bGUgPSBfZXh0ZW5kcyh7fSwgY3VzdG9tUHJvcHMuc3R5bGUsIHsgdGV4dEFsaWduOiBjb2x1bW4uYWxpZ24gfSk7XG4gICAgICAgIGN1c3RvbVByb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZXMoY3VzdG9tUHJvcHMuY2xhc3NOYW1lLCBjb2x1bW4uY2xhc3NOYW1lLCBfZGVmaW5lUHJvcGVydHkoe30sIHByZWZpeENscyArICctYWxpZ24tJyArIGNvbHVtbi5hbGlnbiwgISFjb2x1bW4uYWxpZ24pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEhlYWRlckNlbGwsIF9leHRlbmRzKHt9LCBjZWxsUHJvcHMsIGN1c3RvbVByb3BzLCB7IGtleTogY29sdW1uLmtleSB8fCBjb2x1bW4uZGF0YUluZGV4IHx8IGkgfSkpO1xuICAgIH0pXG4gICk7XG59XG5cblRhYmxlSGVhZGVyUm93LnByb3BUeXBlcyA9IHtcbiAgcm93OiBQcm9wVHlwZXMuYXJyYXksXG4gIGluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBoZWlnaHQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgY29tcG9uZW50czogUHJvcFR5cGVzLmFueSxcbiAgb25IZWFkZXJSb3c6IFByb3BUeXBlcy5mdW5jLFxuICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbmZ1bmN0aW9uIGdldFJvd0hlaWdodChzdGF0ZSwgcHJvcHMpIHtcbiAgdmFyIGZpeGVkQ29sdW1uc0hlYWRSb3dzSGVpZ2h0ID0gc3RhdGUuZml4ZWRDb2x1bW5zSGVhZFJvd3NIZWlnaHQ7XG4gIHZhciBjb2x1bW5zID0gcHJvcHMuY29sdW1ucyxcbiAgICAgIHJvd3MgPSBwcm9wcy5yb3dzLFxuICAgICAgZml4ZWQgPSBwcm9wcy5maXhlZDtcblxuICB2YXIgaGVhZGVySGVpZ2h0ID0gZml4ZWRDb2x1bW5zSGVhZFJvd3NIZWlnaHRbMF07XG5cbiAgaWYgKCFmaXhlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGhlYWRlckhlaWdodCAmJiBjb2x1bW5zKSB7XG4gICAgaWYgKGhlYWRlckhlaWdodCA9PT0gJ2F1dG8nKSB7XG4gICAgICByZXR1cm4gJ2F1dG8nO1xuICAgIH1cbiAgICByZXR1cm4gaGVhZGVySGVpZ2h0IC8gcm93cy5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoZnVuY3Rpb24gKHN0YXRlLCBwcm9wcykge1xuICByZXR1cm4ge1xuICAgIGhlaWdodDogZ2V0Um93SGVpZ2h0KHN0YXRlLCBwcm9wcylcbiAgfTtcbn0pKFRhYmxlSGVhZGVyUm93KTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBUYWJsZUhlYWRlclJvdyBmcm9tICcuL1RhYmxlSGVhZGVyUm93JztcblxuZnVuY3Rpb24gZ2V0SGVhZGVyUm93cyhjb2x1bW5zKSB7XG4gIHZhciBjdXJyZW50Um93ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICB2YXIgcm93cyA9IGFyZ3VtZW50c1syXTtcblxuICByb3dzID0gcm93cyB8fCBbXTtcbiAgcm93c1tjdXJyZW50Um93XSA9IHJvd3NbY3VycmVudFJvd10gfHwgW107XG5cbiAgY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICBpZiAoY29sdW1uLnJvd1NwYW4gJiYgcm93cy5sZW5ndGggPCBjb2x1bW4ucm93U3Bhbikge1xuICAgICAgd2hpbGUgKHJvd3MubGVuZ3RoIDwgY29sdW1uLnJvd1NwYW4pIHtcbiAgICAgICAgcm93cy5wdXNoKFtdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNlbGwgPSB7XG4gICAgICBrZXk6IGNvbHVtbi5rZXksXG4gICAgICBjbGFzc05hbWU6IGNvbHVtbi5jbGFzc05hbWUgfHwgJycsXG4gICAgICBjaGlsZHJlbjogY29sdW1uLnRpdGxlLFxuICAgICAgY29sdW1uOiBjb2x1bW5cbiAgICB9O1xuICAgIGlmIChjb2x1bW4uY2hpbGRyZW4pIHtcbiAgICAgIGdldEhlYWRlclJvd3MoY29sdW1uLmNoaWxkcmVuLCBjdXJyZW50Um93ICsgMSwgcm93cyk7XG4gICAgfVxuICAgIGlmICgnY29sU3BhbicgaW4gY29sdW1uKSB7XG4gICAgICBjZWxsLmNvbFNwYW4gPSBjb2x1bW4uY29sU3BhbjtcbiAgICB9XG4gICAgaWYgKCdyb3dTcGFuJyBpbiBjb2x1bW4pIHtcbiAgICAgIGNlbGwucm93U3BhbiA9IGNvbHVtbi5yb3dTcGFuO1xuICAgIH1cbiAgICBpZiAoY2VsbC5jb2xTcGFuICE9PSAwKSB7XG4gICAgICByb3dzW2N1cnJlbnRSb3ddLnB1c2goY2VsbCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJvd3MuZmlsdGVyKGZ1bmN0aW9uIChyb3cpIHtcbiAgICByZXR1cm4gcm93Lmxlbmd0aCA+IDA7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUYWJsZUhlYWRlcihwcm9wcywgX3JlZikge1xuICB2YXIgdGFibGUgPSBfcmVmLnRhYmxlO1xuICB2YXIgY29tcG9uZW50cyA9IHRhYmxlLmNvbXBvbmVudHM7XG4gIHZhciBfdGFibGUkcHJvcHMgPSB0YWJsZS5wcm9wcyxcbiAgICAgIHByZWZpeENscyA9IF90YWJsZSRwcm9wcy5wcmVmaXhDbHMsXG4gICAgICBzaG93SGVhZGVyID0gX3RhYmxlJHByb3BzLnNob3dIZWFkZXIsXG4gICAgICBvbkhlYWRlclJvdyA9IF90YWJsZSRwcm9wcy5vbkhlYWRlclJvdztcbiAgdmFyIGV4cGFuZGVyID0gcHJvcHMuZXhwYW5kZXIsXG4gICAgICBjb2x1bW5zID0gcHJvcHMuY29sdW1ucyxcbiAgICAgIGZpeGVkID0gcHJvcHMuZml4ZWQ7XG5cblxuICBpZiAoIXNob3dIZWFkZXIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciByb3dzID0gZ2V0SGVhZGVyUm93cyhjb2x1bW5zKTtcblxuICBleHBhbmRlci5yZW5kZXJFeHBhbmRJbmRlbnRDZWxsKHJvd3MsIGZpeGVkKTtcblxuICB2YXIgSGVhZGVyV3JhcHBlciA9IGNvbXBvbmVudHMuaGVhZGVyLndyYXBwZXI7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgSGVhZGVyV3JhcHBlcixcbiAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy10aGVhZCcgfSxcbiAgICByb3dzLm1hcChmdW5jdGlvbiAocm93LCBpbmRleCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFibGVIZWFkZXJSb3csIHtcbiAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgZml4ZWQ6IGZpeGVkLFxuICAgICAgICBjb2x1bW5zOiBjb2x1bW5zLFxuICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICByb3c6IHJvdyxcbiAgICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgICAgICAgb25IZWFkZXJSb3c6IG9uSGVhZGVyUm93XG4gICAgICB9KTtcbiAgICB9KVxuICApO1xufVxuXG5UYWJsZUhlYWRlci5wcm9wVHlwZXMgPSB7XG4gIGZpeGVkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb2x1bW5zOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgZXhwYW5kZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgb25IZWFkZXJSb3c6IFByb3BUeXBlcy5mdW5jXG59O1xuXG5UYWJsZUhlYWRlci5jb250ZXh0VHlwZXMgPSB7XG4gIHRhYmxlOiBQcm9wVHlwZXMuYW55XG59OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZ2V0IGZyb20gJ2xvZGFzaC9nZXQnO1xuXG5mdW5jdGlvbiBpc0ludmFsaWRSZW5kZXJDZWxsVGV4dCh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0ICYmICFSZWFjdC5pc1ZhbGlkRWxlbWVudCh0ZXh0KSAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGV4dCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuXG52YXIgVGFibGVDZWxsID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRhYmxlQ2VsbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFibGVDZWxsKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWJsZUNlbGwpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IFRhYmxlQ2VsbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhYmxlQ2VsbCkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHJlY29yZCA9IF90aGlzJHByb3BzLnJlY29yZCxcbiAgICAgICAgICBvbkNlbGxDbGljayA9IF90aGlzJHByb3BzLmNvbHVtbi5vbkNlbGxDbGljaztcblxuICAgICAgaWYgKG9uQ2VsbENsaWNrKSB7XG4gICAgICAgIG9uQ2VsbENsaWNrKHJlY29yZCwgZSk7XG4gICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGFibGVDZWxsLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHJlY29yZCA9IF9wcm9wcy5yZWNvcmQsXG4gICAgICAgICAgaW5kZW50U2l6ZSA9IF9wcm9wcy5pbmRlbnRTaXplLFxuICAgICAgICAgIHByZWZpeENscyA9IF9wcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgICAgaW5kZW50ID0gX3Byb3BzLmluZGVudCxcbiAgICAgICAgICBpbmRleCA9IF9wcm9wcy5pbmRleCxcbiAgICAgICAgICBleHBhbmRJY29uID0gX3Byb3BzLmV4cGFuZEljb24sXG4gICAgICAgICAgY29sdW1uID0gX3Byb3BzLmNvbHVtbixcbiAgICAgICAgICBCb2R5Q2VsbCA9IF9wcm9wcy5jb21wb25lbnQ7XG4gICAgICB2YXIgZGF0YUluZGV4ID0gY29sdW1uLmRhdGFJbmRleCxcbiAgICAgICAgICByZW5kZXIgPSBjb2x1bW4ucmVuZGVyLFxuICAgICAgICAgIF9jb2x1bW4kY2xhc3NOYW1lID0gY29sdW1uLmNsYXNzTmFtZSxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfY29sdW1uJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfY29sdW1uJGNsYXNzTmFtZTtcblxuICAgICAgLy8gV2Ugc2hvdWxkIHJldHVybiB1bmRlZmluZWQgaWYgbm8gZGF0YUluZGV4IGlzIHNwZWNpZmllZCwgYnV0IGluIG9yZGVyIHRvXG4gICAgICAvLyBiZSBjb21wYXRpYmxlIHdpdGggb2JqZWN0LXBhdGgncyBiZWhhdmlvciwgd2UgcmV0dXJuIHRoZSByZWNvcmQgb2JqZWN0IGluc3RlYWQuXG5cbiAgICAgIHZhciB0ZXh0ID0gdm9pZCAwO1xuICAgICAgaWYgKHR5cGVvZiBkYXRhSW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHRleHQgPSBnZXQocmVjb3JkLCBkYXRhSW5kZXgpO1xuICAgICAgfSBlbHNlIGlmICghZGF0YUluZGV4IHx8IGRhdGFJbmRleC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGV4dCA9IHJlY29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHQgPSBnZXQocmVjb3JkLCBkYXRhSW5kZXgpO1xuICAgICAgfVxuICAgICAgdmFyIHRkUHJvcHMgPSB7fTtcbiAgICAgIHZhciBjb2xTcGFuID0gdm9pZCAwO1xuICAgICAgdmFyIHJvd1NwYW4gPSB2b2lkIDA7XG5cbiAgICAgIGlmIChyZW5kZXIpIHtcbiAgICAgICAgdGV4dCA9IHJlbmRlcih0ZXh0LCByZWNvcmQsIGluZGV4KTtcbiAgICAgICAgaWYgKGlzSW52YWxpZFJlbmRlckNlbGxUZXh0KHRleHQpKSB7XG4gICAgICAgICAgdGRQcm9wcyA9IHRleHQucHJvcHMgfHwgdGRQcm9wcztcbiAgICAgICAgICBjb2xTcGFuID0gdGRQcm9wcy5jb2xTcGFuO1xuICAgICAgICAgIHJvd1NwYW4gPSB0ZFByb3BzLnJvd1NwYW47XG4gICAgICAgICAgdGV4dCA9IHRleHQuY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNvbHVtbi5vbkNlbGwpIHtcbiAgICAgICAgdGRQcm9wcyA9IF9leHRlbmRzKHt9LCB0ZFByb3BzLCBjb2x1bW4ub25DZWxsKHJlY29yZCwgaW5kZXgpKTtcbiAgICAgIH1cblxuICAgICAgLy8gRml4IGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzEyMDJcbiAgICAgIGlmIChpc0ludmFsaWRSZW5kZXJDZWxsVGV4dCh0ZXh0KSkge1xuICAgICAgICB0ZXh0ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGVudFRleHQgPSBleHBhbmRJY29uID8gUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgICAgc3R5bGU6IHsgcGFkZGluZ0xlZnQ6IGluZGVudFNpemUgKiBpbmRlbnQgKyAncHgnIH0sXG4gICAgICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1pbmRlbnQgaW5kZW50LWxldmVsLScgKyBpbmRlbnRcbiAgICAgIH0pIDogbnVsbDtcblxuICAgICAgaWYgKHJvd1NwYW4gPT09IDAgfHwgY29sU3BhbiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbHVtbi5hbGlnbikge1xuICAgICAgICB0ZFByb3BzLnN0eWxlID0gX2V4dGVuZHMoe30sIHRkUHJvcHMuc3R5bGUsIHsgdGV4dEFsaWduOiBjb2x1bW4uYWxpZ24gfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBCb2R5Q2VsbCxcbiAgICAgICAgX2V4dGVuZHMoeyBjbGFzc05hbWU6IGNsYXNzTmFtZSwgb25DbGljazogdGhpcy5oYW5kbGVDbGljayB9LCB0ZFByb3BzKSxcbiAgICAgICAgaW5kZW50VGV4dCxcbiAgICAgICAgZXhwYW5kSWNvbixcbiAgICAgICAgdGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGFibGVDZWxsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UYWJsZUNlbGwucHJvcFR5cGVzID0ge1xuICByZWNvcmQ6IFByb3BUeXBlcy5vYmplY3QsXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgaW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGluZGVudDogUHJvcFR5cGVzLm51bWJlcixcbiAgaW5kZW50U2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgY29sdW1uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBleHBhbmRJY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuYW55XG59O1xuZXhwb3J0IGRlZmF1bHQgVGFibGVDZWxsOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdtaW5pLXN0b3JlJztcbmltcG9ydCB7IHBvbHlmaWxsIH0gZnJvbSAncmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgVGFibGVDZWxsIGZyb20gJy4vVGFibGVDZWxsJztcbmltcG9ydCB7IHdhcm5pbmdPbmNlIH0gZnJvbSAnLi91dGlscyc7XG5cbnZhciBUYWJsZVJvdyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUYWJsZVJvdywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFibGVSb3cocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFibGVSb3cpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRhYmxlUm93Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFibGVSb3cpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5vblRyaWdnZXJFdmVudCA9IGZ1bmN0aW9uIChyb3dQcm9wRnVuYywgbGVnYWN5RnVuYywgYWRkaXRpb25hbEZ1bmMpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHJlY29yZCA9IF90aGlzJHByb3BzLnJlY29yZCxcbiAgICAgICAgICBpbmRleCA9IF90aGlzJHByb3BzLmluZGV4O1xuXG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZGl0aW9uYWwgZnVuY3Rpb24gbGlrZSB0cmlnZ2VyIGB0aGlzLm9uSG92ZXJgIHRvIGhhbmRsZSBzZWxmIGxvZ2ljXG4gICAgICAgIGlmIChhZGRpdGlvbmFsRnVuYykge1xuICAgICAgICAgIGFkZGl0aW9uYWxGdW5jKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBbTGVnYWN5XSBTb21lIGxlZ2FjeSBmdW5jdGlvbiBsaWtlIGBvblJvd0NsaWNrYC5cbiAgICAgICAgdmFyIGV2ZW50ID0gYXJnc1swXTtcblxuICAgICAgICBpZiAobGVnYWN5RnVuYykge1xuICAgICAgICAgIGxlZ2FjeUZ1bmMocmVjb3JkLCBpbmRleCwgZXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGFzcyB0byB0aGUgZnVuY3Rpb24gZnJvbSBgb25Sb3dgXG4gICAgICAgIGlmIChyb3dQcm9wRnVuYykge1xuICAgICAgICAgIHJvd1Byb3BGdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcblxuICAgIF90aGlzLm9uTW91c2VFbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkhvdmVyID0gX3RoaXMkcHJvcHMyLm9uSG92ZXIsXG4gICAgICAgICAgcm93S2V5ID0gX3RoaXMkcHJvcHMyLnJvd0tleTtcblxuICAgICAgb25Ib3Zlcih0cnVlLCByb3dLZXkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbk1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25Ib3ZlciA9IF90aGlzJHByb3BzMy5vbkhvdmVyLFxuICAgICAgICAgIHJvd0tleSA9IF90aGlzJHByb3BzMy5yb3dLZXk7XG5cbiAgICAgIG9uSG92ZXIoZmFsc2UsIHJvd0tleSk7XG4gICAgfTtcblxuICAgIF90aGlzLnNob3VsZFJlbmRlciA9IHByb3BzLnZpc2libGU7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUYWJsZVJvdywgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuc3RhdGUuc2hvdWxkUmVuZGVyKSB7XG4gICAgICAgIHRoaXMuc2F2ZVJvd1JlZigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICAgIHJldHVybiAhISh0aGlzLnByb3BzLnZpc2libGUgfHwgbmV4dFByb3BzLnZpc2libGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlLnNob3VsZFJlbmRlciAmJiAhdGhpcy5yb3dSZWYpIHtcbiAgICAgICAgdGhpcy5zYXZlUm93UmVmKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0RXhwYW5kZWRSb3dIZWlnaHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRFeHBhbmRlZFJvd0hlaWdodCgpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHN0b3JlID0gX3Byb3BzLnN0b3JlLFxuICAgICAgICAgIHJvd0tleSA9IF9wcm9wcy5yb3dLZXk7XG5cbiAgICAgIHZhciBfc3RvcmUkZ2V0U3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpLFxuICAgICAgICAgIGV4cGFuZGVkUm93c0hlaWdodCA9IF9zdG9yZSRnZXRTdGF0ZS5leHBhbmRlZFJvd3NIZWlnaHQ7XG5cbiAgICAgIHZhciBoZWlnaHQgPSB0aGlzLnJvd1JlZi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICBleHBhbmRlZFJvd3NIZWlnaHQgPSBfZXh0ZW5kcyh7fSwgZXhwYW5kZWRSb3dzSGVpZ2h0LCBfZGVmaW5lUHJvcGVydHkoe30sIHJvd0tleSwgaGVpZ2h0KSk7XG4gICAgICBzdG9yZS5zZXRTdGF0ZSh7IGV4cGFuZGVkUm93c0hlaWdodDogZXhwYW5kZWRSb3dzSGVpZ2h0IH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFJvd0hlaWdodCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFJvd0hlaWdodCgpIHtcbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBzdG9yZSA9IF9wcm9wczIuc3RvcmUsXG4gICAgICAgICAgcm93S2V5ID0gX3Byb3BzMi5yb3dLZXk7XG5cbiAgICAgIHZhciBfc3RvcmUkZ2V0U3RhdGUyID0gc3RvcmUuZ2V0U3RhdGUoKSxcbiAgICAgICAgICBmaXhlZENvbHVtbnNCb2R5Um93c0hlaWdodCA9IF9zdG9yZSRnZXRTdGF0ZTIuZml4ZWRDb2x1bW5zQm9keVJvd3NIZWlnaHQ7XG5cbiAgICAgIHZhciBoZWlnaHQgPSB0aGlzLnJvd1JlZi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICBzdG9yZS5zZXRTdGF0ZSh7XG4gICAgICAgIGZpeGVkQ29sdW1uc0JvZHlSb3dzSGVpZ2h0OiBfZXh0ZW5kcyh7fSwgZml4ZWRDb2x1bW5zQm9keVJvd3NIZWlnaHQsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgcm93S2V5LCBoZWlnaHQpKVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U3R5bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdHlsZSgpIHtcbiAgICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBoZWlnaHQgPSBfcHJvcHMzLmhlaWdodCxcbiAgICAgICAgICB2aXNpYmxlID0gX3Byb3BzMy52aXNpYmxlO1xuXG5cbiAgICAgIGlmIChoZWlnaHQgJiYgaGVpZ2h0ICE9PSB0aGlzLnN0eWxlLmhlaWdodCkge1xuICAgICAgICB0aGlzLnN0eWxlID0gX2V4dGVuZHMoe30sIHRoaXMuc3R5bGUsIHsgaGVpZ2h0OiBoZWlnaHQgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdmlzaWJsZSAmJiAhdGhpcy5zdHlsZS5kaXNwbGF5KSB7XG4gICAgICAgIHRoaXMuc3R5bGUgPSBfZXh0ZW5kcyh7fSwgdGhpcy5zdHlsZSwgeyBkaXNwbGF5OiAnbm9uZScgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnN0eWxlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NhdmVSb3dSZWYnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlUm93UmVmKCkge1xuICAgICAgdGhpcy5yb3dSZWYgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgICAgdmFyIF9wcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlzQW55Q29sdW1uc0ZpeGVkID0gX3Byb3BzNC5pc0FueUNvbHVtbnNGaXhlZCxcbiAgICAgICAgICBmaXhlZCA9IF9wcm9wczQuZml4ZWQsXG4gICAgICAgICAgZXhwYW5kZWRSb3cgPSBfcHJvcHM0LmV4cGFuZGVkUm93LFxuICAgICAgICAgIGFuY2VzdG9yS2V5cyA9IF9wcm9wczQuYW5jZXN0b3JLZXlzO1xuXG5cbiAgICAgIGlmICghaXNBbnlDb2x1bW5zRml4ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWZpeGVkICYmIGV4cGFuZGVkUm93KSB7XG4gICAgICAgIHRoaXMuc2V0RXhwYW5kZWRSb3dIZWlnaHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmaXhlZCAmJiBhbmNlc3RvcktleXMubGVuZ3RoID49IDApIHtcbiAgICAgICAgdGhpcy5zZXRSb3dIZWlnaHQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBpZiAoIXRoaXMuc3RhdGUuc2hvdWxkUmVuZGVyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgcHJlZml4Q2xzID0gX3Byb3BzNS5wcmVmaXhDbHMsXG4gICAgICAgICAgY29sdW1ucyA9IF9wcm9wczUuY29sdW1ucyxcbiAgICAgICAgICByZWNvcmQgPSBfcHJvcHM1LnJlY29yZCxcbiAgICAgICAgICByb3dLZXkgPSBfcHJvcHM1LnJvd0tleSxcbiAgICAgICAgICBpbmRleCA9IF9wcm9wczUuaW5kZXgsXG4gICAgICAgICAgb25Sb3cgPSBfcHJvcHM1Lm9uUm93LFxuICAgICAgICAgIGluZGVudCA9IF9wcm9wczUuaW5kZW50LFxuICAgICAgICAgIGluZGVudFNpemUgPSBfcHJvcHM1LmluZGVudFNpemUsXG4gICAgICAgICAgaG92ZXJlZCA9IF9wcm9wczUuaG92ZXJlZCxcbiAgICAgICAgICBoZWlnaHQgPSBfcHJvcHM1LmhlaWdodCxcbiAgICAgICAgICB2aXNpYmxlID0gX3Byb3BzNS52aXNpYmxlLFxuICAgICAgICAgIGNvbXBvbmVudHMgPSBfcHJvcHM1LmNvbXBvbmVudHMsXG4gICAgICAgICAgaGFzRXhwYW5kSWNvbiA9IF9wcm9wczUuaGFzRXhwYW5kSWNvbixcbiAgICAgICAgICByZW5kZXJFeHBhbmRJY29uID0gX3Byb3BzNS5yZW5kZXJFeHBhbmRJY29uLFxuICAgICAgICAgIHJlbmRlckV4cGFuZEljb25DZWxsID0gX3Byb3BzNS5yZW5kZXJFeHBhbmRJY29uQ2VsbCxcbiAgICAgICAgICBvblJvd0NsaWNrID0gX3Byb3BzNS5vblJvd0NsaWNrLFxuICAgICAgICAgIG9uUm93RG91YmxlQ2xpY2sgPSBfcHJvcHM1Lm9uUm93RG91YmxlQ2xpY2ssXG4gICAgICAgICAgb25Sb3dNb3VzZUVudGVyID0gX3Byb3BzNS5vblJvd01vdXNlRW50ZXIsXG4gICAgICAgICAgb25Sb3dNb3VzZUxlYXZlID0gX3Byb3BzNS5vblJvd01vdXNlTGVhdmUsXG4gICAgICAgICAgb25Sb3dDb250ZXh0TWVudSA9IF9wcm9wczUub25Sb3dDb250ZXh0TWVudTtcblxuXG4gICAgICB2YXIgQm9keVJvdyA9IGNvbXBvbmVudHMuYm9keS5yb3c7XG4gICAgICB2YXIgQm9keUNlbGwgPSBjb21wb25lbnRzLmJvZHkuY2VsbDtcblxuICAgICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMucHJvcHMuY2xhc3NOYW1lO1xuXG5cbiAgICAgIGlmIChob3ZlcmVkKSB7XG4gICAgICAgIGNsYXNzTmFtZSArPSAnICcgKyBwcmVmaXhDbHMgKyAnLWhvdmVyJztcbiAgICAgIH1cblxuICAgICAgdmFyIGNlbGxzID0gW107XG5cbiAgICAgIHJlbmRlckV4cGFuZEljb25DZWxsKGNlbGxzKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2x1bW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjb2x1bW4gPSBjb2x1bW5zW2ldO1xuXG4gICAgICAgIHdhcm5pbmdPbmNlKGNvbHVtbi5vbkNlbGxDbGljayA9PT0gdW5kZWZpbmVkLCAnY29sdW1uW29uQ2VsbENsaWNrXSBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIGNvbHVtbltvbkNlbGxdIGluc3RlYWQuJyk7XG5cbiAgICAgICAgY2VsbHMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlQ2VsbCwge1xuICAgICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgIGluZGVudFNpemU6IGluZGVudFNpemUsXG4gICAgICAgICAgaW5kZW50OiBpbmRlbnQsXG4gICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgIGNvbHVtbjogY29sdW1uLFxuICAgICAgICAgIGtleTogY29sdW1uLmtleSB8fCBjb2x1bW4uZGF0YUluZGV4LFxuICAgICAgICAgIGV4cGFuZEljb246IGhhc0V4cGFuZEljb24oaSkgJiYgcmVuZGVyRXhwYW5kSWNvbigpLFxuICAgICAgICAgIGNvbXBvbmVudDogQm9keUNlbGxcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3JlZiA9IG9uUm93KHJlY29yZCwgaW5kZXgpIHx8IHt9LFxuICAgICAgICAgIGN1c3RvbUNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgICAgIGN1c3RvbVN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgICAgICByb3dQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ2NsYXNzTmFtZScsICdzdHlsZSddKTtcblxuICAgICAgdmFyIHN0eWxlID0geyBoZWlnaHQ6IGhlaWdodCB9O1xuXG4gICAgICBpZiAoIXZpc2libGUpIHtcbiAgICAgICAgc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIH1cblxuICAgICAgc3R5bGUgPSBfZXh0ZW5kcyh7fSwgc3R5bGUsIGN1c3RvbVN0eWxlKTtcblxuICAgICAgdmFyIHJvd0NsYXNzTmFtZSA9IGNsYXNzTmFtZXMocHJlZml4Q2xzLCBjbGFzc05hbWUsIHByZWZpeENscyArICctbGV2ZWwtJyArIGluZGVudCwgY3VzdG9tQ2xhc3NOYW1lKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIEJvZHlSb3csXG4gICAgICAgIF9leHRlbmRzKHt9LCByb3dQcm9wcywge1xuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMub25UcmlnZ2VyRXZlbnQocm93UHJvcHMub25DbGljaywgb25Sb3dDbGljayksXG4gICAgICAgICAgb25Eb3VibGVDbGljazogdGhpcy5vblRyaWdnZXJFdmVudChyb3dQcm9wcy5vbkRvdWJsZUNsaWNrLCBvblJvd0RvdWJsZUNsaWNrKSxcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMub25UcmlnZ2VyRXZlbnQocm93UHJvcHMub25Nb3VzZUVudGVyLCBvblJvd01vdXNlRW50ZXIsIHRoaXMub25Nb3VzZUVudGVyKSxcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMub25UcmlnZ2VyRXZlbnQocm93UHJvcHMub25Nb3VzZUxlYXZlLCBvblJvd01vdXNlTGVhdmUsIHRoaXMub25Nb3VzZUxlYXZlKSxcbiAgICAgICAgICBvbkNvbnRleHRNZW51OiB0aGlzLm9uVHJpZ2dlckV2ZW50KHJvd1Byb3BzLm9uQ29udGV4dE1lbnUsIG9uUm93Q29udGV4dE1lbnUpLFxuICAgICAgICAgIGNsYXNzTmFtZTogcm93Q2xhc3NOYW1lLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICAnZGF0YS1yb3cta2V5Jzogcm93S2V5XG4gICAgICAgIH0pLFxuICAgICAgICBjZWxsc1xuICAgICAgKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgaWYgKHByZXZTdGF0ZS52aXNpYmxlIHx8ICFwcmV2U3RhdGUudmlzaWJsZSAmJiBuZXh0UHJvcHMudmlzaWJsZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3VsZFJlbmRlcjogdHJ1ZSxcbiAgICAgICAgICB2aXNpYmxlOiBuZXh0UHJvcHMudmlzaWJsZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmlzaWJsZTogbmV4dFByb3BzLnZpc2libGVcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRhYmxlUm93O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UYWJsZVJvdy5wcm9wVHlwZXMgPSB7XG4gIG9uUm93OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Sb3dDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUm93RG91YmxlQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBvblJvd0NvbnRleHRNZW51OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Sb3dNb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Sb3dNb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVjb3JkOiBQcm9wVHlwZXMub2JqZWN0LFxuICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uSG92ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBjb2x1bW5zOiBQcm9wVHlwZXMuYXJyYXksXG4gIGhlaWdodDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICBpbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgcm93S2V5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZCxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBpbmRlbnQ6IFByb3BUeXBlcy5udW1iZXIsXG4gIGluZGVudFNpemU6IFByb3BUeXBlcy5udW1iZXIsXG4gIGhhc0V4cGFuZEljb246IFByb3BUeXBlcy5mdW5jLFxuICBob3ZlcmVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICB2aXNpYmxlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBzdG9yZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBmaXhlZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmJvb2xdKSxcbiAgcmVuZGVyRXhwYW5kSWNvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIHJlbmRlckV4cGFuZEljb25DZWxsOiBQcm9wVHlwZXMuZnVuYyxcbiAgY29tcG9uZW50czogUHJvcFR5cGVzLmFueSxcbiAgZXhwYW5kZWRSb3c6IFByb3BUeXBlcy5ib29sLFxuICBpc0FueUNvbHVtbnNGaXhlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGFuY2VzdG9yS2V5czogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWRcbn07XG5UYWJsZVJvdy5kZWZhdWx0UHJvcHMgPSB7XG4gIG9uUm93OiBmdW5jdGlvbiBvblJvdygpIHt9LFxuICBvbkhvdmVyOiBmdW5jdGlvbiBvbkhvdmVyKCkge30sXG4gIGhhc0V4cGFuZEljb246IGZ1bmN0aW9uIGhhc0V4cGFuZEljb24oKSB7fSxcbiAgcmVuZGVyRXhwYW5kSWNvbjogZnVuY3Rpb24gcmVuZGVyRXhwYW5kSWNvbigpIHt9LFxuICByZW5kZXJFeHBhbmRJY29uQ2VsbDogZnVuY3Rpb24gcmVuZGVyRXhwYW5kSWNvbkNlbGwoKSB7fVxufTtcblxuXG5mdW5jdGlvbiBnZXRSb3dIZWlnaHQoc3RhdGUsIHByb3BzKSB7XG4gIHZhciBleHBhbmRlZFJvd3NIZWlnaHQgPSBzdGF0ZS5leHBhbmRlZFJvd3NIZWlnaHQsXG4gICAgICBmaXhlZENvbHVtbnNCb2R5Um93c0hlaWdodCA9IHN0YXRlLmZpeGVkQ29sdW1uc0JvZHlSb3dzSGVpZ2h0O1xuICB2YXIgZml4ZWQgPSBwcm9wcy5maXhlZCxcbiAgICAgIHJvd0tleSA9IHByb3BzLnJvd0tleTtcblxuXG4gIGlmICghZml4ZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChleHBhbmRlZFJvd3NIZWlnaHRbcm93S2V5XSkge1xuICAgIHJldHVybiBleHBhbmRlZFJvd3NIZWlnaHRbcm93S2V5XTtcbiAgfVxuXG4gIGlmIChmaXhlZENvbHVtbnNCb2R5Um93c0hlaWdodFtyb3dLZXldKSB7XG4gICAgcmV0dXJuIGZpeGVkQ29sdW1uc0JvZHlSb3dzSGVpZ2h0W3Jvd0tleV07XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxucG9seWZpbGwoVGFibGVSb3cpO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KGZ1bmN0aW9uIChzdGF0ZSwgcHJvcHMpIHtcbiAgdmFyIGN1cnJlbnRIb3ZlcktleSA9IHN0YXRlLmN1cnJlbnRIb3ZlcktleSxcbiAgICAgIGV4cGFuZGVkUm93S2V5cyA9IHN0YXRlLmV4cGFuZGVkUm93S2V5cztcbiAgdmFyIHJvd0tleSA9IHByb3BzLnJvd0tleSxcbiAgICAgIGFuY2VzdG9yS2V5cyA9IHByb3BzLmFuY2VzdG9yS2V5cztcblxuICB2YXIgdmlzaWJsZSA9IGFuY2VzdG9yS2V5cy5sZW5ndGggPT09IDAgfHwgYW5jZXN0b3JLZXlzLmV2ZXJ5KGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIH5leHBhbmRlZFJvd0tleXMuaW5kZXhPZihrKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICB2aXNpYmxlOiB2aXNpYmxlLFxuICAgIGhvdmVyZWQ6IGN1cnJlbnRIb3ZlcktleSA9PT0gcm93S2V5LFxuICAgIGhlaWdodDogZ2V0Um93SGVpZ2h0KHN0YXRlLCBwcm9wcylcbiAgfTtcbn0pKFRhYmxlUm93KTsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc2hhbGxvd2VxdWFsIGZyb20gJ3NoYWxsb3dlcXVhbCc7XG5cbnZhciBFeHBhbmRJY29uID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEV4cGFuZEljb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEV4cGFuZEljb24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV4cGFuZEljb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChFeHBhbmRJY29uLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRXhwYW5kSWNvbikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEV4cGFuZEljb24sIFt7XG4gICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgcmV0dXJuICFzaGFsbG93ZXF1YWwobmV4dFByb3BzLCB0aGlzLnByb3BzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBleHBhbmRhYmxlID0gX3Byb3BzLmV4cGFuZGFibGUsXG4gICAgICAgICAgcHJlZml4Q2xzID0gX3Byb3BzLnByZWZpeENscyxcbiAgICAgICAgICBvbkV4cGFuZCA9IF9wcm9wcy5vbkV4cGFuZCxcbiAgICAgICAgICBuZWVkSW5kZW50U3BhY2VkID0gX3Byb3BzLm5lZWRJbmRlbnRTcGFjZWQsXG4gICAgICAgICAgZXhwYW5kZWQgPSBfcHJvcHMuZXhwYW5kZWQsXG4gICAgICAgICAgcmVjb3JkID0gX3Byb3BzLnJlY29yZDtcblxuICAgICAgaWYgKGV4cGFuZGFibGUpIHtcbiAgICAgICAgdmFyIGV4cGFuZENsYXNzTmFtZSA9IGV4cGFuZGVkID8gJ2V4cGFuZGVkJyA6ICdjb2xsYXBzZWQnO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IHByZWZpeENscyArICctZXhwYW5kLWljb24gJyArIHByZWZpeENscyArICctJyArIGV4cGFuZENsYXNzTmFtZSxcbiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvbkV4cGFuZChyZWNvcmQsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKG5lZWRJbmRlbnRTcGFjZWQpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1leHBhbmQtaWNvbiAnICsgcHJlZml4Q2xzICsgJy1zcGFjZWQnIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEV4cGFuZEljb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkV4cGFuZEljb24ucHJvcFR5cGVzID0ge1xuICByZWNvcmQ6IFByb3BUeXBlcy5vYmplY3QsXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgZXhwYW5kYWJsZTogUHJvcFR5cGVzLmFueSxcbiAgZXhwYW5kZWQ6IFByb3BUeXBlcy5ib29sLFxuICBuZWVkSW5kZW50U3BhY2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25FeHBhbmQ6IFByb3BUeXBlcy5mdW5jXG59O1xuZXhwb3J0IGRlZmF1bHQgRXhwYW5kSWNvbjsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAnbWluaS1zdG9yZSc7XG5pbXBvcnQgRXhwYW5kSWNvbiBmcm9tICcuL0V4cGFuZEljb24nO1xuXG52YXIgRXhwYW5kYWJsZVJvdyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhFeHBhbmRhYmxlUm93LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBFeHBhbmRhYmxlUm93KCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFeHBhbmRhYmxlUm93KTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBFeHBhbmRhYmxlUm93Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRXhwYW5kYWJsZVJvdykpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhc0V4cGFuZEljb24gPSBmdW5jdGlvbiAoY29sdW1uSW5kZXgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGV4cGFuZFJvd0J5Q2xpY2sgPSBfdGhpcyRwcm9wcy5leHBhbmRSb3dCeUNsaWNrLFxuICAgICAgICAgIGV4cGFuZEljb24gPSBfdGhpcyRwcm9wcy5leHBhbmRJY29uO1xuXG5cbiAgICAgIGlmIChfdGhpcy5leHBhbmRJY29uQXNDZWxsIHx8IGNvbHVtbkluZGV4ICE9PSBfdGhpcy5leHBhbmRJY29uQ29sdW1uSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gISFleHBhbmRJY29uIHx8ICFleHBhbmRSb3dCeUNsaWNrO1xuICAgIH0sIF90aGlzLmhhbmRsZUV4cGFuZENoYW5nZSA9IGZ1bmN0aW9uIChyZWNvcmQsIGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25FeHBhbmRlZENoYW5nZSA9IF90aGlzJHByb3BzMi5vbkV4cGFuZGVkQ2hhbmdlLFxuICAgICAgICAgIGV4cGFuZGVkID0gX3RoaXMkcHJvcHMyLmV4cGFuZGVkLFxuICAgICAgICAgIHJvd0tleSA9IF90aGlzJHByb3BzMi5yb3dLZXk7XG5cbiAgICAgIGlmIChfdGhpcy5leHBhbmRhYmxlKSB7XG4gICAgICAgIG9uRXhwYW5kZWRDaGFuZ2UoIWV4cGFuZGVkLCByZWNvcmQsIGV2ZW50LCByb3dLZXkpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZVJvd0NsaWNrID0gZnVuY3Rpb24gKHJlY29yZCwgaW5kZXgsIGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZXhwYW5kUm93QnlDbGljayA9IF90aGlzJHByb3BzMy5leHBhbmRSb3dCeUNsaWNrLFxuICAgICAgICAgIG9uUm93Q2xpY2sgPSBfdGhpcyRwcm9wczMub25Sb3dDbGljaztcblxuICAgICAgaWYgKGV4cGFuZFJvd0J5Q2xpY2spIHtcbiAgICAgICAgX3RoaXMuaGFuZGxlRXhwYW5kQ2hhbmdlKHJlY29yZCwgZXZlbnQpO1xuICAgICAgfVxuICAgICAgaWYgKG9uUm93Q2xpY2spIHtcbiAgICAgICAgb25Sb3dDbGljayhyZWNvcmQsIGluZGV4LCBldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMucmVuZGVyRXhwYW5kSWNvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczQgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfdGhpcyRwcm9wczQucHJlZml4Q2xzLFxuICAgICAgICAgIGV4cGFuZGVkID0gX3RoaXMkcHJvcHM0LmV4cGFuZGVkLFxuICAgICAgICAgIHJlY29yZCA9IF90aGlzJHByb3BzNC5yZWNvcmQsXG4gICAgICAgICAgbmVlZEluZGVudFNwYWNlZCA9IF90aGlzJHByb3BzNC5uZWVkSW5kZW50U3BhY2VkLFxuICAgICAgICAgIGV4cGFuZEljb24gPSBfdGhpcyRwcm9wczQuZXhwYW5kSWNvbjtcblxuXG4gICAgICBpZiAoZXhwYW5kSWNvbikge1xuICAgICAgICByZXR1cm4gZXhwYW5kSWNvbih7XG4gICAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgICAgZXhwYW5kZWQ6IGV4cGFuZGVkLFxuICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgIG5lZWRJbmRlbnRTcGFjZWQ6IG5lZWRJbmRlbnRTcGFjZWQsXG4gICAgICAgICAgZXhwYW5kYWJsZTogX3RoaXMuZXhwYW5kYWJsZSxcbiAgICAgICAgICBvbkV4cGFuZDogX3RoaXMuaGFuZGxlRXhwYW5kQ2hhbmdlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFeHBhbmRJY29uLCB7XG4gICAgICAgIGV4cGFuZGFibGU6IF90aGlzLmV4cGFuZGFibGUsXG4gICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICBvbkV4cGFuZDogX3RoaXMuaGFuZGxlRXhwYW5kQ2hhbmdlLFxuICAgICAgICBuZWVkSW5kZW50U3BhY2VkOiBuZWVkSW5kZW50U3BhY2VkLFxuICAgICAgICBleHBhbmRlZDogZXhwYW5kZWQsXG4gICAgICAgIHJlY29yZDogcmVjb3JkXG4gICAgICB9KTtcbiAgICB9LCBfdGhpcy5yZW5kZXJFeHBhbmRJY29uQ2VsbCA9IGZ1bmN0aW9uIChjZWxscykge1xuICAgICAgaWYgKCFfdGhpcy5leHBhbmRJY29uQXNDZWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBwcmVmaXhDbHMgPSBfdGhpcy5wcm9wcy5wcmVmaXhDbHM7XG5cblxuICAgICAgY2VsbHMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAndGQnLFxuICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1leHBhbmQtaWNvbi1jZWxsJywga2V5OiAncmMtdGFibGUtZXhwYW5kLWljb24tY2VsbCcgfSxcbiAgICAgICAgX3RoaXMucmVuZGVyRXhwYW5kSWNvbigpXG4gICAgICApKTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFeHBhbmRhYmxlUm93LCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmhhbmRsZURlc3Ryb3koKTtcbiAgICB9XG5cbiAgICAvLyBTaG93IGljb24gd2l0aGluIGZpcnN0IGNvbHVtblxuXG4gIH0sIHtcbiAgICBrZXk6ICdoYW5kbGVEZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRGVzdHJveSgpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG9uRXhwYW5kZWRDaGFuZ2UgPSBfcHJvcHMub25FeHBhbmRlZENoYW5nZSxcbiAgICAgICAgICByb3dLZXkgPSBfcHJvcHMucm93S2V5LFxuICAgICAgICAgIHJlY29yZCA9IF9wcm9wcy5yZWNvcmQ7XG5cbiAgICAgIGlmICh0aGlzLmV4cGFuZGFibGUpIHtcbiAgICAgICAgb25FeHBhbmRlZENoYW5nZShmYWxzZSwgcmVjb3JkLCBudWxsLCByb3dLZXksIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbkNvbHVtbk5hbWUgPSBfcHJvcHMyLmNoaWxkcmVuQ29sdW1uTmFtZSxcbiAgICAgICAgICBleHBhbmRlZFJvd1JlbmRlciA9IF9wcm9wczIuZXhwYW5kZWRSb3dSZW5kZXIsXG4gICAgICAgICAgaW5kZW50U2l6ZSA9IF9wcm9wczIuaW5kZW50U2l6ZSxcbiAgICAgICAgICByZWNvcmQgPSBfcHJvcHMyLnJlY29yZCxcbiAgICAgICAgICBmaXhlZCA9IF9wcm9wczIuZml4ZWQsXG4gICAgICAgICAgZXhwYW5kZWQgPSBfcHJvcHMyLmV4cGFuZGVkO1xuXG5cbiAgICAgIHRoaXMuZXhwYW5kSWNvbkFzQ2VsbCA9IGZpeGVkICE9PSAncmlnaHQnID8gdGhpcy5wcm9wcy5leHBhbmRJY29uQXNDZWxsIDogZmFsc2U7XG4gICAgICB0aGlzLmV4cGFuZEljb25Db2x1bW5JbmRleCA9IGZpeGVkICE9PSAncmlnaHQnID8gdGhpcy5wcm9wcy5leHBhbmRJY29uQ29sdW1uSW5kZXggOiAtMTtcbiAgICAgIHZhciBjaGlsZHJlbkRhdGEgPSByZWNvcmRbY2hpbGRyZW5Db2x1bW5OYW1lXTtcbiAgICAgIHRoaXMuZXhwYW5kYWJsZSA9ICEhKGNoaWxkcmVuRGF0YSB8fCBleHBhbmRlZFJvd1JlbmRlcik7XG5cbiAgICAgIHZhciBleHBhbmRhYmxlUm93UHJvcHMgPSB7XG4gICAgICAgIGluZGVudFNpemU6IGluZGVudFNpemUsXG4gICAgICAgIGV4cGFuZGVkOiBleHBhbmRlZCwgLy8gbm90IHVzZWQgaW4gVGFibGVSb3csIGJ1dCBpdCdzIHJlcXVpcmVkIHRvIHJlLXJlbmRlciBUYWJsZVJvdyB3aGVuIGBleHBhbmRlZGAgY2hhbmdlc1xuICAgICAgICBvblJvd0NsaWNrOiB0aGlzLmhhbmRsZVJvd0NsaWNrLFxuICAgICAgICBoYXNFeHBhbmRJY29uOiB0aGlzLmhhc0V4cGFuZEljb24sXG4gICAgICAgIHJlbmRlckV4cGFuZEljb246IHRoaXMucmVuZGVyRXhwYW5kSWNvbixcbiAgICAgICAgcmVuZGVyRXhwYW5kSWNvbkNlbGw6IHRoaXMucmVuZGVyRXhwYW5kSWNvbkNlbGxcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKGV4cGFuZGFibGVSb3dQcm9wcyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEV4cGFuZGFibGVSb3c7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkV4cGFuZGFibGVSb3cucHJvcFR5cGVzID0ge1xuICBwcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcm93S2V5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZCxcbiAgZml4ZWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ib29sXSksXG4gIHJlY29yZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmFycmF5XSkuaXNSZXF1aXJlZCxcbiAgaW5kZW50U2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgbmVlZEluZGVudFNwYWNlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgZXhwYW5kUm93QnlDbGljazogUHJvcFR5cGVzLmJvb2wsXG4gIGV4cGFuZGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBleHBhbmRJY29uQXNDZWxsOiBQcm9wVHlwZXMuYm9vbCxcbiAgZXhwYW5kSWNvbkNvbHVtbkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbkNvbHVtbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV4cGFuZGVkUm93UmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgZXhwYW5kSWNvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRXhwYW5kZWRDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uUm93Q2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KGZ1bmN0aW9uIChfcmVmMiwgX3JlZjMpIHtcbiAgdmFyIGV4cGFuZGVkUm93S2V5cyA9IF9yZWYyLmV4cGFuZGVkUm93S2V5cztcbiAgdmFyIHJvd0tleSA9IF9yZWYzLnJvd0tleTtcbiAgcmV0dXJuIHtcbiAgICBleHBhbmRlZDogISF+ZXhwYW5kZWRSb3dLZXlzLmluZGV4T2Yocm93S2V5KVxuICB9O1xufSkoRXhwYW5kYWJsZVJvdyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdtaW5pLXN0b3JlJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IENvbEdyb3VwIGZyb20gJy4vQ29sR3JvdXAnO1xuaW1wb3J0IFRhYmxlSGVhZGVyIGZyb20gJy4vVGFibGVIZWFkZXInO1xuaW1wb3J0IFRhYmxlUm93IGZyb20gJy4vVGFibGVSb3cnO1xuaW1wb3J0IEV4cGFuZGFibGVSb3cgZnJvbSAnLi9FeHBhbmRhYmxlUm93JztcblxudmFyIEJhc2VUYWJsZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhCYXNlVGFibGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJhc2VUYWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZVRhYmxlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBCYXNlVGFibGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCYXNlVGFibGUpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVSb3dIb3ZlciA9IGZ1bmN0aW9uIChpc0hvdmVyLCBrZXkpIHtcbiAgICAgIF90aGlzLnByb3BzLnN0b3JlLnNldFN0YXRlKHtcbiAgICAgICAgY3VycmVudEhvdmVyS2V5OiBpc0hvdmVyID8ga2V5IDogbnVsbFxuICAgICAgfSk7XG4gICAgfSwgX3RoaXMucmVuZGVyUm93cyA9IGZ1bmN0aW9uIChyZW5kZXJEYXRhLCBpbmRlbnQpIHtcbiAgICAgIHZhciBhbmNlc3RvcktleXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xuICAgICAgdmFyIHRhYmxlID0gX3RoaXMuY29udGV4dC50YWJsZTtcbiAgICAgIHZhciBjb2x1bW5NYW5hZ2VyID0gdGFibGUuY29sdW1uTWFuYWdlcixcbiAgICAgICAgICBjb21wb25lbnRzID0gdGFibGUuY29tcG9uZW50cztcbiAgICAgIHZhciBfdGFibGUkcHJvcHMgPSB0YWJsZS5wcm9wcyxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfdGFibGUkcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIGNoaWxkcmVuQ29sdW1uTmFtZSA9IF90YWJsZSRwcm9wcy5jaGlsZHJlbkNvbHVtbk5hbWUsXG4gICAgICAgICAgcm93Q2xhc3NOYW1lID0gX3RhYmxlJHByb3BzLnJvd0NsYXNzTmFtZSxcbiAgICAgICAgICByb3dSZWYgPSBfdGFibGUkcHJvcHMucm93UmVmLFxuICAgICAgICAgIG9uUm93Q2xpY2sgPSBfdGFibGUkcHJvcHMub25Sb3dDbGljayxcbiAgICAgICAgICBvblJvd0RvdWJsZUNsaWNrID0gX3RhYmxlJHByb3BzLm9uUm93RG91YmxlQ2xpY2ssXG4gICAgICAgICAgb25Sb3dDb250ZXh0TWVudSA9IF90YWJsZSRwcm9wcy5vblJvd0NvbnRleHRNZW51LFxuICAgICAgICAgIG9uUm93TW91c2VFbnRlciA9IF90YWJsZSRwcm9wcy5vblJvd01vdXNlRW50ZXIsXG4gICAgICAgICAgb25Sb3dNb3VzZUxlYXZlID0gX3RhYmxlJHByb3BzLm9uUm93TW91c2VMZWF2ZSxcbiAgICAgICAgICBvblJvdyA9IF90YWJsZSRwcm9wcy5vblJvdztcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGdldFJvd0tleSA9IF90aGlzJHByb3BzLmdldFJvd0tleSxcbiAgICAgICAgICBmaXhlZCA9IF90aGlzJHByb3BzLmZpeGVkLFxuICAgICAgICAgIGV4cGFuZGVyID0gX3RoaXMkcHJvcHMuZXhwYW5kZXIsXG4gICAgICAgICAgaXNBbnlDb2x1bW5zRml4ZWQgPSBfdGhpcyRwcm9wcy5pc0FueUNvbHVtbnNGaXhlZDtcblxuXG4gICAgICB2YXIgcm93cyA9IFtdO1xuXG4gICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7XG4gICAgICAgIHZhciByZWNvcmQgPSByZW5kZXJEYXRhW2ldO1xuICAgICAgICB2YXIga2V5ID0gZ2V0Um93S2V5KHJlY29yZCwgaSk7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSB0eXBlb2Ygcm93Q2xhc3NOYW1lID09PSAnc3RyaW5nJyA/IHJvd0NsYXNzTmFtZSA6IHJvd0NsYXNzTmFtZShyZWNvcmQsIGksIGluZGVudCk7XG5cbiAgICAgICAgdmFyIG9uSG92ZXJQcm9wcyA9IHt9O1xuICAgICAgICBpZiAoY29sdW1uTWFuYWdlci5pc0FueUNvbHVtbnNGaXhlZCgpKSB7XG4gICAgICAgICAgb25Ib3ZlclByb3BzLm9uSG92ZXIgPSBfdGhpcy5oYW5kbGVSb3dIb3ZlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsZWFmQ29sdW1ucyA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGZpeGVkID09PSAnbGVmdCcpIHtcbiAgICAgICAgICBsZWFmQ29sdW1ucyA9IGNvbHVtbk1hbmFnZXIubGVmdExlYWZDb2x1bW5zKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZml4ZWQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICBsZWFmQ29sdW1ucyA9IGNvbHVtbk1hbmFnZXIucmlnaHRMZWFmQ29sdW1ucygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxlYWZDb2x1bW5zID0gX3RoaXMuZ2V0Q29sdW1ucyhjb2x1bW5NYW5hZ2VyLmxlYWZDb2x1bW5zKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJvd1ByZWZpeENscyA9IHByZWZpeENscyArICctcm93JztcblxuICAgICAgICB2YXIgcm93ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBFeHBhbmRhYmxlUm93LFxuICAgICAgICAgIF9leHRlbmRzKHt9LCBleHBhbmRlci5wcm9wcywge1xuICAgICAgICAgICAgZml4ZWQ6IGZpeGVkLFxuICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICBwcmVmaXhDbHM6IHJvd1ByZWZpeENscyxcbiAgICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICByb3dLZXk6IGtleSxcbiAgICAgICAgICAgIG9uUm93Q2xpY2s6IG9uUm93Q2xpY2ssXG4gICAgICAgICAgICBuZWVkSW5kZW50U3BhY2VkOiBleHBhbmRlci5uZWVkSW5kZW50U3BhY2VkLFxuICAgICAgICAgICAgb25FeHBhbmRlZENoYW5nZTogZXhwYW5kZXIuaGFuZGxlRXhwYW5kQ2hhbmdlXG4gICAgICAgICAgfSksXG4gICAgICAgICAgZnVuY3Rpb24gKGV4cGFuZGFibGVSb3cpIHtcbiAgICAgICAgICAgIHJldHVybiAoLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlUm93LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgICAgICAgZml4ZWQ6IGZpeGVkLFxuICAgICAgICAgICAgICAgIGluZGVudDogaW5kZW50LFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgIHJlY29yZDogcmVjb3JkLFxuICAgICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICAgIHByZWZpeENsczogcm93UHJlZml4Q2xzLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuQ29sdW1uTmFtZTogY2hpbGRyZW5Db2x1bW5OYW1lLFxuICAgICAgICAgICAgICAgIGNvbHVtbnM6IGxlYWZDb2x1bW5zLFxuICAgICAgICAgICAgICAgIG9uUm93OiBvblJvdyxcbiAgICAgICAgICAgICAgICBvblJvd0RvdWJsZUNsaWNrOiBvblJvd0RvdWJsZUNsaWNrLFxuICAgICAgICAgICAgICAgIG9uUm93Q29udGV4dE1lbnU6IG9uUm93Q29udGV4dE1lbnUsXG4gICAgICAgICAgICAgICAgb25Sb3dNb3VzZUVudGVyOiBvblJvd01vdXNlRW50ZXIsXG4gICAgICAgICAgICAgICAgb25Sb3dNb3VzZUxlYXZlOiBvblJvd01vdXNlTGVhdmVcbiAgICAgICAgICAgICAgfSwgb25Ib3ZlclByb3BzLCB7XG4gICAgICAgICAgICAgICAgcm93S2V5OiBrZXksXG4gICAgICAgICAgICAgICAgYW5jZXN0b3JLZXlzOiBhbmNlc3RvcktleXMsXG4gICAgICAgICAgICAgICAgcmVmOiByb3dSZWYocmVjb3JkLCBpLCBpbmRlbnQpLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsXG4gICAgICAgICAgICAgICAgaXNBbnlDb2x1bW5zRml4ZWQ6IGlzQW55Q29sdW1uc0ZpeGVkXG4gICAgICAgICAgICAgIH0sIGV4cGFuZGFibGVSb3cpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgcm93cy5wdXNoKHJvdyk7XG5cbiAgICAgICAgZXhwYW5kZXIucmVuZGVyUm93cyhfdGhpcy5yZW5kZXJSb3dzLCByb3dzLCByZWNvcmQsIGksIGluZGVudCwgZml4ZWQsIGtleSwgYW5jZXN0b3JLZXlzKTtcbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVuZGVyRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBfbG9vcChpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb3dzO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJhc2VUYWJsZSwgW3tcbiAgICBrZXk6ICdnZXRDb2x1bW5zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29sdW1ucyhjb2xzKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBfcHJvcHMkY29sdW1ucyA9IF9wcm9wcy5jb2x1bW5zLFxuICAgICAgICAgIGNvbHVtbnMgPSBfcHJvcHMkY29sdW1ucyA9PT0gdW5kZWZpbmVkID8gW10gOiBfcHJvcHMkY29sdW1ucyxcbiAgICAgICAgICBmaXhlZCA9IF9wcm9wcy5maXhlZDtcbiAgICAgIHZhciB0YWJsZSA9IHRoaXMuY29udGV4dC50YWJsZTtcbiAgICAgIHZhciBwcmVmaXhDbHMgPSB0YWJsZS5wcm9wcy5wcmVmaXhDbHM7XG5cbiAgICAgIHJldHVybiAoY29scyB8fCBjb2x1bW5zKS5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbHVtbiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogISFjb2x1bW4uZml4ZWQgJiYgIWZpeGVkID8gY2xhc3NOYW1lcyhwcmVmaXhDbHMgKyAnLWZpeGVkLWNvbHVtbnMtaW4tYm9keScsIGNvbHVtbi5jbGFzc05hbWUpIDogY29sdW1uLmNsYXNzTmFtZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciB0YWJsZSA9IHRoaXMuY29udGV4dC50YWJsZTtcbiAgICAgIHZhciBjb21wb25lbnRzID0gdGFibGUuY29tcG9uZW50cztcbiAgICAgIHZhciBfdGFibGUkcHJvcHMyID0gdGFibGUucHJvcHMsXG4gICAgICAgICAgcHJlZml4Q2xzID0gX3RhYmxlJHByb3BzMi5wcmVmaXhDbHMsXG4gICAgICAgICAgc2Nyb2xsID0gX3RhYmxlJHByb3BzMi5zY3JvbGwsXG4gICAgICAgICAgZGF0YSA9IF90YWJsZSRwcm9wczIuZGF0YSxcbiAgICAgICAgICBnZXRCb2R5V3JhcHBlciA9IF90YWJsZSRwcm9wczIuZ2V0Qm9keVdyYXBwZXI7XG4gICAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZXhwYW5kZXIgPSBfcHJvcHMyLmV4cGFuZGVyLFxuICAgICAgICAgIHRhYmxlQ2xhc3NOYW1lID0gX3Byb3BzMi50YWJsZUNsYXNzTmFtZSxcbiAgICAgICAgICBoYXNIZWFkID0gX3Byb3BzMi5oYXNIZWFkLFxuICAgICAgICAgIGhhc0JvZHkgPSBfcHJvcHMyLmhhc0JvZHksXG4gICAgICAgICAgZml4ZWQgPSBfcHJvcHMyLmZpeGVkO1xuXG4gICAgICB2YXIgdGFibGVTdHlsZSA9IHt9O1xuXG4gICAgICBpZiAoIWZpeGVkICYmIHNjcm9sbC54KSB7XG4gICAgICAgIC8vIG5vdCBzZXQgd2lkdGgsIHRoZW4gdXNlIGNvbnRlbnQgZml4ZWQgd2lkdGhcbiAgICAgICAgaWYgKHNjcm9sbC54ID09PSB0cnVlKSB7XG4gICAgICAgICAgdGFibGVTdHlsZS50YWJsZUxheW91dCA9ICdmaXhlZCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFibGVTdHlsZS53aWR0aCA9IHNjcm9sbC54O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBUYWJsZSA9IGhhc0JvZHkgPyBjb21wb25lbnRzLnRhYmxlIDogJ3RhYmxlJztcbiAgICAgIHZhciBCb2R5V3JhcHBlciA9IGNvbXBvbmVudHMuYm9keS53cmFwcGVyO1xuXG4gICAgICB2YXIgYm9keSA9IHZvaWQgMDtcbiAgICAgIGlmIChoYXNCb2R5KSB7XG4gICAgICAgIGJvZHkgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIEJvZHlXcmFwcGVyLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXRib2R5JyB9LFxuICAgICAgICAgIHRoaXMucmVuZGVyUm93cyhkYXRhLCAwKVxuICAgICAgICApO1xuICAgICAgICBpZiAoZ2V0Qm9keVdyYXBwZXIpIHtcbiAgICAgICAgICBib2R5ID0gZ2V0Qm9keVdyYXBwZXIoYm9keSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGNvbHVtbnMgPSB0aGlzLmdldENvbHVtbnMoKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFRhYmxlLFxuICAgICAgICB7IGNsYXNzTmFtZTogdGFibGVDbGFzc05hbWUsIHN0eWxlOiB0YWJsZVN0eWxlLCBrZXk6ICd0YWJsZScgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDb2xHcm91cCwgeyBjb2x1bW5zOiBjb2x1bW5zLCBmaXhlZDogZml4ZWQgfSksXG4gICAgICAgIGhhc0hlYWQgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZUhlYWRlciwgeyBleHBhbmRlcjogZXhwYW5kZXIsIGNvbHVtbnM6IGNvbHVtbnMsIGZpeGVkOiBmaXhlZCB9KSxcbiAgICAgICAgYm9keVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmFzZVRhYmxlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5CYXNlVGFibGUucHJvcFR5cGVzID0ge1xuICBmaXhlZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmJvb2xdKSxcbiAgY29sdW1uczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIHRhYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGhhc0hlYWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIGhhc0JvZHk6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIHN0b3JlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGV4cGFuZGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGdldFJvd0tleTogUHJvcFR5cGVzLmZ1bmMsXG4gIGlzQW55Q29sdW1uc0ZpeGVkOiBQcm9wVHlwZXMuYm9vbFxufTtcbkJhc2VUYWJsZS5jb250ZXh0VHlwZXMgPSB7XG4gIHRhYmxlOiBQcm9wVHlwZXMuYW55XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoKShCYXNlVGFibGUpOyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBtZWFzdXJlU2Nyb2xsYmFyIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgQmFzZVRhYmxlIGZyb20gJy4vQmFzZVRhYmxlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSGVhZFRhYmxlKHByb3BzLCBfcmVmKSB7XG4gIHZhciB0YWJsZSA9IF9yZWYudGFibGU7XG4gIHZhciBfdGFibGUkcHJvcHMgPSB0YWJsZS5wcm9wcyxcbiAgICAgIHByZWZpeENscyA9IF90YWJsZSRwcm9wcy5wcmVmaXhDbHMsXG4gICAgICBzY3JvbGwgPSBfdGFibGUkcHJvcHMuc2Nyb2xsLFxuICAgICAgc2hvd0hlYWRlciA9IF90YWJsZSRwcm9wcy5zaG93SGVhZGVyO1xuICB2YXIgY29sdW1ucyA9IHByb3BzLmNvbHVtbnMsXG4gICAgICBmaXhlZCA9IHByb3BzLmZpeGVkLFxuICAgICAgdGFibGVDbGFzc05hbWUgPSBwcm9wcy50YWJsZUNsYXNzTmFtZSxcbiAgICAgIGhhbmRsZUJvZHlTY3JvbGxMZWZ0ID0gcHJvcHMuaGFuZGxlQm9keVNjcm9sbExlZnQsXG4gICAgICBleHBhbmRlciA9IHByb3BzLmV4cGFuZGVyO1xuICB2YXIgc2F2ZVJlZiA9IHRhYmxlLnNhdmVSZWY7XG4gIHZhciB1c2VGaXhlZEhlYWRlciA9IHRhYmxlLnByb3BzLnVzZUZpeGVkSGVhZGVyO1xuXG4gIHZhciBoZWFkU3R5bGUgPSB7fTtcbiAgdmFyIHNjcm9sbGJhcldpZHRoID0gbWVhc3VyZVNjcm9sbGJhcih7IGRpcmVjdGlvbjogJ3ZlcnRpY2FsJyB9KTtcblxuICBpZiAoc2Nyb2xsLnkpIHtcbiAgICB1c2VGaXhlZEhlYWRlciA9IHRydWU7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTcwNTFcbiAgICB2YXIgc2Nyb2xsYmFyV2lkdGhPZkhlYWRlciA9IG1lYXN1cmVTY3JvbGxiYXIoeyBkaXJlY3Rpb246ICdob3Jpem9udGFsJywgcHJlZml4Q2xzOiBwcmVmaXhDbHMgfSk7XG4gICAgLy8gQWRkIG5lZ2F0aXZlIG1hcmdpbiBib3R0b20gZm9yIHNjcm9sbCBiYXIgb3ZlcmZsb3cgYnVnXG4gICAgaWYgKHNjcm9sbGJhcldpZHRoT2ZIZWFkZXIgPiAwICYmICFmaXhlZCkge1xuICAgICAgaGVhZFN0eWxlLm1hcmdpbkJvdHRvbSA9ICctJyArIHNjcm9sbGJhcldpZHRoT2ZIZWFkZXIgKyAncHgnO1xuICAgICAgaGVhZFN0eWxlLnBhZGRpbmdCb3R0b20gPSAnMHB4JztcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzE3MDUxXG4gICAgICBoZWFkU3R5bGUub3ZlcmZsb3dYID0gJ3Njcm9sbCc7XG4gICAgICBoZWFkU3R5bGUub3ZlcmZsb3dZID0gJycgKyAoc2Nyb2xsYmFyV2lkdGggPT09IDAgPyAnaGlkZGVuJyA6ICdzY3JvbGwnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIXVzZUZpeGVkSGVhZGVyIHx8ICFzaG93SGVhZGVyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7XG4gICAgICBrZXk6ICdoZWFkVGFibGUnLFxuICAgICAgcmVmOiBmaXhlZCA/IG51bGwgOiBzYXZlUmVmKCdoZWFkVGFibGUnKSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhwcmVmaXhDbHMgKyAnLWhlYWRlcicsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgcHJlZml4Q2xzICsgJy1oaWRlLXNjcm9sbGJhcicsIHNjcm9sbGJhcldpZHRoID4gMCkpLFxuICAgICAgc3R5bGU6IGhlYWRTdHlsZSxcbiAgICAgIG9uU2Nyb2xsOiBoYW5kbGVCb2R5U2Nyb2xsTGVmdFxuICAgIH0sXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChCYXNlVGFibGUsIHtcbiAgICAgIHRhYmxlQ2xhc3NOYW1lOiB0YWJsZUNsYXNzTmFtZSxcbiAgICAgIGhhc0hlYWQ6IHRydWUsXG4gICAgICBoYXNCb2R5OiBmYWxzZSxcbiAgICAgIGZpeGVkOiBmaXhlZCxcbiAgICAgIGNvbHVtbnM6IGNvbHVtbnMsXG4gICAgICBleHBhbmRlcjogZXhwYW5kZXJcbiAgICB9KVxuICApO1xufVxuXG5IZWFkVGFibGUucHJvcFR5cGVzID0ge1xuICBmaXhlZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmJvb2xdKSxcbiAgY29sdW1uczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIHRhYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGhhbmRsZUJvZHlTY3JvbGxMZWZ0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBleHBhbmRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5IZWFkVGFibGUuY29udGV4dFR5cGVzID0ge1xuICB0YWJsZTogUHJvcFR5cGVzLmFueVxufTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBtZWFzdXJlU2Nyb2xsYmFyIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgQmFzZVRhYmxlIGZyb20gJy4vQmFzZVRhYmxlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQm9keVRhYmxlKHByb3BzLCBfcmVmKSB7XG4gIHZhciB0YWJsZSA9IF9yZWYudGFibGU7XG4gIHZhciBfdGFibGUkcHJvcHMgPSB0YWJsZS5wcm9wcyxcbiAgICAgIHByZWZpeENscyA9IF90YWJsZSRwcm9wcy5wcmVmaXhDbHMsXG4gICAgICBzY3JvbGwgPSBfdGFibGUkcHJvcHMuc2Nyb2xsO1xuICB2YXIgY29sdW1ucyA9IHByb3BzLmNvbHVtbnMsXG4gICAgICBmaXhlZCA9IHByb3BzLmZpeGVkLFxuICAgICAgdGFibGVDbGFzc05hbWUgPSBwcm9wcy50YWJsZUNsYXNzTmFtZSxcbiAgICAgIGdldFJvd0tleSA9IHByb3BzLmdldFJvd0tleSxcbiAgICAgIGhhbmRsZUJvZHlTY3JvbGwgPSBwcm9wcy5oYW5kbGVCb2R5U2Nyb2xsLFxuICAgICAgaGFuZGxlV2hlZWwgPSBwcm9wcy5oYW5kbGVXaGVlbCxcbiAgICAgIGV4cGFuZGVyID0gcHJvcHMuZXhwYW5kZXIsXG4gICAgICBpc0FueUNvbHVtbnNGaXhlZCA9IHByb3BzLmlzQW55Q29sdW1uc0ZpeGVkO1xuICB2YXIgc2F2ZVJlZiA9IHRhYmxlLnNhdmVSZWY7XG4gIHZhciB1c2VGaXhlZEhlYWRlciA9IHRhYmxlLnByb3BzLnVzZUZpeGVkSGVhZGVyO1xuXG4gIHZhciBib2R5U3R5bGUgPSBfZXh0ZW5kcyh7fSwgdGFibGUucHJvcHMuYm9keVN0eWxlKTtcbiAgdmFyIGlubmVyQm9keVN0eWxlID0ge307XG5cbiAgaWYgKHNjcm9sbC54IHx8IGZpeGVkKSB7XG4gICAgYm9keVN0eWxlLm92ZXJmbG93WCA9IGJvZHlTdHlsZS5vdmVyZmxvd1ggfHwgJ3Njcm9sbCc7XG4gICAgLy8gRml4IHdlaXJkIHdlYmtpdCByZW5kZXIgYnVnXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvNzc4M1xuICAgIGJvZHlTdHlsZS5XZWJraXRUcmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QgKDAsIDAsIDApJztcbiAgfVxuXG4gIGlmIChzY3JvbGwueSkge1xuICAgIC8vIG1heEhlaWdodCB3aWxsIG1ha2UgZml4ZWQtVGFibGUgc2Nyb2xsaW5nIG5vdCB3b3JraW5nXG4gICAgLy8gc28gd2Ugb25seSBzZXQgbWF4SGVpZ2h0IHRvIGJvZHktVGFibGUgaGVyZVxuICAgIGlmIChmaXhlZCkge1xuICAgICAgaW5uZXJCb2R5U3R5bGUubWF4SGVpZ2h0ID0gYm9keVN0eWxlLm1heEhlaWdodCB8fCBzY3JvbGwueTtcbiAgICAgIGlubmVyQm9keVN0eWxlLm92ZXJmbG93WSA9IGJvZHlTdHlsZS5vdmVyZmxvd1kgfHwgJ3Njcm9sbCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvZHlTdHlsZS5tYXhIZWlnaHQgPSBib2R5U3R5bGUubWF4SGVpZ2h0IHx8IHNjcm9sbC55O1xuICAgIH1cbiAgICBib2R5U3R5bGUub3ZlcmZsb3dZID0gYm9keVN0eWxlLm92ZXJmbG93WSB8fCAnc2Nyb2xsJztcbiAgICB1c2VGaXhlZEhlYWRlciA9IHRydWU7XG5cbiAgICAvLyBBZGQgbmVnYXRpdmUgbWFyZ2luIGJvdHRvbSBmb3Igc2Nyb2xsIGJhciBvdmVyZmxvdyBidWdcbiAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSBtZWFzdXJlU2Nyb2xsYmFyKHsgZGlyZWN0aW9uOiAndmVydGljYWwnIH0pO1xuICAgIGlmIChzY3JvbGxiYXJXaWR0aCA+IDAgJiYgZml4ZWQpIHtcbiAgICAgIGJvZHlTdHlsZS5tYXJnaW5Cb3R0b20gPSAnLScgKyBzY3JvbGxiYXJXaWR0aCArICdweCc7XG4gICAgICBib2R5U3R5bGUucGFkZGluZ0JvdHRvbSA9ICcwcHgnO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlVGFibGUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEJhc2VUYWJsZSwge1xuICAgIHRhYmxlQ2xhc3NOYW1lOiB0YWJsZUNsYXNzTmFtZSxcbiAgICBoYXNIZWFkOiAhdXNlRml4ZWRIZWFkZXIsXG4gICAgaGFzQm9keTogdHJ1ZSxcbiAgICBmaXhlZDogZml4ZWQsXG4gICAgY29sdW1uczogY29sdW1ucyxcbiAgICBleHBhbmRlcjogZXhwYW5kZXIsXG4gICAgZ2V0Um93S2V5OiBnZXRSb3dLZXksXG4gICAgaXNBbnlDb2x1bW5zRml4ZWQ6IGlzQW55Q29sdW1uc0ZpeGVkXG4gIH0pO1xuXG4gIGlmIChmaXhlZCAmJiBjb2x1bW5zLmxlbmd0aCkge1xuICAgIHZhciByZWZOYW1lID0gdm9pZCAwO1xuICAgIGlmIChjb2x1bW5zWzBdLmZpeGVkID09PSAnbGVmdCcgfHwgY29sdW1uc1swXS5maXhlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmVmTmFtZSA9ICdmaXhlZENvbHVtbnNCb2R5TGVmdCc7XG4gICAgfSBlbHNlIGlmIChjb2x1bW5zWzBdLmZpeGVkID09PSAncmlnaHQnKSB7XG4gICAgICByZWZOYW1lID0gJ2ZpeGVkQ29sdW1uc0JvZHlSaWdodCc7XG4gICAgfVxuICAgIGRlbGV0ZSBib2R5U3R5bGUub3ZlcmZsb3dYO1xuICAgIGRlbGV0ZSBib2R5U3R5bGUub3ZlcmZsb3dZO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IGtleTogJ2JvZHlUYWJsZScsIGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1ib2R5LW91dGVyJywgc3R5bGU6IF9leHRlbmRzKHt9LCBib2R5U3R5bGUpIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1ib2R5LWlubmVyJyxcbiAgICAgICAgICBzdHlsZTogaW5uZXJCb2R5U3R5bGUsXG4gICAgICAgICAgcmVmOiBzYXZlUmVmKHJlZk5hbWUpLFxuICAgICAgICAgIG9uV2hlZWw6IGhhbmRsZVdoZWVsLFxuICAgICAgICAgIG9uU2Nyb2xsOiBoYW5kbGVCb2R5U2Nyb2xsXG4gICAgICAgIH0sXG4gICAgICAgIGJhc2VUYWJsZVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICAvLyBTaG91bGQgcHJvdmlkZXMgYHRhYkluZGV4YCBpZiB1c2Ugc2Nyb2xsIHRvIGVuYWJsZSBrZXlib2FyZCBzY3JvbGxcbiAgdmFyIHVzZVRhYkluZGV4ID0gc2Nyb2xsICYmIChzY3JvbGwueCB8fCBzY3JvbGwueSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAge1xuICAgICAgdGFiSW5kZXg6IHVzZVRhYkluZGV4ID8gLTEgOiB1bmRlZmluZWQsXG4gICAgICBrZXk6ICdib2R5VGFibGUnLFxuICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLWJvZHknLFxuICAgICAgc3R5bGU6IGJvZHlTdHlsZSxcbiAgICAgIHJlZjogc2F2ZVJlZignYm9keVRhYmxlJyksXG4gICAgICBvbldoZWVsOiBoYW5kbGVXaGVlbCxcbiAgICAgIG9uU2Nyb2xsOiBoYW5kbGVCb2R5U2Nyb2xsXG4gICAgfSxcbiAgICBiYXNlVGFibGVcbiAgKTtcbn1cblxuQm9keVRhYmxlLnByb3BUeXBlcyA9IHtcbiAgZml4ZWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ib29sXSksXG4gIGNvbHVtbnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICB0YWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBoYW5kbGVXaGVlbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaGFuZGxlQm9keVNjcm9sbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0Um93S2V5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBleHBhbmRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBpc0FueUNvbHVtbnNGaXhlZDogUHJvcFR5cGVzLmJvb2xcbn07XG5cbkJvZHlUYWJsZS5jb250ZXh0VHlwZXMgPSB7XG4gIHRhYmxlOiBQcm9wVHlwZXMuYW55XG59OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheSc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAnbWluaS1zdG9yZSc7XG5pbXBvcnQgeyBwb2x5ZmlsbCB9IGZyb20gJ3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0JztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnc2hhbGxvd2VxdWFsJztcbmltcG9ydCBUYWJsZVJvdyBmcm9tICcuL1RhYmxlUm93JztcbmltcG9ydCB7IHJlbW92ZSB9IGZyb20gJy4vdXRpbHMnO1xuXG52YXIgRXhwYW5kYWJsZVRhYmxlID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEV4cGFuZGFibGVUYWJsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRXhwYW5kYWJsZVRhYmxlKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV4cGFuZGFibGVUYWJsZSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRXhwYW5kYWJsZVRhYmxlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRXhwYW5kYWJsZVRhYmxlKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX2luaXRpYWxpc2VQcm9wcy5jYWxsKF90aGlzKTtcblxuICAgIHZhciBkYXRhID0gcHJvcHMuZGF0YSxcbiAgICAgICAgY2hpbGRyZW5Db2x1bW5OYW1lID0gcHJvcHMuY2hpbGRyZW5Db2x1bW5OYW1lLFxuICAgICAgICBkZWZhdWx0RXhwYW5kQWxsUm93cyA9IHByb3BzLmRlZmF1bHRFeHBhbmRBbGxSb3dzLFxuICAgICAgICBleHBhbmRlZFJvd0tleXMgPSBwcm9wcy5leHBhbmRlZFJvd0tleXMsXG4gICAgICAgIGRlZmF1bHRFeHBhbmRlZFJvd0tleXMgPSBwcm9wcy5kZWZhdWx0RXhwYW5kZWRSb3dLZXlzLFxuICAgICAgICBnZXRSb3dLZXkgPSBwcm9wcy5nZXRSb3dLZXk7XG5cblxuICAgIHZhciBmaW5hbEV4cGFuZGVkUm93S2V5cyA9IFtdO1xuICAgIHZhciByb3dzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShkYXRhKSk7XG5cbiAgICBpZiAoZGVmYXVsdEV4cGFuZEFsbFJvd3MpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcm93ID0gcm93c1tpXTtcbiAgICAgICAgZmluYWxFeHBhbmRlZFJvd0tleXMucHVzaChnZXRSb3dLZXkocm93LCBpKSk7XG4gICAgICAgIHJvd3MgPSByb3dzLmNvbmNhdChyb3dbY2hpbGRyZW5Db2x1bW5OYW1lXSB8fCBbXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpbmFsRXhwYW5kZWRSb3dLZXlzID0gZXhwYW5kZWRSb3dLZXlzIHx8IGRlZmF1bHRFeHBhbmRlZFJvd0tleXM7XG4gICAgfVxuXG4gICAgX3RoaXMuY29sdW1uTWFuYWdlciA9IHByb3BzLmNvbHVtbk1hbmFnZXI7XG4gICAgX3RoaXMuc3RvcmUgPSBwcm9wcy5zdG9yZTtcblxuICAgIF90aGlzLnN0b3JlLnNldFN0YXRlKHtcbiAgICAgIGV4cGFuZGVkUm93c0hlaWdodDoge30sXG4gICAgICBleHBhbmRlZFJvd0tleXM6IGZpbmFsRXhwYW5kZWRSb3dLZXlzXG4gICAgfSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEV4cGFuZGFibGVUYWJsZSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5oYW5kbGVVcGRhdGVkKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgaWYgKCdleHBhbmRlZFJvd0tleXMnIGluIHRoaXMucHJvcHMpIHtcbiAgICAgICAgdGhpcy5zdG9yZS5zZXRTdGF0ZSh7XG4gICAgICAgICAgZXhwYW5kZWRSb3dLZXlzOiB0aGlzLnByb3BzLmV4cGFuZGVkUm93S2V5c1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaGFuZGxlVXBkYXRlZCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZVVwZGF0ZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVVcGRhdGVkKCkge1xuICAgICAgLy8gV2Ugc2hvdWxkIHJlY29yZCBsYXRlc3QgZXhwYW5kZWQgcm93cyB0byBhdm9pZCBtdWx0aXBsZSByb3dzIHJlbW92ZSBjYXVzZSBgb25FeHBhbmRlZFJvd3NDaGFuZ2VgIHRyaWdnZXIgbWFueSB0aW1lc1xuICAgICAgdGhpcy5sYXRlc3RFeHBhbmRlZFJvd3MgPSBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlckV4cGFuZGVkUm93JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRXhwYW5kZWRSb3cocmVjb3JkLCBpbmRleCwgX3JlbmRlciwgY2xhc3NOYW1lLCBhbmNlc3RvcktleXMsIGluZGVudCwgZml4ZWQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIGV4cGFuZEljb25Bc0NlbGwgPSBfcHJvcHMuZXhwYW5kSWNvbkFzQ2VsbCxcbiAgICAgICAgICBpbmRlbnRTaXplID0gX3Byb3BzLmluZGVudFNpemU7XG5cbiAgICAgIHZhciBwYXJlbnRLZXkgPSBhbmNlc3RvcktleXNbYW5jZXN0b3JLZXlzLmxlbmd0aCAtIDFdO1xuICAgICAgdmFyIHJvd0tleSA9IHBhcmVudEtleSArICctZXh0cmEtcm93JztcbiAgICAgIHZhciBjb21wb25lbnRzID0ge1xuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgcm93OiAndHInLFxuICAgICAgICAgIGNlbGw6ICd0ZCdcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjb2xDb3VudCA9IHZvaWQgMDtcbiAgICAgIGlmIChmaXhlZCA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIGNvbENvdW50ID0gdGhpcy5jb2x1bW5NYW5hZ2VyLmxlZnRMZWFmQ29sdW1ucygpLmxlbmd0aDtcbiAgICAgIH0gZWxzZSBpZiAoZml4ZWQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgY29sQ291bnQgPSB0aGlzLmNvbHVtbk1hbmFnZXIucmlnaHRMZWFmQ29sdW1ucygpLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbENvdW50ID0gdGhpcy5jb2x1bW5NYW5hZ2VyLmxlYWZDb2x1bW5zKCkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIGNvbHVtbnMgPSBbe1xuICAgICAgICBrZXk6ICdleHRyYS1yb3cnLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICB2YXIgX3N0b3JlJGdldFN0YXRlID0gX3RoaXMyLnN0b3JlLmdldFN0YXRlKCksXG4gICAgICAgICAgICAgIGV4cGFuZGVkUm93S2V5cyA9IF9zdG9yZSRnZXRTdGF0ZS5leHBhbmRlZFJvd0tleXM7XG5cbiAgICAgICAgICB2YXIgZXhwYW5kZWQgPSAhIX5leHBhbmRlZFJvd0tleXMuaW5kZXhPZihwYXJlbnRLZXkpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICBjb2xTcGFuOiBjb2xDb3VudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBmaXhlZCAhPT0gJ3JpZ2h0JyA/IF9yZW5kZXIocmVjb3JkLCBpbmRleCwgaW5kZW50LCBleHBhbmRlZCkgOiAnJm5ic3A7J1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1dO1xuICAgICAgaWYgKGV4cGFuZEljb25Bc0NlbGwgJiYgZml4ZWQgIT09ICdyaWdodCcpIHtcbiAgICAgICAgY29sdW1ucy51bnNoaWZ0KHtcbiAgICAgICAgICBrZXk6ICdleHBhbmQtaWNvbi1wbGFjZWhvbGRlcicsXG4gICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUYWJsZVJvdywge1xuICAgICAgICBrZXk6IHJvd0tleSxcbiAgICAgICAgY29sdW1uczogY29sdW1ucyxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIHJvd0tleTogcm93S2V5LFxuICAgICAgICBhbmNlc3RvcktleXM6IGFuY2VzdG9yS2V5cyxcbiAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMgKyAnLWV4cGFuZGVkLXJvdycsXG4gICAgICAgIGluZGVudFNpemU6IGluZGVudFNpemUsXG4gICAgICAgIGluZGVudDogaW5kZW50LFxuICAgICAgICBmaXhlZDogZml4ZWQsXG4gICAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsXG4gICAgICAgIGV4cGFuZGVkUm93OiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGF0YSA9IF9wcm9wczIuZGF0YSxcbiAgICAgICAgICBjaGlsZHJlbkNvbHVtbk5hbWUgPSBfcHJvcHMyLmNoaWxkcmVuQ29sdW1uTmFtZSxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczIuY2hpbGRyZW47XG5cbiAgICAgIHZhciBuZWVkSW5kZW50U3BhY2VkID0gZGF0YS5zb21lKGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgcmV0dXJuIHJlY29yZFtjaGlsZHJlbkNvbHVtbk5hbWVdO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBjaGlsZHJlbih7XG4gICAgICAgIHByb3BzOiB0aGlzLnByb3BzLFxuICAgICAgICBuZWVkSW5kZW50U3BhY2VkOiBuZWVkSW5kZW50U3BhY2VkLFxuICAgICAgICByZW5kZXJSb3dzOiB0aGlzLnJlbmRlclJvd3MsXG4gICAgICAgIGhhbmRsZUV4cGFuZENoYW5nZTogdGhpcy5oYW5kbGVFeHBhbmRDaGFuZ2UsXG4gICAgICAgIHJlbmRlckV4cGFuZEluZGVudENlbGw6IHRoaXMucmVuZGVyRXhwYW5kSW5kZW50Q2VsbFxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEV4cGFuZGFibGVUYWJsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRXhwYW5kYWJsZVRhYmxlLnByb3BUeXBlcyA9IHtcbiAgZXhwYW5kSWNvbkFzQ2VsbDogUHJvcFR5cGVzLmJvb2wsXG4gIGV4cGFuZGVkUm93S2V5czogUHJvcFR5cGVzLmFycmF5LFxuICBleHBhbmRlZFJvd0NsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGRlZmF1bHRFeHBhbmRBbGxSb3dzOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGVmYXVsdEV4cGFuZGVkUm93S2V5czogUHJvcFR5cGVzLmFycmF5LFxuICBleHBhbmRJY29uQ29sdW1uSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGV4cGFuZGVkUm93UmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgZXhwYW5kSWNvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuQ29sdW1uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgaW5kZW50U2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgb25FeHBhbmQ6IFByb3BUeXBlcy5mdW5jLFxuICBvbkV4cGFuZGVkUm93c0NoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGNvbHVtbk1hbmFnZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgc3RvcmU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGRhdGE6IFByb3BUeXBlcy5hcnJheSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFJvd0tleTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufTtcbkV4cGFuZGFibGVUYWJsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGV4cGFuZEljb25Bc0NlbGw6IGZhbHNlLFxuICBleHBhbmRlZFJvd0NsYXNzTmFtZTogZnVuY3Rpb24gZXhwYW5kZWRSb3dDbGFzc05hbWUoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuICBleHBhbmRJY29uQ29sdW1uSW5kZXg6IDAsXG4gIGRlZmF1bHRFeHBhbmRBbGxSb3dzOiBmYWxzZSxcbiAgZGVmYXVsdEV4cGFuZGVkUm93S2V5czogW10sXG4gIGNoaWxkcmVuQ29sdW1uTmFtZTogJ2NoaWxkcmVuJyxcbiAgaW5kZW50U2l6ZTogMTUsXG4gIG9uRXhwYW5kOiBmdW5jdGlvbiBvbkV4cGFuZCgpIHt9LFxuICBvbkV4cGFuZGVkUm93c0NoYW5nZTogZnVuY3Rpb24gb25FeHBhbmRlZFJvd3NDaGFuZ2UoKSB7fVxufTtcblxudmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICB2YXIgX3RoaXMzID0gdGhpcztcblxuICB0aGlzLmhhbmRsZUV4cGFuZENoYW5nZSA9IGZ1bmN0aW9uIChleHBhbmRlZCwgcmVjb3JkLCBldmVudCwgcm93S2V5KSB7XG4gICAgdmFyIGRlc3Ryb3kgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3BzMyA9IF90aGlzMy5wcm9wcyxcbiAgICAgICAgb25FeHBhbmRlZFJvd3NDaGFuZ2UgPSBfcHJvcHMzLm9uRXhwYW5kZWRSb3dzQ2hhbmdlLFxuICAgICAgICBvbkV4cGFuZCA9IF9wcm9wczMub25FeHBhbmQ7XG5cbiAgICB2YXIgX3N0b3JlJGdldFN0YXRlMiA9IF90aGlzMy5zdG9yZS5nZXRTdGF0ZSgpLFxuICAgICAgICBleHBhbmRlZFJvd0tleXMgPSBfc3RvcmUkZ2V0U3RhdGUyLmV4cGFuZGVkUm93S2V5cztcblxuICAgIGlmIChleHBhbmRlZCkge1xuICAgICAgLy8gcm93IHdhcyBleHBhbmRlZFxuICAgICAgZXhwYW5kZWRSb3dLZXlzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShleHBhbmRlZFJvd0tleXMpLCBbcm93S2V5XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJvdyB3YXMgY29sbGFwc2VcbiAgICAgIHZhciBleHBhbmRlZFJvd0luZGV4ID0gZXhwYW5kZWRSb3dLZXlzLmluZGV4T2Yocm93S2V5KTtcbiAgICAgIGlmIChleHBhbmRlZFJvd0luZGV4ICE9PSAtMSkge1xuICAgICAgICBleHBhbmRlZFJvd0tleXMgPSByZW1vdmUoZXhwYW5kZWRSb3dLZXlzLCByb3dLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghX3RoaXMzLnByb3BzLmV4cGFuZGVkUm93S2V5cykge1xuICAgICAgX3RoaXMzLnN0b3JlLnNldFN0YXRlKHsgZXhwYW5kZWRSb3dLZXlzOiBleHBhbmRlZFJvd0tleXMgfSk7XG4gICAgfVxuXG4gICAgLy8gRGUtZHVwIG9mIHJlcGVhdCBjYWxsXG4gICAgaWYgKCFfdGhpczMubGF0ZXN0RXhwYW5kZWRSb3dzIHx8ICFzaGFsbG93RXF1YWwoX3RoaXMzLmxhdGVzdEV4cGFuZGVkUm93cywgZXhwYW5kZWRSb3dLZXlzKSkge1xuICAgICAgX3RoaXMzLmxhdGVzdEV4cGFuZGVkUm93cyA9IGV4cGFuZGVkUm93S2V5cztcbiAgICAgIG9uRXhwYW5kZWRSb3dzQ2hhbmdlKGV4cGFuZGVkUm93S2V5cyk7XG4gICAgfVxuICAgIGlmICghZGVzdHJveSkge1xuICAgICAgb25FeHBhbmQoZXhwYW5kZWQsIHJlY29yZCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMucmVuZGVyRXhwYW5kSW5kZW50Q2VsbCA9IGZ1bmN0aW9uIChyb3dzLCBmaXhlZCkge1xuICAgIHZhciBfcHJvcHM0ID0gX3RoaXMzLnByb3BzLFxuICAgICAgICBwcmVmaXhDbHMgPSBfcHJvcHM0LnByZWZpeENscyxcbiAgICAgICAgZXhwYW5kSWNvbkFzQ2VsbCA9IF9wcm9wczQuZXhwYW5kSWNvbkFzQ2VsbDtcblxuICAgIGlmICghZXhwYW5kSWNvbkFzQ2VsbCB8fCBmaXhlZCA9PT0gJ3JpZ2h0JyB8fCAhcm93cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaWNvbkNvbHVtbiA9IHtcbiAgICAgIGtleTogJ3JjLXRhYmxlLWV4cGFuZC1pY29uLWNlbGwnLFxuICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLWV4cGFuZC1pY29uLXRoJyxcbiAgICAgIHRpdGxlOiAnJyxcbiAgICAgIHJvd1NwYW46IHJvd3MubGVuZ3RoXG4gICAgfTtcblxuICAgIHJvd3NbMF0udW5zaGlmdChfZXh0ZW5kcyh7fSwgaWNvbkNvbHVtbiwgeyBjb2x1bW46IGljb25Db2x1bW4gfSkpO1xuICB9O1xuXG4gIHRoaXMucmVuZGVyUm93cyA9IGZ1bmN0aW9uIChyZW5kZXJSb3dzLCByb3dzLCByZWNvcmQsIGluZGV4LCBpbmRlbnQsIGZpeGVkLCBwYXJlbnRLZXksIGFuY2VzdG9yS2V5cykge1xuICAgIHZhciBfcHJvcHM1ID0gX3RoaXMzLnByb3BzLFxuICAgICAgICBleHBhbmRlZFJvd0NsYXNzTmFtZSA9IF9wcm9wczUuZXhwYW5kZWRSb3dDbGFzc05hbWUsXG4gICAgICAgIGV4cGFuZGVkUm93UmVuZGVyID0gX3Byb3BzNS5leHBhbmRlZFJvd1JlbmRlcixcbiAgICAgICAgY2hpbGRyZW5Db2x1bW5OYW1lID0gX3Byb3BzNS5jaGlsZHJlbkNvbHVtbk5hbWU7XG5cbiAgICB2YXIgY2hpbGRyZW5EYXRhID0gcmVjb3JkW2NoaWxkcmVuQ29sdW1uTmFtZV07XG4gICAgdmFyIG5leHRBbmNlc3RvcktleXMgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFuY2VzdG9yS2V5cyksIFtwYXJlbnRLZXldKTtcbiAgICB2YXIgbmV4dEluZGVudCA9IGluZGVudCArIDE7XG5cbiAgICBpZiAoZXhwYW5kZWRSb3dSZW5kZXIpIHtcbiAgICAgIHJvd3MucHVzaChfdGhpczMucmVuZGVyRXhwYW5kZWRSb3cocmVjb3JkLCBpbmRleCwgZXhwYW5kZWRSb3dSZW5kZXIsIGV4cGFuZGVkUm93Q2xhc3NOYW1lKHJlY29yZCwgaW5kZXgsIGluZGVudCksIG5leHRBbmNlc3RvcktleXMsIG5leHRJbmRlbnQsIGZpeGVkKSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkcmVuRGF0YSkge1xuICAgICAgcm93cy5wdXNoLmFwcGx5KHJvd3MsIF90b0NvbnN1bWFibGVBcnJheShyZW5kZXJSb3dzKGNoaWxkcmVuRGF0YSwgbmV4dEluZGVudCwgbmV4dEFuY2VzdG9yS2V5cykpKTtcbiAgICB9XG4gIH07XG59O1xuXG5wb2x5ZmlsbChFeHBhbmRhYmxlVGFibGUpO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KCkoRXhwYW5kYWJsZVRhYmxlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHNoYWxsb3dlcXVhbCBmcm9tICdzaGFsbG93ZXF1YWwnO1xuaW1wb3J0IGFkZEV2ZW50TGlzdGVuZXIgZnJvbSAncmMtdXRpbC9lcy9Eb20vYWRkRXZlbnRMaXN0ZW5lcic7XG5pbXBvcnQgeyBQcm92aWRlciwgY3JlYXRlIH0gZnJvbSAnbWluaS1zdG9yZSc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnbG9kYXNoL21lcmdlJztcbmltcG9ydCBjbGFzc2VzIGZyb20gJ2NvbXBvbmVudC1jbGFzc2VzJztcbmltcG9ydCB7IHBvbHlmaWxsIH0gZnJvbSAncmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQnO1xuaW1wb3J0IHsgZGVib3VuY2UsIHdhcm5pbmdPbmNlLCBnZXREYXRhQW5kQXJpYVByb3BzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgQ29sdW1uTWFuYWdlciBmcm9tICcuL0NvbHVtbk1hbmFnZXInO1xuaW1wb3J0IEhlYWRUYWJsZSBmcm9tICcuL0hlYWRUYWJsZSc7XG5pbXBvcnQgQm9keVRhYmxlIGZyb20gJy4vQm9keVRhYmxlJztcbmltcG9ydCBFeHBhbmRhYmxlVGFibGUgZnJvbSAnLi9FeHBhbmRhYmxlVGFibGUnO1xuXG52YXIgVGFibGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGFibGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYmxlKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhYmxlKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUYWJsZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhYmxlKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7fTtcblxuICAgIF90aGlzLmdldFJvd0tleSA9IGZ1bmN0aW9uIChyZWNvcmQsIGluZGV4KSB7XG4gICAgICB2YXIgcm93S2V5ID0gX3RoaXMucHJvcHMucm93S2V5O1xuICAgICAgdmFyIGtleSA9IHR5cGVvZiByb3dLZXkgPT09ICdmdW5jdGlvbicgPyByb3dLZXkocmVjb3JkLCBpbmRleCkgOiByZWNvcmRbcm93S2V5XTtcbiAgICAgIHdhcm5pbmdPbmNlKGtleSAhPT0gdW5kZWZpbmVkLCAnRWFjaCByZWNvcmQgaW4gdGFibGUgc2hvdWxkIGhhdmUgYSB1bmlxdWUgYGtleWAgcHJvcCwnICsgJ29yIHNldCBgcm93S2V5YCB0byBhbiB1bmlxdWUgcHJpbWFyeSBrZXkuJyk7XG4gICAgICByZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgPyBpbmRleCA6IGtleTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlV2luZG93UmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc3luY0ZpeGVkVGFibGVSb3dIZWlnaHQoKTtcbiAgICAgIF90aGlzLnNldFNjcm9sbFBvc2l0aW9uQ2xhc3NOYW1lKCk7XG4gICAgfTtcblxuICAgIF90aGlzLnN5bmNGaXhlZFRhYmxlUm93SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRhYmxlUmVjdCA9IF90aGlzLnRhYmxlTm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIC8vIElmIHRhYmxlTm9kZSdzIGhlaWdodCBsZXNzIHRoYW4gMCwgc3VwcG9zZSBpdCBpcyBoaWRkZW4gYW5kIGRvbid0IHJlY2FsY3VsYXRlIHJvd0hlaWdodC5cbiAgICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvNDgzNlxuICAgICAgaWYgKHRhYmxlUmVjdC5oZWlnaHQgIT09IHVuZGVmaW5lZCAmJiB0YWJsZVJlY3QuaGVpZ2h0IDw9IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHByZWZpeENscyA9IF90aGlzLnByb3BzLnByZWZpeENscztcblxuICAgICAgdmFyIGhlYWRSb3dzID0gX3RoaXMuaGVhZFRhYmxlID8gX3RoaXMuaGVhZFRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoZWFkJykgOiBfdGhpcy5ib2R5VGFibGUucXVlcnlTZWxlY3RvckFsbCgndGhlYWQnKTtcbiAgICAgIHZhciBib2R5Um93cyA9IF90aGlzLmJvZHlUYWJsZS5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHByZWZpeENscyArICctcm93JykgfHwgW107XG4gICAgICB2YXIgZml4ZWRDb2x1bW5zSGVhZFJvd3NIZWlnaHQgPSBbXS5tYXAuY2FsbChoZWFkUm93cywgZnVuY3Rpb24gKHJvdykge1xuICAgICAgICByZXR1cm4gcm93LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCB8fCAnYXV0byc7XG4gICAgICB9KTtcbiAgICAgIHZhciBzdGF0ZSA9IF90aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgICB2YXIgZml4ZWRDb2x1bW5zQm9keVJvd3NIZWlnaHQgPSBbXS5yZWR1Y2UuY2FsbChib2R5Um93cywgZnVuY3Rpb24gKGFjYywgcm93KSB7XG4gICAgICAgIHZhciByb3dLZXkgPSByb3cuZ2V0QXR0cmlidXRlKCdkYXRhLXJvdy1rZXknKTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHJvdy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgfHwgc3RhdGUuZml4ZWRDb2x1bW5zQm9keVJvd3NIZWlnaHRbcm93S2V5XSB8fCAnYXV0byc7XG4gICAgICAgIGFjY1tyb3dLZXldID0gaGVpZ2h0O1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuICAgICAgaWYgKHNoYWxsb3dlcXVhbChzdGF0ZS5maXhlZENvbHVtbnNIZWFkUm93c0hlaWdodCwgZml4ZWRDb2x1bW5zSGVhZFJvd3NIZWlnaHQpICYmIHNoYWxsb3dlcXVhbChzdGF0ZS5maXhlZENvbHVtbnNCb2R5Um93c0hlaWdodCwgZml4ZWRDb2x1bW5zQm9keVJvd3NIZWlnaHQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc3RvcmUuc2V0U3RhdGUoe1xuICAgICAgICBmaXhlZENvbHVtbnNIZWFkUm93c0hlaWdodDogZml4ZWRDb2x1bW5zSGVhZFJvd3NIZWlnaHQsXG4gICAgICAgIGZpeGVkQ29sdW1uc0JvZHlSb3dzSGVpZ2h0OiBmaXhlZENvbHVtbnNCb2R5Um93c0hlaWdodFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJvZHlTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIC8vIEZpeCBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy83NjM1XG4gICAgICBpZiAoZS5jdXJyZW50VGFyZ2V0ICE9PSBlLnRhcmdldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMkc2Nyb2xsID0gX3RoaXMucHJvcHMuc2Nyb2xsLFxuICAgICAgICAgIHNjcm9sbCA9IF90aGlzJHByb3BzJHNjcm9sbCA9PT0gdW5kZWZpbmVkID8ge30gOiBfdGhpcyRwcm9wcyRzY3JvbGw7XG4gICAgICB2YXIgaGVhZFRhYmxlID0gX3RoaXMuaGVhZFRhYmxlLFxuICAgICAgICAgIGJvZHlUYWJsZSA9IF90aGlzLmJvZHlUYWJsZTtcblxuICAgICAgaWYgKHRhcmdldC5zY3JvbGxMZWZ0ICE9PSBfdGhpcy5sYXN0U2Nyb2xsTGVmdCAmJiBzY3JvbGwueCkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSBib2R5VGFibGUgJiYgaGVhZFRhYmxlKSB7XG4gICAgICAgICAgaGVhZFRhYmxlLnNjcm9sbExlZnQgPSB0YXJnZXQuc2Nyb2xsTGVmdDtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09IGhlYWRUYWJsZSAmJiBib2R5VGFibGUpIHtcbiAgICAgICAgICBib2R5VGFibGUuc2Nyb2xsTGVmdCA9IHRhcmdldC5zY3JvbGxMZWZ0O1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLnNldFNjcm9sbFBvc2l0aW9uQ2xhc3NOYW1lKCk7XG4gICAgICB9XG4gICAgICAvLyBSZW1lbWJlciBsYXN0IHNjcm9sbExlZnQgZm9yIHNjcm9sbCBkaXJlY3Rpb24gZGV0ZWN0aW5nLlxuICAgICAgX3RoaXMubGFzdFNjcm9sbExlZnQgPSB0YXJnZXQuc2Nyb2xsTGVmdDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQm9keVNjcm9sbFRvcCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAvLyBGaXggaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvOTAzM1xuICAgICAgaWYgKGUuY3VycmVudFRhcmdldCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBfdGhpcyRwcm9wcyRzY3JvbGwyID0gX3RoaXMucHJvcHMuc2Nyb2xsLFxuICAgICAgICAgIHNjcm9sbCA9IF90aGlzJHByb3BzJHNjcm9sbDIgPT09IHVuZGVmaW5lZCA/IHt9IDogX3RoaXMkcHJvcHMkc2Nyb2xsMjtcbiAgICAgIHZhciBoZWFkVGFibGUgPSBfdGhpcy5oZWFkVGFibGUsXG4gICAgICAgICAgYm9keVRhYmxlID0gX3RoaXMuYm9keVRhYmxlLFxuICAgICAgICAgIGZpeGVkQ29sdW1uc0JvZHlMZWZ0ID0gX3RoaXMuZml4ZWRDb2x1bW5zQm9keUxlZnQsXG4gICAgICAgICAgZml4ZWRDb2x1bW5zQm9keVJpZ2h0ID0gX3RoaXMuZml4ZWRDb2x1bW5zQm9keVJpZ2h0O1xuXG4gICAgICBpZiAodGFyZ2V0LnNjcm9sbFRvcCAhPT0gX3RoaXMubGFzdFNjcm9sbFRvcCAmJiBzY3JvbGwueSAmJiB0YXJnZXQgIT09IGhlYWRUYWJsZSkge1xuICAgICAgICB2YXIgc2Nyb2xsVG9wID0gdGFyZ2V0LnNjcm9sbFRvcDtcbiAgICAgICAgaWYgKGZpeGVkQ29sdW1uc0JvZHlMZWZ0ICYmIHRhcmdldCAhPT0gZml4ZWRDb2x1bW5zQm9keUxlZnQpIHtcbiAgICAgICAgICBmaXhlZENvbHVtbnNCb2R5TGVmdC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpeGVkQ29sdW1uc0JvZHlSaWdodCAmJiB0YXJnZXQgIT09IGZpeGVkQ29sdW1uc0JvZHlSaWdodCkge1xuICAgICAgICAgIGZpeGVkQ29sdW1uc0JvZHlSaWdodC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlUYWJsZSAmJiB0YXJnZXQgIT09IGJvZHlUYWJsZSkge1xuICAgICAgICAgIGJvZHlUYWJsZS5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFJlbWVtYmVyIGxhc3Qgc2Nyb2xsVG9wIGZvciBzY3JvbGwgZGlyZWN0aW9uIGRldGVjdGluZy5cbiAgICAgIF90aGlzLmxhc3RTY3JvbGxUb3AgPSB0YXJnZXQuc2Nyb2xsVG9wO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCb2R5U2Nyb2xsID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLmhhbmRsZUJvZHlTY3JvbGxMZWZ0KGUpO1xuICAgICAgX3RoaXMuaGFuZGxlQm9keVNjcm9sbFRvcChlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlV2hlZWwgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyRzY3JvbGwzID0gX3RoaXMucHJvcHMuc2Nyb2xsLFxuICAgICAgICAgIHNjcm9sbCA9IF90aGlzJHByb3BzJHNjcm9sbDMgPT09IHVuZGVmaW5lZCA/IHt9IDogX3RoaXMkcHJvcHMkc2Nyb2xsMztcblxuICAgICAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9UcmlkZW50XFwvN1xcLi8pICYmIHNjcm9sbC55KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciB3ZCA9IGV2ZW50LmRlbHRhWTtcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgdmFyIGJvZHlUYWJsZSA9IF90aGlzLmJvZHlUYWJsZSxcbiAgICAgICAgICAgIGZpeGVkQ29sdW1uc0JvZHlMZWZ0ID0gX3RoaXMuZml4ZWRDb2x1bW5zQm9keUxlZnQsXG4gICAgICAgICAgICBmaXhlZENvbHVtbnNCb2R5UmlnaHQgPSBfdGhpcy5maXhlZENvbHVtbnNCb2R5UmlnaHQ7XG5cbiAgICAgICAgdmFyIHNjcm9sbFRvcCA9IDA7XG5cbiAgICAgICAgaWYgKF90aGlzLmxhc3RTY3JvbGxUb3ApIHtcbiAgICAgICAgICBzY3JvbGxUb3AgPSBfdGhpcy5sYXN0U2Nyb2xsVG9wICsgd2Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2Nyb2xsVG9wID0gd2Q7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZml4ZWRDb2x1bW5zQm9keUxlZnQgJiYgdGFyZ2V0ICE9PSBmaXhlZENvbHVtbnNCb2R5TGVmdCkge1xuICAgICAgICAgIGZpeGVkQ29sdW1uc0JvZHlMZWZ0LnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZml4ZWRDb2x1bW5zQm9keVJpZ2h0ICYmIHRhcmdldCAhPT0gZml4ZWRDb2x1bW5zQm9keVJpZ2h0KSB7XG4gICAgICAgICAgZml4ZWRDb2x1bW5zQm9keVJpZ2h0LnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVRhYmxlICYmIHRhcmdldCAhPT0gYm9keVRhYmxlKSB7XG4gICAgICAgICAgYm9keVRhYmxlLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zYXZlUmVmID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBfdGhpc1tuYW1lXSA9IG5vZGU7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBbJ29uUm93Q2xpY2snLCAnb25Sb3dEb3VibGVDbGljaycsICdvblJvd0NvbnRleHRNZW51JywgJ29uUm93TW91c2VFbnRlcicsICdvblJvd01vdXNlTGVhdmUnXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB3YXJuaW5nT25jZShwcm9wc1tuYW1lXSA9PT0gdW5kZWZpbmVkLCBuYW1lICsgJyBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIG9uUm93IGluc3RlYWQuJyk7XG4gICAgfSk7XG5cbiAgICB3YXJuaW5nT25jZShwcm9wcy5nZXRCb2R5V3JhcHBlciA9PT0gdW5kZWZpbmVkLCAnZ2V0Qm9keVdyYXBwZXIgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBjdXN0b20gY29tcG9uZW50cyBpbnN0ZWFkLicpO1xuXG4gICAgX3RoaXMuY29sdW1uTWFuYWdlciA9IG5ldyBDb2x1bW5NYW5hZ2VyKHByb3BzLmNvbHVtbnMsIHByb3BzLmNoaWxkcmVuKTtcblxuICAgIF90aGlzLnN0b3JlID0gY3JlYXRlKHtcbiAgICAgIGN1cnJlbnRIb3ZlcktleTogbnVsbCxcbiAgICAgIGZpeGVkQ29sdW1uc0hlYWRSb3dzSGVpZ2h0OiBbXSxcbiAgICAgIGZpeGVkQ29sdW1uc0JvZHlSb3dzSGVpZ2h0OiB7fVxuICAgIH0pO1xuXG4gICAgX3RoaXMuc2V0U2Nyb2xsUG9zaXRpb24oJ2xlZnQnKTtcblxuICAgIF90aGlzLmRlYm91bmNlZFdpbmRvd1Jlc2l6ZSA9IGRlYm91bmNlKF90aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSwgMTUwKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGFibGUsIFt7XG4gICAga2V5OiAnZ2V0Q2hpbGRDb250ZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGFibGU6IHtcbiAgICAgICAgICBwcm9wczogdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb2x1bW5NYW5hZ2VyOiB0aGlzLmNvbHVtbk1hbmFnZXIsXG4gICAgICAgICAgc2F2ZVJlZjogdGhpcy5zYXZlUmVmLFxuICAgICAgICAgIGNvbXBvbmVudHM6IG1lcmdlKHtcbiAgICAgICAgICAgIHRhYmxlOiAndGFibGUnLFxuICAgICAgICAgICAgaGVhZGVyOiB7XG4gICAgICAgICAgICAgIHdyYXBwZXI6ICd0aGVhZCcsXG4gICAgICAgICAgICAgIHJvdzogJ3RyJyxcbiAgICAgICAgICAgICAgY2VsbDogJ3RoJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgd3JhcHBlcjogJ3Rib2R5JyxcbiAgICAgICAgICAgICAgcm93OiAndHInLFxuICAgICAgICAgICAgICBjZWxsOiAndGQnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgdGhpcy5wcm9wcy5jb21wb25lbnRzKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb2x1bW5NYW5hZ2VyLmlzQW55Q29sdW1uc0ZpeGVkKCkpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVXaW5kb3dSZXNpemUoKTtcbiAgICAgICAgdGhpcy5yZXNpemVFdmVudCA9IGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCAncmVzaXplJywgdGhpcy5kZWJvdW5jZWRXaW5kb3dSZXNpemUpO1xuICAgICAgfVxuXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xMTYzNVxuICAgICAgaWYgKHRoaXMuaGVhZFRhYmxlKSB7XG4gICAgICAgIHRoaXMuaGVhZFRhYmxlLnNjcm9sbExlZnQgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYm9keVRhYmxlKSB7XG4gICAgICAgIHRoaXMuYm9keVRhYmxlLnNjcm9sbExlZnQgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLmNvbHVtbk1hbmFnZXIuaXNBbnlDb2x1bW5zRml4ZWQoKSkge1xuICAgICAgICB0aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSgpO1xuICAgICAgICBpZiAoIXRoaXMucmVzaXplRXZlbnQpIHtcbiAgICAgICAgICB0aGlzLnJlc2l6ZUV2ZW50ID0gYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCB0aGlzLmRlYm91bmNlZFdpbmRvd1Jlc2l6ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIHdoZW4gdGFibGUgY2hhbmdlcyB0byBlbXB0eSwgcmVzZXQgc2Nyb2xsTGVmdFxuICAgICAgaWYgKHByZXZQcm9wcy5kYXRhLmxlbmd0aCA+IDAgJiYgdGhpcy5wcm9wcy5kYXRhLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmhhc1Njcm9sbFgoKSkge1xuICAgICAgICB0aGlzLnJlc2V0U2Nyb2xsWCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5yZXNpemVFdmVudCkge1xuICAgICAgICB0aGlzLnJlc2l6ZUV2ZW50LnJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZGVib3VuY2VkV2luZG93UmVzaXplKSB7XG4gICAgICAgIHRoaXMuZGVib3VuY2VkV2luZG93UmVzaXplLmNhbmNlbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFNjcm9sbFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2Nyb2xsUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICAgIHRoaXMuc2Nyb2xsUG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgIGlmICh0aGlzLnRhYmxlTm9kZSkge1xuICAgICAgICB2YXIgcHJlZml4Q2xzID0gdGhpcy5wcm9wcy5wcmVmaXhDbHM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnYm90aCcpIHtcbiAgICAgICAgICBjbGFzc2VzKHRoaXMudGFibGVOb2RlKS5yZW1vdmUobmV3IFJlZ0V4cCgnXicgKyBwcmVmaXhDbHMgKyAnLXNjcm9sbC1wb3NpdGlvbi0uKyQnKSkuYWRkKHByZWZpeENscyArICctc2Nyb2xsLXBvc2l0aW9uLWxlZnQnKS5hZGQocHJlZml4Q2xzICsgJy1zY3JvbGwtcG9zaXRpb24tcmlnaHQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGFzc2VzKHRoaXMudGFibGVOb2RlKS5yZW1vdmUobmV3IFJlZ0V4cCgnXicgKyBwcmVmaXhDbHMgKyAnLXNjcm9sbC1wb3NpdGlvbi0uKyQnKSkuYWRkKHByZWZpeENscyArICctc2Nyb2xsLXBvc2l0aW9uLScgKyBwb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRTY3JvbGxQb3NpdGlvbkNsYXNzTmFtZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNjcm9sbFBvc2l0aW9uQ2xhc3NOYW1lKCkge1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLmJvZHlUYWJsZTtcbiAgICAgIHZhciBzY3JvbGxUb0xlZnQgPSBub2RlLnNjcm9sbExlZnQgPT09IDA7XG4gICAgICB2YXIgc2Nyb2xsVG9SaWdodCA9IG5vZGUuc2Nyb2xsTGVmdCArIDEgPj0gbm9kZS5jaGlsZHJlblswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAtIG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICBpZiAoc2Nyb2xsVG9MZWZ0ICYmIHNjcm9sbFRvUmlnaHQpIHtcbiAgICAgICAgdGhpcy5zZXRTY3JvbGxQb3NpdGlvbignYm90aCcpO1xuICAgICAgfSBlbHNlIGlmIChzY3JvbGxUb0xlZnQpIHtcbiAgICAgICAgdGhpcy5zZXRTY3JvbGxQb3NpdGlvbignbGVmdCcpO1xuICAgICAgfSBlbHNlIGlmIChzY3JvbGxUb1JpZ2h0KSB7XG4gICAgICAgIHRoaXMuc2V0U2Nyb2xsUG9zaXRpb24oJ3JpZ2h0Jyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc2Nyb2xsUG9zaXRpb24gIT09ICdtaWRkbGUnKSB7XG4gICAgICAgIHRoaXMuc2V0U2Nyb2xsUG9zaXRpb24oJ21pZGRsZScpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Jlc2V0U2Nyb2xsWCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0U2Nyb2xsWCgpIHtcbiAgICAgIGlmICh0aGlzLmhlYWRUYWJsZSkge1xuICAgICAgICB0aGlzLmhlYWRUYWJsZS5zY3JvbGxMZWZ0ID0gMDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmJvZHlUYWJsZSkge1xuICAgICAgICB0aGlzLmJvZHlUYWJsZS5zY3JvbGxMZWZ0ID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoYXNTY3JvbGxYJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzU2Nyb2xsWCgpIHtcbiAgICAgIHZhciBfcHJvcHMkc2Nyb2xsID0gdGhpcy5wcm9wcy5zY3JvbGwsXG4gICAgICAgICAgc2Nyb2xsID0gX3Byb3BzJHNjcm9sbCA9PT0gdW5kZWZpbmVkID8ge30gOiBfcHJvcHMkc2Nyb2xsO1xuXG4gICAgICByZXR1cm4gJ3gnIGluIHNjcm9sbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJNYWluVGFibGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJNYWluVGFibGUoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBzY3JvbGwgPSBfcHJvcHMuc2Nyb2xsLFxuICAgICAgICAgIHByZWZpeENscyA9IF9wcm9wcy5wcmVmaXhDbHM7XG5cbiAgICAgIHZhciBpc0FueUNvbHVtbnNGaXhlZCA9IHRoaXMuY29sdW1uTWFuYWdlci5pc0FueUNvbHVtbnNGaXhlZCgpO1xuICAgICAgdmFyIHNjcm9sbGFibGUgPSBpc0FueUNvbHVtbnNGaXhlZCB8fCBzY3JvbGwueCB8fCBzY3JvbGwueTtcblxuICAgICAgdmFyIHRhYmxlID0gW3RoaXMucmVuZGVyVGFibGUoe1xuICAgICAgICBjb2x1bW5zOiB0aGlzLmNvbHVtbk1hbmFnZXIuZ3JvdXBlZENvbHVtbnMoKSxcbiAgICAgICAgaXNBbnlDb2x1bW5zRml4ZWQ6IGlzQW55Q29sdW1uc0ZpeGVkXG4gICAgICB9KSwgdGhpcy5yZW5kZXJFbXB0eVRleHQoKSwgdGhpcy5yZW5kZXJGb290ZXIoKV07XG5cbiAgICAgIHJldHVybiBzY3JvbGxhYmxlID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNjcm9sbCcgfSxcbiAgICAgICAgdGFibGVcbiAgICAgICkgOiB0YWJsZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJMZWZ0Rml4ZWRUYWJsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckxlZnRGaXhlZFRhYmxlKCkge1xuICAgICAgdmFyIHByZWZpeENscyA9IHRoaXMucHJvcHMucHJlZml4Q2xzO1xuXG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctZml4ZWQtbGVmdCcgfSxcbiAgICAgICAgdGhpcy5yZW5kZXJUYWJsZSh7XG4gICAgICAgICAgY29sdW1uczogdGhpcy5jb2x1bW5NYW5hZ2VyLmxlZnRDb2x1bW5zKCksXG4gICAgICAgICAgZml4ZWQ6ICdsZWZ0J1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJSaWdodEZpeGVkVGFibGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJSaWdodEZpeGVkVGFibGUoKSB7XG4gICAgICB2YXIgcHJlZml4Q2xzID0gdGhpcy5wcm9wcy5wcmVmaXhDbHM7XG5cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1maXhlZC1yaWdodCcgfSxcbiAgICAgICAgdGhpcy5yZW5kZXJUYWJsZSh7XG4gICAgICAgICAgY29sdW1uczogdGhpcy5jb2x1bW5NYW5hZ2VyLnJpZ2h0Q29sdW1ucygpLFxuICAgICAgICAgIGZpeGVkOiAncmlnaHQnXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlclRhYmxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyVGFibGUob3B0aW9ucykge1xuICAgICAgdmFyIGNvbHVtbnMgPSBvcHRpb25zLmNvbHVtbnMsXG4gICAgICAgICAgZml4ZWQgPSBvcHRpb25zLmZpeGVkLFxuICAgICAgICAgIGlzQW55Q29sdW1uc0ZpeGVkID0gb3B0aW9ucy5pc0FueUNvbHVtbnNGaXhlZDtcbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfcHJvcHMyLnByZWZpeENscyxcbiAgICAgICAgICBfcHJvcHMyJHNjcm9sbCA9IF9wcm9wczIuc2Nyb2xsLFxuICAgICAgICAgIHNjcm9sbCA9IF9wcm9wczIkc2Nyb2xsID09PSB1bmRlZmluZWQgPyB7fSA6IF9wcm9wczIkc2Nyb2xsO1xuXG4gICAgICB2YXIgdGFibGVDbGFzc05hbWUgPSBzY3JvbGwueCB8fCBmaXhlZCA/IHByZWZpeENscyArICctZml4ZWQnIDogJyc7XG5cbiAgICAgIHZhciBoZWFkVGFibGUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEhlYWRUYWJsZSwge1xuICAgICAgICBrZXk6ICdoZWFkJyxcbiAgICAgICAgY29sdW1uczogY29sdW1ucyxcbiAgICAgICAgZml4ZWQ6IGZpeGVkLFxuICAgICAgICB0YWJsZUNsYXNzTmFtZTogdGFibGVDbGFzc05hbWUsXG4gICAgICAgIGhhbmRsZUJvZHlTY3JvbGxMZWZ0OiB0aGlzLmhhbmRsZUJvZHlTY3JvbGxMZWZ0LFxuICAgICAgICBleHBhbmRlcjogdGhpcy5leHBhbmRlclxuICAgICAgfSk7XG5cbiAgICAgIHZhciBib2R5VGFibGUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEJvZHlUYWJsZSwge1xuICAgICAgICBrZXk6ICdib2R5JyxcbiAgICAgICAgY29sdW1uczogY29sdW1ucyxcbiAgICAgICAgZml4ZWQ6IGZpeGVkLFxuICAgICAgICB0YWJsZUNsYXNzTmFtZTogdGFibGVDbGFzc05hbWUsXG4gICAgICAgIGdldFJvd0tleTogdGhpcy5nZXRSb3dLZXksXG4gICAgICAgIGhhbmRsZVdoZWVsOiB0aGlzLmhhbmRsZVdoZWVsLFxuICAgICAgICBoYW5kbGVCb2R5U2Nyb2xsOiB0aGlzLmhhbmRsZUJvZHlTY3JvbGwsXG4gICAgICAgIGV4cGFuZGVyOiB0aGlzLmV4cGFuZGVyLFxuICAgICAgICBpc0FueUNvbHVtbnNGaXhlZDogaXNBbnlDb2x1bW5zRml4ZWRcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gW2hlYWRUYWJsZSwgYm9keVRhYmxlXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJUaXRsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclRpdGxlKCkge1xuICAgICAgdmFyIF9wcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHRpdGxlID0gX3Byb3BzMy50aXRsZSxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfcHJvcHMzLnByZWZpeENscztcblxuICAgICAgcmV0dXJuIHRpdGxlID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXRpdGxlJywga2V5OiAndGl0bGUnIH0sXG4gICAgICAgIHRpdGxlKHRoaXMucHJvcHMuZGF0YSlcbiAgICAgICkgOiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlckZvb3RlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckZvb3RlcigpIHtcbiAgICAgIHZhciBfcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBmb290ZXIgPSBfcHJvcHM0LmZvb3RlcixcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfcHJvcHM0LnByZWZpeENscztcblxuICAgICAgcmV0dXJuIGZvb3RlciA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1mb290ZXInLCBrZXk6ICdmb290ZXInIH0sXG4gICAgICAgIGZvb3Rlcih0aGlzLnByb3BzLmRhdGEpXG4gICAgICApIDogbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJFbXB0eVRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJFbXB0eVRleHQoKSB7XG4gICAgICB2YXIgX3Byb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZW1wdHlUZXh0ID0gX3Byb3BzNS5lbXB0eVRleHQsXG4gICAgICAgICAgcHJlZml4Q2xzID0gX3Byb3BzNS5wcmVmaXhDbHMsXG4gICAgICAgICAgZGF0YSA9IF9wcm9wczUuZGF0YTtcblxuICAgICAgaWYgKGRhdGEubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIGVtcHR5Q2xhc3NOYW1lID0gcHJlZml4Q2xzICsgJy1wbGFjZWhvbGRlcic7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBlbXB0eUNsYXNzTmFtZSwga2V5OiAnZW1wdHlUZXh0JyB9LFxuICAgICAgICB0eXBlb2YgZW1wdHlUZXh0ID09PSAnZnVuY3Rpb24nID8gZW1wdHlUZXh0KCkgOiBlbXB0eVRleHRcbiAgICAgICk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICB2YXIgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzO1xuXG4gICAgICBpZiAodGhpcy5zdGF0ZS5jb2x1bW5zKSB7XG4gICAgICAgIHRoaXMuY29sdW1uTWFuYWdlci5yZXNldChwcm9wcy5jb2x1bW5zKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5jaGlsZHJlbikge1xuICAgICAgICB0aGlzLmNvbHVtbk1hbmFnZXIucmVzZXQobnVsbCwgcHJvcHMuY2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2xhc3NOYW1lID0gcHJvcHMucHJlZml4Q2xzO1xuICAgICAgaWYgKHByb3BzLmNsYXNzTmFtZSkge1xuICAgICAgICBjbGFzc05hbWUgKz0gJyAnICsgcHJvcHMuY2xhc3NOYW1lO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLnVzZUZpeGVkSGVhZGVyIHx8IHByb3BzLnNjcm9sbCAmJiBwcm9wcy5zY3JvbGwueSkge1xuICAgICAgICBjbGFzc05hbWUgKz0gJyAnICsgcHJlZml4Q2xzICsgJy1maXhlZC1oZWFkZXInO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc2Nyb2xsUG9zaXRpb24gPT09ICdib3RoJykge1xuICAgICAgICBjbGFzc05hbWUgKz0gJyAnICsgcHJlZml4Q2xzICsgJy1zY3JvbGwtcG9zaXRpb24tbGVmdCAnICsgcHJlZml4Q2xzICsgJy1zY3JvbGwtcG9zaXRpb24tcmlnaHQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xhc3NOYW1lICs9ICcgJyArIHByZWZpeENscyArICctc2Nyb2xsLXBvc2l0aW9uLScgKyB0aGlzLnNjcm9sbFBvc2l0aW9uO1xuICAgICAgfVxuICAgICAgdmFyIGhhc0xlZnRGaXhlZCA9IHRoaXMuY29sdW1uTWFuYWdlci5pc0FueUNvbHVtbnNMZWZ0Rml4ZWQoKTtcbiAgICAgIHZhciBoYXNSaWdodEZpeGVkID0gdGhpcy5jb2x1bW5NYW5hZ2VyLmlzQW55Q29sdW1uc1JpZ2h0Rml4ZWQoKTtcbiAgICAgIHZhciBkYXRhQW5kQXJpYVByb3BzID0gZ2V0RGF0YUFuZEFyaWFQcm9wcyhwcm9wcyk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBQcm92aWRlcixcbiAgICAgICAgeyBzdG9yZTogdGhpcy5zdG9yZSB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIEV4cGFuZGFibGVUYWJsZSxcbiAgICAgICAgICBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgY29sdW1uTWFuYWdlcjogdGhpcy5jb2x1bW5NYW5hZ2VyLCBnZXRSb3dLZXk6IHRoaXMuZ2V0Um93S2V5IH0pLFxuICAgICAgICAgIGZ1bmN0aW9uIChleHBhbmRlcikge1xuICAgICAgICAgICAgX3RoaXMyLmV4cGFuZGVyID0gZXhwYW5kZXI7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICAgICAgICByZWY6IF90aGlzMi5zYXZlUmVmKCd0YWJsZU5vZGUnKSxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICBzdHlsZTogcHJvcHMuc3R5bGUsXG4gICAgICAgICAgICAgICAgaWQ6IHByb3BzLmlkXG4gICAgICAgICAgICAgIH0sIGRhdGFBbmRBcmlhUHJvcHMpLFxuICAgICAgICAgICAgICBfdGhpczIucmVuZGVyVGl0bGUoKSxcbiAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1jb250ZW50JyB9LFxuICAgICAgICAgICAgICAgIF90aGlzMi5yZW5kZXJNYWluVGFibGUoKSxcbiAgICAgICAgICAgICAgICBoYXNMZWZ0Rml4ZWQgJiYgX3RoaXMyLnJlbmRlckxlZnRGaXhlZFRhYmxlKCksXG4gICAgICAgICAgICAgICAgaGFzUmlnaHRGaXhlZCAmJiBfdGhpczIucmVuZGVyUmlnaHRGaXhlZFRhYmxlKClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIGlmIChuZXh0UHJvcHMuY29sdW1ucyAmJiBuZXh0UHJvcHMuY29sdW1ucyAhPT0gcHJldlN0YXRlLmNvbHVtbnMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb2x1bW5zOiBuZXh0UHJvcHMuY29sdW1ucyxcbiAgICAgICAgICBjaGlsZHJlbjogbnVsbFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChuZXh0UHJvcHMuY2hpbGRyZW4gIT09IHByZXZTdGF0ZS5jaGlsZHJlbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbHVtbnM6IG51bGwsXG4gICAgICAgICAgY2hpbGRyZW46IG5leHRQcm9wcy5jaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRhYmxlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UYWJsZS5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7XG4gIGRhdGE6IFByb3BUeXBlcy5hcnJheSxcbiAgdXNlRml4ZWRIZWFkZXI6IFByb3BUeXBlcy5ib29sLFxuICBjb2x1bW5zOiBQcm9wVHlwZXMuYXJyYXksXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgYm9keVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgcm93S2V5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pLFxuICByb3dDbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSksXG4gIG9uUm93OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25IZWFkZXJSb3c6IFByb3BUeXBlcy5mdW5jLFxuICBvblJvd0NsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Sb3dEb3VibGVDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUm93Q29udGV4dE1lbnU6IFByb3BUeXBlcy5mdW5jLFxuICBvblJvd01vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBvblJvd01vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICBzaG93SGVhZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgdGl0bGU6IFByb3BUeXBlcy5mdW5jLFxuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZm9vdGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgZW1wdHlUZXh0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgc2Nyb2xsOiBQcm9wVHlwZXMub2JqZWN0LFxuICByb3dSZWY6IFByb3BUeXBlcy5mdW5jLFxuICBnZXRCb2R5V3JhcHBlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICB0YWJsZTogUHJvcFR5cGVzLmFueSxcbiAgICBoZWFkZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICB3cmFwcGVyOiBQcm9wVHlwZXMuYW55LFxuICAgICAgcm93OiBQcm9wVHlwZXMuYW55LFxuICAgICAgY2VsbDogUHJvcFR5cGVzLmFueVxuICAgIH0pLFxuICAgIGJvZHk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICB3cmFwcGVyOiBQcm9wVHlwZXMuYW55LFxuICAgICAgcm93OiBQcm9wVHlwZXMuYW55LFxuICAgICAgY2VsbDogUHJvcFR5cGVzLmFueVxuICAgIH0pXG4gIH0pXG59LCBFeHBhbmRhYmxlVGFibGUuUHJvcFR5cGVzKTtcblRhYmxlLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICB0YWJsZTogUHJvcFR5cGVzLmFueSxcbiAgY29tcG9uZW50czogUHJvcFR5cGVzLmFueVxufTtcblRhYmxlLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGF0YTogW10sXG4gIHVzZUZpeGVkSGVhZGVyOiBmYWxzZSxcbiAgcm93S2V5OiAna2V5JyxcbiAgcm93Q2xhc3NOYW1lOiBmdW5jdGlvbiByb3dDbGFzc05hbWUoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuICBvblJvdzogZnVuY3Rpb24gb25Sb3coKSB7fSxcbiAgb25IZWFkZXJSb3c6IGZ1bmN0aW9uIG9uSGVhZGVyUm93KCkge30sXG5cbiAgcHJlZml4Q2xzOiAncmMtdGFibGUnLFxuICBib2R5U3R5bGU6IHt9LFxuICBzdHlsZToge30sXG4gIHNob3dIZWFkZXI6IHRydWUsXG4gIHNjcm9sbDoge30sXG4gIHJvd1JlZjogZnVuY3Rpb24gcm93UmVmKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBlbXB0eVRleHQ6IGZ1bmN0aW9uIGVtcHR5VGV4dCgpIHtcbiAgICByZXR1cm4gJ05vIERhdGEnO1xuICB9XG59O1xuXG5cbnBvbHlmaWxsKFRhYmxlKTtcblxuZXhwb3J0IGRlZmF1bHQgVGFibGU7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZnVuY3Rpb24gQ29sdW1uKCkge31cblxuQ29sdW1uLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb2xTcGFuOiBQcm9wVHlwZXMubnVtYmVyLFxuICB0aXRsZTogUHJvcFR5cGVzLm5vZGUsXG4gIGRhdGFJbmRleDogUHJvcFR5cGVzLnN0cmluZyxcbiAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgZml4ZWQ6IFByb3BUeXBlcy5vbmVPZihbdHJ1ZSwgJ2xlZnQnLCAncmlnaHQnXSksXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2VsbENsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25DZWxsOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25IZWFkZXJDZWxsOiBQcm9wVHlwZXMuZnVuY1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29sdW1uOyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG52YXIgQ29sdW1uR3JvdXAgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ29sdW1uR3JvdXAsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbHVtbkdyb3VwKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2x1bW5Hcm91cCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENvbHVtbkdyb3VwLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29sdW1uR3JvdXApKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBDb2x1bW5Hcm91cDtcbn0oQ29tcG9uZW50KTtcblxuQ29sdW1uR3JvdXAuaXNUYWJsZUNvbHVtbkdyb3VwID0gdHJ1ZTtcbkNvbHVtbkdyb3VwLnByb3BUeXBlcyA9IHtcbiAgdGl0bGU6IFByb3BUeXBlcy5ub2RlXG59O1xuZXhwb3J0IGRlZmF1bHQgQ29sdW1uR3JvdXA7IiwiaW1wb3J0IFRhYmxlIGZyb20gJy4vVGFibGUnO1xuaW1wb3J0IENvbHVtbiBmcm9tICcuL0NvbHVtbic7XG5pbXBvcnQgQ29sdW1uR3JvdXAgZnJvbSAnLi9Db2x1bW5Hcm91cCc7XG5pbXBvcnQgeyBJTlRFUk5BTF9DT0xfREVGSU5FIH0gZnJvbSAnLi91dGlscyc7XG5cblRhYmxlLkNvbHVtbiA9IENvbHVtbjtcblRhYmxlLkNvbHVtbkdyb3VwID0gQ29sdW1uR3JvdXA7XG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlO1xuZXhwb3J0IHsgQ29sdW1uLCBDb2x1bW5Hcm91cCwgSU5URVJOQUxfQ09MX0RFRklORSB9OyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxudmFyIE9wdEdyb3VwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhPcHRHcm91cCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3B0R3JvdXAoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9wdEdyb3VwKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoT3B0R3JvdXApLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIE9wdEdyb3VwO1xufShDb21wb25lbnQpO1xuXG5leHBvcnQgeyBPcHRHcm91cCBhcyBkZWZhdWx0IH07XG5PcHRHcm91cC5pc1NlbGVjdE9wdEdyb3VwID0gdHJ1ZTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5pbXBvcnQgKiBhcyBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5cbnZhciBPcHRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE9wdGlvbiwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3B0aW9uKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPcHRpb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihPcHRpb24pLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIE9wdGlvbjtcbn0oQ29tcG9uZW50KTtcblxuZXhwb3J0IHsgT3B0aW9uIGFzIGRlZmF1bHQgfTtcbk9wdGlvbi5wcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSlcbn07XG5PcHRpb24uaXNTZWxlY3RPcHRpb24gPSB0cnVlOyIsImZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9XG5cbmltcG9ydCAqIGFzIFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZnVuY3Rpb24gcHJvcHNWYWx1ZVR5cGUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgcHJvcHMgPSBhcmdzWzBdLFxuICAgICAgcHJvcE5hbWUgPSBhcmdzWzFdLFxuICAgICAgY29tcG9uZW50TmFtZSA9IGFyZ3NbMl0sXG4gICAgICByZXN0ID0gYXJncy5zbGljZSgzKTtcbiAgdmFyIGJhc2ljVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKTtcbiAgdmFyIGxhYmVsSW5WYWx1ZVNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBrZXk6IGJhc2ljVHlwZS5pc1JlcXVpcmVkLFxuICAgIGxhYmVsOiBQcm9wVHlwZXMubm9kZVxuICB9KTtcblxuICBpZiAocHJvcHMubGFiZWxJblZhbHVlKSB7XG4gICAgdmFyIHZhbGlkYXRlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YobGFiZWxJblZhbHVlU2hhcGUpLCBsYWJlbEluVmFsdWVTaGFwZV0pO1xuICAgIHZhciBlcnJvciA9IHZhbGlkYXRlLmFwcGx5KHZvaWQgMCwgW3Byb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShyZXN0KSkpO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wIGBcIi5jb25jYXQocHJvcE5hbWUsIFwiYCBzdXBwbGllZCB0byBgXCIpLmNvbmNhdChjb21wb25lbnROYW1lLCBcImAsIFwiKSArIFwid2hlbiB5b3Ugc2V0IGBsYWJlbEluVmFsdWVgIHRvIGB0cnVlYCwgYFwiLmNvbmNhdChwcm9wTmFtZSwgXCJgIHNob3VsZCBpbiBcIikgKyBcInNoYXBlIG9mIGB7IGtleTogc3RyaW5nIHwgbnVtYmVyLCBsYWJlbD86IFJlYWN0Tm9kZSB9YC5cIik7XG4gICAgfVxuICB9IGVsc2UgaWYgKChwcm9wcy5tb2RlID09PSAnbXVsdGlwbGUnIHx8IHByb3BzLm1vZGUgPT09ICd0YWdzJyB8fCBwcm9wcy5tdWx0aXBsZSB8fCBwcm9wcy50YWdzKSAmJiBwcm9wc1twcm9wTmFtZV0gPT09ICcnKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCBgXCIuY29uY2F0KHByb3BOYW1lLCBcImAgb2YgdHlwZSBgc3RyaW5nYCBzdXBwbGllZCB0byBgXCIpLmNvbmNhdChjb21wb25lbnROYW1lLCBcImAsIFwiKSArIFwiZXhwZWN0ZWQgYGFycmF5YCB3aGVuIGBtdWx0aXBsZWAgb3IgYHRhZ3NgIGlzIGB0cnVlYC5cIik7XG4gIH0gZWxzZSB7XG4gICAgdmFyIF92YWxpZGF0ZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKGJhc2ljVHlwZSksIGJhc2ljVHlwZV0pO1xuXG4gICAgcmV0dXJuIF92YWxpZGF0ZS5hcHBseSh2b2lkIDAsIFtwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWVdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocmVzdCkpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgU2VsZWN0UHJvcFR5cGVzID0ge1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGVmYXVsdEFjdGl2ZUZpcnN0T3B0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgbXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxuICBmaWx0ZXJPcHRpb246IFByb3BUeXBlcy5hbnksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICBzaG93U2VhcmNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBhbGxvd0NsZWFyOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvd0Fycm93OiBQcm9wVHlwZXMuYm9vbCxcbiAgdGFnczogUHJvcFR5cGVzLmJvb2wsXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0cmFuc2l0aW9uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgb3B0aW9uTGFiZWxQcm9wOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvcHRpb25GaWx0ZXJQcm9wOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhbmltYXRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNob2ljZVRyYW5zaXRpb25OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGVmYXVsdE9wZW46IFByb3BUeXBlcy5ib29sLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU2VhcmNoOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Qb3B1cFNjcm9sbDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uSW5wdXRLZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5hbnksXG4gIG9uRGVzZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBsYWJlbEluVmFsdWU6IFByb3BUeXBlcy5ib29sLFxuICBsb2FkaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgdmFsdWU6IHByb3BzVmFsdWVUeXBlLFxuICBkZWZhdWx0VmFsdWU6IHByb3BzVmFsdWVUeXBlLFxuICBkcm9wZG93blN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBtYXhUYWdUZXh0TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBtYXhUYWdDb3VudDogUHJvcFR5cGVzLm51bWJlcixcbiAgbWF4VGFnUGxhY2Vob2xkZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuZnVuY10pLFxuICB0b2tlblNlcGFyYXRvcnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICBnZXRJbnB1dEVsZW1lbnQ6IFByb3BUeXBlcy5mdW5jLFxuICBzaG93QWN0aW9uOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgY2xlYXJJY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgaW5wdXRJY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgcmVtb3ZlSWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIG1lbnVJdGVtU2VsZWN0ZWRJY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgZHJvcGRvd25SZW5kZXI6IFByb3BUeXBlcy5mdW5jXG59O1xuZXhwb3J0IGRlZmF1bHQgU2VsZWN0UHJvcFR5cGVzOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0FycmF5KGNoaWxkcmVuKSB7XG4gIHZhciByZXQgPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXQucHVzaChjKTtcbiAgfSk7XG4gIHJldHVybiByZXQ7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBmdW5jdGlvbiB0b1RpdGxlKHRpdGxlKSB7XG4gIGlmICh0eXBlb2YgdGl0bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHRpdGxlO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlUHJvcFZhbHVlKGNoaWxkKSB7XG4gIGlmICghY2hpbGQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBwcm9wcyA9IGNoaWxkLnByb3BzO1xuXG4gIGlmICgndmFsdWUnIGluIHByb3BzKSB7XG4gICAgcmV0dXJuIHByb3BzLnZhbHVlO1xuICB9XG5cbiAgaWYgKGNoaWxkLmtleSkge1xuICAgIHJldHVybiBjaGlsZC5rZXk7XG4gIH1cblxuICBpZiAoY2hpbGQudHlwZSAmJiBjaGlsZC50eXBlLmlzU2VsZWN0T3B0R3JvdXAgJiYgcHJvcHMubGFiZWwpIHtcbiAgICByZXR1cm4gcHJvcHMubGFiZWw7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoXCJOZWVkIGF0IGxlYXN0IGEga2V5IG9yIGEgdmFsdWUgb3IgYSBsYWJlbCAob25seSBmb3IgT3B0R3JvdXApIGZvciBcIi5jb25jYXQoY2hpbGQpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm9wVmFsdWUoY2hpbGQsIHByb3ApIHtcbiAgaWYgKHByb3AgPT09ICd2YWx1ZScpIHtcbiAgICByZXR1cm4gZ2V0VmFsdWVQcm9wVmFsdWUoY2hpbGQpO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkLnByb3BzW3Byb3BdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTXVsdGlwbGUocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzLm11bHRpcGxlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29tYm9ib3gocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzLmNvbWJvYm94O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTXVsdGlwbGVPclRhZ3MocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzLm11bHRpcGxlIHx8IHByb3BzLnRhZ3M7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNNdWx0aXBsZU9yVGFnc09yQ29tYm9ib3gocHJvcHMpIHtcbiAgcmV0dXJuIGlzTXVsdGlwbGVPclRhZ3MocHJvcHMpIHx8IGlzQ29tYm9ib3gocHJvcHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2luZ2xlTW9kZShwcm9wcykge1xuICByZXR1cm4gIWlzTXVsdGlwbGVPclRhZ3NPckNvbWJvYm94KHByb3BzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gIHZhciByZXQgPSB2YWx1ZTtcblxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldCA9IFtdO1xuICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldCA9IFt2YWx1ZV07XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE1hcEtleSh2YWx1ZSkge1xuICByZXR1cm4gXCJcIi5jb25jYXQodHlwZW9mIHZhbHVlLCBcIi1cIikuY29uY2F0KHZhbHVlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdEV2ZW50KGUpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRJbmRleEluVmFsdWVCeVNpbmdsZVZhbHVlKHZhbHVlLCBzaW5nbGVWYWx1ZSkge1xuICB2YXIgaW5kZXggPSAtMTtcblxuICBpZiAodmFsdWUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVbaV0gPT09IHNpbmdsZVZhbHVlKSB7XG4gICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldExhYmVsRnJvbVByb3BzVmFsdWUodmFsdWUsIGtleSkge1xuICB2YXIgbGFiZWw7XG4gIHZhbHVlID0gdG9BcnJheSh2YWx1ZSk7XG5cbiAgaWYgKHZhbHVlKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnByZWZlci1mb3Itb2ZcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVbaV0ua2V5ID09PSBrZXkpIHtcbiAgICAgICAgbGFiZWwgPSB2YWx1ZVtpXS5sYWJlbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxhYmVsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlbGVjdEtleXMobWVudUl0ZW1zLCB2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBzZWxlY3RlZEtleXMgPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChtZW51SXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIHR5cGUgPSBpdGVtLnR5cGU7XG5cbiAgICBpZiAodHlwZS5pc01lbnVJdGVtR3JvdXApIHtcbiAgICAgIHNlbGVjdGVkS2V5cyA9IHNlbGVjdGVkS2V5cy5jb25jYXQoZ2V0U2VsZWN0S2V5cyhpdGVtLnByb3BzLmNoaWxkcmVuLCB2YWx1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaXRlbVZhbHVlID0gZ2V0VmFsdWVQcm9wVmFsdWUoaXRlbSk7XG4gICAgICB2YXIgaXRlbUtleSA9IGl0ZW0ua2V5O1xuXG4gICAgICBpZiAoZmluZEluZGV4SW5WYWx1ZUJ5U2luZ2xlVmFsdWUodmFsdWUsIGl0ZW1WYWx1ZSkgIT09IC0xICYmIGl0ZW1LZXkpIHtcbiAgICAgICAgc2VsZWN0ZWRLZXlzLnB1c2goaXRlbUtleSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNlbGVjdGVkS2V5cztcbn1cbmV4cG9ydCB2YXIgVU5TRUxFQ1RBQkxFX1NUWUxFID0ge1xuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIFdlYmtpdFVzZXJTZWxlY3Q6ICdub25lJ1xufTtcbmV4cG9ydCB2YXIgVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSA9IHtcbiAgdW5zZWxlY3RhYmxlOiAnb24nXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRGaXJzdE1lbnVJdGVtKGNoaWxkcmVuKSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItZm9yLW9mXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcblxuICAgIGlmIChjaGlsZC50eXBlLmlzTWVudUl0ZW1Hcm91cCkge1xuICAgICAgdmFyIGZvdW5kID0gZmluZEZpcnN0TWVudUl0ZW0oY2hpbGQucHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5leHBvcnQgZnVuY3Rpb24gaW5jbHVkZXNTZXBhcmF0b3JzKHN0ciwgc2VwYXJhdG9ycykge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWZvci1vZlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNlcGFyYXRvcnMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoc3RyLmxhc3RJbmRleE9mKHNlcGFyYXRvcnNbaV0pID4gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0QnlTZXBhcmF0b3JzKHN0ciwgc2VwYXJhdG9ycykge1xuICB2YXIgcmVnID0gbmV3IFJlZ0V4cChcIltcIi5jb25jYXQoc2VwYXJhdG9ycy5qb2luKCksIFwiXVwiKSk7XG4gIHJldHVybiBzdHIuc3BsaXQocmVnKS5maWx0ZXIoZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0RmlsdGVyRm4oaW5wdXQsIGNoaWxkKSB7XG4gIGlmIChjaGlsZC5wcm9wcy5kaXNhYmxlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IHRvQXJyYXkoZ2V0UHJvcFZhbHVlKGNoaWxkLCB0aGlzLnByb3BzLm9wdGlvbkZpbHRlclByb3ApKS5qb2luKCcnKTtcbiAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihpbnB1dC50b0xvd2VyQ2FzZSgpKSA+IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9uVmFsdWUodmFsdWUsIHByb3BzKSB7XG4gIGlmIChpc1NpbmdsZU1vZGUocHJvcHMpIHx8IGlzTXVsdGlwbGUocHJvcHMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGB2YWx1ZWAgb2YgdHlwZSBgXCIuY29uY2F0KHR5cGVvZiB2YWx1ZSwgXCJgIHN1cHBsaWVkIHRvIE9wdGlvbiwgXCIpICsgXCJleHBlY3RlZCBgc3RyaW5nYCB3aGVuIGB0YWdzL2NvbWJvYm94YCBpcyBgdHJ1ZWAuXCIpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc2F2ZVJlZihpbnN0YW5jZSwgbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpbnN0YW5jZVtuYW1lXSA9IG5vZGU7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAgIHJldHVybiAndGVzdC11dWlkJztcbiAgfVxuXG4gIHZhciBkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIHZhciB1dWlkID0gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1iaXR3aXNlXG4gICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XG4gICAgZCA9IE1hdGguZmxvb3IoZCAvIDE2KTsgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcblxuICAgIHJldHVybiAoYyA9PT0gJ3gnID8gciA6IHIgJiAweDcgfCAweDgpLnRvU3RyaW5nKDE2KTtcbiAgfSk7XG4gIHJldHVybiB1dWlkO1xufSIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuaW1wb3J0IHNjcm9sbEludG9WaWV3IGZyb20gJ2RvbS1zY3JvbGwtaW50by12aWV3JztcbmltcG9ydCAqIGFzIFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCByYWYgZnJvbSAncmFmJztcbmltcG9ydCBNZW51IGZyb20gJ3JjLW1lbnUnO1xuaW1wb3J0IHRvQXJyYXkgZnJvbSBcInJjLXV0aWwvZXMvQ2hpbGRyZW4vdG9BcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgZ2V0U2VsZWN0S2V5cywgcHJldmVudERlZmF1bHRFdmVudCwgc2F2ZVJlZiB9IGZyb20gJy4vdXRpbCc7XG5cbnZhciBEcm9wZG93bk1lbnUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERyb3Bkb3duTWVudSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJvcGRvd25NZW51KHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyb3Bkb3duTWVudSk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihEcm9wZG93bk1lbnUpLmNhbGwodGhpcywgcHJvcHMpKTtcbiAgICBfdGhpcy5yYWZJbnN0YW5jZSA9IG51bGw7XG4gICAgX3RoaXMubGFzdFZpc2libGUgPSBmYWxzZTtcblxuICAgIF90aGlzLnNjcm9sbEFjdGl2ZUl0ZW1Ub1ZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzY3JvbGwgaW50byB2aWV3XG4gICAgICB2YXIgaXRlbUNvbXBvbmVudCA9IGZpbmRET01Ob2RlKF90aGlzLmZpcnN0QWN0aXZlSXRlbSk7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICB2aXNpYmxlID0gX3RoaXMkcHJvcHMudmlzaWJsZSxcbiAgICAgICAgICBmaXJzdEFjdGl2ZVZhbHVlID0gX3RoaXMkcHJvcHMuZmlyc3RBY3RpdmVWYWx1ZTtcbiAgICAgIHZhciB2YWx1ZSA9IF90aGlzLnByb3BzLnZhbHVlO1xuXG4gICAgICBpZiAoIWl0ZW1Db21wb25lbnQgfHwgIXZpc2libGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2Nyb2xsSW50b1ZpZXdPcHRzID0ge1xuICAgICAgICBvbmx5U2Nyb2xsSWZOZWVkZWQ6IHRydWVcbiAgICAgIH07XG5cbiAgICAgIGlmICgoIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCkgJiYgZmlyc3RBY3RpdmVWYWx1ZSkge1xuICAgICAgICBzY3JvbGxJbnRvVmlld09wdHMuYWxpZ25XaXRoVG9wID0gdHJ1ZTtcbiAgICAgIH0gLy8gRGVsYXkgdG8gc2Nyb2xsIHNpbmNlIGN1cnJlbnQgZnJhbWUgaXRlbSBwb3NpdGlvbiBpcyBub3QgcmVhZHkgd2hlbiBwcmUgdmlldyBpcyBieSBmaWx0ZXJcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzExMjY4I2lzc3VlY29tbWVudC00MDY2MzQ0NjJcblxuXG4gICAgICBfdGhpcy5yYWZJbnN0YW5jZSA9IHJhZihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjcm9sbEludG9WaWV3KGl0ZW1Db21wb25lbnQsIGZpbmRET01Ob2RlKF90aGlzLm1lbnVSZWYpLCBzY3JvbGxJbnRvVmlld09wdHMpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnJlbmRlck1lbnUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgbWVudUl0ZW1zID0gX3RoaXMkcHJvcHMyLm1lbnVJdGVtcyxcbiAgICAgICAgICBtZW51SXRlbVNlbGVjdGVkSWNvbiA9IF90aGlzJHByb3BzMi5tZW51SXRlbVNlbGVjdGVkSWNvbixcbiAgICAgICAgICBkZWZhdWx0QWN0aXZlRmlyc3RPcHRpb24gPSBfdGhpcyRwcm9wczIuZGVmYXVsdEFjdGl2ZUZpcnN0T3B0aW9uLFxuICAgICAgICAgIHByZWZpeENscyA9IF90aGlzJHByb3BzMi5wcmVmaXhDbHMsXG4gICAgICAgICAgbXVsdGlwbGUgPSBfdGhpcyRwcm9wczIubXVsdGlwbGUsXG4gICAgICAgICAgb25NZW51U2VsZWN0ID0gX3RoaXMkcHJvcHMyLm9uTWVudVNlbGVjdCxcbiAgICAgICAgICBpbnB1dFZhbHVlID0gX3RoaXMkcHJvcHMyLmlucHV0VmFsdWUsXG4gICAgICAgICAgYmFja2ZpbGxWYWx1ZSA9IF90aGlzJHByb3BzMi5iYWNrZmlsbFZhbHVlLFxuICAgICAgICAgIG9uTWVudURlc2VsZWN0ID0gX3RoaXMkcHJvcHMyLm9uTWVudURlc2VsZWN0LFxuICAgICAgICAgIHZpc2libGUgPSBfdGhpcyRwcm9wczIudmlzaWJsZTtcbiAgICAgIHZhciBmaXJzdEFjdGl2ZVZhbHVlID0gX3RoaXMucHJvcHMuZmlyc3RBY3RpdmVWYWx1ZTtcblxuICAgICAgaWYgKG1lbnVJdGVtcyAmJiBtZW51SXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBtZW51UHJvcHMgPSB7fTtcblxuICAgICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgICBtZW51UHJvcHMub25EZXNlbGVjdCA9IG9uTWVudURlc2VsZWN0O1xuICAgICAgICAgIG1lbnVQcm9wcy5vblNlbGVjdCA9IG9uTWVudVNlbGVjdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZW51UHJvcHMub25DbGljayA9IG9uTWVudVNlbGVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB2YWx1ZSA9IF90aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgc2VsZWN0ZWRLZXlzID0gZ2V0U2VsZWN0S2V5cyhtZW51SXRlbXMsIHZhbHVlKTtcbiAgICAgICAgdmFyIGFjdGl2ZUtleVByb3BzID0ge307XG4gICAgICAgIHZhciBkZWZhdWx0QWN0aXZlRmlyc3QgPSBkZWZhdWx0QWN0aXZlRmlyc3RPcHRpb247XG4gICAgICAgIHZhciBjbG9uZWRNZW51SXRlbXMgPSBtZW51SXRlbXM7XG5cbiAgICAgICAgaWYgKHNlbGVjdGVkS2V5cy5sZW5ndGggfHwgZmlyc3RBY3RpdmVWYWx1ZSkge1xuICAgICAgICAgIGlmICh2aXNpYmxlICYmICFfdGhpcy5sYXN0VmlzaWJsZSkge1xuICAgICAgICAgICAgYWN0aXZlS2V5UHJvcHMuYWN0aXZlS2V5ID0gc2VsZWN0ZWRLZXlzWzBdIHx8IGZpcnN0QWN0aXZlVmFsdWU7XG4gICAgICAgICAgfSBlbHNlIGlmICghdmlzaWJsZSkge1xuICAgICAgICAgICAgLy8gRG8gbm90IHRyaWdnZXIgYXV0byBhY3RpdmUgc2luY2Ugd2UgYWxyZWFkeSBoYXZlIHNlbGVjdGVkS2V5c1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkS2V5c1swXSkge1xuICAgICAgICAgICAgICBkZWZhdWx0QWN0aXZlRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWN0aXZlS2V5UHJvcHMuYWN0aXZlS2V5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBmb3VuZEZpcnN0ID0gZmFsc2U7IC8vIHNldCBmaXJzdEFjdGl2ZUl0ZW0gdmlhIGNsb25pbmcgbWVudXNcbiAgICAgICAgICAvLyBmb3Igc2Nyb2xsIGludG8gdmlld1xuXG4gICAgICAgICAgdmFyIGNsb25lID0gZnVuY3Rpb24gY2xvbmUoaXRlbSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGl0ZW0ua2V5O1xuXG4gICAgICAgICAgICBpZiAoIWZvdW5kRmlyc3QgJiYgc2VsZWN0ZWRLZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTEgfHwgIWZvdW5kRmlyc3QgJiYgIXNlbGVjdGVkS2V5cy5sZW5ndGggJiYgZmlyc3RBY3RpdmVWYWx1ZS5pbmRleE9mKGl0ZW0ua2V5KSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgZm91bmRGaXJzdCA9IHRydWU7XG4gICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoaXRlbSwge1xuICAgICAgICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzLmZpcnN0QWN0aXZlSXRlbSA9IF9yZWY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNsb25lZE1lbnVJdGVtcyA9IG1lbnVJdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChpdGVtLnR5cGUuaXNNZW51SXRlbUdyb3VwKSB7XG4gICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRvQXJyYXkoaXRlbS5wcm9wcy5jaGlsZHJlbikubWFwKGNsb25lKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChpdGVtLCB7fSwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY2xvbmUoaXRlbSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQ2xlYXIgZmlyc3RBY3RpdmVJdGVtIHdoZW4gZHJvcGRvd24gbWVudSBpdGVtcyB3YXMgZW1wdHlcbiAgICAgICAgICAvLyBBdm9pZCBgVW5hYmxlIHRvIGZpbmQgbm9kZSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50YFxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzEwNzc0XG4gICAgICAgICAgX3RoaXMuZmlyc3RBY3RpdmVJdGVtID0gbnVsbDtcbiAgICAgICAgfSAvLyBjbGVhciBhY3RpdmVLZXkgd2hlbiBpbnB1dFZhbHVlIGNoYW5nZVxuXG5cbiAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IHZhbHVlICYmIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGlmIChpbnB1dFZhbHVlICE9PSBfdGhpcy5sYXN0SW5wdXRWYWx1ZSAmJiAoIWxhc3RWYWx1ZSB8fCBsYXN0VmFsdWUgIT09IGJhY2tmaWxsVmFsdWUpKSB7XG4gICAgICAgICAgYWN0aXZlS2V5UHJvcHMuYWN0aXZlS2V5ID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChNZW51LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgcmVmOiBfdGhpcy5zYXZlTWVudVJlZixcbiAgICAgICAgICBzdHlsZTogX3RoaXMucHJvcHMuZHJvcGRvd25NZW51U3R5bGUsXG4gICAgICAgICAgZGVmYXVsdEFjdGl2ZUZpcnN0OiBkZWZhdWx0QWN0aXZlRmlyc3QsXG4gICAgICAgICAgcm9sZTogXCJsaXN0Ym94XCIsXG4gICAgICAgICAgaXRlbUljb246IG11bHRpcGxlID8gbWVudUl0ZW1TZWxlY3RlZEljb24gOiBudWxsXG4gICAgICAgIH0sIGFjdGl2ZUtleVByb3BzLCB7XG4gICAgICAgICAgbXVsdGlwbGU6IG11bHRpcGxlXG4gICAgICAgIH0sIG1lbnVQcm9wcywge1xuICAgICAgICAgIHNlbGVjdGVkS2V5czogc2VsZWN0ZWRLZXlzLFxuICAgICAgICAgIHByZWZpeENsczogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1tZW51XCIpXG4gICAgICAgIH0pLCBjbG9uZWRNZW51SXRlbXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMubGFzdElucHV0VmFsdWUgPSBwcm9wcy5pbnB1dFZhbHVlO1xuICAgIF90aGlzLnNhdmVNZW51UmVmID0gc2F2ZVJlZihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ21lbnVSZWYnKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRHJvcGRvd25NZW51LCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsQWN0aXZlSXRlbVRvVmlldygpO1xuICAgICAgdGhpcy5sYXN0VmlzaWJsZSA9IHRoaXMucHJvcHMudmlzaWJsZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICAgIGlmICghbmV4dFByb3BzLnZpc2libGUpIHtcbiAgICAgICAgdGhpcy5sYXN0VmlzaWJsZSA9IGZhbHNlO1xuICAgICAgfSAvLyBmcmVlemUgd2hlbiBoaWRlXG5cblxuICAgICAgcmV0dXJuIHRoaXMucHJvcHMudmlzaWJsZSAmJiAhbmV4dFByb3BzLnZpc2libGUgfHwgbmV4dFByb3BzLnZpc2libGUgfHwgbmV4dFByb3BzLmlucHV0VmFsdWUgIT09IHRoaXMucHJvcHMuaW5wdXRWYWx1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG5cbiAgICAgIGlmICghcHJldlByb3BzLnZpc2libGUgJiYgcHJvcHMudmlzaWJsZSkge1xuICAgICAgICB0aGlzLnNjcm9sbEFjdGl2ZUl0ZW1Ub1ZpZXcoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sYXN0VmlzaWJsZSA9IHByb3BzLnZpc2libGU7XG4gICAgICB0aGlzLmxhc3RJbnB1dFZhbHVlID0gcHJvcHMuaW5wdXRWYWx1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5yYWZJbnN0YW5jZSkge1xuICAgICAgICByYWYuY2FuY2VsKHRoaXMucmFmSW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHJlbmRlck1lbnUgPSB0aGlzLnJlbmRlck1lbnUoKTtcbiAgICAgIHJldHVybiByZW5kZXJNZW51ID8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVaKDApJ1xuICAgICAgICB9LFxuICAgICAgICBpZDogdGhpcy5wcm9wcy5hcmlhSWQsXG4gICAgICAgIG9uRm9jdXM6IHRoaXMucHJvcHMub25Qb3B1cEZvY3VzLFxuICAgICAgICBvbk1vdXNlRG93bjogcHJldmVudERlZmF1bHRFdmVudCxcbiAgICAgICAgb25TY3JvbGw6IHRoaXMucHJvcHMub25Qb3B1cFNjcm9sbFxuICAgICAgfSwgcmVuZGVyTWVudSkgOiBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEcm9wZG93bk1lbnU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCB7IERyb3Bkb3duTWVudSBhcyBkZWZhdWx0IH07XG5Ecm9wZG93bk1lbnUuZGlzcGxheU5hbWUgPSAnRHJvcGRvd25NZW51JztcbkRyb3Bkb3duTWVudS5wcm9wVHlwZXMgPSB7XG4gIGFyaWFJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGVmYXVsdEFjdGl2ZUZpcnN0T3B0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIGRyb3Bkb3duTWVudVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIG9uUG9wdXBGb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUG9wdXBTY3JvbGw6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1lbnVEZVNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTWVudVNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgbWVudUl0ZW1zOiBQcm9wVHlwZXMuYW55LFxuICBpbnB1dFZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB2aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgZmlyc3RBY3RpdmVWYWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgbWVudUl0ZW1TZWxlY3RlZEljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pXG59OyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIF9fcmVzdCA9IHRoaXMgJiYgdGhpcy5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcblxuICBmb3IgKHZhciBwIGluIHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICB9XG5cbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5cbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHJhZiBmcm9tICdyYWYnO1xuaW1wb3J0IFRyaWdnZXIgZnJvbSAncmMtdHJpZ2dlcic7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IERyb3Bkb3duTWVudSBmcm9tICcuL0Ryb3Bkb3duTWVudSc7XG5pbXBvcnQgeyBpc1NpbmdsZU1vZGUsIHNhdmVSZWYgfSBmcm9tICcuL3V0aWwnO1xuVHJpZ2dlci5kaXNwbGF5TmFtZSA9ICdUcmlnZ2VyJztcbnZhciBCVUlMVF9JTl9QTEFDRU1FTlRTID0ge1xuICBib3R0b21MZWZ0OiB7XG4gICAgcG9pbnRzOiBbJ3RsJywgJ2JsJ10sXG4gICAgb2Zmc2V0OiBbMCwgNF0sXG4gICAgb3ZlcmZsb3c6IHtcbiAgICAgIGFkanVzdFg6IDAsXG4gICAgICBhZGp1c3RZOiAxXG4gICAgfVxuICB9LFxuICB0b3BMZWZ0OiB7XG4gICAgcG9pbnRzOiBbJ2JsJywgJ3RsJ10sXG4gICAgb2Zmc2V0OiBbMCwgLTRdLFxuICAgIG92ZXJmbG93OiB7XG4gICAgICBhZGp1c3RYOiAwLFxuICAgICAgYWRqdXN0WTogMVxuICAgIH1cbiAgfVxufTtcblxudmFyIFNlbGVjdFRyaWdnZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNlbGVjdFRyaWdnZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNlbGVjdFRyaWdnZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VsZWN0VHJpZ2dlcik7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihTZWxlY3RUcmlnZ2VyKS5jYWxsKHRoaXMsIHByb3BzKSk7XG4gICAgX3RoaXMuZHJvcGRvd25NZW51UmVmID0gbnVsbDtcbiAgICBfdGhpcy5yYWZJbnN0YW5jZSA9IG51bGw7XG5cbiAgICBfdGhpcy5zZXREcm9wZG93bldpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FuY2VsUmFmSW5zdGFuY2UoKTtcblxuICAgICAgX3RoaXMucmFmSW5zdGFuY2UgPSByYWYoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZG9tID0gUmVhY3RET00uZmluZERPTU5vZGUoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgICAgICB2YXIgd2lkdGggPSBkb20ub2Zmc2V0V2lkdGg7XG5cbiAgICAgICAgaWYgKHdpZHRoICE9PSBfdGhpcy5zdGF0ZS5kcm9wZG93bldpZHRoKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZHJvcGRvd25XaWR0aDogd2lkdGhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmNhbmNlbFJhZkluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnJhZkluc3RhbmNlKSB7XG4gICAgICAgIHJhZi5jYW5jZWwoX3RoaXMucmFmSW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5nZXRJbm5lck1lbnUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuZHJvcGRvd25NZW51UmVmICYmIF90aGlzLmRyb3Bkb3duTWVudVJlZi5tZW51UmVmO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRQb3B1cERPTU5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMudHJpZ2dlclJlZi5nZXRQb3B1cERvbU5vZGUoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0RHJvcGRvd25FbGVtZW50ID0gZnVuY3Rpb24gKG5ld1Byb3BzKSB7XG4gICAgICB2YXIgcHJvcHMgPSBfdGhpcy5wcm9wcztcbiAgICAgIHZhciBkcm9wZG93blJlbmRlciA9IHByb3BzLmRyb3Bkb3duUmVuZGVyLFxuICAgICAgICAgIGFyaWFJZCA9IHByb3BzLmFyaWFJZDtcbiAgICAgIHZhciBtZW51Tm9kZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd25NZW51LCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogX3RoaXMuc2F2ZURyb3Bkb3duTWVudVJlZlxuICAgICAgfSwgbmV3UHJvcHMsIHtcbiAgICAgICAgYXJpYUlkOiBhcmlhSWQsXG4gICAgICAgIHByZWZpeENsczogX3RoaXMuZ2V0RHJvcGRvd25QcmVmaXhDbHMoKSxcbiAgICAgICAgb25NZW51U2VsZWN0OiBwcm9wcy5vbk1lbnVTZWxlY3QsXG4gICAgICAgIG9uTWVudURlc2VsZWN0OiBwcm9wcy5vbk1lbnVEZXNlbGVjdCxcbiAgICAgICAgb25Qb3B1cFNjcm9sbDogcHJvcHMub25Qb3B1cFNjcm9sbCxcbiAgICAgICAgdmFsdWU6IHByb3BzLnZhbHVlLFxuICAgICAgICBiYWNrZmlsbFZhbHVlOiBwcm9wcy5iYWNrZmlsbFZhbHVlLFxuICAgICAgICBmaXJzdEFjdGl2ZVZhbHVlOiBwcm9wcy5maXJzdEFjdGl2ZVZhbHVlLFxuICAgICAgICBkZWZhdWx0QWN0aXZlRmlyc3RPcHRpb246IHByb3BzLmRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbixcbiAgICAgICAgZHJvcGRvd25NZW51U3R5bGU6IHByb3BzLmRyb3Bkb3duTWVudVN0eWxlLFxuICAgICAgICBtZW51SXRlbVNlbGVjdGVkSWNvbjogcHJvcHMubWVudUl0ZW1TZWxlY3RlZEljb25cbiAgICAgIH0pKTtcblxuICAgICAgaWYgKGRyb3Bkb3duUmVuZGVyKSB7XG4gICAgICAgIHJldHVybiBkcm9wZG93blJlbmRlcihtZW51Tm9kZSwgcHJvcHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0RHJvcGRvd25UcmFuc2l0aW9uTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9wcyA9IF90aGlzLnByb3BzO1xuICAgICAgdmFyIHRyYW5zaXRpb25OYW1lID0gcHJvcHMudHJhbnNpdGlvbk5hbWU7XG5cbiAgICAgIGlmICghdHJhbnNpdGlvbk5hbWUgJiYgcHJvcHMuYW5pbWF0aW9uKSB7XG4gICAgICAgIHRyYW5zaXRpb25OYW1lID0gXCJcIi5jb25jYXQoX3RoaXMuZ2V0RHJvcGRvd25QcmVmaXhDbHMoKSwgXCItXCIpLmNvbmNhdChwcm9wcy5hbmltYXRpb24pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJhbnNpdGlvbk5hbWU7XG4gICAgfTtcblxuICAgIF90aGlzLmdldERyb3Bkb3duUHJlZml4Q2xzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KF90aGlzLnByb3BzLnByZWZpeENscywgXCItZHJvcGRvd25cIik7XG4gICAgfTtcblxuICAgIF90aGlzLnNhdmVEcm9wZG93bk1lbnVSZWYgPSBzYXZlUmVmKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAnZHJvcGRvd25NZW51UmVmJyk7XG4gICAgX3RoaXMuc2F2ZVRyaWdnZXJSZWYgPSBzYXZlUmVmKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAndHJpZ2dlclJlZicpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgZHJvcGRvd25XaWR0aDogMFxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNlbGVjdFRyaWdnZXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5zZXREcm9wZG93bldpZHRoKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLnNldERyb3Bkb3duV2lkdGgoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmNhbmNlbFJhZkluc3RhbmNlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3BvcHVwQ2xhc3NOYW1lO1xuXG4gICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG9uUG9wdXBGb2N1cyA9IF9hLm9uUG9wdXBGb2N1cyxcbiAgICAgICAgICBlbXB0eSA9IF9hLmVtcHR5LFxuICAgICAgICAgIHByb3BzID0gX19yZXN0KF9hLCBbXCJvblBvcHVwRm9jdXNcIiwgXCJlbXB0eVwiXSk7XG5cbiAgICAgIHZhciBtdWx0aXBsZSA9IHByb3BzLm11bHRpcGxlLFxuICAgICAgICAgIHZpc2libGUgPSBwcm9wcy52aXNpYmxlLFxuICAgICAgICAgIGlucHV0VmFsdWUgPSBwcm9wcy5pbnB1dFZhbHVlLFxuICAgICAgICAgIGRyb3Bkb3duQWxpZ24gPSBwcm9wcy5kcm9wZG93bkFsaWduLFxuICAgICAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgc2hvd1NlYXJjaCA9IHByb3BzLnNob3dTZWFyY2gsXG4gICAgICAgICAgZHJvcGRvd25DbGFzc05hbWUgPSBwcm9wcy5kcm9wZG93bkNsYXNzTmFtZSxcbiAgICAgICAgICBkcm9wZG93blN0eWxlID0gcHJvcHMuZHJvcGRvd25TdHlsZSxcbiAgICAgICAgICBkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGggPSBwcm9wcy5kcm9wZG93bk1hdGNoU2VsZWN0V2lkdGg7XG4gICAgICB2YXIgZHJvcGRvd25QcmVmaXhDbHMgPSB0aGlzLmdldERyb3Bkb3duUHJlZml4Q2xzKCk7XG4gICAgICB2YXIgcG9wdXBDbGFzc05hbWUgPSAoX3BvcHVwQ2xhc3NOYW1lID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcG9wdXBDbGFzc05hbWUsIGRyb3Bkb3duQ2xhc3NOYW1lLCAhIWRyb3Bkb3duQ2xhc3NOYW1lKSwgX2RlZmluZVByb3BlcnR5KF9wb3B1cENsYXNzTmFtZSwgXCJcIi5jb25jYXQoZHJvcGRvd25QcmVmaXhDbHMsIFwiLS1cIikuY29uY2F0KG11bHRpcGxlID8gJ211bHRpcGxlJyA6ICdzaW5nbGUnKSwgMSksIF9kZWZpbmVQcm9wZXJ0eShfcG9wdXBDbGFzc05hbWUsIFwiXCIuY29uY2F0KGRyb3Bkb3duUHJlZml4Q2xzLCBcIi0tZW1wdHlcIiksIGVtcHR5KSwgX3BvcHVwQ2xhc3NOYW1lKTtcbiAgICAgIHZhciBwb3B1cEVsZW1lbnQgPSB0aGlzLmdldERyb3Bkb3duRWxlbWVudCh7XG4gICAgICAgIG1lbnVJdGVtczogcHJvcHMub3B0aW9ucyxcbiAgICAgICAgb25Qb3B1cEZvY3VzOiBvblBvcHVwRm9jdXMsXG4gICAgICAgIG11bHRpcGxlOiBtdWx0aXBsZSxcbiAgICAgICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgICAgdmlzaWJsZTogdmlzaWJsZVxuICAgICAgfSk7XG4gICAgICB2YXIgaGlkZUFjdGlvbjtcblxuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIGhpZGVBY3Rpb24gPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAoaXNTaW5nbGVNb2RlKHByb3BzKSAmJiAhc2hvd1NlYXJjaCkge1xuICAgICAgICBoaWRlQWN0aW9uID0gWydjbGljayddO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGlkZUFjdGlvbiA9IFsnYmx1ciddO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9wdXBTdHlsZSA9IF9leHRlbmRzKHt9LCBkcm9wZG93blN0eWxlKTtcblxuICAgICAgdmFyIHdpZHRoUHJvcCA9IGRyb3Bkb3duTWF0Y2hTZWxlY3RXaWR0aCA/ICd3aWR0aCcgOiAnbWluV2lkdGgnO1xuXG4gICAgICBpZiAodGhpcy5zdGF0ZS5kcm9wZG93bldpZHRoKSB7XG4gICAgICAgIHBvcHVwU3R5bGVbd2lkdGhQcm9wXSA9IFwiXCIuY29uY2F0KHRoaXMuc3RhdGUuZHJvcGRvd25XaWR0aCwgXCJweFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJpZ2dlciwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIHNob3dBY3Rpb246IGRpc2FibGVkID8gW10gOiB0aGlzLnByb3BzLnNob3dBY3Rpb24sXG4gICAgICAgIGhpZGVBY3Rpb246IGhpZGVBY3Rpb24sXG4gICAgICAgIHJlZjogdGhpcy5zYXZlVHJpZ2dlclJlZixcbiAgICAgICAgcG9wdXBQbGFjZW1lbnQ6IFwiYm90dG9tTGVmdFwiLFxuICAgICAgICBidWlsdGluUGxhY2VtZW50czogQlVJTFRfSU5fUExBQ0VNRU5UUyxcbiAgICAgICAgcHJlZml4Q2xzOiBkcm9wZG93blByZWZpeENscyxcbiAgICAgICAgcG9wdXBUcmFuc2l0aW9uTmFtZTogdGhpcy5nZXREcm9wZG93blRyYW5zaXRpb25OYW1lKCksXG4gICAgICAgIG9uUG9wdXBWaXNpYmxlQ2hhbmdlOiBwcm9wcy5vbkRyb3Bkb3duVmlzaWJsZUNoYW5nZSxcbiAgICAgICAgcG9wdXA6IHBvcHVwRWxlbWVudCxcbiAgICAgICAgcG9wdXBBbGlnbjogZHJvcGRvd25BbGlnbixcbiAgICAgICAgcG9wdXBWaXNpYmxlOiB2aXNpYmxlLFxuICAgICAgICBnZXRQb3B1cENvbnRhaW5lcjogcHJvcHMuZ2V0UG9wdXBDb250YWluZXIsXG4gICAgICAgIHBvcHVwQ2xhc3NOYW1lOiBjbGFzc25hbWVzKHBvcHVwQ2xhc3NOYW1lKSxcbiAgICAgICAgcG9wdXBTdHlsZTogcG9wdXBTdHlsZVxuICAgICAgfSksIHByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2VsZWN0VHJpZ2dlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IHsgU2VsZWN0VHJpZ2dlciBhcyBkZWZhdWx0IH07XG5TZWxlY3RUcmlnZ2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZHJvcGRvd25SZW5kZXI6IGZ1bmN0aW9uIGRyb3Bkb3duUmVuZGVyKG1lbnUpIHtcbiAgICByZXR1cm4gbWVudTtcbiAgfVxufTtcblNlbGVjdFRyaWdnZXIucHJvcFR5cGVzID0ge1xuICBvblBvcHVwRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICBvblBvcHVwU2Nyb2xsOiBQcm9wVHlwZXMuZnVuYyxcbiAgZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZHJvcGRvd25BbGlnbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgdmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvd1NlYXJjaDogUHJvcFR5cGVzLmJvb2wsXG4gIGRyb3Bkb3duQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIGlucHV0VmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZpbHRlck9wdGlvbjogUHJvcFR5cGVzLmFueSxcbiAgb3B0aW9uczogUHJvcFR5cGVzLmFueSxcbiAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBwb3B1cENsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIHNob3dBY3Rpb246IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICBtZW51SXRlbVNlbGVjdGVkSWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gIGRyb3Bkb3duUmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgYXJpYUlkOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuU2VsZWN0VHJpZ2dlci5kaXNwbGF5TmFtZSA9ICdTZWxlY3RUcmlnZ2VyJzsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGNsYXNzZXMgZnJvbSAnY29tcG9uZW50LWNsYXNzZXMnO1xuaW1wb3J0IEFuaW1hdGUgZnJvbSAncmMtYW5pbWF0ZSc7XG5pbXBvcnQgeyBJdGVtIGFzIE1lbnVJdGVtLCBJdGVtR3JvdXAgYXMgTWVudUl0ZW1Hcm91cCB9IGZyb20gJ3JjLW1lbnUnO1xuaW1wb3J0IGNoaWxkcmVuVG9BcnJheSBmcm9tIFwicmMtdXRpbC9lcy9DaGlsZHJlbi90b0FycmF5XCI7XG5pbXBvcnQgS2V5Q29kZSBmcm9tIFwicmMtdXRpbC9lcy9LZXlDb2RlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgcG9seWZpbGwgfSBmcm9tICdyZWFjdC1saWZlY3ljbGVzLWNvbXBhdCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBPcHRpb24gZnJvbSAnLi9PcHRpb24nO1xuaW1wb3J0IFNlbGVjdFByb3BUeXBlcyBmcm9tICcuL1Byb3BUeXBlcyc7XG5pbXBvcnQgU2VsZWN0VHJpZ2dlciBmcm9tICcuL1NlbGVjdFRyaWdnZXInO1xuaW1wb3J0IHsgZGVmYXVsdEZpbHRlckZuLCBmaW5kRmlyc3RNZW51SXRlbSwgZmluZEluZGV4SW5WYWx1ZUJ5U2luZ2xlVmFsdWUsIGdlbmVyYXRlVVVJRCwgZ2V0TGFiZWxGcm9tUHJvcHNWYWx1ZSwgZ2V0TWFwS2V5LCBnZXRQcm9wVmFsdWUsIGdldFZhbHVlUHJvcFZhbHVlLCBpbmNsdWRlc1NlcGFyYXRvcnMsIGlzQ29tYm9ib3gsIGlzTXVsdGlwbGVPclRhZ3MsIGlzTXVsdGlwbGVPclRhZ3NPckNvbWJvYm94LCBpc1NpbmdsZU1vZGUsIHByZXZlbnREZWZhdWx0RXZlbnQsIHNhdmVSZWYsIHNwbGl0QnlTZXBhcmF0b3JzLCB0b0FycmF5LCB0b1RpdGxlLCBVTlNFTEVDVEFCTEVfQVRUUklCVVRFLCBVTlNFTEVDVEFCTEVfU1RZTEUsIHZhbGlkYXRlT3B0aW9uVmFsdWUgfSBmcm9tICcuL3V0aWwnO1xudmFyIFNFTEVDVF9FTVBUWV9WQUxVRV9LRVkgPSAnUkNfU0VMRUNUX0VNUFRZX1ZBTFVFX0tFWSc7XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5mdW5jdGlvbiBjaGFpbmluZygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItZm9yLW9mXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChmbnNbaV0gJiYgdHlwZW9mIGZuc1tpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmbnNbaV0uYXBwbHkoY2hhaW5pbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxudmFyIFNlbGVjdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2VsZWN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTZWxlY3QocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VsZWN0KTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFNlbGVjdCkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgIF90aGlzLmlucHV0UmVmID0gbnVsbDtcbiAgICBfdGhpcy5pbnB1dE1pcnJvclJlZiA9IG51bGw7XG4gICAgX3RoaXMudG9wQ3RybFJlZiA9IG51bGw7XG4gICAgX3RoaXMuc2VsZWN0VHJpZ2dlclJlZiA9IG51bGw7XG4gICAgX3RoaXMucm9vdFJlZiA9IG51bGw7XG4gICAgX3RoaXMuc2VsZWN0aW9uUmVmID0gbnVsbDtcbiAgICBfdGhpcy5kcm9wZG93bkNvbnRhaW5lciA9IG51bGw7XG4gICAgX3RoaXMuYmx1clRpbWVyID0gbnVsbDtcbiAgICBfdGhpcy5mb2N1c1RpbWVyID0gbnVsbDtcbiAgICBfdGhpcy5jb21ib2JveFRpbWVyID0gbnVsbDsgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcblxuICAgIF90aGlzLl9mb2N1c2VkID0gZmFsc2U7IC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp2YXJpYWJsZS1uYW1lXG5cbiAgICBfdGhpcy5fbW91c2VEb3duID0gZmFsc2U7IC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp2YXJpYWJsZS1uYW1lXG5cbiAgICBfdGhpcy5fb3B0aW9ucyA9IFtdOyAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxuXG4gICAgX3RoaXMuX2VtcHR5ID0gZmFsc2U7XG5cbiAgICBfdGhpcy5vbklucHV0Q2hhbmdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgdG9rZW5TZXBhcmF0b3JzID0gX3RoaXMucHJvcHMudG9rZW5TZXBhcmF0b3JzO1xuICAgICAgdmFyIHZhbCA9IGV2ZW50LnRhcmdldC52YWx1ZTtcblxuICAgICAgaWYgKGlzTXVsdGlwbGVPclRhZ3MoX3RoaXMucHJvcHMpICYmIHRva2VuU2VwYXJhdG9ycy5sZW5ndGggJiYgaW5jbHVkZXNTZXBhcmF0b3JzKHZhbCwgdG9rZW5TZXBhcmF0b3JzKSkge1xuICAgICAgICB2YXIgbmV4dFZhbHVlID0gX3RoaXMuZ2V0VmFsdWVCeUlucHV0KHZhbCk7XG5cbiAgICAgICAgaWYgKG5leHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgX3RoaXMuZmlyZUNoYW5nZShuZXh0VmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuc2V0T3BlblN0YXRlKGZhbHNlLCB7XG4gICAgICAgICAgbmVlZEZvY3VzOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzLnNldElucHV0VmFsdWUoJycsIGZhbHNlKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldElucHV0VmFsdWUodmFsKTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzQ29tYm9ib3goX3RoaXMucHJvcHMpKSB7XG4gICAgICAgIF90aGlzLmZpcmVDaGFuZ2UoW3ZhbF0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkRyb3Bkb3duVmlzaWJsZUNoYW5nZSA9IGZ1bmN0aW9uIChvcGVuKSB7XG4gICAgICBpZiAob3BlbiAmJiAhX3RoaXMuX2ZvY3VzZWQpIHtcbiAgICAgICAgX3RoaXMuY2xlYXJCbHVyVGltZSgpO1xuXG4gICAgICAgIF90aGlzLnRpbWVvdXRGb2N1cygpO1xuXG4gICAgICAgIF90aGlzLl9mb2N1c2VkID0gdHJ1ZTtcblxuICAgICAgICBfdGhpcy51cGRhdGVGb2N1c0NsYXNzTmFtZSgpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZXRPcGVuU3RhdGUob3Blbik7XG4gICAgfTsgLy8gY29tYm9ib3ggaWdub3JlXG5cblxuICAgIF90aGlzLm9uS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9wZW4gPSBfdGhpcy5zdGF0ZS5vcGVuO1xuICAgICAgdmFyIGRpc2FibGVkID0gX3RoaXMucHJvcHMuZGlzYWJsZWQ7XG5cbiAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcblxuICAgICAgaWYgKG9wZW4gJiYgIV90aGlzLmdldElucHV0RE9NTm9kZSgpKSB7XG4gICAgICAgIF90aGlzLm9uSW5wdXRLZXlEb3duKGV2ZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5Q29kZSA9PT0gS2V5Q29kZS5FTlRFUiB8fCBrZXlDb2RlID09PSBLZXlDb2RlLkRPV04pIHtcbiAgICAgICAgaWYgKCFvcGVuKSB7XG4gICAgICAgICAgX3RoaXMuc2V0T3BlblN0YXRlKHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5Q29kZSA9PT0gS2V5Q29kZS5TUEFDRSkge1xuICAgICAgICAvLyBOb3QgYmxvY2sgc3BhY2UgaWYgcG9wdXAgaXMgc2hvd25cbiAgICAgICAgaWYgKCFvcGVuKSB7XG4gICAgICAgICAgX3RoaXMuc2V0T3BlblN0YXRlKHRydWUpO1xuXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbklucHV0S2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBjb21ib2JveCA9IF90aGlzJHByb3BzLmNvbWJvYm94LFxuICAgICAgICAgIGRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbiA9IF90aGlzJHByb3BzLmRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbjtcblxuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXRlID0gX3RoaXMuc3RhdGU7XG5cbiAgICAgIHZhciBpc1JlYWxPcGVuID0gX3RoaXMuZ2V0UmVhbE9wZW5TdGF0ZShzdGF0ZSk7IC8vIG1hZ2ljIGNvZGVcblxuXG4gICAgICB2YXIga2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XG5cbiAgICAgIGlmIChpc011bHRpcGxlT3JUYWdzKF90aGlzLnByb3BzKSAmJiAhZXZlbnQudGFyZ2V0LnZhbHVlICYmIGtleUNvZGUgPT09IEtleUNvZGUuQkFDS1NQQUNFKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICBfdGhpcy5yZW1vdmVTZWxlY3RlZCh2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXlDb2RlID09PSBLZXlDb2RlLkRPV04pIHtcbiAgICAgICAgaWYgKCFzdGF0ZS5vcGVuKSB7XG4gICAgICAgICAgX3RoaXMub3BlbklmSGFzQ2hpbGRyZW4oKTtcblxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGtleUNvZGUgPT09IEtleUNvZGUuRU5URVIgJiYgc3RhdGUub3Blbikge1xuICAgICAgICAvLyBBdmlvZCB0cmlnZ2VyIGZvcm0gc3VibWl0IHdoZW4gc2VsZWN0IGl0ZW1cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTA4NjFcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTQ1NDRcbiAgICAgICAgaWYgKGlzUmVhbE9wZW4gfHwgIWNvbWJvYm94KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSAvLyBIYXJkIGNsb3NlIHBvcHVwIHRvIGF2b2lkIGxvY2sgb2Ygbm9uIG9wdGlvbiBpbiBjb21ib2JveCBtb2RlXG5cblxuICAgICAgICBpZiAoaXNSZWFsT3BlbiAmJiBjb21ib2JveCAmJiBkZWZhdWx0QWN0aXZlRmlyc3RPcHRpb24gPT09IGZhbHNlKSB7XG4gICAgICAgICAgX3RoaXMuY29tYm9ib3hUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuc2V0T3BlblN0YXRlKGZhbHNlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXlDb2RlID09PSBLZXlDb2RlLkVTQykge1xuICAgICAgICBpZiAoc3RhdGUub3Blbikge1xuICAgICAgICAgIF90aGlzLnNldE9wZW5TdGF0ZShmYWxzZSk7XG5cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNSZWFsT3BlbiAmJiBfdGhpcy5zZWxlY3RUcmlnZ2VyUmVmKSB7XG4gICAgICAgIHZhciBtZW51ID0gX3RoaXMuc2VsZWN0VHJpZ2dlclJlZi5nZXRJbm5lck1lbnUoKTtcblxuICAgICAgICBpZiAobWVudSAmJiBtZW51Lm9uS2V5RG93bihldmVudCwgX3RoaXMuaGFuZGxlQmFja2ZpbGwpKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbk1lbnVTZWxlY3QgPSBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGl0ZW0gPSBfcmVmLml0ZW07XG5cbiAgICAgIGlmICghaXRlbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IF90aGlzLnN0YXRlLnZhbHVlO1xuICAgICAgdmFyIHByb3BzID0gX3RoaXMucHJvcHM7XG4gICAgICB2YXIgc2VsZWN0ZWRWYWx1ZSA9IGdldFZhbHVlUHJvcFZhbHVlKGl0ZW0pO1xuICAgICAgdmFyIGxhc3RWYWx1ZSA9IHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdO1xuICAgICAgdmFyIHNraXBUcmlnZ2VyID0gZmFsc2U7XG5cbiAgICAgIGlmIChpc011bHRpcGxlT3JUYWdzKHByb3BzKSkge1xuICAgICAgICBpZiAoZmluZEluZGV4SW5WYWx1ZUJ5U2luZ2xlVmFsdWUodmFsdWUsIHNlbGVjdGVkVmFsdWUpICE9PSAtMSkge1xuICAgICAgICAgIHNraXBUcmlnZ2VyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmNvbmNhdChbc2VsZWN0ZWRWYWx1ZV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWlzQ29tYm9ib3gocHJvcHMpICYmIGxhc3RWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIGxhc3RWYWx1ZSA9PT0gc2VsZWN0ZWRWYWx1ZSAmJiBzZWxlY3RlZFZhbHVlICE9PSBfdGhpcy5zdGF0ZS5iYWNrZmlsbFZhbHVlKSB7XG4gICAgICAgICAgX3RoaXMuc2V0T3BlblN0YXRlKGZhbHNlLCB7XG4gICAgICAgICAgICBuZWVkRm9jdXM6IHRydWUsXG4gICAgICAgICAgICBmaXJlU2VhcmNoOiBmYWxzZVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc2tpcFRyaWdnZXIgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gW3NlbGVjdGVkVmFsdWVdO1xuXG4gICAgICAgICAgX3RoaXMuc2V0T3BlblN0YXRlKGZhbHNlLCB7XG4gICAgICAgICAgICBuZWVkRm9jdXM6IHRydWUsXG4gICAgICAgICAgICBmaXJlU2VhcmNoOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghc2tpcFRyaWdnZXIpIHtcbiAgICAgICAgX3RoaXMuZmlyZUNoYW5nZSh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmZpcmVTZWxlY3Qoc2VsZWN0ZWRWYWx1ZSk7XG5cbiAgICAgIGlmICghc2tpcFRyaWdnZXIpIHtcbiAgICAgICAgdmFyIGlucHV0VmFsdWUgPSBpc0NvbWJvYm94KHByb3BzKSA/IGdldFByb3BWYWx1ZShpdGVtLCBwcm9wcy5vcHRpb25MYWJlbFByb3ApIDogJyc7XG5cbiAgICAgICAgaWYgKHByb3BzLmF1dG9DbGVhclNlYXJjaFZhbHVlKSB7XG4gICAgICAgICAgX3RoaXMuc2V0SW5wdXRWYWx1ZShpbnB1dFZhbHVlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMub25NZW51RGVzZWxlY3QgPSBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgIHZhciBpdGVtID0gX3JlZjIuaXRlbSxcbiAgICAgICAgICBkb21FdmVudCA9IF9yZWYyLmRvbUV2ZW50O1xuXG4gICAgICBpZiAoZG9tRXZlbnQudHlwZSA9PT0gJ2tleWRvd24nICYmIGRvbUV2ZW50LmtleUNvZGUgPT09IEtleUNvZGUuRU5URVIpIHtcbiAgICAgICAgX3RoaXMucmVtb3ZlU2VsZWN0ZWQoZ2V0VmFsdWVQcm9wVmFsdWUoaXRlbSkpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvbUV2ZW50LnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgICAgX3RoaXMucmVtb3ZlU2VsZWN0ZWQoZ2V0VmFsdWVQcm9wVmFsdWUoaXRlbSkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvcHMgPSBfdGhpcy5wcm9wcztcblxuICAgICAgaWYgKHByb3BzLmF1dG9DbGVhclNlYXJjaFZhbHVlKSB7XG4gICAgICAgIF90aGlzLnNldElucHV0VmFsdWUoJycpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkFycm93Q2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICBfdGhpcy5zZXRPcGVuU3RhdGUoIV90aGlzLnN0YXRlLm9wZW4sIHtcbiAgICAgICAgICBuZWVkRm9jdXM6ICFfdGhpcy5zdGF0ZS5vcGVuXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vblBsYWNlaG9sZGVyQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuZ2V0SW5wdXRET01Ob2RlICYmIF90aGlzLmdldElucHV0RE9NTm9kZSgpKSB7XG4gICAgICAgIF90aGlzLmdldElucHV0RE9NTm9kZSgpLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uT3V0ZXJGb2N1cyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmNsZWFyQmx1clRpbWUoKTsgLy8gSW4gSUUxMSwgb25PdXRlckZvY3VzIHdpbGwgYmUgdHJpZ2dlciB0d2ljZSB3aGVuIGZvY3VzIGlucHV0XG4gICAgICAvLyBGaXJzdCBvbmU6IGUudGFyZ2V0IGlzIGRpdlxuICAgICAgLy8gU2Vjb25kIG9uZTogZS50YXJnZXQgaXMgaW5wdXRcbiAgICAgIC8vIG90aGVyIGJyb3dzZXIgb25seSB0cmlnZ2VyIHNlY29uZCBvbmVcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzE1OTQyXG4gICAgICAvLyBIZXJlIHdlIGlnbm9yZSB0aGUgZmlyc3Qgb25lIHdoZW4gZS50YXJnZXQgaXMgZGl2XG5cblxuICAgICAgdmFyIGlucHV0Tm9kZSA9IF90aGlzLmdldElucHV0RE9NTm9kZSgpO1xuXG4gICAgICBpZiAoaW5wdXROb2RlICYmIGUudGFyZ2V0ID09PSBfdGhpcy5yb290UmVmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc011bHRpcGxlT3JUYWdzT3JDb21ib2JveChfdGhpcy5wcm9wcykgJiYgZS50YXJnZXQgPT09IGlucHV0Tm9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5fZm9jdXNlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl9mb2N1c2VkID0gdHJ1ZTtcblxuICAgICAgX3RoaXMudXBkYXRlRm9jdXNDbGFzc05hbWUoKTsgLy8gb25seSBlZmZlY3QgbXVsdGlwbGUgb3IgdGFnIG1vZGVcblxuXG4gICAgICBpZiAoIWlzTXVsdGlwbGVPclRhZ3MoX3RoaXMucHJvcHMpIHx8ICFfdGhpcy5fbW91c2VEb3duKSB7XG4gICAgICAgIF90aGlzLnRpbWVvdXRGb2N1cygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vblBvcHVwRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBmaXggaWUgc2Nyb2xsYmFyLCBmb2N1cyBlbGVtZW50IGFnYWluXG4gICAgICBfdGhpcy5tYXliZUZvY3VzKHRydWUsIHRydWUpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbk91dGVyQmx1ciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmJsdXJUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuX2ZvY3VzZWQgPSBmYWxzZTtcblxuICAgICAgICBfdGhpcy51cGRhdGVGb2N1c0NsYXNzTmFtZSgpO1xuXG4gICAgICAgIHZhciBwcm9wcyA9IF90aGlzLnByb3BzO1xuICAgICAgICB2YXIgdmFsdWUgPSBfdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICAgICAgdmFyIGlucHV0VmFsdWUgPSBfdGhpcy5zdGF0ZS5pbnB1dFZhbHVlO1xuXG4gICAgICAgIGlmIChpc1NpbmdsZU1vZGUocHJvcHMpICYmIHByb3BzLnNob3dTZWFyY2ggJiYgaW5wdXRWYWx1ZSAmJiBwcm9wcy5kZWZhdWx0QWN0aXZlRmlyc3RPcHRpb24pIHtcbiAgICAgICAgICB2YXIgb3B0aW9ucyA9IF90aGlzLl9vcHRpb25zIHx8IFtdO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZmlyc3RPcHRpb24gPSBmaW5kRmlyc3RNZW51SXRlbShvcHRpb25zKTtcblxuICAgICAgICAgICAgaWYgKGZpcnN0T3B0aW9uKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gW2dldFZhbHVlUHJvcFZhbHVlKGZpcnN0T3B0aW9uKV07XG5cbiAgICAgICAgICAgICAgX3RoaXMuZmlyZUNoYW5nZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzTXVsdGlwbGVPclRhZ3MocHJvcHMpICYmIGlucHV0VmFsdWUpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuX21vdXNlRG93bikge1xuICAgICAgICAgICAgLy8gbmVlZCB1cGRhdGUgZHJvcG1lbnUgd2hlbiBub3QgYmx1clxuICAgICAgICAgICAgX3RoaXMuc2V0SW5wdXRWYWx1ZSgnJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHdoeSBub3QgdXNlIHNldFN0YXRlP1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTQyNjJcbiAgICAgICAgICAgIF90aGlzLnN0YXRlLmlucHV0VmFsdWUgPSAnJztcblxuICAgICAgICAgICAgaWYgKF90aGlzLmdldElucHV0RE9NTm9kZSAmJiBfdGhpcy5nZXRJbnB1dERPTU5vZGUoKSkge1xuICAgICAgICAgICAgICBfdGhpcy5nZXRJbnB1dERPTU5vZGUoKS52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB0bXBWYWx1ZSA9IF90aGlzLmdldFZhbHVlQnlJbnB1dChpbnB1dFZhbHVlKTtcblxuICAgICAgICAgIGlmICh0bXBWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRtcFZhbHVlO1xuXG4gICAgICAgICAgICBfdGhpcy5maXJlQ2hhbmdlKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gaWYgY2xpY2sgdGhlIHJlc3Qgc3BhY2Ugb2YgU2VsZWN0IGluIG11bHRpcGxlIG1vZGVcblxuXG4gICAgICAgIGlmIChpc011bHRpcGxlT3JUYWdzKHByb3BzKSAmJiBfdGhpcy5fbW91c2VEb3duKSB7XG4gICAgICAgICAgX3RoaXMubWF5YmVGb2N1cyh0cnVlLCB0cnVlKTtcblxuICAgICAgICAgIF90aGlzLl9tb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5zZXRPcGVuU3RhdGUoZmFsc2UpO1xuXG4gICAgICAgIGlmIChwcm9wcy5vbkJsdXIpIHtcbiAgICAgICAgICBwcm9wcy5vbkJsdXIoX3RoaXMuZ2V0VkxGb3JPbkNoYW5nZSh2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICB9LCAxMCk7XG4gICAgfTtcblxuICAgIF90aGlzLm9uQ2xlYXJTZWxlY3Rpb24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBwcm9wcyA9IF90aGlzLnByb3BzO1xuICAgICAgdmFyIHN0YXRlID0gX3RoaXMuc3RhdGU7XG5cbiAgICAgIGlmIChwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpbnB1dFZhbHVlID0gc3RhdGUuaW5wdXRWYWx1ZTtcbiAgICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGlmIChpbnB1dFZhbHVlIHx8IHZhbHVlLmxlbmd0aCkge1xuICAgICAgICBpZiAodmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgX3RoaXMuZmlyZUNoYW5nZShbXSk7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5zZXRPcGVuU3RhdGUoZmFsc2UsIHtcbiAgICAgICAgICBuZWVkRm9jdXM6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGlucHV0VmFsdWUpIHtcbiAgICAgICAgICBfdGhpcy5zZXRJbnB1dFZhbHVlKCcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkNob2ljZUFuaW1hdGlvbkxlYXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuZm9yY2VQb3B1cEFsaWduKCk7XG4gICAgfTtcblxuICAgIF90aGlzLmdldE9wdGlvbkluZm9CeVNpbmdsZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zSW5mbykge1xuICAgICAgdmFyIGluZm87XG4gICAgICBvcHRpb25zSW5mbyA9IG9wdGlvbnNJbmZvIHx8IF90aGlzLnN0YXRlLm9wdGlvbnNJbmZvO1xuXG4gICAgICBpZiAob3B0aW9uc0luZm9bZ2V0TWFwS2V5KHZhbHVlKV0pIHtcbiAgICAgICAgaW5mbyA9IG9wdGlvbnNJbmZvW2dldE1hcEtleSh2YWx1ZSldO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5mbykge1xuICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgIH1cblxuICAgICAgdmFyIGRlZmF1bHRMYWJlbCA9IHZhbHVlO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMubGFiZWxJblZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZUxhYmVsID0gZ2V0TGFiZWxGcm9tUHJvcHNWYWx1ZShfdGhpcy5wcm9wcy52YWx1ZSwgdmFsdWUpO1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlTGFiZWwgPSBnZXRMYWJlbEZyb21Qcm9wc1ZhbHVlKF90aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSwgdmFsdWUpO1xuXG4gICAgICAgIGlmICh2YWx1ZUxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkZWZhdWx0TGFiZWwgPSB2YWx1ZUxhYmVsO1xuICAgICAgICB9IGVsc2UgaWYgKGRlZmF1bHRWYWx1ZUxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkZWZhdWx0TGFiZWwgPSBkZWZhdWx0VmFsdWVMYWJlbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZGVmYXVsdEluZm8gPSB7XG4gICAgICAgIG9wdGlvbjogUmVhY3QuY3JlYXRlRWxlbWVudChPcHRpb24sIHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAga2V5OiB2YWx1ZVxuICAgICAgICB9LCB2YWx1ZSksXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgbGFiZWw6IGRlZmF1bHRMYWJlbFxuICAgICAgfTtcbiAgICAgIHJldHVybiBkZWZhdWx0SW5mbztcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0T3B0aW9uQnlTaW5nbGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyIF90aGlzJGdldE9wdGlvbkluZm9CeSA9IF90aGlzLmdldE9wdGlvbkluZm9CeVNpbmdsZVZhbHVlKHZhbHVlKSxcbiAgICAgICAgICBvcHRpb24gPSBfdGhpcyRnZXRPcHRpb25JbmZvQnkub3B0aW9uO1xuXG4gICAgICByZXR1cm4gb3B0aW9uO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRPcHRpb25zQnlTaW5nbGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgIHJldHVybiB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuZ2V0T3B0aW9uQnlTaW5nbGVWYWx1ZSh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0VmFsdWVCeUxhYmVsID0gZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICBpZiAobGFiZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gbnVsbDtcbiAgICAgIE9iamVjdC5rZXlzKF90aGlzLnN0YXRlLm9wdGlvbnNJbmZvKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIGluZm8gPSBfdGhpcy5zdGF0ZS5vcHRpb25zSW5mb1trZXldO1xuICAgICAgICB2YXIgZGlzYWJsZWQgPSBpbmZvLmRpc2FibGVkO1xuXG4gICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvbGRMYWJsZSA9IHRvQXJyYXkoaW5mby5sYWJlbCk7XG5cbiAgICAgICAgaWYgKG9sZExhYmxlICYmIG9sZExhYmxlLmpvaW4oJycpID09PSBsYWJlbCkge1xuICAgICAgICAgIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcblxuICAgIF90aGlzLmdldFZMQnlTaW5nbGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmxhYmVsSW5WYWx1ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleTogdmFsdWUsXG4gICAgICAgICAgbGFiZWw6IF90aGlzLmdldExhYmVsQnlTaW5nbGVWYWx1ZSh2YWx1ZSlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRWTEZvck9uQ2hhbmdlID0gZnVuY3Rpb24gKHZsc1MpIHtcbiAgICAgIHZhciB2bHMgPSB2bHNTO1xuXG4gICAgICBpZiAodmxzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5sYWJlbEluVmFsdWUpIHtcbiAgICAgICAgICB2bHMgPSB2bHMubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bHMgPSB2bHMubWFwKGZ1bmN0aW9uICh2bCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAga2V5OiB2bCxcbiAgICAgICAgICAgICAgbGFiZWw6IF90aGlzLmdldExhYmVsQnlTaW5nbGVWYWx1ZSh2bClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNNdWx0aXBsZU9yVGFncyhfdGhpcy5wcm9wcykgPyB2bHMgOiB2bHNbMF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2bHM7XG4gICAgfTtcblxuICAgIF90aGlzLmdldExhYmVsQnlTaW5nbGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgb3B0aW9uc0luZm8pIHtcbiAgICAgIHZhciBfdGhpcyRnZXRPcHRpb25JbmZvQnkyID0gX3RoaXMuZ2V0T3B0aW9uSW5mb0J5U2luZ2xlVmFsdWUodmFsdWUsIG9wdGlvbnNJbmZvKSxcbiAgICAgICAgICBsYWJlbCA9IF90aGlzJGdldE9wdGlvbkluZm9CeTIubGFiZWw7XG5cbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0RHJvcGRvd25Db250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLmRyb3Bkb3duQ29udGFpbmVyKSB7XG4gICAgICAgIF90aGlzLmRyb3Bkb3duQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoX3RoaXMuZHJvcGRvd25Db250YWluZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMuZHJvcGRvd25Db250YWluZXI7XG4gICAgfTtcblxuICAgIF90aGlzLmdldFBsYWNlaG9sZGVyRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9wcyA9IF90aGlzLnByb3BzO1xuICAgICAgdmFyIHN0YXRlID0gX3RoaXMuc3RhdGU7XG4gICAgICB2YXIgaGlkZGVuID0gZmFsc2U7XG5cbiAgICAgIGlmIChzdGF0ZS5pbnB1dFZhbHVlKSB7XG4gICAgICAgIGhpZGRlbiA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuXG4gICAgICBpZiAodmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIGhpZGRlbiA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0NvbWJvYm94KHByb3BzKSAmJiB2YWx1ZS5sZW5ndGggPT09IDEgJiYgc3RhdGUudmFsdWUgJiYgIXN0YXRlLnZhbHVlWzBdKSB7XG4gICAgICAgIGhpZGRlbiA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGxhY2Vob2xkZXIgPSBwcm9wcy5wbGFjZWhvbGRlcjtcblxuICAgICAgaWYgKHBsYWNlaG9sZGVyKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICAgICAgICBvbk1vdXNlRG93bjogcHJldmVudERlZmF1bHRFdmVudCxcbiAgICAgICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICAgICAgZGlzcGxheTogaGlkZGVuID8gJ25vbmUnIDogJ2Jsb2NrJ1xuICAgICAgICAgIH0sIFVOU0VMRUNUQUJMRV9TVFlMRSlcbiAgICAgICAgfSwgVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSwge1xuICAgICAgICAgIG9uQ2xpY2s6IF90aGlzLm9uUGxhY2Vob2xkZXJDbGljayxcbiAgICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByb3BzLnByZWZpeENscywgXCItc2VsZWN0aW9uX19wbGFjZWhvbGRlclwiKVxuICAgICAgICB9KSwgcGxhY2Vob2xkZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0SW5wdXRFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHByb3BzID0gX3RoaXMucHJvcHM7XG4gICAgICB2YXIgZGVmYXVsdElucHV0ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICAgICAgaWQ6IHByb3BzLmlkLFxuICAgICAgICBhdXRvQ29tcGxldGU6IFwib2ZmXCJcbiAgICAgIH0pOyAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dHlwZWRlZi13aGl0ZXNwYWNlXG5cbiAgICAgIHZhciBpbnB1dEVsZW1lbnQgPSBwcm9wcy5nZXRJbnB1dEVsZW1lbnQgPyBwcm9wcy5nZXRJbnB1dEVsZW1lbnQoKSA6IGRlZmF1bHRJbnB1dDtcbiAgICAgIHZhciBpbnB1dENscyA9IGNsYXNzbmFtZXMoaW5wdXRFbGVtZW50LnByb3BzLmNsYXNzTmFtZSwgX2RlZmluZVByb3BlcnR5KHt9LCBcIlwiLmNvbmNhdChwcm9wcy5wcmVmaXhDbHMsIFwiLXNlYXJjaF9fZmllbGRcIiksIHRydWUpKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvNDk5MiNpc3N1ZWNvbW1lbnQtMjgxNTQyMTU5XG4gICAgICAvLyBBZGQgc3BhY2UgdG8gdGhlIGVuZCBvZiB0aGUgaW5wdXRWYWx1ZSBhcyB0aGUgd2lkdGggbWVhc3VyZW1lbnQgdG9sZXJhbmNlXG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcm9wcy5wcmVmaXhDbHMsIFwiLXNlYXJjaF9fZmllbGRfX3dyYXBcIilcbiAgICAgIH0sIFJlYWN0LmNsb25lRWxlbWVudChpbnB1dEVsZW1lbnQsIHtcbiAgICAgICAgcmVmOiBfdGhpcy5zYXZlSW5wdXRSZWYsXG4gICAgICAgIG9uQ2hhbmdlOiBfdGhpcy5vbklucHV0Q2hhbmdlLFxuICAgICAgICBvbktleURvd246IGNoYWluaW5nKF90aGlzLm9uSW5wdXRLZXlEb3duLCBpbnB1dEVsZW1lbnQucHJvcHMub25LZXlEb3duLCBfdGhpcy5wcm9wcy5vbklucHV0S2V5RG93biksXG4gICAgICAgIHZhbHVlOiBfdGhpcy5zdGF0ZS5pbnB1dFZhbHVlLFxuICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGNsYXNzTmFtZTogaW5wdXRDbHNcbiAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIHJlZjogX3RoaXMuc2F2ZUlucHV0TWlycm9yUmVmLFxuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByb3BzLnByZWZpeENscywgXCItc2VhcmNoX19maWVsZF9fbWlycm9yXCIpXG4gICAgICB9LCBfdGhpcy5zdGF0ZS5pbnB1dFZhbHVlLCBcIlxceEEwXCIpKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0SW5wdXRET01Ob2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnRvcEN0cmxSZWYgPyBfdGhpcy50b3BDdHJsUmVmLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0LHRleHRhcmVhLGRpdltjb250ZW50RWRpdGFibGVdJykgOiBfdGhpcy5pbnB1dFJlZjtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0SW5wdXRNaXJyb3JET01Ob2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmlucHV0TWlycm9yUmVmO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRQb3B1cERPTU5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuc2VsZWN0VHJpZ2dlclJlZikge1xuICAgICAgICByZXR1cm4gX3RoaXMuc2VsZWN0VHJpZ2dlclJlZi5nZXRQb3B1cERPTU5vZGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0UG9wdXBNZW51Q29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnNlbGVjdFRyaWdnZXJSZWYpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnNlbGVjdFRyaWdnZXJSZWYuZ2V0SW5uZXJNZW51KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnNldE9wZW5TdGF0ZSA9IGZ1bmN0aW9uIChvcGVuKSB7XG4gICAgICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBuZWVkRm9jdXMgPSBjb25maWcubmVlZEZvY3VzLFxuICAgICAgICAgIGZpcmVTZWFyY2ggPSBjb25maWcuZmlyZVNlYXJjaDtcbiAgICAgIHZhciBwcm9wcyA9IF90aGlzLnByb3BzO1xuICAgICAgdmFyIHN0YXRlID0gX3RoaXMuc3RhdGU7XG5cbiAgICAgIGlmIChzdGF0ZS5vcGVuID09PSBvcGVuKSB7XG4gICAgICAgIF90aGlzLm1heWJlRm9jdXMob3BlbiwgISFuZWVkRm9jdXMpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRHJvcGRvd25WaXNpYmxlQ2hhbmdlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRHJvcGRvd25WaXNpYmxlQ2hhbmdlKG9wZW4pO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV4dFN0YXRlID0ge1xuICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICBiYWNrZmlsbFZhbHVlOiAnJ1xuICAgICAgfTsgLy8gY2xlYXIgc2VhcmNoIGlucHV0IHZhbHVlIHdoZW4gb3BlbiBpcyBmYWxzZSBpbiBzaW5nbGVNb2RlLlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTY1NzJcblxuICAgICAgaWYgKCFvcGVuICYmIGlzU2luZ2xlTW9kZShwcm9wcykgJiYgcHJvcHMuc2hvd1NlYXJjaCkge1xuICAgICAgICBfdGhpcy5zZXRJbnB1dFZhbHVlKCcnLCBmaXJlU2VhcmNoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcGVuKSB7XG4gICAgICAgIF90aGlzLm1heWJlRm9jdXMob3BlbiwgISFuZWVkRm9jdXMpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZXRTdGF0ZShfZXh0ZW5kcyh7XG4gICAgICAgIG9wZW46IG9wZW5cbiAgICAgIH0sIG5leHRTdGF0ZSksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgICBfdGhpcy5tYXliZUZvY3VzKG9wZW4sICEhbmVlZEZvY3VzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnNldElucHV0VmFsdWUgPSBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge1xuICAgICAgdmFyIGZpcmVTZWFyY2ggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgICB2YXIgb25TZWFyY2ggPSBfdGhpcy5wcm9wcy5vblNlYXJjaDtcblxuICAgICAgaWYgKGlucHV0VmFsdWUgIT09IF90aGlzLnN0YXRlLmlucHV0VmFsdWUpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgICAgIC8vIEFkZGl0aW9uYWwgY2hlY2sgaWYgYGlucHV0VmFsdWVgIGNoYW5nZWQgaW4gbGF0ZXN0IHN0YXRlLlxuICAgICAgICAgIGlmIChmaXJlU2VhcmNoICYmIGlucHV0VmFsdWUgIT09IHByZXZTdGF0ZS5pbnB1dFZhbHVlICYmIG9uU2VhcmNoKSB7XG4gICAgICAgICAgICBvblNlYXJjaChpbnB1dFZhbHVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH0sIF90aGlzLmZvcmNlUG9wdXBBbGlnbik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmdldFZhbHVlQnlJbnB1dCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBtdWx0aXBsZSA9IF90aGlzJHByb3BzMi5tdWx0aXBsZSxcbiAgICAgICAgICB0b2tlblNlcGFyYXRvcnMgPSBfdGhpcyRwcm9wczIudG9rZW5TZXBhcmF0b3JzO1xuICAgICAgdmFyIG5leHRWYWx1ZSA9IF90aGlzLnN0YXRlLnZhbHVlO1xuICAgICAgdmFyIGhhc05ld1ZhbHVlID0gZmFsc2U7XG4gICAgICBzcGxpdEJ5U2VwYXJhdG9ycyhzdHIsIHRva2VuU2VwYXJhdG9ycykuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgdmFyIHNlbGVjdGVkVmFsdWUgPSBbbGFiZWxdO1xuXG4gICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IF90aGlzLmdldFZhbHVlQnlMYWJlbChsYWJlbCk7XG5cbiAgICAgICAgICBpZiAodmFsdWUgJiYgZmluZEluZGV4SW5WYWx1ZUJ5U2luZ2xlVmFsdWUobmV4dFZhbHVlLCB2YWx1ZSkgPT09IC0xKSB7XG4gICAgICAgICAgICBuZXh0VmFsdWUgPSBuZXh0VmFsdWUuY29uY2F0KHZhbHVlKTtcbiAgICAgICAgICAgIGhhc05ld1ZhbHVlID0gdHJ1ZTtcblxuICAgICAgICAgICAgX3RoaXMuZmlyZVNlbGVjdCh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGZpbmRJbmRleEluVmFsdWVCeVNpbmdsZVZhbHVlKG5leHRWYWx1ZSwgbGFiZWwpID09PSAtMSkge1xuICAgICAgICAgIG5leHRWYWx1ZSA9IG5leHRWYWx1ZS5jb25jYXQoc2VsZWN0ZWRWYWx1ZSk7XG4gICAgICAgICAgaGFzTmV3VmFsdWUgPSB0cnVlO1xuXG4gICAgICAgICAgX3RoaXMuZmlyZVNlbGVjdChsYWJlbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGhhc05ld1ZhbHVlID8gbmV4dFZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRSZWFsT3BlblN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxuICAgICAgdmFyIF9vcGVuID0gX3RoaXMucHJvcHMub3BlbjtcblxuICAgICAgaWYgKHR5cGVvZiBfb3BlbiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBfb3BlbjtcbiAgICAgIH1cblxuICAgICAgdmFyIG9wZW4gPSAoc3RhdGUgfHwgX3RoaXMuc3RhdGUpLm9wZW47XG4gICAgICB2YXIgb3B0aW9ucyA9IF90aGlzLl9vcHRpb25zIHx8IFtdO1xuXG4gICAgICBpZiAoaXNNdWx0aXBsZU9yVGFnc09yQ29tYm9ib3goX3RoaXMucHJvcHMpIHx8ICFfdGhpcy5wcm9wcy5zaG93U2VhcmNoKSB7XG4gICAgICAgIGlmIChvcGVuICYmICFvcHRpb25zLmxlbmd0aCkge1xuICAgICAgICAgIG9wZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3BlbjtcbiAgICB9O1xuXG4gICAgX3RoaXMubWFya01vdXNlRG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLl9tb3VzZURvd24gPSB0cnVlO1xuICAgIH07XG5cbiAgICBfdGhpcy5tYXJrTW91c2VMZWF2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLl9tb3VzZURvd24gPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmFja2ZpbGwgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5iYWNrZmlsbCB8fCAhKGlzU2luZ2xlTW9kZShfdGhpcy5wcm9wcykgfHwgaXNDb21ib2JveChfdGhpcy5wcm9wcykpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleSA9IGdldFZhbHVlUHJvcFZhbHVlKGl0ZW0pO1xuXG4gICAgICBpZiAoaXNDb21ib2JveChfdGhpcy5wcm9wcykpIHtcbiAgICAgICAgX3RoaXMuc2V0SW5wdXRWYWx1ZShrZXksIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB2YWx1ZTogW2tleV0sXG4gICAgICAgIGJhY2tmaWxsVmFsdWU6IGtleVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmZpbHRlck9wdGlvbiA9IGZ1bmN0aW9uIChpbnB1dCwgY2hpbGQpIHtcbiAgICAgIHZhciBkZWZhdWx0RmlsdGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBkZWZhdWx0RmlsdGVyRm47XG4gICAgICB2YXIgdmFsdWUgPSBfdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICAgIHZhciBsYXN0VmFsdWUgPSB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXTtcblxuICAgICAgaWYgKCFpbnB1dCB8fCBsYXN0VmFsdWUgJiYgbGFzdFZhbHVlID09PSBfdGhpcy5zdGF0ZS5iYWNrZmlsbFZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmlsdGVyRm4gPSBfdGhpcy5wcm9wcy5maWx0ZXJPcHRpb247XG5cbiAgICAgIGlmICgnZmlsdGVyT3B0aW9uJyBpbiBfdGhpcy5wcm9wcykge1xuICAgICAgICBpZiAoZmlsdGVyRm4gPT09IHRydWUpIHtcbiAgICAgICAgICBmaWx0ZXJGbiA9IGRlZmF1bHRGaWx0ZXIuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbHRlckZuID0gZGVmYXVsdEZpbHRlci5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmaWx0ZXJGbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpbHRlckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmaWx0ZXJGbi5jYWxsKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBpbnB1dCwgY2hpbGQpO1xuICAgICAgfSBlbHNlIGlmIChjaGlsZC5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICBfdGhpcy50aW1lb3V0Rm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb25Gb2N1cyA9IF90aGlzLnByb3BzLm9uRm9jdXM7XG5cbiAgICAgIGlmIChfdGhpcy5mb2N1c1RpbWVyKSB7XG4gICAgICAgIF90aGlzLmNsZWFyRm9jdXNUaW1lKCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmZvY3VzVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICAgICAgb25Gb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9LCAxMCk7XG4gICAgfTtcblxuICAgIF90aGlzLmNsZWFyRm9jdXNUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmZvY3VzVGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmZvY3VzVGltZXIpO1xuICAgICAgICBfdGhpcy5mb2N1c1RpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuY2xlYXJCbHVyVGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5ibHVyVGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmJsdXJUaW1lcik7XG4gICAgICAgIF90aGlzLmJsdXJUaW1lciA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmNsZWFyQ29tYm9ib3hUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmNvbWJvYm94VGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmNvbWJvYm94VGltZXIpO1xuICAgICAgICBfdGhpcy5jb21ib2JveFRpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMudXBkYXRlRm9jdXNDbGFzc05hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcm9vdFJlZiA9IF90aGlzLnJvb3RSZWY7XG4gICAgICB2YXIgcHJvcHMgPSBfdGhpcy5wcm9wczsgLy8gYXZvaWQgc2V0U3RhdGUgYW5kIGl0cyBzaWRlIGVmZmVjdFxuXG4gICAgICBpZiAoX3RoaXMuX2ZvY3VzZWQpIHtcbiAgICAgICAgY2xhc3Nlcyhyb290UmVmKS5hZGQoXCJcIi5jb25jYXQocHJvcHMucHJlZml4Q2xzLCBcIi1mb2N1c2VkXCIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsYXNzZXMocm9vdFJlZikucmVtb3ZlKFwiXCIuY29uY2F0KHByb3BzLnByZWZpeENscywgXCItZm9jdXNlZFwiKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm1heWJlRm9jdXMgPSBmdW5jdGlvbiAob3BlbiwgbmVlZEZvY3VzKSB7XG4gICAgICBpZiAobmVlZEZvY3VzIHx8IG9wZW4pIHtcbiAgICAgICAgdmFyIGlucHV0ID0gX3RoaXMuZ2V0SW5wdXRET01Ob2RlKCk7XG5cbiAgICAgICAgdmFyIF9kb2N1bWVudCA9IGRvY3VtZW50LFxuICAgICAgICAgICAgYWN0aXZlRWxlbWVudCA9IF9kb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG4gICAgICAgIGlmIChpbnB1dCAmJiAob3BlbiB8fCBpc011bHRpcGxlT3JUYWdzT3JDb21ib2JveChfdGhpcy5wcm9wcykpKSB7XG4gICAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICBpbnB1dC5mb2N1cygpO1xuICAgICAgICAgICAgX3RoaXMuX2ZvY3VzZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChhY3RpdmVFbGVtZW50ICE9PSBfdGhpcy5zZWxlY3Rpb25SZWYgJiYgX3RoaXMuc2VsZWN0aW9uUmVmKSB7XG4gICAgICAgICAgX3RoaXMuc2VsZWN0aW9uUmVmLmZvY3VzKCk7XG5cbiAgICAgICAgICBfdGhpcy5fZm9jdXNlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucmVtb3ZlU2VsZWN0ZWQgPSBmdW5jdGlvbiAoc2VsZWN0ZWRLZXksIGUpIHtcbiAgICAgIHZhciBwcm9wcyA9IF90aGlzLnByb3BzO1xuXG4gICAgICBpZiAocHJvcHMuZGlzYWJsZWQgfHwgX3RoaXMuaXNDaGlsZERpc2FibGVkKHNlbGVjdGVkS2V5KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIERvIG5vdCB0cmlnZ2VyIFRyaWdnZXIgcG9wdXBcblxuXG4gICAgICBpZiAoZSAmJiBlLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2xkVmFsdWUgPSBfdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICAgIHZhciB2YWx1ZSA9IG9sZFZhbHVlLmZpbHRlcihmdW5jdGlvbiAoc2luZ2xlVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHNpbmdsZVZhbHVlICE9PSBzZWxlY3RlZEtleTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGNhbk11bHRpcGxlID0gaXNNdWx0aXBsZU9yVGFncyhwcm9wcyk7XG5cbiAgICAgIGlmIChjYW5NdWx0aXBsZSkge1xuICAgICAgICB2YXIgZXZlbnQgPSBzZWxlY3RlZEtleTtcblxuICAgICAgICBpZiAocHJvcHMubGFiZWxJblZhbHVlKSB7XG4gICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICBrZXk6IHNlbGVjdGVkS2V5LFxuICAgICAgICAgICAgbGFiZWw6IF90aGlzLmdldExhYmVsQnlTaW5nbGVWYWx1ZShzZWxlY3RlZEtleSlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BzLm9uRGVzZWxlY3QpIHtcbiAgICAgICAgICBwcm9wcy5vbkRlc2VsZWN0KGV2ZW50LCBfdGhpcy5nZXRPcHRpb25CeVNpbmdsZVZhbHVlKHNlbGVjdGVkS2V5KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX3RoaXMuZmlyZUNoYW5nZSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIF90aGlzLm9wZW5JZkhhc0NoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHByb3BzID0gX3RoaXMucHJvcHM7XG5cbiAgICAgIGlmIChSZWFjdC5DaGlsZHJlbi5jb3VudChwcm9wcy5jaGlsZHJlbikgfHwgaXNTaW5nbGVNb2RlKHByb3BzKSkge1xuICAgICAgICBfdGhpcy5zZXRPcGVuU3RhdGUodHJ1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmZpcmVTZWxlY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vblNlbGVjdCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblNlbGVjdChfdGhpcy5nZXRWTEJ5U2luZ2xlVmFsdWUodmFsdWUpLCBfdGhpcy5nZXRPcHRpb25CeVNpbmdsZVZhbHVlKHZhbHVlKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmZpcmVDaGFuZ2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBwcm9wcyA9IF90aGlzLnByb3BzO1xuXG4gICAgICBpZiAoISgndmFsdWUnIGluIHByb3BzKSkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0sIF90aGlzLmZvcmNlUG9wdXBBbGlnbik7XG4gICAgICB9XG5cbiAgICAgIHZhciB2bHMgPSBfdGhpcy5nZXRWTEZvck9uQ2hhbmdlKHZhbHVlKTtcblxuICAgICAgdmFyIG9wdGlvbnMgPSBfdGhpcy5nZXRPcHRpb25zQnlTaW5nbGVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGlmIChwcm9wcy5vbkNoYW5nZSkge1xuICAgICAgICBwcm9wcy5vbkNoYW5nZSh2bHMsIGlzTXVsdGlwbGVPclRhZ3MoX3RoaXMucHJvcHMpID8gb3B0aW9ucyA6IG9wdGlvbnNbMF0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5pc0NoaWxkRGlzYWJsZWQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW5Ub0FycmF5KF90aGlzLnByb3BzLmNoaWxkcmVuKS5zb21lKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB2YXIgY2hpbGRWYWx1ZSA9IGdldFZhbHVlUHJvcFZhbHVlKGNoaWxkKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkVmFsdWUgPT09IGtleSAmJiBjaGlsZC5wcm9wcyAmJiBjaGlsZC5wcm9wcy5kaXNhYmxlZDtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5mb3JjZVBvcHVwQWxpZ24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLm9wZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMuc2VsZWN0VHJpZ2dlclJlZiAmJiBfdGhpcy5zZWxlY3RUcmlnZ2VyUmVmLnRyaWdnZXJSZWYpIHtcbiAgICAgICAgX3RoaXMuc2VsZWN0VHJpZ2dlclJlZi50cmlnZ2VyUmVmLmZvcmNlUG9wdXBBbGlnbigpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5yZW5kZXJGaWx0ZXJPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlucHV0VmFsdWUgPSBfdGhpcy5zdGF0ZS5pbnB1dFZhbHVlO1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMzLmNoaWxkcmVuLFxuICAgICAgICAgIHRhZ3MgPSBfdGhpcyRwcm9wczMudGFncyxcbiAgICAgICAgICBub3RGb3VuZENvbnRlbnQgPSBfdGhpcyRwcm9wczMubm90Rm91bmRDb250ZW50O1xuICAgICAgdmFyIG1lbnVJdGVtcyA9IFtdO1xuICAgICAgdmFyIGNoaWxkcmVuS2V5cyA9IFtdO1xuICAgICAgdmFyIGVtcHR5ID0gZmFsc2U7XG5cbiAgICAgIHZhciBvcHRpb25zID0gX3RoaXMucmVuZGVyRmlsdGVyT3B0aW9uc0Zyb21DaGlsZHJlbihjaGlsZHJlbiwgY2hpbGRyZW5LZXlzLCBtZW51SXRlbXMpO1xuXG4gICAgICBpZiAodGFncykge1xuICAgICAgICAvLyB0YWdzIHZhbHVlIG11c3QgYmUgc3RyaW5nXG4gICAgICAgIHZhciB2YWx1ZSA9IF90aGlzLnN0YXRlLnZhbHVlO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLmZpbHRlcihmdW5jdGlvbiAoc2luZ2xlVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRyZW5LZXlzLmluZGV4T2Yoc2luZ2xlVmFsdWUpID09PSAtMSAmJiAoIWlucHV0VmFsdWUgfHwgU3RyaW5nKHNpbmdsZVZhbHVlKS5pbmRleE9mKFN0cmluZyhpbnB1dFZhbHVlKSkgPiAtMSk7XG4gICAgICAgIH0pOyAvLyBzb3J0IGJ5IGxlbmd0aFxuXG4gICAgICAgIHZhbHVlLnNvcnQoZnVuY3Rpb24gKHZhbDEsIHZhbDIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsMS5sZW5ndGggLSB2YWwyLmxlbmd0aDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHNpbmdsZVZhbHVlKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHNpbmdsZVZhbHVlO1xuICAgICAgICAgIHZhciBtZW51SXRlbSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudUl0ZW0sIHtcbiAgICAgICAgICAgIHN0eWxlOiBVTlNFTEVDVEFCTEVfU1RZTEUsXG4gICAgICAgICAgICByb2xlOiBcIm9wdGlvblwiLFxuICAgICAgICAgICAgYXR0cmlidXRlOiBVTlNFTEVDVEFCTEVfQVRUUklCVVRFLFxuICAgICAgICAgICAgdmFsdWU6IGtleSxcbiAgICAgICAgICAgIGtleToga2V5XG4gICAgICAgICAgfSwga2V5KTtcbiAgICAgICAgICBvcHRpb25zLnB1c2gobWVudUl0ZW0pO1xuICAgICAgICAgIG1lbnVJdGVtcy5wdXNoKG1lbnVJdGVtKTtcbiAgICAgICAgfSk7IC8vIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMTQwOTBcblxuICAgICAgICBpZiAoaW5wdXRWYWx1ZSAmJiBtZW51SXRlbXMuZXZlcnkoZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICAgIHJldHVybiBnZXRWYWx1ZVByb3BWYWx1ZShvcHRpb24pICE9PSBpbnB1dFZhbHVlO1xuICAgICAgICB9KSkge1xuICAgICAgICAgIG9wdGlvbnMudW5zaGlmdChSZWFjdC5jcmVhdGVFbGVtZW50KE1lbnVJdGVtLCB7XG4gICAgICAgICAgICBzdHlsZTogVU5TRUxFQ1RBQkxFX1NUWUxFLFxuICAgICAgICAgICAgcm9sZTogXCJvcHRpb25cIixcbiAgICAgICAgICAgIGF0dHJpYnV0ZTogVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSxcbiAgICAgICAgICAgIHZhbHVlOiBpbnB1dFZhbHVlLFxuICAgICAgICAgICAga2V5OiBpbnB1dFZhbHVlXG4gICAgICAgICAgfSwgaW5wdXRWYWx1ZSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy5sZW5ndGggJiYgbm90Rm91bmRDb250ZW50KSB7XG4gICAgICAgIGVtcHR5ID0gdHJ1ZTtcbiAgICAgICAgb3B0aW9ucyA9IFtSZWFjdC5jcmVhdGVFbGVtZW50KE1lbnVJdGVtLCB7XG4gICAgICAgICAgc3R5bGU6IFVOU0VMRUNUQUJMRV9TVFlMRSxcbiAgICAgICAgICBhdHRyaWJ1dGU6IFVOU0VMRUNUQUJMRV9BVFRSSUJVVEUsXG4gICAgICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICAgICAgcm9sZTogXCJvcHRpb25cIixcbiAgICAgICAgICB2YWx1ZTogXCJOT1RfRk9VTkRcIixcbiAgICAgICAgICBrZXk6IFwiTk9UX0ZPVU5EXCJcbiAgICAgICAgfSwgbm90Rm91bmRDb250ZW50KV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVtcHR5OiBlbXB0eSxcbiAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX3RoaXMucmVuZGVyRmlsdGVyT3B0aW9uc0Zyb21DaGlsZHJlbiA9IGZ1bmN0aW9uIChjaGlsZHJlbiwgY2hpbGRyZW5LZXlzLCBtZW51SXRlbXMpIHtcbiAgICAgIHZhciBzZWwgPSBbXTtcbiAgICAgIHZhciBwcm9wcyA9IF90aGlzLnByb3BzO1xuICAgICAgdmFyIGlucHV0VmFsdWUgPSBfdGhpcy5zdGF0ZS5pbnB1dFZhbHVlO1xuICAgICAgdmFyIHRhZ3MgPSBwcm9wcy50YWdzO1xuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHlwZSA9IGNoaWxkLnR5cGU7XG5cbiAgICAgICAgaWYgKHR5cGUuaXNTZWxlY3RPcHRHcm91cCkge1xuICAgICAgICAgIHZhciBsYWJlbCA9IGNoaWxkLnByb3BzLmxhYmVsO1xuICAgICAgICAgIHZhciBrZXkgPSBjaGlsZC5rZXk7XG5cbiAgICAgICAgICBpZiAoIWtleSAmJiB0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBrZXkgPSBsYWJlbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFsYWJlbCAmJiBrZXkpIHtcbiAgICAgICAgICAgIGxhYmVsID0ga2V5O1xuICAgICAgICAgIH0gLy8gTWF0Y2ggb3B0aW9uIGdyb3VwIGxhYmVsXG5cblxuICAgICAgICAgIGlmIChpbnB1dFZhbHVlICYmIF90aGlzLmZpbHRlck9wdGlvbihpbnB1dFZhbHVlLCBjaGlsZCkpIHtcbiAgICAgICAgICAgIHZhciBpbm5lckl0ZW1zID0gY2hpbGRyZW5Ub0FycmF5KGNoaWxkLnByb3BzLmNoaWxkcmVuKS5tYXAoZnVuY3Rpb24gKHN1YkNoaWxkKSB7XG4gICAgICAgICAgICAgIHZhciBjaGlsZFZhbHVlU3ViID0gZ2V0VmFsdWVQcm9wVmFsdWUoc3ViQ2hpbGQpIHx8IHN1YkNoaWxkLmtleTtcbiAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudUl0ZW0sIF9leHRlbmRzKHtcbiAgICAgICAgICAgICAgICBrZXk6IGNoaWxkVmFsdWVTdWIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGNoaWxkVmFsdWVTdWJcbiAgICAgICAgICAgICAgfSwgc3ViQ2hpbGQucHJvcHMpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChNZW51SXRlbUdyb3VwLCB7XG4gICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICB0aXRsZTogbGFiZWxcbiAgICAgICAgICAgIH0sIGlubmVySXRlbXMpKTsgLy8gTm90IG1hdGNoXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBfaW5uZXJJdGVtcyA9IF90aGlzLnJlbmRlckZpbHRlck9wdGlvbnNGcm9tQ2hpbGRyZW4oY2hpbGQucHJvcHMuY2hpbGRyZW4sIGNoaWxkcmVuS2V5cywgbWVudUl0ZW1zKTtcblxuICAgICAgICAgICAgaWYgKF9pbm5lckl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICBzZWwucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KE1lbnVJdGVtR3JvdXAsIHtcbiAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICB0aXRsZTogbGFiZWxcbiAgICAgICAgICAgICAgfSwgX2lubmVySXRlbXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB3YXJuaW5nKHR5cGUuaXNTZWxlY3RPcHRpb24sICd0aGUgY2hpbGRyZW4gb2YgYFNlbGVjdGAgc2hvdWxkIGJlIGBTZWxlY3QuT3B0aW9uYCBvciBgU2VsZWN0Lk9wdEdyb3VwYCwgJyArIFwiaW5zdGVhZCBvZiBgXCIuY29uY2F0KHR5cGUubmFtZSB8fCB0eXBlLmRpc3BsYXlOYW1lIHx8IGNoaWxkLnR5cGUsIFwiYC5cIikpO1xuICAgICAgICB2YXIgY2hpbGRWYWx1ZSA9IGdldFZhbHVlUHJvcFZhbHVlKGNoaWxkKTtcbiAgICAgICAgdmFsaWRhdGVPcHRpb25WYWx1ZShjaGlsZFZhbHVlLCBfdGhpcy5wcm9wcyk7XG5cbiAgICAgICAgaWYgKF90aGlzLmZpbHRlck9wdGlvbihpbnB1dFZhbHVlLCBjaGlsZCkpIHtcbiAgICAgICAgICB2YXIgbWVudUl0ZW0gPSBSZWFjdC5jcmVhdGVFbGVtZW50KE1lbnVJdGVtLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgICBzdHlsZTogVU5TRUxFQ1RBQkxFX1NUWUxFLFxuICAgICAgICAgICAgYXR0cmlidXRlOiBVTlNFTEVDVEFCTEVfQVRUUklCVVRFLFxuICAgICAgICAgICAgdmFsdWU6IGNoaWxkVmFsdWUsXG4gICAgICAgICAgICBrZXk6IGNoaWxkVmFsdWUsXG4gICAgICAgICAgICByb2xlOiBcIm9wdGlvblwiXG4gICAgICAgICAgfSwgY2hpbGQucHJvcHMpKTtcbiAgICAgICAgICBzZWwucHVzaChtZW51SXRlbSk7XG4gICAgICAgICAgbWVudUl0ZW1zLnB1c2gobWVudUl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhZ3MpIHtcbiAgICAgICAgICBjaGlsZHJlbktleXMucHVzaChjaGlsZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc2VsO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZW5kZXJUb3BDb250cm9sTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IF90aGlzLnN0YXRlLFxuICAgICAgICAgIG9wZW4gPSBfdGhpcyRzdGF0ZS5vcGVuLFxuICAgICAgICAgIGlucHV0VmFsdWUgPSBfdGhpcyRzdGF0ZS5pbnB1dFZhbHVlO1xuICAgICAgdmFyIHZhbHVlID0gX3RoaXMuc3RhdGUudmFsdWU7XG4gICAgICB2YXIgcHJvcHMgPSBfdGhpcy5wcm9wcztcbiAgICAgIHZhciBjaG9pY2VUcmFuc2l0aW9uTmFtZSA9IHByb3BzLmNob2ljZVRyYW5zaXRpb25OYW1lLFxuICAgICAgICAgIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgICAgICBtYXhUYWdUZXh0TGVuZ3RoID0gcHJvcHMubWF4VGFnVGV4dExlbmd0aCxcbiAgICAgICAgICBtYXhUYWdDb3VudCA9IHByb3BzLm1heFRhZ0NvdW50LFxuICAgICAgICAgIHNob3dTZWFyY2ggPSBwcm9wcy5zaG93U2VhcmNoLFxuICAgICAgICAgIHJlbW92ZUljb24gPSBwcm9wcy5yZW1vdmVJY29uO1xuICAgICAgdmFyIG1heFRhZ1BsYWNlaG9sZGVyID0gcHJvcHMubWF4VGFnUGxhY2Vob2xkZXI7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zZWxlY3Rpb25fX3JlbmRlcmVkXCIpOyAvLyBzZWFyY2ggaW5wdXQgaXMgaW5zaWRlIHRvcENvbnRyb2xOb2RlIGluIHNpbmdsZSwgbXVsdGlwbGUgJiBjb21ib2JveC4gMjAxNi8wNC8xM1xuXG4gICAgICB2YXIgaW5uZXJOb2RlID0gbnVsbDtcblxuICAgICAgaWYgKGlzU2luZ2xlTW9kZShwcm9wcykpIHtcbiAgICAgICAgdmFyIHNlbGVjdGVkVmFsdWUgPSBudWxsO1xuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc2hvd1NlbGVjdGVkVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICB2YXIgb3BhY2l0eSA9IDE7XG5cbiAgICAgICAgICBpZiAoIXNob3dTZWFyY2gpIHtcbiAgICAgICAgICAgIHNob3dTZWxlY3RlZFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wZW4pIHtcbiAgICAgICAgICAgIHNob3dTZWxlY3RlZFZhbHVlID0gIWlucHV0VmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChzaG93U2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgICBvcGFjaXR5ID0gMC40O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaG93U2VsZWN0ZWRWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNpbmdsZVZhbHVlID0gdmFsdWVbMF07XG5cbiAgICAgICAgICB2YXIgX3RoaXMkZ2V0T3B0aW9uSW5mb0J5MyA9IF90aGlzLmdldE9wdGlvbkluZm9CeVNpbmdsZVZhbHVlKHNpbmdsZVZhbHVlKSxcbiAgICAgICAgICAgICAgbGFiZWwgPSBfdGhpcyRnZXRPcHRpb25JbmZvQnkzLmxhYmVsLFxuICAgICAgICAgICAgICB0aXRsZSA9IF90aGlzJGdldE9wdGlvbkluZm9CeTMudGl0bGU7XG5cbiAgICAgICAgICBzZWxlY3RlZFZhbHVlID0gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBrZXk6IFwidmFsdWVcIixcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zZWxlY3Rpb24tc2VsZWN0ZWQtdmFsdWVcIiksXG4gICAgICAgICAgICB0aXRsZTogdG9UaXRsZSh0aXRsZSB8fCBsYWJlbCksXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBzaG93U2VsZWN0ZWRWYWx1ZSA/ICdibG9jaycgOiAnbm9uZScsXG4gICAgICAgICAgICAgIG9wYWNpdHk6IG9wYWNpdHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBsYWJlbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNob3dTZWFyY2gpIHtcbiAgICAgICAgICBpbm5lck5vZGUgPSBbc2VsZWN0ZWRWYWx1ZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5uZXJOb2RlID0gW3NlbGVjdGVkVmFsdWUsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXNlYXJjaCBcIikuY29uY2F0KHByZWZpeENscywgXCItc2VhcmNoLS1pbmxpbmVcIiksXG4gICAgICAgICAgICBrZXk6IFwiaW5wdXRcIixcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgIGRpc3BsYXk6IG9wZW4gPyAnYmxvY2snIDogJ25vbmUnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgX3RoaXMuZ2V0SW5wdXRFbGVtZW50KCkpXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNlbGVjdGVkVmFsdWVOb2RlcyA9IFtdO1xuICAgICAgICB2YXIgbGltaXRlZENvdW50VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdmFyIG1heFRhZ1BsYWNlaG9sZGVyRWw7XG5cbiAgICAgICAgaWYgKG1heFRhZ0NvdW50ICE9PSB1bmRlZmluZWQgJiYgdmFsdWUubGVuZ3RoID4gbWF4VGFnQ291bnQpIHtcbiAgICAgICAgICBsaW1pdGVkQ291bnRWYWx1ZSA9IGxpbWl0ZWRDb3VudFZhbHVlLnNsaWNlKDAsIG1heFRhZ0NvdW50KTtcblxuICAgICAgICAgIHZhciBvbWl0dGVkVmFsdWVzID0gX3RoaXMuZ2V0VkxGb3JPbkNoYW5nZSh2YWx1ZS5zbGljZShtYXhUYWdDb3VudCwgdmFsdWUubGVuZ3RoKSk7XG5cbiAgICAgICAgICB2YXIgY29udGVudCA9IFwiKyBcIi5jb25jYXQodmFsdWUubGVuZ3RoIC0gbWF4VGFnQ291bnQsIFwiIC4uLlwiKTtcblxuICAgICAgICAgIGlmIChtYXhUYWdQbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgY29udGVudCA9IHR5cGVvZiBtYXhUYWdQbGFjZWhvbGRlciA9PT0gJ2Z1bmN0aW9uJyA/IG1heFRhZ1BsYWNlaG9sZGVyKG9taXR0ZWRWYWx1ZXMpIDogbWF4VGFnUGxhY2Vob2xkZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWF4VGFnUGxhY2Vob2xkZXJFbCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgICBzdHlsZTogVU5TRUxFQ1RBQkxFX1NUWUxFXG4gICAgICAgICAgfSwgVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSwge1xuICAgICAgICAgICAgcm9sZTogXCJwcmVzZW50YXRpb25cIixcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiBwcmV2ZW50RGVmYXVsdEV2ZW50LFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXNlbGVjdGlvbl9fY2hvaWNlIFwiKS5jb25jYXQocHJlZml4Q2xzLCBcIi1zZWxlY3Rpb25fX2Nob2ljZV9fZGlzYWJsZWRcIiksXG4gICAgICAgICAgICBrZXk6IFwibWF4VGFnUGxhY2Vob2xkZXJcIixcbiAgICAgICAgICAgIHRpdGxlOiB0b1RpdGxlKGNvbnRlbnQpXG4gICAgICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXNlbGVjdGlvbl9fY2hvaWNlX19jb250ZW50XCIpXG4gICAgICAgICAgfSwgY29udGVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTXVsdGlwbGVPclRhZ3MocHJvcHMpKSB7XG4gICAgICAgICAgc2VsZWN0ZWRWYWx1ZU5vZGVzID0gbGltaXRlZENvdW50VmFsdWUubWFwKGZ1bmN0aW9uIChzaW5nbGVWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGluZm8gPSBfdGhpcy5nZXRPcHRpb25JbmZvQnlTaW5nbGVWYWx1ZShzaW5nbGVWYWx1ZSk7XG5cbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gaW5mby5sYWJlbDtcbiAgICAgICAgICAgIHZhciB0aXRsZSA9IGluZm8udGl0bGUgfHwgY29udGVudDtcblxuICAgICAgICAgICAgaWYgKG1heFRhZ1RleHRMZW5ndGggJiYgdHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnICYmIGNvbnRlbnQubGVuZ3RoID4gbWF4VGFnVGV4dExlbmd0aCkge1xuICAgICAgICAgICAgICBjb250ZW50ID0gXCJcIi5jb25jYXQoY29udGVudC5zbGljZSgwLCBtYXhUYWdUZXh0TGVuZ3RoKSwgXCIuLi5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkaXNhYmxlZCA9IF90aGlzLmlzQ2hpbGREaXNhYmxlZChzaW5nbGVWYWx1ZSk7XG5cbiAgICAgICAgICAgIHZhciBjaG9pY2VDbGFzc05hbWUgPSBkaXNhYmxlZCA/IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItc2VsZWN0aW9uX19jaG9pY2UgXCIpLmNvbmNhdChwcmVmaXhDbHMsIFwiLXNlbGVjdGlvbl9fY2hvaWNlX19kaXNhYmxlZFwiKSA6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItc2VsZWN0aW9uX19jaG9pY2VcIik7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIF9leHRlbmRzKHtcbiAgICAgICAgICAgICAgc3R5bGU6IFVOU0VMRUNUQUJMRV9TVFlMRVxuICAgICAgICAgICAgfSwgVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSwge1xuICAgICAgICAgICAgICBvbk1vdXNlRG93bjogcHJldmVudERlZmF1bHRFdmVudCxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjaG9pY2VDbGFzc05hbWUsXG4gICAgICAgICAgICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCIsXG4gICAgICAgICAgICAgIGtleTogc2luZ2xlVmFsdWUgfHwgU0VMRUNUX0VNUFRZX1ZBTFVFX0tFWSxcbiAgICAgICAgICAgICAgdGl0bGU6IHRvVGl0bGUodGl0bGUpXG4gICAgICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zZWxlY3Rpb25fX2Nob2ljZV9fY29udGVudFwiKVxuICAgICAgICAgICAgfSwgY29udGVudCksIGRpc2FibGVkID8gbnVsbCA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJlbW92ZVNlbGVjdGVkKHNpbmdsZVZhbHVlLCBldmVudCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zZWxlY3Rpb25fX2Nob2ljZV9fcmVtb3ZlXCIpXG4gICAgICAgICAgICB9LCByZW1vdmVJY29uIHx8IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpXCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXNlbGVjdGlvbl9fY2hvaWNlX19yZW1vdmUtaWNvblwiKVxuICAgICAgICAgICAgfSwgXCJcXHhEN1wiKSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1heFRhZ1BsYWNlaG9sZGVyRWwpIHtcbiAgICAgICAgICBzZWxlY3RlZFZhbHVlTm9kZXMucHVzaChtYXhUYWdQbGFjZWhvbGRlckVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGVjdGVkVmFsdWVOb2Rlcy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLXNlYXJjaCBcIikuY29uY2F0KHByZWZpeENscywgXCItc2VhcmNoLS1pbmxpbmVcIiksXG4gICAgICAgICAga2V5OiBcIl9faW5wdXRcIlxuICAgICAgICB9LCBfdGhpcy5nZXRJbnB1dEVsZW1lbnQoKSkpO1xuXG4gICAgICAgIGlmIChpc011bHRpcGxlT3JUYWdzKHByb3BzKSAmJiBjaG9pY2VUcmFuc2l0aW9uTmFtZSkge1xuICAgICAgICAgIGlubmVyTm9kZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoQW5pbWF0ZSwge1xuICAgICAgICAgICAgb25MZWF2ZTogX3RoaXMub25DaG9pY2VBbmltYXRpb25MZWF2ZSxcbiAgICAgICAgICAgIGNvbXBvbmVudDogXCJ1bFwiLFxuICAgICAgICAgICAgdHJhbnNpdGlvbk5hbWU6IGNob2ljZVRyYW5zaXRpb25OYW1lXG4gICAgICAgICAgfSwgc2VsZWN0ZWRWYWx1ZU5vZGVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbm5lck5vZGUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwgbnVsbCwgc2VsZWN0ZWRWYWx1ZU5vZGVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICByZWY6IF90aGlzLnNhdmVUb3BDdHJsUmVmXG4gICAgICB9LCBfdGhpcy5nZXRQbGFjZWhvbGRlckVsZW1lbnQoKSwgaW5uZXJOb2RlKTtcbiAgICB9O1xuXG4gICAgdmFyIG9wdGlvbnNJbmZvID0gU2VsZWN0LmdldE9wdGlvbnNJbmZvRnJvbVByb3BzKHByb3BzKTtcblxuICAgIGlmIChwcm9wcy50YWdzICYmIHR5cGVvZiBwcm9wcy5maWx0ZXJPcHRpb24gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBpc0Rpc2FibGVkRXhpc3QgPSBPYmplY3Qua2V5cyhvcHRpb25zSW5mbykuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zSW5mb1trZXldLmRpc2FibGVkO1xuICAgICAgfSk7XG4gICAgICB3YXJuaW5nKCFpc0Rpc2FibGVkRXhpc3QsICdQbGVhc2UgYXZvaWQgc2V0dGluZyBvcHRpb24gdG8gZGlzYWJsZWQgaW4gdGFncyBtb2RlIHNpbmNlIHVzZXIgY2FuIGFsd2F5cyB0eXBlIHRleHQgYXMgdGFnLicpO1xuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IFNlbGVjdC5nZXRWYWx1ZUZyb21Qcm9wcyhwcm9wcywgdHJ1ZSksXG4gICAgICBpbnB1dFZhbHVlOiBwcm9wcy5jb21ib2JveCA/IFNlbGVjdC5nZXRJbnB1dFZhbHVlRm9yQ29tYm9ib3gocHJvcHMsIG9wdGlvbnNJbmZvLCB0cnVlKSA6ICcnLFxuICAgICAgb3BlbjogcHJvcHMuZGVmYXVsdE9wZW4sXG4gICAgICBvcHRpb25zSW5mbzogb3B0aW9uc0luZm8sXG4gICAgICBiYWNrZmlsbFZhbHVlOiAnJyxcbiAgICAgIC8vIGEgZmxhZyBmb3IgYXZpb2QgcmVkdW5kYW50IGdldE9wdGlvbnNJbmZvRnJvbVByb3BzIGNhbGxcbiAgICAgIHNraXBCdWlsZE9wdGlvbnNJbmZvOiB0cnVlLFxuICAgICAgYXJpYUlkOiAnJ1xuICAgIH07XG4gICAgX3RoaXMuc2F2ZUlucHV0UmVmID0gc2F2ZVJlZihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ2lucHV0UmVmJyk7XG4gICAgX3RoaXMuc2F2ZUlucHV0TWlycm9yUmVmID0gc2F2ZVJlZihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ2lucHV0TWlycm9yUmVmJyk7XG4gICAgX3RoaXMuc2F2ZVRvcEN0cmxSZWYgPSBzYXZlUmVmKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAndG9wQ3RybFJlZicpO1xuICAgIF90aGlzLnNhdmVTZWxlY3RUcmlnZ2VyUmVmID0gc2F2ZVJlZihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ3NlbGVjdFRyaWdnZXJSZWYnKTtcbiAgICBfdGhpcy5zYXZlUm9vdFJlZiA9IHNhdmVSZWYoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICdyb290UmVmJyk7XG4gICAgX3RoaXMuc2F2ZVNlbGVjdGlvblJlZiA9IHNhdmVSZWYoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICdzZWxlY3Rpb25SZWYnKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2VsZWN0LCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIC8vIHdoZW4gZGVmYXVsdE9wZW4gaXMgdHJ1ZSwgd2Ugc2hvdWxkIGF1dG8gZm9jdXMgc2VhcmNoIGlucHV0XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xNDI1NFxuICAgICAgaWYgKHRoaXMucHJvcHMuYXV0b0ZvY3VzIHx8IHRoaXMuc3RhdGUub3Blbikge1xuICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhcmlhSWQ6IGdlbmVyYXRlVVVJRCgpXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIGlmIChpc011bHRpcGxlT3JUYWdzKHRoaXMucHJvcHMpKSB7XG4gICAgICAgIHZhciBpbnB1dE5vZGUgPSB0aGlzLmdldElucHV0RE9NTm9kZSgpO1xuICAgICAgICB2YXIgbWlycm9yTm9kZSA9IHRoaXMuZ2V0SW5wdXRNaXJyb3JET01Ob2RlKCk7XG5cbiAgICAgICAgaWYgKGlucHV0Tm9kZSAmJiBpbnB1dE5vZGUudmFsdWUgJiYgbWlycm9yTm9kZSkge1xuICAgICAgICAgIGlucHV0Tm9kZS5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgICAgIGlucHV0Tm9kZS5zdHlsZS53aWR0aCA9IFwiXCIuY29uY2F0KG1pcnJvck5vZGUuY2xpZW50V2lkdGgsIFwicHhcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXROb2RlKSB7XG4gICAgICAgICAgaW5wdXROb2RlLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5mb3JjZVBvcHVwQWxpZ24oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmNsZWFyRm9jdXNUaW1lKCk7XG4gICAgICB0aGlzLmNsZWFyQmx1clRpbWUoKTtcbiAgICAgIHRoaXMuY2xlYXJDb21ib2JveFRpbWUoKTtcblxuICAgICAgaWYgKHRoaXMuZHJvcGRvd25Db250YWluZXIpIHtcbiAgICAgICAgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZSh0aGlzLmRyb3Bkb3duQ29udGFpbmVyKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmRyb3Bkb3duQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5kcm9wZG93bkNvbnRhaW5lciA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvY3VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgaWYgKGlzU2luZ2xlTW9kZSh0aGlzLnByb3BzKSAmJiB0aGlzLnNlbGVjdGlvblJlZikge1xuICAgICAgICB0aGlzLnNlbGVjdGlvblJlZi5mb2N1cygpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmdldElucHV0RE9NTm9kZSgpKSB7XG4gICAgICAgIHRoaXMuZ2V0SW5wdXRET01Ob2RlKCkuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYmx1clwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBibHVyKCkge1xuICAgICAgaWYgKGlzU2luZ2xlTW9kZSh0aGlzLnByb3BzKSAmJiB0aGlzLnNlbGVjdGlvblJlZikge1xuICAgICAgICB0aGlzLnNlbGVjdGlvblJlZi5ibHVyKCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0SW5wdXRET01Ob2RlKCkpIHtcbiAgICAgICAgdGhpcy5nZXRJbnB1dERPTU5vZGUoKS5ibHVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlckFycm93XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckFycm93KG11bHRpcGxlKSB7XG4gICAgICAvLyBzaG93QXJyb3cgOiBTZXQgdG8gdHJ1ZSBpZiBub3QgbXVsdGlwbGUgYnkgZGVmYXVsdCBidXQga2VlcCBzZXQgdmFsdWUuXG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBfdGhpcyRwcm9wczQkc2hvd0Fycm8gPSBfdGhpcyRwcm9wczQuc2hvd0Fycm93LFxuICAgICAgICAgIHNob3dBcnJvdyA9IF90aGlzJHByb3BzNCRzaG93QXJybyA9PT0gdm9pZCAwID8gIW11bHRpcGxlIDogX3RoaXMkcHJvcHM0JHNob3dBcnJvLFxuICAgICAgICAgIGxvYWRpbmcgPSBfdGhpcyRwcm9wczQubG9hZGluZyxcbiAgICAgICAgICBpbnB1dEljb24gPSBfdGhpcyRwcm9wczQuaW5wdXRJY29uLFxuICAgICAgICAgIHByZWZpeENscyA9IF90aGlzJHByb3BzNC5wcmVmaXhDbHM7XG5cbiAgICAgIGlmICghc2hvd0Fycm93ICYmICFsb2FkaW5nKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSAvLyBpZiBsb2FkaW5nICBoYXZlIGxvYWRpbmcgaWNvblxuXG5cbiAgICAgIHZhciBkZWZhdWx0SWNvbiA9IGxvYWRpbmcgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaVwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1hcnJvdy1sb2FkaW5nXCIpXG4gICAgICB9KSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWFycm93LWljb25cIilcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHtcbiAgICAgICAga2V5OiBcImFycm93XCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1hcnJvd1wiKSxcbiAgICAgICAgc3R5bGU6IFVOU0VMRUNUQUJMRV9TVFlMRVxuICAgICAgfSwgVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSwge1xuICAgICAgICBvbkNsaWNrOiB0aGlzLm9uQXJyb3dDbGlja1xuICAgICAgfSksIGlucHV0SWNvbiB8fCBkZWZhdWx0SWNvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlckNsZWFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckNsZWFyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgcHJlZml4Q2xzID0gX3RoaXMkcHJvcHM1LnByZWZpeENscyxcbiAgICAgICAgICBhbGxvd0NsZWFyID0gX3RoaXMkcHJvcHM1LmFsbG93Q2xlYXIsXG4gICAgICAgICAgY2xlYXJJY29uID0gX3RoaXMkcHJvcHM1LmNsZWFySWNvbjtcbiAgICAgIHZhciBpbnB1dFZhbHVlID0gdGhpcy5zdGF0ZS5pbnB1dFZhbHVlO1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICAgIHZhciBjbGVhciA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHtcbiAgICAgICAga2V5OiBcImNsZWFyXCIsXG4gICAgICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1zZWxlY3Rpb25fX2NsZWFyXCIpLFxuICAgICAgICBvbk1vdXNlRG93bjogcHJldmVudERlZmF1bHRFdmVudCxcbiAgICAgICAgc3R5bGU6IFVOU0VMRUNUQUJMRV9TVFlMRVxuICAgICAgfSwgVU5TRUxFQ1RBQkxFX0FUVFJJQlVURSwge1xuICAgICAgICBvbkNsaWNrOiB0aGlzLm9uQ2xlYXJTZWxlY3Rpb25cbiAgICAgIH0pLCBjbGVhckljb24gfHwgUmVhY3QuY3JlYXRlRWxlbWVudChcImlcIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItc2VsZWN0aW9uX19jbGVhci1pY29uXCIpXG4gICAgICB9LCBcIlxceEQ3XCIpKTtcblxuICAgICAgaWYgKCFhbGxvd0NsZWFyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNDb21ib2JveCh0aGlzLnByb3BzKSkge1xuICAgICAgICBpZiAoaW5wdXRWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiBjbGVhcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5wdXRWYWx1ZSB8fCB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcm9vdENscztcblxuICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgIHZhciBtdWx0aXBsZSA9IGlzTXVsdGlwbGVPclRhZ3MocHJvcHMpOyAvLyBEZWZhdWx0IHNldCBzaG93QXJyb3cgdG8gdHJ1ZSBpZiBub3Qgc2V0IChub3Qgc2V0IGRpcmVjdGx5IGluIGRlZmF1bHRQcm9wcyB0byBoYW5kbGUgbXVsdGlwbGUgY2FzZSlcblxuICAgICAgdmFyIF9wcm9wcyRzaG93QXJyb3cgPSBwcm9wcy5zaG93QXJyb3csXG4gICAgICAgICAgc2hvd0Fycm93ID0gX3Byb3BzJHNob3dBcnJvdyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9wcm9wcyRzaG93QXJyb3c7XG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgICAgICBsb2FkaW5nID0gcHJvcHMubG9hZGluZztcbiAgICAgIHZhciBjdHJsTm9kZSA9IHRoaXMucmVuZGVyVG9wQ29udHJvbE5vZGUoKTtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIG9wZW4gPSBfdGhpcyRzdGF0ZTIub3BlbixcbiAgICAgICAgICBhcmlhSWQgPSBfdGhpcyRzdGF0ZTIuYXJpYUlkO1xuXG4gICAgICBpZiAob3Blbikge1xuICAgICAgICB2YXIgZmlsdGVyT3B0aW9ucyA9IHRoaXMucmVuZGVyRmlsdGVyT3B0aW9ucygpO1xuICAgICAgICB0aGlzLl9lbXB0eSA9IGZpbHRlck9wdGlvbnMuZW1wdHk7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBmaWx0ZXJPcHRpb25zLm9wdGlvbnM7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWFsT3BlbiA9IHRoaXMuZ2V0UmVhbE9wZW5TdGF0ZSgpO1xuICAgICAgdmFyIGVtcHR5ID0gdGhpcy5fZW1wdHk7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnMgfHwgW107XG4gICAgICB2YXIgZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzID0ge307XG4gICAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkgJiYgKGtleS5zdWJzdHIoMCwgNSkgPT09ICdkYXRhLScgfHwga2V5LnN1YnN0cigwLCA1KSA9PT0gJ2FyaWEtJyB8fCBrZXkgPT09ICdyb2xlJykpIHtcbiAgICAgICAgICBkYXRhT3JBcmlhQXR0cmlidXRlUHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgLy8gICBpZiAoXG4gICAgICAvLyAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpICYmXG4gICAgICAvLyAgICAgKGtleS5zdWJzdHIoMCwgNSkgPT09ICdkYXRhLScgfHwga2V5LnN1YnN0cigwLCA1KSA9PT0gJ2FyaWEtJyB8fCBrZXkgPT09ICdyb2xlJylcbiAgICAgIC8vICAgKSB7XG4gICAgICAvLyAgICAgZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgLy8gICB9XG4gICAgICAvLyB9XG5cbiAgICAgIHZhciBleHRyYVNlbGVjdGlvblByb3BzID0gX2V4dGVuZHMoe30sIGRhdGFPckFyaWFBdHRyaWJ1dGVQcm9wcyk7XG5cbiAgICAgIGlmICghaXNNdWx0aXBsZU9yVGFnc09yQ29tYm9ib3gocHJvcHMpKSB7XG4gICAgICAgIGV4dHJhU2VsZWN0aW9uUHJvcHMgPSBfZXh0ZW5kcyh7fSwgZXh0cmFTZWxlY3Rpb25Qcm9wcywge1xuICAgICAgICAgIG9uS2V5RG93bjogdGhpcy5vbktleURvd24sXG4gICAgICAgICAgdGFiSW5kZXg6IHByb3BzLmRpc2FibGVkID8gLTEgOiBwcm9wcy50YWJJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJvb3RDbHMgPSAoX3Jvb3RDbHMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yb290Q2xzLCBjbGFzc05hbWUsICEhY2xhc3NOYW1lKSwgX2RlZmluZVByb3BlcnR5KF9yb290Q2xzLCBwcmVmaXhDbHMsIDEpLCBfZGVmaW5lUHJvcGVydHkoX3Jvb3RDbHMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItb3BlblwiKSwgb3BlbiksIF9kZWZpbmVQcm9wZXJ0eShfcm9vdENscywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1mb2N1c2VkXCIpLCBvcGVuIHx8ICEhdGhpcy5fZm9jdXNlZCksIF9kZWZpbmVQcm9wZXJ0eShfcm9vdENscywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jb21ib2JveFwiKSwgaXNDb21ib2JveChwcm9wcykpLCBfZGVmaW5lUHJvcGVydHkoX3Jvb3RDbHMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZGlzYWJsZWRcIiksIGRpc2FibGVkKSwgX2RlZmluZVByb3BlcnR5KF9yb290Q2xzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWVuYWJsZWRcIiksICFkaXNhYmxlZCksIF9kZWZpbmVQcm9wZXJ0eShfcm9vdENscywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1hbGxvdy1jbGVhclwiKSwgISFwcm9wcy5hbGxvd0NsZWFyKSwgX2RlZmluZVByb3BlcnR5KF9yb290Q2xzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLW5vLWFycm93XCIpLCAhc2hvd0Fycm93KSwgX2RlZmluZVByb3BlcnR5KF9yb290Q2xzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWxvYWRpbmdcIiksICEhbG9hZGluZyksIF9yb290Q2xzKTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdFRyaWdnZXIsIHtcbiAgICAgICAgb25Qb3B1cEZvY3VzOiB0aGlzLm9uUG9wdXBGb2N1cyxcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLnByb3BzLm9uTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLnByb3BzLm9uTW91c2VMZWF2ZSxcbiAgICAgICAgZHJvcGRvd25BbGlnbjogcHJvcHMuZHJvcGRvd25BbGlnbixcbiAgICAgICAgZHJvcGRvd25DbGFzc05hbWU6IHByb3BzLmRyb3Bkb3duQ2xhc3NOYW1lLFxuICAgICAgICBkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGg6IHByb3BzLmRyb3Bkb3duTWF0Y2hTZWxlY3RXaWR0aCxcbiAgICAgICAgZGVmYXVsdEFjdGl2ZUZpcnN0T3B0aW9uOiBwcm9wcy5kZWZhdWx0QWN0aXZlRmlyc3RPcHRpb24sXG4gICAgICAgIGRyb3Bkb3duTWVudVN0eWxlOiBwcm9wcy5kcm9wZG93bk1lbnVTdHlsZSxcbiAgICAgICAgdHJhbnNpdGlvbk5hbWU6IHByb3BzLnRyYW5zaXRpb25OYW1lLFxuICAgICAgICBhbmltYXRpb246IHByb3BzLmFuaW1hdGlvbixcbiAgICAgICAgcHJlZml4Q2xzOiBwcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgIGRyb3Bkb3duU3R5bGU6IHByb3BzLmRyb3Bkb3duU3R5bGUsXG4gICAgICAgIGNvbWJvYm94OiBwcm9wcy5jb21ib2JveCxcbiAgICAgICAgc2hvd1NlYXJjaDogcHJvcHMuc2hvd1NlYXJjaCxcbiAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgZW1wdHk6IGVtcHR5LFxuICAgICAgICBtdWx0aXBsZTogbXVsdGlwbGUsXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgdmlzaWJsZTogcmVhbE9wZW4sXG4gICAgICAgIGlucHV0VmFsdWU6IHN0YXRlLmlucHV0VmFsdWUsXG4gICAgICAgIHZhbHVlOiBzdGF0ZS52YWx1ZSxcbiAgICAgICAgYmFja2ZpbGxWYWx1ZTogc3RhdGUuYmFja2ZpbGxWYWx1ZSxcbiAgICAgICAgZmlyc3RBY3RpdmVWYWx1ZTogcHJvcHMuZmlyc3RBY3RpdmVWYWx1ZSxcbiAgICAgICAgb25Ecm9wZG93blZpc2libGVDaGFuZ2U6IHRoaXMub25Ecm9wZG93blZpc2libGVDaGFuZ2UsXG4gICAgICAgIGdldFBvcHVwQ29udGFpbmVyOiBwcm9wcy5nZXRQb3B1cENvbnRhaW5lcixcbiAgICAgICAgb25NZW51U2VsZWN0OiB0aGlzLm9uTWVudVNlbGVjdCxcbiAgICAgICAgb25NZW51RGVzZWxlY3Q6IHRoaXMub25NZW51RGVzZWxlY3QsXG4gICAgICAgIG9uUG9wdXBTY3JvbGw6IHByb3BzLm9uUG9wdXBTY3JvbGwsXG4gICAgICAgIHNob3dBY3Rpb246IHByb3BzLnNob3dBY3Rpb24sXG4gICAgICAgIHJlZjogdGhpcy5zYXZlU2VsZWN0VHJpZ2dlclJlZixcbiAgICAgICAgbWVudUl0ZW1TZWxlY3RlZEljb246IHByb3BzLm1lbnVJdGVtU2VsZWN0ZWRJY29uLFxuICAgICAgICBkcm9wZG93blJlbmRlcjogcHJvcHMuZHJvcGRvd25SZW5kZXIsXG4gICAgICAgIGFyaWFJZDogYXJpYUlkXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgaWQ6IHByb3BzLmlkLFxuICAgICAgICBzdHlsZTogcHJvcHMuc3R5bGUsXG4gICAgICAgIHJlZjogdGhpcy5zYXZlUm9vdFJlZixcbiAgICAgICAgb25CbHVyOiB0aGlzLm9uT3V0ZXJCbHVyLFxuICAgICAgICBvbkZvY3VzOiB0aGlzLm9uT3V0ZXJGb2N1cyxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc25hbWVzKHJvb3RDbHMpLFxuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5tYXJrTW91c2VEb3duLFxuICAgICAgICBvbk1vdXNlVXA6IHRoaXMubWFya01vdXNlTGVhdmUsXG4gICAgICAgIG9uTW91c2VPdXQ6IHRoaXMubWFya01vdXNlTGVhdmVcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IHRoaXMuc2F2ZVNlbGVjdGlvblJlZixcbiAgICAgICAga2V5OiBcInNlbGVjdGlvblwiLFxuICAgICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItc2VsZWN0aW9uXFxuICAgICAgICAgICAgXCIpLmNvbmNhdChwcmVmaXhDbHMsIFwiLXNlbGVjdGlvbi0tXCIpLmNvbmNhdChtdWx0aXBsZSA/ICdtdWx0aXBsZScgOiAnc2luZ2xlJyksXG4gICAgICAgIHJvbGU6IFwiY29tYm9ib3hcIixcbiAgICAgICAgXCJhcmlhLWF1dG9jb21wbGV0ZVwiOiBcImxpc3RcIixcbiAgICAgICAgXCJhcmlhLWhhc3BvcHVwXCI6IFwidHJ1ZVwiLFxuICAgICAgICBcImFyaWEtY29udHJvbHNcIjogYXJpYUlkLFxuICAgICAgICBcImFyaWEtZXhwYW5kZWRcIjogcmVhbE9wZW5cbiAgICAgIH0sIGV4dHJhU2VsZWN0aW9uUHJvcHMpLCBjdHJsTm9kZSwgdGhpcy5yZW5kZXJDbGVhcigpLCB0aGlzLnJlbmRlckFycm93KCEhbXVsdGlwbGUpKSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZWxlY3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblNlbGVjdC5wcm9wVHlwZXMgPSBTZWxlY3RQcm9wVHlwZXM7XG5TZWxlY3QuZGVmYXVsdFByb3BzID0ge1xuICBwcmVmaXhDbHM6ICdyYy1zZWxlY3QnLFxuICBkZWZhdWx0T3BlbjogZmFsc2UsXG4gIGxhYmVsSW5WYWx1ZTogZmFsc2UsXG4gIGRlZmF1bHRBY3RpdmVGaXJzdE9wdGlvbjogdHJ1ZSxcbiAgc2hvd1NlYXJjaDogdHJ1ZSxcbiAgYWxsb3dDbGVhcjogZmFsc2UsXG4gIHBsYWNlaG9sZGVyOiAnJyxcbiAgb25DaGFuZ2U6IG5vb3AsXG4gIG9uRm9jdXM6IG5vb3AsXG4gIG9uQmx1cjogbm9vcCxcbiAgb25TZWxlY3Q6IG5vb3AsXG4gIG9uU2VhcmNoOiBub29wLFxuICBvbkRlc2VsZWN0OiBub29wLFxuICBvbklucHV0S2V5RG93bjogbm9vcCxcbiAgZHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoOiB0cnVlLFxuICBkcm9wZG93blN0eWxlOiB7fSxcbiAgZHJvcGRvd25NZW51U3R5bGU6IHt9LFxuICBvcHRpb25GaWx0ZXJQcm9wOiAndmFsdWUnLFxuICBvcHRpb25MYWJlbFByb3A6ICd2YWx1ZScsXG4gIG5vdEZvdW5kQ29udGVudDogJ05vdCBGb3VuZCcsXG4gIGJhY2tmaWxsOiBmYWxzZSxcbiAgc2hvd0FjdGlvbjogWydjbGljayddLFxuICB0b2tlblNlcGFyYXRvcnM6IFtdLFxuICBhdXRvQ2xlYXJTZWFyY2hWYWx1ZTogdHJ1ZSxcbiAgdGFiSW5kZXg6IDAsXG4gIGRyb3Bkb3duUmVuZGVyOiBmdW5jdGlvbiBkcm9wZG93blJlbmRlcihtZW51KSB7XG4gICAgcmV0dXJuIG1lbnU7XG4gIH1cbn07XG5cblNlbGVjdC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiAobmV4dFByb3BzLCBwcmV2U3RhdGUpIHtcbiAgdmFyIG9wdGlvbnNJbmZvID0gcHJldlN0YXRlLnNraXBCdWlsZE9wdGlvbnNJbmZvID8gcHJldlN0YXRlLm9wdGlvbnNJbmZvIDogU2VsZWN0LmdldE9wdGlvbnNJbmZvRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKTtcbiAgdmFyIG5ld1N0YXRlID0ge1xuICAgIG9wdGlvbnNJbmZvOiBvcHRpb25zSW5mbyxcbiAgICBza2lwQnVpbGRPcHRpb25zSW5mbzogZmFsc2VcbiAgfTtcblxuICBpZiAoJ29wZW4nIGluIG5leHRQcm9wcykge1xuICAgIG5ld1N0YXRlLm9wZW4gPSBuZXh0UHJvcHMub3BlbjtcbiAgfVxuXG4gIGlmICgndmFsdWUnIGluIG5leHRQcm9wcykge1xuICAgIHZhciB2YWx1ZSA9IFNlbGVjdC5nZXRWYWx1ZUZyb21Qcm9wcyhuZXh0UHJvcHMpO1xuICAgIG5ld1N0YXRlLnZhbHVlID0gdmFsdWU7XG5cbiAgICBpZiAobmV4dFByb3BzLmNvbWJvYm94KSB7XG4gICAgICBuZXdTdGF0ZS5pbnB1dFZhbHVlID0gU2VsZWN0LmdldElucHV0VmFsdWVGb3JDb21ib2JveChuZXh0UHJvcHMsIG9wdGlvbnNJbmZvKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3U3RhdGU7XG59O1xuXG5TZWxlY3QuZ2V0T3B0aW9uc0Zyb21DaGlsZHJlbiA9IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9IGNoaWxkLnR5cGU7XG5cbiAgICBpZiAodHlwZS5pc1NlbGVjdE9wdEdyb3VwKSB7XG4gICAgICBTZWxlY3QuZ2V0T3B0aW9uc0Zyb21DaGlsZHJlbihjaGlsZC5wcm9wcy5jaGlsZHJlbiwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMucHVzaChjaGlsZCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG5TZWxlY3QuZ2V0SW5wdXRWYWx1ZUZvckNvbWJvYm94ID0gZnVuY3Rpb24gKHByb3BzLCBvcHRpb25zSW5mbywgdXNlRGVmYXVsdFZhbHVlKSB7XG4gIHZhciB2YWx1ZSA9IFtdO1xuXG4gIGlmICgndmFsdWUnIGluIHByb3BzICYmICF1c2VEZWZhdWx0VmFsdWUpIHtcbiAgICB2YWx1ZSA9IHRvQXJyYXkocHJvcHMudmFsdWUpO1xuICB9XG5cbiAgaWYgKCdkZWZhdWx0VmFsdWUnIGluIHByb3BzICYmIHVzZURlZmF1bHRWYWx1ZSkge1xuICAgIHZhbHVlID0gdG9BcnJheShwcm9wcy5kZWZhdWx0VmFsdWUpO1xuICB9XG5cbiAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgIHZhbHVlID0gdmFsdWVbMF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIGxhYmVsID0gdmFsdWU7XG5cbiAgaWYgKHByb3BzLmxhYmVsSW5WYWx1ZSkge1xuICAgIGxhYmVsID0gdmFsdWUubGFiZWw7XG4gIH0gZWxzZSBpZiAob3B0aW9uc0luZm9bZ2V0TWFwS2V5KHZhbHVlKV0pIHtcbiAgICBsYWJlbCA9IG9wdGlvbnNJbmZvW2dldE1hcEtleSh2YWx1ZSldLmxhYmVsO1xuICB9XG5cbiAgaWYgKGxhYmVsID09PSB1bmRlZmluZWQpIHtcbiAgICBsYWJlbCA9ICcnO1xuICB9XG5cbiAgcmV0dXJuIGxhYmVsO1xufTtcblxuU2VsZWN0LmdldExhYmVsRnJvbU9wdGlvbiA9IGZ1bmN0aW9uIChwcm9wcywgb3B0aW9uKSB7XG4gIHJldHVybiBnZXRQcm9wVmFsdWUob3B0aW9uLCBwcm9wcy5vcHRpb25MYWJlbFByb3ApO1xufTtcblxuU2VsZWN0LmdldE9wdGlvbnNJbmZvRnJvbVByb3BzID0gZnVuY3Rpb24gKHByb3BzLCBwcmVTdGF0ZSkge1xuICB2YXIgb3B0aW9ucyA9IFNlbGVjdC5nZXRPcHRpb25zRnJvbUNoaWxkcmVuKHByb3BzLmNoaWxkcmVuKTtcbiAgdmFyIG9wdGlvbnNJbmZvID0ge307XG4gIG9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgdmFyIHNpbmdsZVZhbHVlID0gZ2V0VmFsdWVQcm9wVmFsdWUob3B0aW9uKTtcbiAgICBvcHRpb25zSW5mb1tnZXRNYXBLZXkoc2luZ2xlVmFsdWUpXSA9IHtcbiAgICAgIG9wdGlvbjogb3B0aW9uLFxuICAgICAgdmFsdWU6IHNpbmdsZVZhbHVlLFxuICAgICAgbGFiZWw6IFNlbGVjdC5nZXRMYWJlbEZyb21PcHRpb24ocHJvcHMsIG9wdGlvbiksXG4gICAgICB0aXRsZTogb3B0aW9uLnByb3BzLnRpdGxlLFxuICAgICAgZGlzYWJsZWQ6IG9wdGlvbi5wcm9wcy5kaXNhYmxlZFxuICAgIH07XG4gIH0pO1xuXG4gIGlmIChwcmVTdGF0ZSkge1xuICAgIC8vIGtlZXAgb3B0aW9uIGluZm8gaW4gcHJlIHN0YXRlIHZhbHVlLlxuICAgIHZhciBvbGRPcHRpb25zSW5mbyA9IHByZVN0YXRlLm9wdGlvbnNJbmZvO1xuICAgIHZhciB2YWx1ZSA9IHByZVN0YXRlLnZhbHVlO1xuXG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHZhciBrZXkgPSBnZXRNYXBLZXkodik7XG5cbiAgICAgICAgaWYgKCFvcHRpb25zSW5mb1trZXldICYmIG9sZE9wdGlvbnNJbmZvW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG9wdGlvbnNJbmZvW2tleV0gPSBvbGRPcHRpb25zSW5mb1trZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3B0aW9uc0luZm87XG59O1xuXG5TZWxlY3QuZ2V0VmFsdWVGcm9tUHJvcHMgPSBmdW5jdGlvbiAocHJvcHMsIHVzZURlZmF1bHRWYWx1ZSkge1xuICB2YXIgdmFsdWUgPSBbXTtcblxuICBpZiAoJ3ZhbHVlJyBpbiBwcm9wcyAmJiAhdXNlRGVmYXVsdFZhbHVlKSB7XG4gICAgdmFsdWUgPSB0b0FycmF5KHByb3BzLnZhbHVlKTtcbiAgfVxuXG4gIGlmICgnZGVmYXVsdFZhbHVlJyBpbiBwcm9wcyAmJiB1c2VEZWZhdWx0VmFsdWUpIHtcbiAgICB2YWx1ZSA9IHRvQXJyYXkocHJvcHMuZGVmYXVsdFZhbHVlKTtcbiAgfVxuXG4gIGlmIChwcm9wcy5sYWJlbEluVmFsdWUpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgcmV0dXJuIHYua2V5O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuU2VsZWN0LmRpc3BsYXlOYW1lID0gJ1NlbGVjdCc7XG5wb2x5ZmlsbChTZWxlY3QpO1xuZXhwb3J0IGRlZmF1bHQgU2VsZWN0OyIsImltcG9ydCBPcHRHcm91cCBmcm9tICcuL09wdEdyb3VwJztcbmltcG9ydCBPcHRpb24gZnJvbSAnLi9PcHRpb24nO1xuaW1wb3J0IFNlbGVjdFByb3BUeXBlcyBmcm9tICcuL1Byb3BUeXBlcyc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJy4vU2VsZWN0JztcblNlbGVjdC5PcHRpb24gPSBPcHRpb247XG5TZWxlY3QuT3B0R3JvdXAgPSBPcHRHcm91cDtcbmV4cG9ydCB7IE9wdGlvbiwgT3B0R3JvdXAsIFNlbGVjdFByb3BUeXBlcyB9O1xuZXhwb3J0IGRlZmF1bHQgU2VsZWN0OyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLyoqXG4gICAqIExFRlRcbiAgICovXG4gIExFRlQ6IDM3LCAvLyBhbHNvIE5VTV9XRVNUXG4gIC8qKlxuICAgKiBVUFxuICAgKi9cbiAgVVA6IDM4LCAvLyBhbHNvIE5VTV9OT1JUSFxuICAvKipcbiAgICogUklHSFRcbiAgICovXG4gIFJJR0hUOiAzOSwgLy8gYWxzbyBOVU1fRUFTVFxuICAvKipcbiAgICogRE9XTlxuICAgKi9cbiAgRE9XTjogNDAgLy8gYWxzbyBOVU1fU09VVEhcbn07IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXkoY2hpbGRyZW4pIHtcbiAgLy8gYWxsb3cgW2MsW2EsYl1dXG4gIHZhciBjID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCkge1xuICAgICAgYy5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFjdGl2ZUluZGV4KGNoaWxkcmVuLCBhY3RpdmVLZXkpIHtcbiAgdmFyIGMgPSB0b0FycmF5KGNoaWxkcmVuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGNbaV0ua2V5ID09PSBhY3RpdmVLZXkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBY3RpdmVLZXkoY2hpbGRyZW4sIGluZGV4KSB7XG4gIHZhciBjID0gdG9BcnJheShjaGlsZHJlbik7XG4gIHJldHVybiBjW2luZGV4XS5rZXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRUcmFuc2Zvcm0oc3R5bGUsIHYpIHtcbiAgc3R5bGUudHJhbnNmb3JtID0gdjtcbiAgc3R5bGUud2Via2l0VHJhbnNmb3JtID0gdjtcbiAgc3R5bGUubW96VHJhbnNmb3JtID0gdjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVHJhbnNmb3JtM2RTdXBwb3J0ZWQoc3R5bGUpIHtcbiAgcmV0dXJuICgndHJhbnNmb3JtJyBpbiBzdHlsZSB8fCAnd2Via2l0VHJhbnNmb3JtJyBpbiBzdHlsZSB8fCAnTW96VHJhbnNmb3JtJyBpbiBzdHlsZSkgJiYgd2luZG93LmF0b2I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKHN0eWxlLCB2KSB7XG4gIHN0eWxlLnRyYW5zaXRpb24gPSB2O1xuICBzdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdjtcbiAgc3R5bGUuTW96VHJhbnNpdGlvbiA9IHY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1Qcm9wVmFsdWUodikge1xuICByZXR1cm4ge1xuICAgIHRyYW5zZm9ybTogdixcbiAgICBXZWJraXRUcmFuc2Zvcm06IHYsXG4gICAgTW96VHJhbnNmb3JtOiB2XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZlcnRpY2FsKHRhYkJhclBvc2l0aW9uKSB7XG4gIHJldHVybiB0YWJCYXJQb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHRhYkJhclBvc2l0aW9uID09PSAncmlnaHQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNmb3JtQnlJbmRleChpbmRleCwgdGFiQmFyUG9zaXRpb24pIHtcbiAgdmFyIHRyYW5zbGF0ZSA9IGlzVmVydGljYWwodGFiQmFyUG9zaXRpb24pID8gJ3RyYW5zbGF0ZVknIDogJ3RyYW5zbGF0ZVgnO1xuICByZXR1cm4gdHJhbnNsYXRlICsgJygnICsgLWluZGV4ICogMTAwICsgJyUpIHRyYW5zbGF0ZVooMCknO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWFyZ2luU3R5bGUoaW5kZXgsIHRhYkJhclBvc2l0aW9uKSB7XG4gIHZhciBtYXJnaW5EaXJlY3Rpb24gPSBpc1ZlcnRpY2FsKHRhYkJhclBvc2l0aW9uKSA/ICdtYXJnaW5Ub3AnIDogJ21hcmdpbkxlZnQnO1xuICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBtYXJnaW5EaXJlY3Rpb24sIC1pbmRleCAqIDEwMCArICclJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZShlbCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuICt3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkucmVwbGFjZSgncHgnLCAnJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRQeFN0eWxlKGVsLCB2YWx1ZSwgdmVydGljYWwpIHtcbiAgdmFsdWUgPSB2ZXJ0aWNhbCA/ICcwcHgsICcgKyB2YWx1ZSArICdweCwgMHB4JyA6IHZhbHVlICsgJ3B4LCAwcHgsIDBweCc7XG4gIHNldFRyYW5zZm9ybShlbC5zdHlsZSwgJ3RyYW5zbGF0ZTNkKCcgKyB2YWx1ZSArICcpJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRhQXR0cihwcm9wcykge1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZShmdW5jdGlvbiAocHJldiwga2V5KSB7XG4gICAgaWYgKGtleS5zdWJzdHIoMCwgNSkgPT09ICdhcmlhLScgfHwga2V5LnN1YnN0cigwLCA1KSA9PT0gJ2RhdGEtJyB8fCBrZXkgPT09ICdyb2xlJykge1xuICAgICAgcHJldltrZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHByZXY7XG4gIH0sIHt9KTtcbn1cblxuZnVuY3Rpb24gdG9OdW0oc3R5bGUsIHByb3BlcnR5KSB7XG4gIHJldHVybiArc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkucmVwbGFjZSgncHgnLCAnJyk7XG59XG5cbmZ1bmN0aW9uIGdldFR5cGVWYWx1ZShzdGFydCwgY3VycmVudCwgZW5kLCB0YWJOb2RlLCB3cmFwcGVyTm9kZSkge1xuICB2YXIgdG90YWwgPSBnZXRTdHlsZSh3cmFwcGVyTm9kZSwgJ3BhZGRpbmctJyArIHN0YXJ0KTtcbiAgaWYgKCF0YWJOb2RlIHx8ICF0YWJOb2RlLnBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gdG90YWw7XG4gIH1cblxuICB2YXIgY2hpbGROb2RlcyA9IHRhYk5vZGUucGFyZW50Tm9kZS5jaGlsZE5vZGVzO1xuXG4gIEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwoY2hpbGROb2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcblxuICAgIGlmIChub2RlICE9PSB0YWJOb2RlKSB7XG4gICAgICB0b3RhbCArPSB0b051bShzdHlsZSwgJ21hcmdpbi0nICsgc3RhcnQpO1xuICAgICAgdG90YWwgKz0gbm9kZVtjdXJyZW50XTtcbiAgICAgIHRvdGFsICs9IHRvTnVtKHN0eWxlLCAnbWFyZ2luLScgKyBlbmQpO1xuXG4gICAgICBpZiAoc3R5bGUuYm94U2l6aW5nID09PSAnY29udGVudC1ib3gnKSB7XG4gICAgICAgIHRvdGFsICs9IHRvTnVtKHN0eWxlLCAnYm9yZGVyLScgKyBzdGFydCArICctd2lkdGgnKSArIHRvTnVtKHN0eWxlLCAnYm9yZGVyLScgKyBlbmQgKyAnLXdpZHRoJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gV2UgbmVlZCBjb3VudCBjdXJyZW50IG5vZGUgbWFyZ2luXG4gICAgLy8gcmVmOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L3RhYnMvcHVsbC8xMzkjaXNzdWVjb21tZW50LTQzMTAwNTI2MlxuICAgIHRvdGFsICs9IHRvTnVtKHN0eWxlLCAnbWFyZ2luLScgKyBzdGFydCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRvdGFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGVmdCh0YWJOb2RlLCB3cmFwcGVyTm9kZSkge1xuICByZXR1cm4gZ2V0VHlwZVZhbHVlKCdsZWZ0JywgJ29mZnNldFdpZHRoJywgJ3JpZ2h0JywgdGFiTm9kZSwgd3JhcHBlck5vZGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9wKHRhYk5vZGUsIHdyYXBwZXJOb2RlKSB7XG4gIHJldHVybiBnZXRUeXBlVmFsdWUoJ3RvcCcsICdvZmZzZXRIZWlnaHQnLCAnYm90dG9tJywgdGFiTm9kZSwgd3JhcHBlck5vZGUpO1xufSIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9uby1ub25pbnRlcmFjdGl2ZS10YWJpbmRleCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgS2V5Q29kZSBmcm9tICdyYy11dGlsL2VzL0tleUNvZGUnO1xuaW1wb3J0IGNyZWF0ZVJlYWN0Q29udGV4dCBmcm9tICdAYW50LWRlc2lnbi9jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5cbnZhciBTZW50aW5lbENvbnRleHQgPSBjcmVhdGVSZWFjdENvbnRleHQoe30pO1xuZXhwb3J0IHZhciBTZW50aW5lbFByb3ZpZGVyID0gU2VudGluZWxDb250ZXh0LlByb3ZpZGVyO1xuZXhwb3J0IHZhciBTZW50aW5lbENvbnN1bWVyID0gU2VudGluZWxDb250ZXh0LkNvbnN1bWVyO1xuXG52YXIgc2VudGluZWxTdHlsZSA9IHsgd2lkdGg6IDAsIGhlaWdodDogMCwgb3ZlcmZsb3c6ICdoaWRkZW4nLCBwb3NpdGlvbjogJ2Fic29sdXRlJyB9O1xuXG52YXIgU2VudGluZWwgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2VudGluZWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNlbnRpbmVsKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZW50aW5lbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gU2VudGluZWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTZW50aW5lbCkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLm9uS2V5RG93biA9IGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgICAgICB3aGljaCA9IF9yZWYyLndoaWNoLFxuICAgICAgICAgIHNoaWZ0S2V5ID0gX3JlZjIuc2hpZnRLZXk7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBuZXh0RWxlbWVudCA9IF90aGlzJHByb3BzLm5leHRFbGVtZW50LFxuICAgICAgICAgIHByZXZFbGVtZW50ID0gX3RoaXMkcHJvcHMucHJldkVsZW1lbnQ7XG5cbiAgICAgIGlmICh3aGljaCAhPT0gS2V5Q29kZS5UQUIgfHwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGFyZ2V0KSByZXR1cm47XG5cbiAgICAgIC8vIFRhYiBuZXh0XG4gICAgICBpZiAoIXNoaWZ0S2V5ICYmIG5leHRFbGVtZW50KSB7XG4gICAgICAgIG5leHRFbGVtZW50LmZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRhYiBwcmV2XG4gICAgICBpZiAoc2hpZnRLZXkgJiYgcHJldkVsZW1lbnQpIHtcbiAgICAgICAgcHJldkVsZW1lbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTZW50aW5lbCwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgc2V0UmVmID0gdGhpcy5wcm9wcy5zZXRSZWY7XG5cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICAgIHJlZjogc2V0UmVmLFxuICAgICAgICBzdHlsZTogc2VudGluZWxTdHlsZSxcbiAgICAgICAgb25LZXlEb3duOiB0aGlzLm9uS2V5RG93bixcbiAgICAgICAgcm9sZTogJ3ByZXNlbnRhdGlvbidcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZW50aW5lbDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU2VudGluZWwucHJvcFR5cGVzID0ge1xuICBzZXRSZWY6IFByb3BUeXBlcy5mdW5jLFxuICBwcmV2RWxlbWVudDogUHJvcFR5cGVzLm9iamVjdCxcbiAgbmV4dEVsZW1lbnQ6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5leHBvcnQgZGVmYXVsdCBTZW50aW5lbDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBnZXREYXRhQXR0ciB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IFNlbnRpbmVsLCB7IFNlbnRpbmVsQ29uc3VtZXIgfSBmcm9tICcuL1NlbnRpbmVsJztcblxudmFyIFRhYlBhbmUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGFiUGFuZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFiUGFuZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFiUGFuZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRhYlBhbmUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUYWJQYW5lKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGFiUGFuZSwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzbmFtZXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlkID0gX3Byb3BzLmlkLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgZGVzdHJveUluYWN0aXZlVGFiUGFuZSA9IF9wcm9wcy5kZXN0cm95SW5hY3RpdmVUYWJQYW5lLFxuICAgICAgICAgIGFjdGl2ZSA9IF9wcm9wcy5hY3RpdmUsXG4gICAgICAgICAgZm9yY2VSZW5kZXIgPSBfcHJvcHMuZm9yY2VSZW5kZXIsXG4gICAgICAgICAgcm9vdFByZWZpeENscyA9IF9wcm9wcy5yb290UHJlZml4Q2xzLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHBsYWNlaG9sZGVyID0gX3Byb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgICAgIHJlc3RQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnaWQnLCAnY2xhc3NOYW1lJywgJ2Rlc3Ryb3lJbmFjdGl2ZVRhYlBhbmUnLCAnYWN0aXZlJywgJ2ZvcmNlUmVuZGVyJywgJ3Jvb3RQcmVmaXhDbHMnLCAnc3R5bGUnLCAnY2hpbGRyZW4nLCAncGxhY2Vob2xkZXInXSk7XG5cbiAgICAgIHRoaXMuX2lzQWN0aXZlZCA9IHRoaXMuX2lzQWN0aXZlZCB8fCBhY3RpdmU7XG4gICAgICB2YXIgcHJlZml4Q2xzID0gcm9vdFByZWZpeENscyArICctdGFicGFuZSc7XG4gICAgICB2YXIgY2xzID0gY2xhc3NuYW1lcygoX2NsYXNzbmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBwcmVmaXhDbHMsIDEpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIHByZWZpeENscyArICctaW5hY3RpdmUnLCAhYWN0aXZlKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBwcmVmaXhDbHMgKyAnLWFjdGl2ZScsIGFjdGl2ZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgY2xhc3NOYW1lLCBjbGFzc05hbWUpLCBfY2xhc3NuYW1lcykpO1xuICAgICAgdmFyIGlzUmVuZGVyID0gZGVzdHJveUluYWN0aXZlVGFiUGFuZSA/IGFjdGl2ZSA6IHRoaXMuX2lzQWN0aXZlZDtcbiAgICAgIHZhciBzaG91bGRSZW5kZXIgPSBpc1JlbmRlciB8fCBmb3JjZVJlbmRlcjtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFNlbnRpbmVsQ29uc3VtZXIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgdmFyIHNlbnRpbmVsU3RhcnQgPSBfcmVmLnNlbnRpbmVsU3RhcnQsXG4gICAgICAgICAgICAgIHNlbnRpbmVsRW5kID0gX3JlZi5zZW50aW5lbEVuZCxcbiAgICAgICAgICAgICAgc2V0UGFuZWxTZW50aW5lbFN0YXJ0ID0gX3JlZi5zZXRQYW5lbFNlbnRpbmVsU3RhcnQsXG4gICAgICAgICAgICAgIHNldFBhbmVsU2VudGluZWxFbmQgPSBfcmVmLnNldFBhbmVsU2VudGluZWxFbmQ7XG5cbiAgICAgICAgICAvLyBDcmVhdGUgc2VudGluZWxcbiAgICAgICAgICB2YXIgcGFuZWxTZW50aW5lbFN0YXJ0ID0gdm9pZCAwO1xuICAgICAgICAgIHZhciBwYW5lbFNlbnRpbmVsRW5kID0gdm9pZCAwO1xuICAgICAgICAgIGlmIChhY3RpdmUgJiYgc2hvdWxkUmVuZGVyKSB7XG4gICAgICAgICAgICBwYW5lbFNlbnRpbmVsU3RhcnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbnRpbmVsLCB7XG4gICAgICAgICAgICAgIHNldFJlZjogc2V0UGFuZWxTZW50aW5lbFN0YXJ0LFxuICAgICAgICAgICAgICBwcmV2RWxlbWVudDogc2VudGluZWxTdGFydFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwYW5lbFNlbnRpbmVsRW5kID0gUmVhY3QuY3JlYXRlRWxlbWVudChTZW50aW5lbCwge1xuICAgICAgICAgICAgICBzZXRSZWY6IHNldFBhbmVsU2VudGluZWxFbmQsXG4gICAgICAgICAgICAgIG5leHRFbGVtZW50OiBzZW50aW5lbEVuZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICAgICAgICByb2xlOiAndGFicGFuZWwnLFxuICAgICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiBhY3RpdmUgPyAnZmFsc2UnIDogJ3RydWUnLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNscyxcbiAgICAgICAgICAgICAgaWQ6IGlkXG4gICAgICAgICAgICB9LCBnZXREYXRhQXR0cihyZXN0UHJvcHMpKSxcbiAgICAgICAgICAgIHBhbmVsU2VudGluZWxTdGFydCxcbiAgICAgICAgICAgIHNob3VsZFJlbmRlciA/IGNoaWxkcmVuIDogcGxhY2Vob2xkZXIsXG4gICAgICAgICAgICBwYW5lbFNlbnRpbmVsRW5kXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGFiUGFuZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgVGFiUGFuZTtcblxuXG5UYWJQYW5lLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuICBzdHlsZTogUHJvcFR5cGVzLmFueSxcbiAgZGVzdHJveUluYWN0aXZlVGFiUGFuZTogUHJvcFR5cGVzLmJvb2wsXG4gIGZvcmNlUmVuZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5ub2RlLFxuICByb290UHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5UYWJQYW5lLmRlZmF1bHRQcm9wcyA9IHtcbiAgcGxhY2Vob2xkZXI6IG51bGxcbn07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHJhZiBmcm9tICdyYWYnO1xuaW1wb3J0IHsgcG9seWZpbGwgfSBmcm9tICdyZWFjdC1saWZlY3ljbGVzLWNvbXBhdCc7XG5pbXBvcnQgS2V5Q29kZSBmcm9tICcuL0tleUNvZGUnO1xuaW1wb3J0IFRhYlBhbmUgZnJvbSAnLi9UYWJQYW5lJztcbmltcG9ydCB7IGdldERhdGFBdHRyIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgU2VudGluZWwsIHsgU2VudGluZWxQcm92aWRlciB9IGZyb20gJy4vU2VudGluZWwnO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFjdGl2ZUtleShwcm9wcykge1xuICB2YXIgYWN0aXZlS2V5ID0gdm9pZCAwO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgJiYgIWFjdGl2ZUtleSAmJiAhY2hpbGQucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGFjdGl2ZUtleSA9IGNoaWxkLmtleTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYWN0aXZlS2V5O1xufVxuXG5mdW5jdGlvbiBhY3RpdmVLZXlJc1ZhbGlkKHByb3BzLCBrZXkpIHtcbiAgdmFyIGtleXMgPSBSZWFjdC5DaGlsZHJlbi5tYXAocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZCAmJiBjaGlsZC5rZXk7XG4gIH0pO1xuICByZXR1cm4ga2V5cy5pbmRleE9mKGtleSkgPj0gMDtcbn1cblxudmFyIFRhYnMgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGFicywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFicyhwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWJzKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUYWJzLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFicykpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyk7XG5cbiAgICB2YXIgYWN0aXZlS2V5ID0gdm9pZCAwO1xuICAgIGlmICgnYWN0aXZlS2V5JyBpbiBwcm9wcykge1xuICAgICAgYWN0aXZlS2V5ID0gcHJvcHMuYWN0aXZlS2V5O1xuICAgIH0gZWxzZSBpZiAoJ2RlZmF1bHRBY3RpdmVLZXknIGluIHByb3BzKSB7XG4gICAgICBhY3RpdmVLZXkgPSBwcm9wcy5kZWZhdWx0QWN0aXZlS2V5O1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVLZXkgPSBnZXREZWZhdWx0QWN0aXZlS2V5KHByb3BzKTtcbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGFjdGl2ZUtleTogYWN0aXZlS2V5XG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGFicywgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5kZXN0cm95ID0gdHJ1ZTtcbiAgICAgIHJhZi5jYW5jZWwodGhpcy5zZW50aW5lbElkKTtcbiAgICB9XG5cbiAgICAvLyBTZW50aW5lbCBmb3IgdGFiIGluZGV4XG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZVNlbnRpbmVsQ29udGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVNlbnRpbmVsQ29udGV4dCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5kZXN0cm95KSByZXR1cm47XG5cbiAgICAgIHJhZi5jYW5jZWwodGhpcy5zZW50aW5lbElkKTtcbiAgICAgIHRoaXMuc2VudGluZWxJZCA9IHJhZihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpczIuZGVzdHJveSkgcmV0dXJuO1xuICAgICAgICBfdGhpczIuZm9yY2VVcGRhdGUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfY2xhc3NuYW1lcztcblxuICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcblxuICAgICAgdmFyIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgICAgICBuYXZXcmFwcGVyID0gcHJvcHMubmF2V3JhcHBlcixcbiAgICAgICAgICB0YWJCYXJQb3NpdGlvbiA9IHByb3BzLnRhYkJhclBvc2l0aW9uLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICByZW5kZXJUYWJDb250ZW50ID0gcHJvcHMucmVuZGVyVGFiQ29udGVudCxcbiAgICAgICAgICByZW5kZXJUYWJCYXIgPSBwcm9wcy5yZW5kZXJUYWJCYXIsXG4gICAgICAgICAgZGVzdHJveUluYWN0aXZlVGFiUGFuZSA9IHByb3BzLmRlc3Ryb3lJbmFjdGl2ZVRhYlBhbmUsXG4gICAgICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbJ3ByZWZpeENscycsICduYXZXcmFwcGVyJywgJ3RhYkJhclBvc2l0aW9uJywgJ2NsYXNzTmFtZScsICdyZW5kZXJUYWJDb250ZW50JywgJ3JlbmRlclRhYkJhcicsICdkZXN0cm95SW5hY3RpdmVUYWJQYW5lJ10pO1xuXG4gICAgICB2YXIgY2xzID0gY2xhc3NuYW1lcygoX2NsYXNzbmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBwcmVmaXhDbHMsIDEpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIHByZWZpeENscyArICctJyArIHRhYkJhclBvc2l0aW9uLCAxKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBjbGFzc05hbWUsICEhY2xhc3NOYW1lKSwgX2NsYXNzbmFtZXMpKTtcblxuICAgICAgdGhpcy50YWJCYXIgPSByZW5kZXJUYWJCYXIoKTtcblxuICAgICAgdmFyIHRhYkJhciA9IFJlYWN0LmNsb25lRWxlbWVudCh0aGlzLnRhYkJhciwge1xuICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgbmF2V3JhcHBlcjogbmF2V3JhcHBlcixcbiAgICAgICAga2V5OiAndGFiQmFyJyxcbiAgICAgICAgb25LZXlEb3duOiB0aGlzLm9uTmF2S2V5RG93bixcbiAgICAgICAgdGFiQmFyUG9zaXRpb246IHRhYkJhclBvc2l0aW9uLFxuICAgICAgICBvblRhYkNsaWNrOiB0aGlzLm9uVGFiQ2xpY2ssXG4gICAgICAgIHBhbmVsczogcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGFjdGl2ZUtleTogdGhpcy5zdGF0ZS5hY3RpdmVLZXlcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgdGFiQ29udGVudCA9IFJlYWN0LmNsb25lRWxlbWVudChyZW5kZXJUYWJDb250ZW50KCksIHtcbiAgICAgICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgIHRhYkJhclBvc2l0aW9uOiB0YWJCYXJQb3NpdGlvbixcbiAgICAgICAgYWN0aXZlS2V5OiB0aGlzLnN0YXRlLmFjdGl2ZUtleSxcbiAgICAgICAgZGVzdHJveUluYWN0aXZlVGFiUGFuZTogZGVzdHJveUluYWN0aXZlVGFiUGFuZSxcbiAgICAgICAgY2hpbGRyZW46IHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBvbkNoYW5nZTogdGhpcy5zZXRBY3RpdmVLZXksXG4gICAgICAgIGtleTogJ3RhYkNvbnRlbnQnXG4gICAgICB9KTtcblxuICAgICAgdmFyIHNlbnRpbmVsU3RhcnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbnRpbmVsLCB7XG4gICAgICAgIGtleTogJ3NlbnRpbmVsU3RhcnQnLFxuICAgICAgICBzZXRSZWY6IHRoaXMuc2V0U2VudGluZWxTdGFydCxcbiAgICAgICAgbmV4dEVsZW1lbnQ6IHRoaXMucGFuZWxTZW50aW5lbFN0YXJ0XG4gICAgICB9KTtcbiAgICAgIHZhciBzZW50aW5lbEVuZCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VudGluZWwsIHtcbiAgICAgICAga2V5OiAnc2VudGluZWxFbmQnLFxuICAgICAgICBzZXRSZWY6IHRoaXMuc2V0U2VudGluZWxFbmQsXG4gICAgICAgIHByZXZFbGVtZW50OiB0aGlzLnBhbmVsU2VudGluZWxFbmRcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY29udGVudHMgPSBbXTtcbiAgICAgIGlmICh0YWJCYXJQb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgY29udGVudHMucHVzaChzZW50aW5lbFN0YXJ0LCB0YWJDb250ZW50LCBzZW50aW5lbEVuZCwgdGFiQmFyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnRzLnB1c2godGFiQmFyLCBzZW50aW5lbFN0YXJ0LCB0YWJDb250ZW50LCBzZW50aW5lbEVuZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBTZW50aW5lbFByb3ZpZGVyLFxuICAgICAgICB7XG4gICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHNlbnRpbmVsU3RhcnQ6IHRoaXMuc2VudGluZWxTdGFydCxcbiAgICAgICAgICAgIHNlbnRpbmVsRW5kOiB0aGlzLnNlbnRpbmVsRW5kLFxuICAgICAgICAgICAgc2V0UGFuZWxTZW50aW5lbFN0YXJ0OiB0aGlzLnNldFBhbmVsU2VudGluZWxTdGFydCxcbiAgICAgICAgICAgIHNldFBhbmVsU2VudGluZWxFbmQ6IHRoaXMuc2V0UGFuZWxTZW50aW5lbEVuZFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICBfZXh0ZW5kcyh7XG4gICAgICAgICAgICBjbGFzc05hbWU6IGNscyxcbiAgICAgICAgICAgIHN0eWxlOiBwcm9wcy5zdHlsZVxuICAgICAgICAgIH0sIGdldERhdGFBdHRyKHJlc3RQcm9wcyksIHtcbiAgICAgICAgICAgIG9uU2Nyb2xsOiB0aGlzLm9uU2Nyb2xsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgY29udGVudHNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHtcbiAgICAgIHZhciBuZXdTdGF0ZSA9IHt9O1xuICAgICAgaWYgKCdhY3RpdmVLZXknIGluIHByb3BzKSB7XG4gICAgICAgIG5ld1N0YXRlLmFjdGl2ZUtleSA9IHByb3BzLmFjdGl2ZUtleTtcbiAgICAgIH0gZWxzZSBpZiAoIWFjdGl2ZUtleUlzVmFsaWQocHJvcHMsIHN0YXRlLmFjdGl2ZUtleSkpIHtcbiAgICAgICAgbmV3U3RhdGUuYWN0aXZlS2V5ID0gZ2V0RGVmYXVsdEFjdGl2ZUtleShwcm9wcyk7XG4gICAgICB9XG4gICAgICBpZiAoT2JqZWN0LmtleXMobmV3U3RhdGUpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRhYnM7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbnZhciBfaW5pdGlhbGlzZVByb3BzID0gZnVuY3Rpb24gX2luaXRpYWxpc2VQcm9wcygpIHtcbiAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgdGhpcy5vblRhYkNsaWNrID0gZnVuY3Rpb24gKGFjdGl2ZUtleSwgZSkge1xuICAgIGlmIChfdGhpczMudGFiQmFyLnByb3BzLm9uVGFiQ2xpY2spIHtcbiAgICAgIF90aGlzMy50YWJCYXIucHJvcHMub25UYWJDbGljayhhY3RpdmVLZXksIGUpO1xuICAgIH1cbiAgICBfdGhpczMuc2V0QWN0aXZlS2V5KGFjdGl2ZUtleSk7XG4gIH07XG5cbiAgdGhpcy5vbk5hdktleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBldmVudEtleUNvZGUgPSBlLmtleUNvZGU7XG4gICAgaWYgKGV2ZW50S2V5Q29kZSA9PT0gS2V5Q29kZS5SSUdIVCB8fCBldmVudEtleUNvZGUgPT09IEtleUNvZGUuRE9XTikge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIG5leHRLZXkgPSBfdGhpczMuZ2V0TmV4dEFjdGl2ZUtleSh0cnVlKTtcbiAgICAgIF90aGlzMy5vblRhYkNsaWNrKG5leHRLZXkpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnRLZXlDb2RlID09PSBLZXlDb2RlLkxFRlQgfHwgZXZlbnRLZXlDb2RlID09PSBLZXlDb2RlLlVQKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB2YXIgcHJldmlvdXNLZXkgPSBfdGhpczMuZ2V0TmV4dEFjdGl2ZUtleShmYWxzZSk7XG4gICAgICBfdGhpczMub25UYWJDbGljayhwcmV2aW91c0tleSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub25TY3JvbGwgPSBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciB0YXJnZXQgPSBfcmVmLnRhcmdldCxcbiAgICAgICAgY3VycmVudFRhcmdldCA9IF9yZWYuY3VycmVudFRhcmdldDtcblxuICAgIGlmICh0YXJnZXQgPT09IGN1cnJlbnRUYXJnZXQgJiYgdGFyZ2V0LnNjcm9sbExlZnQgPiAwKSB7XG4gICAgICB0YXJnZXQuc2Nyb2xsTGVmdCA9IDA7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuc2V0U2VudGluZWxTdGFydCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgX3RoaXMzLnNlbnRpbmVsU3RhcnQgPSBub2RlO1xuICB9O1xuXG4gIHRoaXMuc2V0U2VudGluZWxFbmQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIF90aGlzMy5zZW50aW5lbEVuZCA9IG5vZGU7XG4gIH07XG5cbiAgdGhpcy5zZXRQYW5lbFNlbnRpbmVsU3RhcnQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChub2RlICE9PSBfdGhpczMucGFuZWxTZW50aW5lbFN0YXJ0KSB7XG4gICAgICBfdGhpczMudXBkYXRlU2VudGluZWxDb250ZXh0KCk7XG4gICAgfVxuICAgIF90aGlzMy5wYW5lbFNlbnRpbmVsU3RhcnQgPSBub2RlO1xuICB9O1xuXG4gIHRoaXMuc2V0UGFuZWxTZW50aW5lbEVuZCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKG5vZGUgIT09IF90aGlzMy5wYW5lbFNlbnRpbmVsRW5kKSB7XG4gICAgICBfdGhpczMudXBkYXRlU2VudGluZWxDb250ZXh0KCk7XG4gICAgfVxuICAgIF90aGlzMy5wYW5lbFNlbnRpbmVsRW5kID0gbm9kZTtcbiAgfTtcblxuICB0aGlzLnNldEFjdGl2ZUtleSA9IGZ1bmN0aW9uIChhY3RpdmVLZXkpIHtcbiAgICBpZiAoX3RoaXMzLnN0YXRlLmFjdGl2ZUtleSAhPT0gYWN0aXZlS2V5KSB7XG4gICAgICBpZiAoISgnYWN0aXZlS2V5JyBpbiBfdGhpczMucHJvcHMpKSB7XG4gICAgICAgIF90aGlzMy5zZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aXZlS2V5OiBhY3RpdmVLZXlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBfdGhpczMucHJvcHMub25DaGFuZ2UoYWN0aXZlS2V5KTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5nZXROZXh0QWN0aXZlS2V5ID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgICB2YXIgYWN0aXZlS2V5ID0gX3RoaXMzLnN0YXRlLmFjdGl2ZUtleTtcbiAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzMy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjICYmICFjLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGlsZHJlbi51bnNoaWZ0KGMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIGxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICB2YXIgcmV0ID0gbGVuZ3RoICYmIGNoaWxkcmVuWzBdLmtleTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgaWYgKGNoaWxkLmtleSA9PT0gYWN0aXZlS2V5KSB7XG4gICAgICAgIGlmIChpID09PSBsZW5ndGggLSAxKSB7XG4gICAgICAgICAgcmV0ID0gY2hpbGRyZW5bMF0ua2V5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldCA9IGNoaWxkcmVuW2kgKyAxXS5rZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xufTtcblxuVGFicy5wcm9wVHlwZXMgPSB7XG4gIGRlc3Ryb3lJbmFjdGl2ZVRhYlBhbmU6IFByb3BUeXBlcy5ib29sLFxuICByZW5kZXJUYWJCYXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHJlbmRlclRhYkNvbnRlbnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG5hdldyYXBwZXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRhYkJhclBvc2l0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgYWN0aXZlS2V5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBkZWZhdWx0QWN0aXZlS2V5OiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5UYWJzLmRlZmF1bHRQcm9wcyA9IHtcbiAgcHJlZml4Q2xzOiAncmMtdGFicycsXG4gIGRlc3Ryb3lJbmFjdGl2ZVRhYlBhbmU6IGZhbHNlLFxuICBvbkNoYW5nZTogbm9vcCxcbiAgbmF2V3JhcHBlcjogZnVuY3Rpb24gbmF2V3JhcHBlcihhcmcpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9LFxuICB0YWJCYXJQb3NpdGlvbjogJ3RvcCcsXG4gIGNoaWxkcmVuOiBudWxsLFxuICBzdHlsZToge31cbn07XG5cblRhYnMuVGFiUGFuZSA9IFRhYlBhbmU7XG5cbnBvbHlmaWxsKFRhYnMpO1xuXG5leHBvcnQgZGVmYXVsdCBUYWJzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eSc7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IGdldFRyYW5zZm9ybUJ5SW5kZXgsIGdldEFjdGl2ZUluZGV4LCBnZXRUcmFuc2Zvcm1Qcm9wVmFsdWUsIGdldE1hcmdpblN0eWxlIH0gZnJvbSAnLi91dGlscyc7XG5cbnZhciBUYWJDb250ZW50ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRhYkNvbnRlbnQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYkNvbnRlbnQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhYkNvbnRlbnQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChUYWJDb250ZW50Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFiQ29udGVudCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRhYkNvbnRlbnQsIFt7XG4gICAga2V5OiAnZ2V0VGFiUGFuZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUYWJQYW5lcygpIHtcbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICB2YXIgYWN0aXZlS2V5ID0gcHJvcHMuYWN0aXZlS2V5O1xuICAgICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gICAgICB2YXIgbmV3Q2hpbGRyZW4gPSBbXTtcblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGtleSA9IGNoaWxkLmtleTtcbiAgICAgICAgdmFyIGFjdGl2ZSA9IGFjdGl2ZUtleSA9PT0ga2V5O1xuICAgICAgICBuZXdDaGlsZHJlbi5wdXNoKFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgIGFjdGl2ZTogYWN0aXZlLFxuICAgICAgICAgIGRlc3Ryb3lJbmFjdGl2ZVRhYlBhbmU6IHByb3BzLmRlc3Ryb3lJbmFjdGl2ZVRhYlBhbmUsXG4gICAgICAgICAgcm9vdFByZWZpeENsczogcHJvcHMucHJlZml4Q2xzXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gbmV3Q2hpbGRyZW47XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9jbGFzc25hbWVzO1xuXG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgdmFyIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGFjdGl2ZUtleSA9IHByb3BzLmFjdGl2ZUtleSxcbiAgICAgICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgdGFiQmFyUG9zaXRpb24gPSBwcm9wcy50YWJCYXJQb3NpdGlvbixcbiAgICAgICAgICBhbmltYXRlZCA9IHByb3BzLmFuaW1hdGVkLFxuICAgICAgICAgIGFuaW1hdGVkV2l0aE1hcmdpbiA9IHByb3BzLmFuaW1hdGVkV2l0aE1hcmdpbjtcbiAgICAgIHZhciBzdHlsZSA9IHByb3BzLnN0eWxlO1xuXG4gICAgICB2YXIgY2xhc3NlcyA9IGNsYXNzbmFtZXMoKF9jbGFzc25hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgcHJlZml4Q2xzICsgJy1jb250ZW50JywgdHJ1ZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgYW5pbWF0ZWQgPyBwcmVmaXhDbHMgKyAnLWNvbnRlbnQtYW5pbWF0ZWQnIDogcHJlZml4Q2xzICsgJy1jb250ZW50LW5vLWFuaW1hdGVkJywgdHJ1ZSksIF9jbGFzc25hbWVzKSwgY2xhc3NOYW1lKTtcbiAgICAgIGlmIChhbmltYXRlZCkge1xuICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSBnZXRBY3RpdmVJbmRleChjaGlsZHJlbiwgYWN0aXZlS2V5KTtcbiAgICAgICAgaWYgKGFjdGl2ZUluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHZhciBhbmltYXRlZFN0eWxlID0gYW5pbWF0ZWRXaXRoTWFyZ2luID8gZ2V0TWFyZ2luU3R5bGUoYWN0aXZlSW5kZXgsIHRhYkJhclBvc2l0aW9uKSA6IGdldFRyYW5zZm9ybVByb3BWYWx1ZShnZXRUcmFuc2Zvcm1CeUluZGV4KGFjdGl2ZUluZGV4LCB0YWJCYXJQb3NpdGlvbikpO1xuICAgICAgICAgIHN0eWxlID0gX2V4dGVuZHMoe30sIHN0eWxlLCBhbmltYXRlZFN0eWxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHlsZSA9IF9leHRlbmRzKHt9LCBzdHlsZSwge1xuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5nZXRUYWJQYW5lcygpXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUYWJDb250ZW50O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBUYWJDb250ZW50O1xuXG5cblRhYkNvbnRlbnQucHJvcFR5cGVzID0ge1xuICBhbmltYXRlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGFuaW1hdGVkV2l0aE1hcmdpbjogUHJvcFR5cGVzLmJvb2wsXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBhY3RpdmVLZXk6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHN0eWxlOiBQcm9wVHlwZXMuYW55LFxuICB0YWJCYXJQb3NpdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBkZXN0cm95SW5hY3RpdmVUYWJQYW5lOiBQcm9wVHlwZXMuYm9vbFxufTtcblxuVGFiQ29udGVudC5kZWZhdWx0UHJvcHMgPSB7XG4gIGFuaW1hdGVkOiB0cnVlXG59OyIsImltcG9ydCBUYWJzIGZyb20gJy4vVGFicyc7XG5pbXBvcnQgVGFiUGFuZSBmcm9tICcuL1RhYlBhbmUnO1xuaW1wb3J0IFRhYkNvbnRlbnQgZnJvbSAnLi9UYWJDb250ZW50JztcblxuZXhwb3J0IGRlZmF1bHQgVGFicztcbmV4cG9ydCB7IFRhYlBhbmUsIFRhYkNvbnRlbnQgfTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxudmFyIFBhZ2VyID0gZnVuY3Rpb24gUGFnZXIocHJvcHMpIHtcbiAgdmFyIHByZWZpeENscyA9IHByb3BzLnJvb3RQcmVmaXhDbHMgKyAnLWl0ZW0nO1xuICB2YXIgY2xzID0gcHJlZml4Q2xzICsgJyAnICsgcHJlZml4Q2xzICsgJy0nICsgcHJvcHMucGFnZTtcblxuICBpZiAocHJvcHMuYWN0aXZlKSB7XG4gICAgY2xzID0gY2xzICsgJyAnICsgcHJlZml4Q2xzICsgJy1hY3RpdmUnO1xuICB9XG5cbiAgaWYgKHByb3BzLmNsYXNzTmFtZSkge1xuICAgIGNscyA9IGNscyArICcgJyArIHByb3BzLmNsYXNzTmFtZTtcbiAgfVxuXG4gIGlmICghcHJvcHMucGFnZSkge1xuICAgIGNscyA9IGNscyArICcgJyArIHByZWZpeENscyArICctZGlzYWJsZWQnO1xuICB9XG5cbiAgdmFyIGhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soKSB7XG4gICAgcHJvcHMub25DbGljayhwcm9wcy5wYWdlKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlS2V5UHJlc3MgPSBmdW5jdGlvbiBoYW5kbGVLZXlQcmVzcyhlKSB7XG4gICAgcHJvcHMub25LZXlQcmVzcyhlLCBwcm9wcy5vbkNsaWNrLCBwcm9wcy5wYWdlKTtcbiAgfTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAnbGknLFxuICAgIHtcbiAgICAgIHRpdGxlOiBwcm9wcy5zaG93VGl0bGUgPyBwcm9wcy5wYWdlIDogbnVsbCxcbiAgICAgIGNsYXNzTmFtZTogY2xzLFxuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgICBvbktleVByZXNzOiBoYW5kbGVLZXlQcmVzcyxcbiAgICAgIHRhYkluZGV4OiAnMCdcbiAgICB9LFxuICAgIHByb3BzLml0ZW1SZW5kZXIocHJvcHMucGFnZSwgJ3BhZ2UnLCBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2EnLFxuICAgICAgbnVsbCxcbiAgICAgIHByb3BzLnBhZ2VcbiAgICApKVxuICApO1xufTtcblxuUGFnZXIucHJvcFR5cGVzID0ge1xuICBwYWdlOiBQcm9wVHlwZXMubnVtYmVyLFxuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuICBsYXN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgbG9jYWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNob3dUaXRsZTogUHJvcFR5cGVzLmJvb2wsXG4gIHJvb3RQcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBvbktleVByZXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgaXRlbVJlbmRlcjogUHJvcFR5cGVzLmZ1bmNcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBhZ2VyOyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgWkVSTzogNDgsXG4gIE5JTkU6IDU3LFxuXG4gIE5VTVBBRF9aRVJPOiA5NixcbiAgTlVNUEFEX05JTkU6IDEwNSxcblxuICBCQUNLU1BBQ0U6IDgsXG4gIERFTEVURTogNDYsXG4gIEVOVEVSOiAxMyxcblxuICBBUlJPV19VUDogMzgsXG4gIEFSUk9XX0RPV046IDQwXG59OyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBLRVlDT0RFIGZyb20gJy4vS2V5Q29kZSc7XG5cbnZhciBPcHRpb25zID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE9wdGlvbnMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE9wdGlvbnMoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IE9wdGlvbnMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihPcHRpb25zKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBnb0lucHV0VGV4dDogJydcbiAgICB9LCBfdGhpcy5idWlsZE9wdGlvblRleHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSArICcgJyArIF90aGlzLnByb3BzLmxvY2FsZS5pdGVtc19wZXJfcGFnZTtcbiAgICB9LCBfdGhpcy5jaGFuZ2VTaXplID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBfdGhpcy5wcm9wcy5jaGFuZ2VTaXplKE51bWJlcih2YWx1ZSkpO1xuICAgIH0sIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGdvSW5wdXRUZXh0OiBlLnRhcmdldC52YWx1ZVxuICAgICAgfSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGdvQnV0dG9uID0gX3RoaXMkcHJvcHMuZ29CdXR0b24sXG4gICAgICAgICAgcXVpY2tHbyA9IF90aGlzJHByb3BzLnF1aWNrR287XG5cbiAgICAgIGlmIChnb0J1dHRvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBxdWlja0dvKF90aGlzLmdldFZhbGlkVmFsdWUoKSk7XG4gICAgfSwgX3RoaXMuZ28gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGdvSW5wdXRUZXh0ID0gX3RoaXMuc3RhdGUuZ29JbnB1dFRleHQ7XG5cbiAgICAgIGlmIChnb0lucHV0VGV4dCA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gS0VZQ09ERS5FTlRFUiB8fCBlLnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGdvSW5wdXRUZXh0OiAnJ1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMucHJvcHMucXVpY2tHbyhfdGhpcy5nZXRWYWxpZFZhbHVlKCkpO1xuICAgICAgfVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE9wdGlvbnMsIFt7XG4gICAga2V5OiAnZ2V0VmFsaWRWYWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZhbGlkVmFsdWUoKSB7XG4gICAgICB2YXIgX3N0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBnb0lucHV0VGV4dCA9IF9zdGF0ZS5nb0lucHV0VGV4dCxcbiAgICAgICAgICBjdXJyZW50ID0gX3N0YXRlLmN1cnJlbnQ7XG5cbiAgICAgIHJldHVybiBpc05hTihnb0lucHV0VGV4dCkgPyBjdXJyZW50IDogTnVtYmVyKGdvSW5wdXRUZXh0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgcGFnZVNpemUgPSBfcHJvcHMucGFnZVNpemUsXG4gICAgICAgICAgcGFnZVNpemVPcHRpb25zID0gX3Byb3BzLnBhZ2VTaXplT3B0aW9ucyxcbiAgICAgICAgICBsb2NhbGUgPSBfcHJvcHMubG9jYWxlLFxuICAgICAgICAgIHJvb3RQcmVmaXhDbHMgPSBfcHJvcHMucm9vdFByZWZpeENscyxcbiAgICAgICAgICBjaGFuZ2VTaXplID0gX3Byb3BzLmNoYW5nZVNpemUsXG4gICAgICAgICAgcXVpY2tHbyA9IF9wcm9wcy5xdWlja0dvLFxuICAgICAgICAgIGdvQnV0dG9uID0gX3Byb3BzLmdvQnV0dG9uLFxuICAgICAgICAgIHNlbGVjdENvbXBvbmVudENsYXNzID0gX3Byb3BzLnNlbGVjdENvbXBvbmVudENsYXNzLFxuICAgICAgICAgIGJ1aWxkT3B0aW9uVGV4dCA9IF9wcm9wcy5idWlsZE9wdGlvblRleHQsXG4gICAgICAgICAgc2VsZWN0UHJlZml4Q2xzID0gX3Byb3BzLnNlbGVjdFByZWZpeENscyxcbiAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZDtcbiAgICAgIHZhciBnb0lucHV0VGV4dCA9IHRoaXMuc3RhdGUuZ29JbnB1dFRleHQ7XG5cbiAgICAgIHZhciBwcmVmaXhDbHMgPSByb290UHJlZml4Q2xzICsgJy1vcHRpb25zJztcbiAgICAgIHZhciBTZWxlY3QgPSBzZWxlY3RDb21wb25lbnRDbGFzcztcbiAgICAgIHZhciBjaGFuZ2VTZWxlY3QgPSBudWxsO1xuICAgICAgdmFyIGdvSW5wdXQgPSBudWxsO1xuICAgICAgdmFyIGdvdG9CdXR0b24gPSBudWxsO1xuXG4gICAgICBpZiAoIWNoYW5nZVNpemUgJiYgIXF1aWNrR28pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VTaXplICYmIFNlbGVjdCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHBhZ2VTaXplT3B0aW9ucy5tYXAoZnVuY3Rpb24gKG9wdCwgaSkge1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgU2VsZWN0Lk9wdGlvbixcbiAgICAgICAgICAgIHsga2V5OiBpLCB2YWx1ZTogb3B0IH0sXG4gICAgICAgICAgICAoYnVpbGRPcHRpb25UZXh0IHx8IF90aGlzMi5idWlsZE9wdGlvblRleHQpKG9wdClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICBjaGFuZ2VTZWxlY3QgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFNlbGVjdCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgICBwcmVmaXhDbHM6IHNlbGVjdFByZWZpeENscyxcbiAgICAgICAgICAgIHNob3dTZWFyY2g6IGZhbHNlLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNpemUtY2hhbmdlcicsXG4gICAgICAgICAgICBvcHRpb25MYWJlbFByb3A6ICdjaGlsZHJlbicsXG4gICAgICAgICAgICBkcm9wZG93bk1hdGNoU2VsZWN0V2lkdGg6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IChwYWdlU2l6ZSB8fCBwYWdlU2l6ZU9wdGlvbnNbMF0pLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5jaGFuZ2VTaXplLFxuICAgICAgICAgICAgZ2V0UG9wdXBDb250YWluZXI6IGZ1bmN0aW9uIGdldFBvcHVwQ29udGFpbmVyKHRyaWdnZXJOb2RlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cmlnZ2VyTm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAocXVpY2tHbykge1xuICAgICAgICBpZiAoZ29CdXR0b24pIHtcbiAgICAgICAgICBnb3RvQnV0dG9uID0gdHlwZW9mIGdvQnV0dG9uID09PSAnYm9vbGVhbicgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2J1dHRvbicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxuICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmdvLFxuICAgICAgICAgICAgICBvbktleVVwOiB0aGlzLmdvLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsb2NhbGUuanVtcF90b19jb25maXJtXG4gICAgICAgICAgKSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuZ28sXG4gICAgICAgICAgICAgIG9uS2V5VXA6IHRoaXMuZ29cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnb0J1dHRvblxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgZ29JbnB1dCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctcXVpY2stanVtcGVyJyB9LFxuICAgICAgICAgIGxvY2FsZS5qdW1wX3RvLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgdmFsdWU6IGdvSW5wdXRUZXh0LFxuICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgICAgb25LZXlVcDogdGhpcy5nbyxcbiAgICAgICAgICAgIG9uQmx1cjogdGhpcy5oYW5kbGVCbHVyXG4gICAgICAgICAgfSksXG4gICAgICAgICAgbG9jYWxlLnBhZ2UsXG4gICAgICAgICAgZ290b0J1dHRvblxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2xpJyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICcnICsgcHJlZml4Q2xzIH0sXG4gICAgICAgIGNoYW5nZVNlbGVjdCxcbiAgICAgICAgZ29JbnB1dFxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gT3B0aW9ucztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuT3B0aW9ucy5wcm9wVHlwZXMgPSB7XG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2hhbmdlU2l6ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIHF1aWNrR286IFByb3BUeXBlcy5mdW5jLFxuICBzZWxlY3RDb21wb25lbnRDbGFzczogUHJvcFR5cGVzLmZ1bmMsXG4gIGN1cnJlbnQ6IFByb3BUeXBlcy5udW1iZXIsXG4gIHBhZ2VTaXplT3B0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIHBhZ2VTaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuICBidWlsZE9wdGlvblRleHQ6IFByb3BUeXBlcy5mdW5jLFxuICBsb2NhbGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHJvb3RQcmVmaXhDbHM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNlbGVjdFByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgZ29CdXR0b246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMubm9kZV0pXG59O1xuT3B0aW9ucy5kZWZhdWx0UHJvcHMgPSB7XG4gIHBhZ2VTaXplT3B0aW9uczogWycxMCcsICcyMCcsICczMCcsICc0MCddXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IE9wdGlvbnM7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFBhZ2VyIGZyb20gJy4vUGFnZXInO1xuaW1wb3J0IE9wdGlvbnMgZnJvbSAnLi9PcHRpb25zJztcbmltcG9ydCBLRVlDT0RFIGZyb20gJy4vS2V5Q29kZSc7XG5pbXBvcnQgTE9DQUxFIGZyb20gJy4vbG9jYWxlL3poX0NOJztcbmltcG9ydCB7IHBvbHlmaWxsIH0gZnJvbSAncmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQnO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbHVlKSAmJiBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRJdGVtUmVuZGVyKHBhZ2UsIHR5cGUsIGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVBhZ2UocCwgc3RhdGUsIHByb3BzKSB7XG4gIHZhciBwYWdlU2l6ZSA9IHA7XG4gIGlmICh0eXBlb2YgcGFnZVNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcGFnZVNpemUgPSBzdGF0ZS5wYWdlU2l6ZTtcbiAgfVxuICByZXR1cm4gTWF0aC5mbG9vcigocHJvcHMudG90YWwgLSAxKSAvIHBhZ2VTaXplKSArIDE7XG59XG5cbnZhciBQYWdpbmF0aW9uID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBhZ2luYXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBhZ2luYXRpb24ocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFnaW5hdGlvbik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUGFnaW5hdGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFBhZ2luYXRpb24pKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpO1xuXG4gICAgdmFyIGhhc09uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UgIT09IG5vb3A7XG4gICAgdmFyIGhhc0N1cnJlbnQgPSAnY3VycmVudCcgaW4gcHJvcHM7XG4gICAgaWYgKGhhc0N1cnJlbnQgJiYgIWhhc09uQ2hhbmdlKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6IFlvdSBwcm92aWRlZCBhIGBjdXJyZW50YCBwcm9wIHRvIGEgUGFnaW5hdGlvbiBjb21wb25lbnQgd2l0aG91dCBhbiBgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgY29tcG9uZW50LicpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnQgPSBwcm9wcy5kZWZhdWx0Q3VycmVudDtcbiAgICBpZiAoJ2N1cnJlbnQnIGluIHByb3BzKSB7XG4gICAgICBjdXJyZW50ID0gcHJvcHMuY3VycmVudDtcbiAgICB9XG5cbiAgICB2YXIgcGFnZVNpemUgPSBwcm9wcy5kZWZhdWx0UGFnZVNpemU7XG4gICAgaWYgKCdwYWdlU2l6ZScgaW4gcHJvcHMpIHtcbiAgICAgIHBhZ2VTaXplID0gcHJvcHMucGFnZVNpemU7XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjdXJyZW50OiBjdXJyZW50LFxuICAgICAgY3VycmVudElucHV0VmFsdWU6IGN1cnJlbnQsXG4gICAgICBwYWdlU2l6ZTogcGFnZVNpemVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQYWdpbmF0aW9uLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgLy8gV2hlbiBjdXJyZW50IHBhZ2UgY2hhbmdlLCBmaXggZm9jdXNlZCBzdHlsZSBvZiBwcmV2IGl0ZW1cbiAgICAgIC8vIEEgaGFja3kgc29sdXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvODk0OFxuICAgICAgdmFyIHByZWZpeENscyA9IHRoaXMucHJvcHMucHJlZml4Q2xzO1xuXG4gICAgICBpZiAocHJldlN0YXRlLmN1cnJlbnQgIT09IHRoaXMuc3RhdGUuY3VycmVudCAmJiB0aGlzLnBhZ2luYXRpb25Ob2RlKSB7XG4gICAgICAgIHZhciBsYXN0Q3VycmVudE5vZGUgPSB0aGlzLnBhZ2luYXRpb25Ob2RlLnF1ZXJ5U2VsZWN0b3IoJy4nICsgcHJlZml4Q2xzICsgJy1pdGVtLScgKyBwcmV2U3RhdGUuY3VycmVudCk7XG4gICAgICAgIGlmIChsYXN0Q3VycmVudE5vZGUgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gbGFzdEN1cnJlbnROb2RlKSB7XG4gICAgICAgICAgbGFzdEN1cnJlbnROb2RlLmJsdXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFZhbGlkVmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWYWxpZFZhbHVlKGUpIHtcbiAgICAgIHZhciBpbnB1dFZhbHVlID0gZS50YXJnZXQudmFsdWU7XG4gICAgICB2YXIgY3VycmVudElucHV0VmFsdWUgPSB0aGlzLnN0YXRlLmN1cnJlbnRJbnB1dFZhbHVlO1xuXG4gICAgICB2YXIgdmFsdWUgPSB2b2lkIDA7XG4gICAgICBpZiAoaW5wdXRWYWx1ZSA9PT0gJycpIHtcbiAgICAgICAgdmFsdWUgPSBpbnB1dFZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChpc05hTihOdW1iZXIoaW5wdXRWYWx1ZSkpKSB7XG4gICAgICAgIHZhbHVlID0gY3VycmVudElucHV0VmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IE51bWJlcihpbnB1dFZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQ7XG5cbiAgICAgIC8vIFdoZW4gaGlkZU9uU2luZ2xlUGFnZSBpcyB0cnVlIGFuZCB0aGVyZSBpcyBvbmx5IDEgcGFnZSwgaGlkZSB0aGUgcGFnZXJcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaGlkZU9uU2luZ2xlUGFnZSA9PT0gdHJ1ZSAmJiB0aGlzLnByb3BzLnRvdGFsIDw9IHRoaXMuc3RhdGUucGFnZVNpemUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICB2YXIgbG9jYWxlID0gcHJvcHMubG9jYWxlO1xuXG4gICAgICB2YXIgYWxsUGFnZXMgPSBjYWxjdWxhdGVQYWdlKHVuZGVmaW5lZCwgdGhpcy5zdGF0ZSwgdGhpcy5wcm9wcyk7XG4gICAgICB2YXIgcGFnZXJMaXN0ID0gW107XG4gICAgICB2YXIganVtcFByZXYgPSBudWxsO1xuICAgICAgdmFyIGp1bXBOZXh0ID0gbnVsbDtcbiAgICAgIHZhciBmaXJzdFBhZ2VyID0gbnVsbDtcbiAgICAgIHZhciBsYXN0UGFnZXIgPSBudWxsO1xuICAgICAgdmFyIGdvdG9CdXR0b24gPSBudWxsO1xuXG4gICAgICB2YXIgZ29CdXR0b24gPSBwcm9wcy5zaG93UXVpY2tKdW1wZXIgJiYgcHJvcHMuc2hvd1F1aWNrSnVtcGVyLmdvQnV0dG9uO1xuICAgICAgdmFyIHBhZ2VCdWZmZXJTaXplID0gcHJvcHMuc2hvd0xlc3NJdGVtcyA/IDEgOiAyO1xuICAgICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgY3VycmVudCA9IF9zdGF0ZS5jdXJyZW50LFxuICAgICAgICAgIHBhZ2VTaXplID0gX3N0YXRlLnBhZ2VTaXplO1xuXG5cbiAgICAgIHZhciBwcmV2UGFnZSA9IGN1cnJlbnQgLSAxID4gMCA/IGN1cnJlbnQgLSAxIDogMDtcbiAgICAgIHZhciBuZXh0UGFnZSA9IGN1cnJlbnQgKyAxIDwgYWxsUGFnZXMgPyBjdXJyZW50ICsgMSA6IGFsbFBhZ2VzO1xuXG4gICAgICB2YXIgZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzID0gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZShmdW5jdGlvbiAocHJldiwga2V5KSB7XG4gICAgICAgIGlmIChrZXkuc3Vic3RyKDAsIDUpID09PSAnZGF0YS0nIHx8IGtleS5zdWJzdHIoMCwgNSkgPT09ICdhcmlhLScgfHwga2V5ID09PSAncm9sZScpIHtcbiAgICAgICAgICBwcmV2W2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgfSwge30pO1xuXG4gICAgICBpZiAocHJvcHMuc2ltcGxlKSB7XG4gICAgICAgIGlmIChnb0J1dHRvbikge1xuICAgICAgICAgIGlmICh0eXBlb2YgZ29CdXR0b24gPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgZ290b0J1dHRvbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdidXR0b24nLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVHb1RPLFxuICAgICAgICAgICAgICAgIG9uS2V5VXA6IHRoaXMuaGFuZGxlR29UT1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBsb2NhbGUuanVtcF90b19jb25maXJtXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnb3RvQnV0dG9uID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVHb1RPLFxuICAgICAgICAgICAgICAgIG9uS2V5VXA6IHRoaXMuaGFuZGxlR29UT1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBnb0J1dHRvblxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZ290b0J1dHRvbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0aXRsZTogcHJvcHMuc2hvd1RpdGxlID8gJycgKyBsb2NhbGUuanVtcF90byArIHRoaXMuc3RhdGUuY3VycmVudCArICcvJyArIGFsbFBhZ2VzIDogbnVsbCxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNpbXBsZS1wYWdlcidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnb3RvQnV0dG9uXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICd1bCcsXG4gICAgICAgICAgX2V4dGVuZHMoe1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnICcgKyBwcmVmaXhDbHMgKyAnLXNpbXBsZSAnICsgcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgICAgc3R5bGU6IHByb3BzLnN0eWxlLFxuICAgICAgICAgICAgcmVmOiB0aGlzLnNhdmVQYWdpbmF0aW9uTm9kZVxuICAgICAgICAgIH0sIGRhdGFPckFyaWFBdHRyaWJ1dGVQcm9wcyksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRpdGxlOiBwcm9wcy5zaG93VGl0bGUgPyBsb2NhbGUucHJldl9wYWdlIDogbnVsbCxcbiAgICAgICAgICAgICAgb25DbGljazogdGhpcy5wcmV2LFxuICAgICAgICAgICAgICB0YWJJbmRleDogdGhpcy5oYXNQcmV2KCkgPyAwIDogbnVsbCxcbiAgICAgICAgICAgICAgb25LZXlQcmVzczogdGhpcy5ydW5JZkVudGVyUHJldixcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiAodGhpcy5oYXNQcmV2KCkgPyAnJyA6IHByZWZpeENscyArICctZGlzYWJsZWQnKSArICcgJyArIHByZWZpeENscyArICctcHJldicsXG4gICAgICAgICAgICAgICdhcmlhLWRpc2FibGVkJzogIXRoaXMuaGFzUHJldigpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvcHMuaXRlbVJlbmRlcihwcmV2UGFnZSwgJ3ByZXYnLCB0aGlzLmdldEl0ZW1JY29uKHByb3BzLnByZXZJY29uKSlcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0aXRsZTogcHJvcHMuc2hvd1RpdGxlID8gdGhpcy5zdGF0ZS5jdXJyZW50ICsgJy8nICsgYWxsUGFnZXMgOiBudWxsLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IHByZWZpeENscyArICctc2ltcGxlLXBhZ2VyJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmN1cnJlbnRJbnB1dFZhbHVlLFxuICAgICAgICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgICAgICAgb25LZXlVcDogdGhpcy5oYW5kbGVLZXlVcCxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlS2V5VXAsXG4gICAgICAgICAgICAgIHNpemU6ICczJ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLXNsYXNoJyB9LFxuICAgICAgICAgICAgICAnXFx1RkYwRidcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBhbGxQYWdlc1xuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRpdGxlOiBwcm9wcy5zaG93VGl0bGUgPyBsb2NhbGUubmV4dF9wYWdlIDogbnVsbCxcbiAgICAgICAgICAgICAgb25DbGljazogdGhpcy5uZXh0LFxuICAgICAgICAgICAgICB0YWJJbmRleDogdGhpcy5oYXNQcmV2KCkgPyAwIDogbnVsbCxcbiAgICAgICAgICAgICAgb25LZXlQcmVzczogdGhpcy5ydW5JZkVudGVyTmV4dCxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiAodGhpcy5oYXNOZXh0KCkgPyAnJyA6IHByZWZpeENscyArICctZGlzYWJsZWQnKSArICcgJyArIHByZWZpeENscyArICctbmV4dCcsXG4gICAgICAgICAgICAgICdhcmlhLWRpc2FibGVkJzogIXRoaXMuaGFzTmV4dCgpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvcHMuaXRlbVJlbmRlcihuZXh0UGFnZSwgJ25leHQnLCB0aGlzLmdldEl0ZW1JY29uKHByb3BzLm5leHRJY29uKSlcbiAgICAgICAgICApLFxuICAgICAgICAgIGdvdG9CdXR0b25cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFsbFBhZ2VzIDw9IDUgKyBwYWdlQnVmZmVyU2l6ZSAqIDIpIHtcbiAgICAgICAgdmFyIHBhZ2VyUHJvcHMgPSB7XG4gICAgICAgICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgICAgICAgcm9vdFByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgIG9uS2V5UHJlc3M6IHRoaXMucnVuSWZFbnRlcixcbiAgICAgICAgICBzaG93VGl0bGU6IHByb3BzLnNob3dUaXRsZSxcbiAgICAgICAgICBpdGVtUmVuZGVyOiBwcm9wcy5pdGVtUmVuZGVyXG4gICAgICAgIH07XG4gICAgICAgIGlmICghYWxsUGFnZXMpIHtcbiAgICAgICAgICBwYWdlckxpc3QucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFBhZ2VyLCBfZXh0ZW5kcyh7fSwgcGFnZXJQcm9wcywge1xuICAgICAgICAgICAga2V5OiAnbm9QYWdlcicsXG4gICAgICAgICAgICBwYWdlOiBhbGxQYWdlcyxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1kaXNhYmxlZCdcbiAgICAgICAgICB9KSkpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGFsbFBhZ2VzOyBpKyspIHtcbiAgICAgICAgICB2YXIgYWN0aXZlID0gdGhpcy5zdGF0ZS5jdXJyZW50ID09PSBpO1xuICAgICAgICAgIHBhZ2VyTGlzdC5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFnZXIsIF9leHRlbmRzKHt9LCBwYWdlclByb3BzLCB7XG4gICAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgICBwYWdlOiBpLFxuICAgICAgICAgICAgYWN0aXZlOiBhY3RpdmVcbiAgICAgICAgICB9KSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcHJldkl0ZW1UaXRsZSA9IHByb3BzLnNob3dMZXNzSXRlbXMgPyBsb2NhbGUucHJldl8zIDogbG9jYWxlLnByZXZfNTtcbiAgICAgICAgdmFyIG5leHRJdGVtVGl0bGUgPSBwcm9wcy5zaG93TGVzc0l0ZW1zID8gbG9jYWxlLm5leHRfMyA6IGxvY2FsZS5uZXh0XzU7XG4gICAgICAgIGlmIChwcm9wcy5zaG93UHJldk5leHRKdW1wZXJzKSB7XG4gICAgICAgICAgdmFyIGp1bXBQcmV2Q2xhc3NTdHJpbmcgPSBwcmVmaXhDbHMgKyAnLWp1bXAtcHJldic7XG4gICAgICAgICAgaWYgKHByb3BzLmp1bXBQcmV2SWNvbikge1xuICAgICAgICAgICAganVtcFByZXZDbGFzc1N0cmluZyArPSAnICcgKyBwcmVmaXhDbHMgKyAnLWp1bXAtcHJldi1jdXN0b20taWNvbic7XG4gICAgICAgICAgfVxuICAgICAgICAgIGp1bXBQcmV2ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRpdGxlOiBwcm9wcy5zaG93VGl0bGUgPyBwcmV2SXRlbVRpdGxlIDogbnVsbCxcbiAgICAgICAgICAgICAga2V5OiAncHJldicsXG4gICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuanVtcFByZXYsXG4gICAgICAgICAgICAgIHRhYkluZGV4OiAnMCcsXG4gICAgICAgICAgICAgIG9uS2V5UHJlc3M6IHRoaXMucnVuSWZFbnRlckp1bXBQcmV2LFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IGp1bXBQcmV2Q2xhc3NTdHJpbmdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9wcy5pdGVtUmVuZGVyKHRoaXMuZ2V0SnVtcFByZXZQYWdlKCksICdqdW1wLXByZXYnLCB0aGlzLmdldEl0ZW1JY29uKHByb3BzLmp1bXBQcmV2SWNvbikpXG4gICAgICAgICAgKTtcbiAgICAgICAgICB2YXIganVtcE5leHRDbGFzc1N0cmluZyA9IHByZWZpeENscyArICctanVtcC1uZXh0JztcbiAgICAgICAgICBpZiAocHJvcHMuanVtcE5leHRJY29uKSB7XG4gICAgICAgICAgICBqdW1wTmV4dENsYXNzU3RyaW5nICs9ICcgJyArIHByZWZpeENscyArICctanVtcC1uZXh0LWN1c3RvbS1pY29uJztcbiAgICAgICAgICB9XG4gICAgICAgICAganVtcE5leHQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGl0bGU6IHByb3BzLnNob3dUaXRsZSA/IG5leHRJdGVtVGl0bGUgOiBudWxsLFxuICAgICAgICAgICAgICBrZXk6ICduZXh0JyxcbiAgICAgICAgICAgICAgdGFiSW5kZXg6ICcwJyxcbiAgICAgICAgICAgICAgb25DbGljazogdGhpcy5qdW1wTmV4dCxcbiAgICAgICAgICAgICAgb25LZXlQcmVzczogdGhpcy5ydW5JZkVudGVySnVtcE5leHQsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZToganVtcE5leHRDbGFzc1N0cmluZ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb3BzLml0ZW1SZW5kZXIodGhpcy5nZXRKdW1wTmV4dFBhZ2UoKSwgJ2p1bXAtbmV4dCcsIHRoaXMuZ2V0SXRlbUljb24ocHJvcHMuanVtcE5leHRJY29uKSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RQYWdlciA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFnZXIsIHtcbiAgICAgICAgICBsb2NhbGU6IHByb3BzLmxvY2FsZSxcbiAgICAgICAgICBsYXN0OiB0cnVlLFxuICAgICAgICAgIHJvb3RQcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgICBvbktleVByZXNzOiB0aGlzLnJ1bklmRW50ZXIsXG4gICAgICAgICAga2V5OiBhbGxQYWdlcyxcbiAgICAgICAgICBwYWdlOiBhbGxQYWdlcyxcbiAgICAgICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgICAgIHNob3dUaXRsZTogcHJvcHMuc2hvd1RpdGxlLFxuICAgICAgICAgIGl0ZW1SZW5kZXI6IHByb3BzLml0ZW1SZW5kZXJcbiAgICAgICAgfSk7XG4gICAgICAgIGZpcnN0UGFnZXIgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFBhZ2VyLCB7XG4gICAgICAgICAgbG9jYWxlOiBwcm9wcy5sb2NhbGUsXG4gICAgICAgICAgcm9vdFByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgIG9uS2V5UHJlc3M6IHRoaXMucnVuSWZFbnRlcixcbiAgICAgICAgICBrZXk6IDEsXG4gICAgICAgICAgcGFnZTogMSxcbiAgICAgICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgICAgIHNob3dUaXRsZTogcHJvcHMuc2hvd1RpdGxlLFxuICAgICAgICAgIGl0ZW1SZW5kZXI6IHByb3BzLml0ZW1SZW5kZXJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGxlZnQgPSBNYXRoLm1heCgxLCBjdXJyZW50IC0gcGFnZUJ1ZmZlclNpemUpO1xuICAgICAgICB2YXIgcmlnaHQgPSBNYXRoLm1pbihjdXJyZW50ICsgcGFnZUJ1ZmZlclNpemUsIGFsbFBhZ2VzKTtcblxuICAgICAgICBpZiAoY3VycmVudCAtIDEgPD0gcGFnZUJ1ZmZlclNpemUpIHtcbiAgICAgICAgICByaWdodCA9IDEgKyBwYWdlQnVmZmVyU2l6ZSAqIDI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWxsUGFnZXMgLSBjdXJyZW50IDw9IHBhZ2VCdWZmZXJTaXplKSB7XG4gICAgICAgICAgbGVmdCA9IGFsbFBhZ2VzIC0gcGFnZUJ1ZmZlclNpemUgKiAyO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgX2kgPSBsZWZ0OyBfaSA8PSByaWdodDsgX2krKykge1xuICAgICAgICAgIHZhciBfYWN0aXZlID0gY3VycmVudCA9PT0gX2k7XG4gICAgICAgICAgcGFnZXJMaXN0LnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChQYWdlciwge1xuICAgICAgICAgICAgbG9jYWxlOiBwcm9wcy5sb2NhbGUsXG4gICAgICAgICAgICByb290UHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgIG9uS2V5UHJlc3M6IHRoaXMucnVuSWZFbnRlcixcbiAgICAgICAgICAgIGtleTogX2ksXG4gICAgICAgICAgICBwYWdlOiBfaSxcbiAgICAgICAgICAgIGFjdGl2ZTogX2FjdGl2ZSxcbiAgICAgICAgICAgIHNob3dUaXRsZTogcHJvcHMuc2hvd1RpdGxlLFxuICAgICAgICAgICAgaXRlbVJlbmRlcjogcHJvcHMuaXRlbVJlbmRlclxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJyZW50IC0gMSA+PSBwYWdlQnVmZmVyU2l6ZSAqIDIgJiYgY3VycmVudCAhPT0gMSArIDIpIHtcbiAgICAgICAgICBwYWdlckxpc3RbMF0gPSBSZWFjdC5jbG9uZUVsZW1lbnQocGFnZXJMaXN0WzBdLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IHByZWZpeENscyArICctaXRlbS1hZnRlci1qdW1wLXByZXYnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcGFnZXJMaXN0LnVuc2hpZnQoanVtcFByZXYpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbGxQYWdlcyAtIGN1cnJlbnQgPj0gcGFnZUJ1ZmZlclNpemUgKiAyICYmIGN1cnJlbnQgIT09IGFsbFBhZ2VzIC0gMikge1xuICAgICAgICAgIHBhZ2VyTGlzdFtwYWdlckxpc3QubGVuZ3RoIC0gMV0gPSBSZWFjdC5jbG9uZUVsZW1lbnQocGFnZXJMaXN0W3BhZ2VyTGlzdC5sZW5ndGggLSAxXSwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBwcmVmaXhDbHMgKyAnLWl0ZW0tYmVmb3JlLWp1bXAtbmV4dCdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwYWdlckxpc3QucHVzaChqdW1wTmV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGVmdCAhPT0gMSkge1xuICAgICAgICAgIHBhZ2VyTGlzdC51bnNoaWZ0KGZpcnN0UGFnZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyaWdodCAhPT0gYWxsUGFnZXMpIHtcbiAgICAgICAgICBwYWdlckxpc3QucHVzaChsYXN0UGFnZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0b3RhbFRleHQgPSBudWxsO1xuXG4gICAgICBpZiAocHJvcHMuc2hvd1RvdGFsKSB7XG4gICAgICAgIHRvdGFsVGV4dCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2xpJyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy10b3RhbC10ZXh0JyB9LFxuICAgICAgICAgIHByb3BzLnNob3dUb3RhbChwcm9wcy50b3RhbCwgW3Byb3BzLnRvdGFsID09PSAwID8gMCA6IChjdXJyZW50IC0gMSkgKiBwYWdlU2l6ZSArIDEsIGN1cnJlbnQgKiBwYWdlU2l6ZSA+IHByb3BzLnRvdGFsID8gcHJvcHMudG90YWwgOiBjdXJyZW50ICogcGFnZVNpemVdKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdmFyIHByZXZEaXNhYmxlZCA9ICF0aGlzLmhhc1ByZXYoKSB8fCAhYWxsUGFnZXM7XG4gICAgICB2YXIgbmV4dERpc2FibGVkID0gIXRoaXMuaGFzTmV4dCgpIHx8ICFhbGxQYWdlcztcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAndWwnLFxuICAgICAgICBfZXh0ZW5kcyh7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKHByZWZpeENscywgY2xhc3NOYW1lLCBfZGVmaW5lUHJvcGVydHkoe30sIHByZWZpeENscyArICctZGlzYWJsZWQnLCBkaXNhYmxlZCkpLFxuICAgICAgICAgIHN0eWxlOiBwcm9wcy5zdHlsZSxcbiAgICAgICAgICB1bnNlbGVjdGFibGU6ICd1bnNlbGVjdGFibGUnLFxuICAgICAgICAgIHJlZjogdGhpcy5zYXZlUGFnaW5hdGlvbk5vZGVcbiAgICAgICAgfSwgZGF0YU9yQXJpYUF0dHJpYnV0ZVByb3BzKSxcbiAgICAgICAgdG90YWxUZXh0LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdsaScsXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGl0bGU6IHByb3BzLnNob3dUaXRsZSA/IGxvY2FsZS5wcmV2X3BhZ2UgOiBudWxsLFxuICAgICAgICAgICAgb25DbGljazogdGhpcy5wcmV2LFxuICAgICAgICAgICAgdGFiSW5kZXg6IHByZXZEaXNhYmxlZCA/IG51bGwgOiAwLFxuICAgICAgICAgICAgb25LZXlQcmVzczogdGhpcy5ydW5JZkVudGVyUHJldixcbiAgICAgICAgICAgIGNsYXNzTmFtZTogKCFwcmV2RGlzYWJsZWQgPyAnJyA6IHByZWZpeENscyArICctZGlzYWJsZWQnKSArICcgJyArIHByZWZpeENscyArICctcHJldicsXG4gICAgICAgICAgICAnYXJpYS1kaXNhYmxlZCc6IHByZXZEaXNhYmxlZFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJvcHMuaXRlbVJlbmRlcihwcmV2UGFnZSwgJ3ByZXYnLCB0aGlzLmdldEl0ZW1JY29uKHByb3BzLnByZXZJY29uKSlcbiAgICAgICAgKSxcbiAgICAgICAgcGFnZXJMaXN0LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdsaScsXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGl0bGU6IHByb3BzLnNob3dUaXRsZSA/IGxvY2FsZS5uZXh0X3BhZ2UgOiBudWxsLFxuICAgICAgICAgICAgb25DbGljazogdGhpcy5uZXh0LFxuICAgICAgICAgICAgdGFiSW5kZXg6IG5leHREaXNhYmxlZCA/IG51bGwgOiAwLFxuICAgICAgICAgICAgb25LZXlQcmVzczogdGhpcy5ydW5JZkVudGVyTmV4dCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogKCFuZXh0RGlzYWJsZWQgPyAnJyA6IHByZWZpeENscyArICctZGlzYWJsZWQnKSArICcgJyArIHByZWZpeENscyArICctbmV4dCcsXG4gICAgICAgICAgICAnYXJpYS1kaXNhYmxlZCc6IG5leHREaXNhYmxlZFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJvcHMuaXRlbVJlbmRlcihuZXh0UGFnZSwgJ25leHQnLCB0aGlzLmdldEl0ZW1JY29uKHByb3BzLm5leHRJY29uKSlcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChPcHRpb25zLCB7XG4gICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgIGxvY2FsZTogcHJvcHMubG9jYWxlLFxuICAgICAgICAgIHJvb3RQcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgICBzZWxlY3RDb21wb25lbnRDbGFzczogcHJvcHMuc2VsZWN0Q29tcG9uZW50Q2xhc3MsXG4gICAgICAgICAgc2VsZWN0UHJlZml4Q2xzOiBwcm9wcy5zZWxlY3RQcmVmaXhDbHMsXG4gICAgICAgICAgY2hhbmdlU2l6ZTogdGhpcy5wcm9wcy5zaG93U2l6ZUNoYW5nZXIgPyB0aGlzLmNoYW5nZVBhZ2VTaXplIDogbnVsbCxcbiAgICAgICAgICBjdXJyZW50OiB0aGlzLnN0YXRlLmN1cnJlbnQsXG4gICAgICAgICAgcGFnZVNpemU6IHRoaXMuc3RhdGUucGFnZVNpemUsXG4gICAgICAgICAgcGFnZVNpemVPcHRpb25zOiB0aGlzLnByb3BzLnBhZ2VTaXplT3B0aW9ucyxcbiAgICAgICAgICBxdWlja0dvOiB0aGlzLnNob3VsZERpc3BsYXlRdWlja0p1bXBlcigpID8gdGhpcy5oYW5kbGVDaGFuZ2UgOiBudWxsLFxuICAgICAgICAgIGdvQnV0dG9uOiBnb0J1dHRvblxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICB2YXIgbmV3U3RhdGUgPSB7fTtcblxuICAgICAgaWYgKCdjdXJyZW50JyBpbiBwcm9wcykge1xuICAgICAgICBuZXdTdGF0ZS5jdXJyZW50ID0gcHJvcHMuY3VycmVudDtcblxuICAgICAgICBpZiAocHJvcHMuY3VycmVudCAhPT0gcHJldlN0YXRlLmN1cnJlbnQpIHtcbiAgICAgICAgICBuZXdTdGF0ZS5jdXJyZW50SW5wdXRWYWx1ZSA9IG5ld1N0YXRlLmN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCdwYWdlU2l6ZScgaW4gcHJvcHMgJiYgcHJvcHMucGFnZVNpemUgIT09IHByZXZTdGF0ZS5wYWdlU2l6ZSkge1xuICAgICAgICB2YXIgY3VycmVudCA9IHByZXZTdGF0ZS5jdXJyZW50O1xuICAgICAgICB2YXIgbmV3Q3VycmVudCA9IGNhbGN1bGF0ZVBhZ2UocHJvcHMucGFnZVNpemUsIHByZXZTdGF0ZSwgcHJvcHMpO1xuICAgICAgICBjdXJyZW50ID0gY3VycmVudCA+IG5ld0N1cnJlbnQgPyBuZXdDdXJyZW50IDogY3VycmVudDtcblxuICAgICAgICBpZiAoISgnY3VycmVudCcgaW4gcHJvcHMpKSB7XG4gICAgICAgICAgbmV3U3RhdGUuY3VycmVudCA9IGN1cnJlbnQ7XG4gICAgICAgICAgbmV3U3RhdGUuY3VycmVudElucHV0VmFsdWUgPSBjdXJyZW50O1xuICAgICAgICB9XG4gICAgICAgIG5ld1N0YXRlLnBhZ2VTaXplID0gcHJvcHMucGFnZVNpemU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjb21wdXRlZCBpY29uIG5vZGUgdGhhdCBuZWVkIHRvIGJlIHJlbmRlcmVkLlxuICAgICAqIEBwYXJhbSB7UmVhY3QuUmVhY3ROb2RlIHwgUmVhY3QuQ29tcG9uZW50VHlwZTxQYWdpbmF0aW9uUHJvcHM+fSBpY29uIHJlY2VpdmVkIGljb24uXG4gICAgICogQHJldHVybnMge1JlYWN0LlJlYWN0Tm9kZX1cbiAgICAgKi9cblxuICB9XSk7XG5cbiAgcmV0dXJuIFBhZ2luYXRpb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblBhZ2luYXRpb24ucHJvcFR5cGVzID0ge1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHByZWZpeENsczogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjdXJyZW50OiBQcm9wVHlwZXMubnVtYmVyLFxuICBkZWZhdWx0Q3VycmVudDogUHJvcFR5cGVzLm51bWJlcixcbiAgdG90YWw6IFByb3BUeXBlcy5udW1iZXIsXG4gIHBhZ2VTaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuICBkZWZhdWx0UGFnZVNpemU6IFByb3BUeXBlcy5udW1iZXIsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgaGlkZU9uU2luZ2xlUGFnZTogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dTaXplQ2hhbmdlcjogUHJvcFR5cGVzLmJvb2wsXG4gIHNob3dMZXNzSXRlbXM6IFByb3BUeXBlcy5ib29sLFxuICBvblNob3dTaXplQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgc2VsZWN0Q29tcG9uZW50Q2xhc3M6IFByb3BUeXBlcy5mdW5jLFxuICBzaG93UHJldk5leHRKdW1wZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2hvd1F1aWNrSnVtcGVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICBzaG93VGl0bGU6IFByb3BUeXBlcy5ib29sLFxuICBwYWdlU2l6ZU9wdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICBzaG93VG90YWw6IFByb3BUeXBlcy5mdW5jLFxuICBsb2NhbGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBpdGVtUmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgcHJldkljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBuZXh0SWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gIGp1bXBQcmV2SWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gIGp1bXBOZXh0SWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSlcbn07XG5QYWdpbmF0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGVmYXVsdEN1cnJlbnQ6IDEsXG4gIHRvdGFsOiAwLFxuICBkZWZhdWx0UGFnZVNpemU6IDEwLFxuICBvbkNoYW5nZTogbm9vcCxcbiAgY2xhc3NOYW1lOiAnJyxcbiAgc2VsZWN0UHJlZml4Q2xzOiAncmMtc2VsZWN0JyxcbiAgcHJlZml4Q2xzOiAncmMtcGFnaW5hdGlvbicsXG4gIHNlbGVjdENvbXBvbmVudENsYXNzOiBudWxsLFxuICBoaWRlT25TaW5nbGVQYWdlOiBmYWxzZSxcbiAgc2hvd1ByZXZOZXh0SnVtcGVyczogdHJ1ZSxcbiAgc2hvd1F1aWNrSnVtcGVyOiBmYWxzZSxcbiAgc2hvd1NpemVDaGFuZ2VyOiBmYWxzZSxcbiAgc2hvd0xlc3NJdGVtczogZmFsc2UsXG4gIHNob3dUaXRsZTogdHJ1ZSxcbiAgb25TaG93U2l6ZUNoYW5nZTogbm9vcCxcbiAgbG9jYWxlOiBMT0NBTEUsXG4gIHN0eWxlOiB7fSxcbiAgaXRlbVJlbmRlcjogZGVmYXVsdEl0ZW1SZW5kZXJcbn07XG5cbnZhciBfaW5pdGlhbGlzZVByb3BzID0gZnVuY3Rpb24gX2luaXRpYWxpc2VQcm9wcygpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgdGhpcy5nZXRKdW1wUHJldlBhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KDEsIF90aGlzMi5zdGF0ZS5jdXJyZW50IC0gKF90aGlzMi5wcm9wcy5zaG93TGVzc0l0ZW1zID8gMyA6IDUpKTtcbiAgfTtcblxuICB0aGlzLmdldEp1bXBOZXh0UGFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTWF0aC5taW4oY2FsY3VsYXRlUGFnZSh1bmRlZmluZWQsIF90aGlzMi5zdGF0ZSwgX3RoaXMyLnByb3BzKSwgX3RoaXMyLnN0YXRlLmN1cnJlbnQgKyAoX3RoaXMyLnByb3BzLnNob3dMZXNzSXRlbXMgPyAzIDogNSkpO1xuICB9O1xuXG4gIHRoaXMuZ2V0SXRlbUljb24gPSBmdW5jdGlvbiAoaWNvbikge1xuICAgIHZhciBwcmVmaXhDbHMgPSBfdGhpczIucHJvcHMucHJlZml4Q2xzO1xuXG4gICAgdmFyIGljb25Ob2RlID0gaWNvbiB8fCBSZWFjdC5jcmVhdGVFbGVtZW50KCdhJywgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctaXRlbS1saW5rJyB9KTtcbiAgICBpZiAodHlwZW9mIGljb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGljb25Ob2RlID0gUmVhY3QuY3JlYXRlRWxlbWVudChpY29uLCBfZXh0ZW5kcyh7fSwgX3RoaXMyLnByb3BzKSk7XG4gICAgfVxuICAgIHJldHVybiBpY29uTm9kZTtcbiAgfTtcblxuICB0aGlzLnNhdmVQYWdpbmF0aW9uTm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgX3RoaXMyLnBhZ2luYXRpb25Ob2RlID0gbm9kZTtcbiAgfTtcblxuICB0aGlzLmlzVmFsaWQgPSBmdW5jdGlvbiAocGFnZSkge1xuICAgIHJldHVybiBpc0ludGVnZXIocGFnZSkgJiYgcGFnZSA+PSAxICYmIHBhZ2UgIT09IF90aGlzMi5zdGF0ZS5jdXJyZW50O1xuICB9O1xuXG4gIHRoaXMuc2hvdWxkRGlzcGxheVF1aWNrSnVtcGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcHJvcHMyID0gX3RoaXMyLnByb3BzLFxuICAgICAgICBzaG93UXVpY2tKdW1wZXIgPSBfcHJvcHMyLnNob3dRdWlja0p1bXBlcixcbiAgICAgICAgcGFnZVNpemUgPSBfcHJvcHMyLnBhZ2VTaXplLFxuICAgICAgICB0b3RhbCA9IF9wcm9wczIudG90YWw7XG5cbiAgICBpZiAodG90YWwgPD0gcGFnZVNpemUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHNob3dRdWlja0p1bXBlcjtcbiAgfTtcblxuICB0aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLmtleUNvZGUgPT09IEtFWUNPREUuQVJST1dfVVAgfHwgZS5rZXlDb2RlID09PSBLRVlDT0RFLkFSUk9XX0RPV04pIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5oYW5kbGVLZXlVcCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIHZhbHVlID0gX3RoaXMyLmdldFZhbGlkVmFsdWUoZSk7XG4gICAgdmFyIGN1cnJlbnRJbnB1dFZhbHVlID0gX3RoaXMyLnN0YXRlLmN1cnJlbnRJbnB1dFZhbHVlO1xuXG4gICAgaWYgKHZhbHVlICE9PSBjdXJyZW50SW5wdXRWYWx1ZSkge1xuICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgY3VycmVudElucHV0VmFsdWU6IHZhbHVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gS0VZQ09ERS5FTlRFUikge1xuICAgICAgX3RoaXMyLmhhbmRsZUNoYW5nZSh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IEtFWUNPREUuQVJST1dfVVApIHtcbiAgICAgIF90aGlzMi5oYW5kbGVDaGFuZ2UodmFsdWUgLSAxKTtcbiAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gS0VZQ09ERS5BUlJPV19ET1dOKSB7XG4gICAgICBfdGhpczIuaGFuZGxlQ2hhbmdlKHZhbHVlICsgMSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuY2hhbmdlUGFnZVNpemUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHZhciBjdXJyZW50ID0gX3RoaXMyLnN0YXRlLmN1cnJlbnQ7XG4gICAgdmFyIG5ld0N1cnJlbnQgPSBjYWxjdWxhdGVQYWdlKHNpemUsIF90aGlzMi5zdGF0ZSwgX3RoaXMyLnByb3BzKTtcbiAgICBjdXJyZW50ID0gY3VycmVudCA+IG5ld0N1cnJlbnQgPyBuZXdDdXJyZW50IDogY3VycmVudDtcbiAgICAvLyBmaXggdGhlIGlzc3VlOlxuICAgIC8vIE9uY2UgJ3RvdGFsJyBpcyAwLCAnY3VycmVudCcgaW4gJ29uU2hvd1NpemVDaGFuZ2UnIGlzIDAsIHdoaWNoIGlzIG5vdCBjb3JyZWN0LlxuICAgIGlmIChuZXdDdXJyZW50ID09PSAwKSB7XG4gICAgICBjdXJyZW50ID0gX3RoaXMyLnN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzaXplID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKCEoJ3BhZ2VTaXplJyBpbiBfdGhpczIucHJvcHMpKSB7XG4gICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgcGFnZVNpemU6IHNpemVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoISgnY3VycmVudCcgaW4gX3RoaXMyLnByb3BzKSkge1xuICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgIGN1cnJlbnQ6IGN1cnJlbnQsXG4gICAgICAgICAgY3VycmVudElucHV0VmFsdWU6IGN1cnJlbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIF90aGlzMi5wcm9wcy5vblNob3dTaXplQ2hhbmdlKGN1cnJlbnQsIHNpemUpO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKHApIHtcbiAgICB2YXIgZGlzYWJsZWQgPSBfdGhpczIucHJvcHMuZGlzYWJsZWQ7XG5cblxuICAgIHZhciBwYWdlID0gcDtcbiAgICBpZiAoX3RoaXMyLmlzVmFsaWQocGFnZSkgJiYgIWRpc2FibGVkKSB7XG4gICAgICB2YXIgY3VycmVudFBhZ2UgPSBjYWxjdWxhdGVQYWdlKHVuZGVmaW5lZCwgX3RoaXMyLnN0YXRlLCBfdGhpczIucHJvcHMpO1xuICAgICAgaWYgKHBhZ2UgPiBjdXJyZW50UGFnZSkge1xuICAgICAgICBwYWdlID0gY3VycmVudFBhZ2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghKCdjdXJyZW50JyBpbiBfdGhpczIucHJvcHMpKSB7XG4gICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgY3VycmVudDogcGFnZSxcbiAgICAgICAgICBjdXJyZW50SW5wdXRWYWx1ZTogcGFnZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhZ2VTaXplID0gX3RoaXMyLnN0YXRlLnBhZ2VTaXplO1xuICAgICAgX3RoaXMyLnByb3BzLm9uQ2hhbmdlKHBhZ2UsIHBhZ2VTaXplKTtcblxuICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzMi5zdGF0ZS5jdXJyZW50O1xuICB9O1xuXG4gIHRoaXMucHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoX3RoaXMyLmhhc1ByZXYoKSkge1xuICAgICAgX3RoaXMyLmhhbmRsZUNoYW5nZShfdGhpczIuc3RhdGUuY3VycmVudCAtIDEpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKF90aGlzMi5oYXNOZXh0KCkpIHtcbiAgICAgIF90aGlzMi5oYW5kbGVDaGFuZ2UoX3RoaXMyLnN0YXRlLmN1cnJlbnQgKyAxKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5qdW1wUHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpczIuaGFuZGxlQ2hhbmdlKF90aGlzMi5nZXRKdW1wUHJldlBhZ2UoKSk7XG4gIH07XG5cbiAgdGhpcy5qdW1wTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpczIuaGFuZGxlQ2hhbmdlKF90aGlzMi5nZXRKdW1wTmV4dFBhZ2UoKSk7XG4gIH07XG5cbiAgdGhpcy5oYXNQcmV2ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGhpczIuc3RhdGUuY3VycmVudCA+IDE7XG4gIH07XG5cbiAgdGhpcy5oYXNOZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGhpczIuc3RhdGUuY3VycmVudCA8IGNhbGN1bGF0ZVBhZ2UodW5kZWZpbmVkLCBfdGhpczIuc3RhdGUsIF90aGlzMi5wcm9wcyk7XG4gIH07XG5cbiAgdGhpcy5ydW5JZkVudGVyID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0UGFyYW1zID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcmVzdFBhcmFtc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJyB8fCBldmVudC5jaGFyQ29kZSA9PT0gMTMpIHtcbiAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgcmVzdFBhcmFtcyk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMucnVuSWZFbnRlclByZXYgPSBmdW5jdGlvbiAoZSkge1xuICAgIF90aGlzMi5ydW5JZkVudGVyKGUsIF90aGlzMi5wcmV2KTtcbiAgfTtcblxuICB0aGlzLnJ1bklmRW50ZXJOZXh0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICBfdGhpczIucnVuSWZFbnRlcihlLCBfdGhpczIubmV4dCk7XG4gIH07XG5cbiAgdGhpcy5ydW5JZkVudGVySnVtcFByZXYgPSBmdW5jdGlvbiAoZSkge1xuICAgIF90aGlzMi5ydW5JZkVudGVyKGUsIF90aGlzMi5qdW1wUHJldik7XG4gIH07XG5cbiAgdGhpcy5ydW5JZkVudGVySnVtcE5leHQgPSBmdW5jdGlvbiAoZSkge1xuICAgIF90aGlzMi5ydW5JZkVudGVyKGUsIF90aGlzMi5qdW1wTmV4dCk7XG4gIH07XG5cbiAgdGhpcy5oYW5kbGVHb1RPID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS5rZXlDb2RlID09PSBLRVlDT0RFLkVOVEVSIHx8IGUudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgX3RoaXMyLmhhbmRsZUNoYW5nZShfdGhpczIuc3RhdGUuY3VycmVudElucHV0VmFsdWUpO1xuICAgIH1cbiAgfTtcbn07XG5cbnBvbHlmaWxsKFBhZ2luYXRpb24pO1xuXG5leHBvcnQgZGVmYXVsdCBQYWdpbmF0aW9uOyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gT3B0aW9ucy5qc3hcbiAgaXRlbXNfcGVyX3BhZ2U6ICfmnaEv6aG1JyxcbiAganVtcF90bzogJ+i3s+iHsycsXG4gIGp1bXBfdG9fY29uZmlybTogJ+ehruWumicsXG4gIHBhZ2U6ICfpobUnLFxuXG4gIC8vIFBhZ2luYXRpb24uanN4XG4gIHByZXZfcGFnZTogJ+S4iuS4gOmhtScsXG4gIG5leHRfcGFnZTogJ+S4i+S4gOmhtScsXG4gIHByZXZfNTogJ+WQkeWJjSA1IOmhtScsXG4gIG5leHRfNTogJ+WQkeWQjiA1IOmhtScsXG4gIHByZXZfMzogJ+WQkeWJjSAzIOmhtScsXG4gIG5leHRfMzogJ+WQkeWQjiAzIOmhtSdcbn07IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vUGFnaW5hdGlvbic7Il0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceMappingURL=5.03bd.js.map